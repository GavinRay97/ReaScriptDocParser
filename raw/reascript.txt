FUNCTIONS:
name:AddMediaItemToTrack
language:c
return:(MediaItem*:)
params:(MediaTrack*:tr)
description:
creates a new media item.
------
name:AddMediaItemToTrack
language:eel2
return:(MediaItem:)
params:(MediaTrack:tr)
description:
creates a new media item.
------
name:reaper.AddMediaItemToTrack
language:lua
return:(MediaItem:)
params:(MediaTrack:tr)
description:
creates a new media item.
------
name:RPR_AddMediaItemToTrack
language:python
return:(MediaItem:)
params:(MediaTrack:tr)
description:
creates a new media item.
------
name:AddProjectMarker
language:c
return:(int:)
params:(ReaProject*:proj), (bool:isrgn), (double:pos), (double:rgnend), (const char*:name), (int:wantidx)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use.
------
name:AddProjectMarker
language:eel2
return:(int:)
params:(ReaProject:proj), (bool:isrgn), (pos:), (rgnend:), ("name":), (int:wantidx)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use.
------
name:reaper.AddProjectMarker
language:lua
return:(integer:)
params:(ReaProject:proj), (boolean:isrgn), (number:pos), (number:rgnend), (string:name), (integer:wantidx)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use.
------
name:RPR_AddProjectMarker
language:python
return:(Int:)
params:(ReaProject:proj), (Boolean:isrgn), (Float:pos), (Float:rgnend), (String:name), (Int:wantidx)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use.
------
name:AddProjectMarker2
language:c
return:(int:)
params:(ReaProject*:proj), (bool:isrgn), (double:pos), (double:rgnend), (const char*:name), (int:wantidx), (int:color)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use. color
should be 0 (default color), or ColorToNative(r,g,b)|0x1000000
------
name:AddProjectMarker2
language:eel2
return:(int:)
params:(ReaProject:proj), (bool:isrgn), (pos:), (rgnend:), ("name":), (int:wantidx), (int:color)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use. color
should be 0 (default color), or ColorToNative(r,g,b)|0x1000000
------
name:reaper.AddProjectMarker2
language:lua
return:(integer:)
params:(ReaProject:proj), (boolean:isrgn), (number:pos), (number:rgnend), (string:name), (integer:wantidx), (integer:color)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use. color
should be 0 (default color), or ColorToNative(r,g,b)|0x1000000
------
name:RPR_AddProjectMarker2
language:python
return:(Int:)
params:(ReaProject:proj), (Boolean:isrgn), (Float:pos), (Float:rgnend), (String:name), (Int:wantidx), (Int:color)
description:
Returns the index of the created marker/region, or -1 on failure. Supply
wantidx>=0 if you want a particular index number, but you'll get a
different index number a region and wantidx is already in use. color
should be 0 (default color), or ColorToNative(r,g,b)|0x1000000
------
name:AddRemoveReaScript
language:c
return:(int:)
params:(bool:add), (int:sectionID), (const char*:scriptfn), (bool:commit)
description:
Add a ReaScript (return the new command ID, or 0 if failed) or remove a
ReaScript (return >0 on success). Use commit==true when
adding/removing a single script. When bulk adding/removing n scripts,
you can optimize the n-1 first calls with commit==false and commit==true
for the last call.
------
name:AddRemoveReaScript
language:eel2
return:(int:)
params:(bool:add), (int:sectionID), ("scriptfn":), (bool:commit)
description:
Add a ReaScript (return the new command ID, or 0 if failed) or remove a
ReaScript (return >0 on success). Use commit==true when
adding/removing a single script. When bulk adding/removing n scripts,
you can optimize the n-1 first calls with commit==false and commit==true
for the last call.
------
name:reaper.AddRemoveReaScript
language:lua
return:(integer:)
params:(boolean:add), (integer:sectionID), (string:scriptfn), (boolean:commit)
description:
Add a ReaScript (return the new command ID, or 0 if failed) or remove a
ReaScript (return >0 on success). Use commit==true when
adding/removing a single script. When bulk adding/removing n scripts,
you can optimize the n-1 first calls with commit==false and commit==true
for the last call.
------
name:RPR_AddRemoveReaScript
language:python
return:(Int:)
params:(Boolean:add), (Int:sectionID), (String:scriptfn), (Boolean:commit)
description:
Add a ReaScript (return the new command ID, or 0 if failed) or remove a
ReaScript (return >0 on success). Use commit==true when
adding/removing a single script. When bulk adding/removing n scripts,
you can optimize the n-1 first calls with commit==false and commit==true
for the last call.
------
name:AddTakeToMediaItem
language:c
return:(MediaItem_Take*:)
params:(MediaItem*:item)
description:
creates a new take in an item
------
name:AddTakeToMediaItem
language:eel2
return:(MediaItem_Take:)
params:(MediaItem:item)
description:
creates a new take in an item
------
name:reaper.AddTakeToMediaItem
language:lua
return:(MediaItem_Take:)
params:(MediaItem:item)
description:
creates a new take in an item
------
name:RPR_AddTakeToMediaItem
language:python
return:(MediaItem_Take:)
params:(MediaItem:item)
description:
creates a new take in an item
------
name:AddTempoTimeSigMarker
language:c
return:(bool:)
params:(ReaProject*:proj), (double:timepos), (double:bpm), (int:timesig_num), (int:timesig_denom), (bool:lineartempochange)
description:
Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.
------
name:AddTempoTimeSigMarker
language:eel2
return:(bool:)
params:(ReaProject:proj), (timepos:), (bpm:), (int:timesig_num), (int:timesig_denom), (bool:lineartempochange)
description:
Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.
------
name:reaper.AddTempoTimeSigMarker
language:lua
return:(boolean:)
params:(ReaProject:proj), (number:timepos), (number:bpm), (integer:timesig_num), (integer:timesig_denom), (boolean:lineartempochange)
description:
Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.
------
name:RPR_AddTempoTimeSigMarker
language:python
return:(Boolean:)
params:(ReaProject:proj), (Float:timepos), (Float:bpm), (Int:timesig_num), (Int:timesig_denom), (Boolean:lineartempochange)
description:
Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.
------
name:adjustZoom
language:c
return:(void:)
params:(double:amt), (int:forceset), (bool:doupd), (int:centermode)
description:
forceset=0,doupd=true,centermode=-1 for default
------
name:adjustZoom
language:eel2
return:
params:(amt:), (int:forceset), (bool:doupd), (int:centermode)
description:
forceset=0,doupd=true,centermode=-1 for default
------
name:reaper.adjustZoom
language:lua
return:
params:(number:amt), (integer:forceset), (boolean:doupd), (integer:centermode)
description:
forceset=0,doupd=true,centermode=-1 for default
------
name:RPR_adjustZoom
language:python
return:
params:(Float:amt), (Int:forceset), (Boolean:doupd), (Int:centermode)
description:
forceset=0,doupd=true,centermode=-1 for default
------
name:AnyTrackSolo
language:c
return:(bool:)
params:(ReaProject*:proj)
description:

------
name:AnyTrackSolo
language:eel2
return:(bool:)
params:(ReaProject:proj)
description:

------
name:reaper.AnyTrackSolo
language:lua
return:(boolean:)
params:(ReaProject:proj)
description:

------
name:RPR_AnyTrackSolo
language:python
return:(Boolean:)
params:(ReaProject:proj)
description:

------
name:APIExists
language:c
return:(bool:)
params:(const char*:function_name)
description:
Returns true if function_name exists in the REAPER API
------
name:APIExists
language:eel2
return:(bool:)
params:("function_name":)
description:
Returns true if function_name exists in the REAPER API
------
name:reaper.APIExists
language:lua
return:(boolean:)
params:(string:function_name)
description:
Returns true if function_name exists in the REAPER API
------
name:RPR_APIExists
language:python
return:(Boolean:)
params:(String:function_name)
description:
Returns true if function_name exists in the REAPER API
------
name:APITest
language:c
return:(void:)
params:
description:
Displays a message window if the API was successfully called.
------
name:APITest
language:eel2
return:
params:
description:
Displays a message window if the API was successfully called.
------
name:reaper.APITest
language:lua
return:
params:
description:
Displays a message window if the API was successfully called.
------
name:RPR_APITest
language:python
return:
params:
description:
Displays a message window if the API was successfully called.
------
name:ApplyNudge
language:c
return:(bool:)
params:(ReaProject*:project), (int:nudgeflag), (int:nudgewhat), (int:nudgeunits), (double:value), (bool:reverse), (int:copies)
description:
nudgeflag: &1=set to value (otherwise nudge by value), &2=snap
nudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor
nudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes,
16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames,
19=pixels, 20=item lengths, 21=item selections
value: amount to nudge by, or value to set to
reverse: in nudge mode, nudges left (otherwise ignored)
copies: in nudge duplicate mode, number of copies (otherwise ignored)
------
name:ApplyNudge
language:eel2
return:(bool:)
params:(ReaProject:project), (int:nudgeflag), (int:nudgewhat), (int:nudgeunits), (value:), (bool:reverse), (int:copies)
description:
nudgeflag: &1=set to value (otherwise nudge by value), &2=snap
nudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor
nudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes,
16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames,
19=pixels, 20=item lengths, 21=item selections
value: amount to nudge by, or value to set to
reverse: in nudge mode, nudges left (otherwise ignored)
copies: in nudge duplicate mode, number of copies (otherwise ignored)
------
name:reaper.ApplyNudge
language:lua
return:(boolean:)
params:(ReaProject:project), (integer:nudgeflag), (integer:nudgewhat), (integer:nudgeunits), (number:value), (boolean:reverse), (integer:copies)
description:
nudgeflag: &1=set to value (otherwise nudge by value), &2=snap
nudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor
nudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes,
16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames,
19=pixels, 20=item lengths, 21=item selections
value: amount to nudge by, or value to set to
reverse: in nudge mode, nudges left (otherwise ignored)
copies: in nudge duplicate mode, number of copies (otherwise ignored)
------
name:RPR_ApplyNudge
language:python
return:(Boolean:)
params:(ReaProject:project), (Int:nudgeflag), (Int:nudgewhat), (Int:nudgeunits), (Float:value), (Boolean:reverse), (Int:copies)
description:
nudgeflag: &1=set to value (otherwise nudge by value), &2=snap
nudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor
nudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes,
16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames,
19=pixels, 20=item lengths, 21=item selections
value: amount to nudge by, or value to set to
reverse: in nudge mode, nudges left (otherwise ignored)
copies: in nudge duplicate mode, number of copies (otherwise ignored)
------
name:ArmCommand
language:c
return:(void:)
params:(int:cmd), (const char*:sectionname)
description:
arms a command (or disarms if 0 passed) in section sectionname (empty string for main)
------
name:ArmCommand
language:eel2
return:
params:(int:cmd), ("sectionname":)
description:
arms a command (or disarms if 0 passed) in section sectionname (empty string for main)
------
name:reaper.ArmCommand
language:lua
return:
params:(integer:cmd), (string:sectionname)
description:
arms a command (or disarms if 0 passed) in section sectionname (empty string for main)
------
name:RPR_ArmCommand
language:python
return:
params:(Int:cmd), (String:sectionname)
description:
arms a command (or disarms if 0 passed) in section sectionname (empty string for main)
------
name:Audio_Init
language:c
return:(void:)
params:
description:
open all audio and MIDI devices, if not open
------
name:Audio_Init
language:eel2
return:
params:
description:
open all audio and MIDI devices, if not open
------
name:reaper.Audio_Init
language:lua
return:
params:
description:
open all audio and MIDI devices, if not open
------
name:RPR_Audio_Init
language:python
return:
params:
description:
open all audio and MIDI devices, if not open
------
name:Audio_IsPreBuffer
language:c
return:(int:)
params:
description:
is in pre-buffer? threadsafe
------
name:Audio_IsPreBuffer
language:eel2
return:(int:)
params:
description:
is in pre-buffer? threadsafe
------
name:reaper.Audio_IsPreBuffer
language:lua
return:(integer:)
params:
description:
is in pre-buffer? threadsafe
------
name:RPR_Audio_IsPreBuffer
language:python
return:(Int:)
params:
description:
is in pre-buffer? threadsafe
------
name:Audio_IsRunning
language:c
return:(int:)
params:
description:
is audio running at all? threadsafe
------
name:Audio_IsRunning
language:eel2
return:(int:)
params:
description:
is audio running at all? threadsafe
------
name:reaper.Audio_IsRunning
language:lua
return:(integer:)
params:
description:
is audio running at all? threadsafe
------
name:RPR_Audio_IsRunning
language:python
return:(Int:)
params:
description:
is audio running at all? threadsafe
------
name:Audio_Quit
language:c
return:(void:)
params:
description:
close all audio and MIDI devices, if open
------
name:Audio_Quit
language:eel2
return:
params:
description:
close all audio and MIDI devices, if open
------
name:reaper.Audio_Quit
language:lua
return:
params:
description:
close all audio and MIDI devices, if open
------
name:RPR_Audio_Quit
language:python
return:
params:
description:
close all audio and MIDI devices, if open
------
name:AudioAccessorStateChanged
language:c
return:(bool:)
params:(AudioAccessor*:accessor)
description:
Returns true if the underlying samples (track or media item take) have
changed, but does not update the audio accessor, so the user can
selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:AudioAccessorStateChanged
language:eel2
return:(bool:)
params:(AudioAccessor:accessor)
description:
Returns true if the underlying samples (track or media item take) have
changed, but does not update the audio accessor, so the user can
selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:reaper.AudioAccessorStateChanged
language:lua
return:(boolean:)
params:(AudioAccessor:accessor)
description:
Returns true if the underlying samples (track or media item take) have
changed, but does not update the audio accessor, so the user can
selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:RPR_AudioAccessorStateChanged
language:python
return:(Boolean:)
params:(AudioAccessor:accessor)
description:
Returns true if the underlying samples (track or media item take) have
changed, but does not update the audio accessor, so the user can
selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:AudioAccessorUpdate
language:c
return:(void:)
params:(AudioAccessor*:accessor)
description:
Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:AudioAccessorUpdate
language:eel2
return:
params:(AudioAccessor:accessor)
description:
Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:reaper.AudioAccessorUpdate
language:lua
return:
params:(AudioAccessor:accessor)
description:
Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:RPR_AudioAccessorUpdate
language:python
return:
params:(AudioAccessor:accessor)
description:
Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:AudioAccessorValidateState
language:c
return:(bool:)
params:(AudioAccessor*:accessor)
description:
Validates the current state of the audio accessor -- must ONLY call this
from the main thread. Returns true if the state changed.
------
name:AudioAccessorValidateState
language:eel2
return:(bool:)
params:(AudioAccessor:accessor)
description:
Validates the current state of the audio accessor -- must ONLY call this
from the main thread. Returns true if the state changed.
------
name:reaper.AudioAccessorValidateState
language:lua
return:(boolean:)
params:(AudioAccessor:accessor)
description:
Validates the current state of the audio accessor -- must ONLY call this
from the main thread. Returns true if the state changed.
------
name:RPR_AudioAccessorValidateState
language:python
return:(Boolean:)
params:(AudioAccessor:accessor)
description:
Validates the current state of the audio accessor -- must ONLY call this
from the main thread. Returns true if the state changed.
------
name:BypassFxAllTracks
language:c
return:(void:)
params:(int:bypass)
description:
-1 = bypass all if not all bypassed,otherwise unbypass all
------
name:BypassFxAllTracks
language:eel2
return:
params:(int:bypass)
description:
-1 = bypass all if not all bypassed,otherwise unbypass all
------
name:reaper.BypassFxAllTracks
language:lua
return:
params:(integer:bypass)
description:
-1 = bypass all if not all bypassed,otherwise unbypass all
------
name:RPR_BypassFxAllTracks
language:python
return:
params:(Int:bypass)
description:
-1 = bypass all if not all bypassed,otherwise unbypass all
------
name:ClearAllRecArmed
language:c
return:(void:)
params:
description:

------
name:ClearAllRecArmed
language:eel2
return:
params:
description:

------
name:reaper.ClearAllRecArmed
language:lua
return:
params:
description:

------
name:RPR_ClearAllRecArmed
language:python
return:
params:
description:

------
name:ClearConsole
language:c
return:(void:)
params:
description:
Clear the ReaScript console. See ShowConsoleMsg
------
name:ClearConsole
language:eel2
return:
params:
description:
Clear the ReaScript console. See ShowConsoleMsg
------
name:reaper.ClearConsole
language:lua
return:
params:
description:
Clear the ReaScript console. See ShowConsoleMsg
------
name:RPR_ClearConsole
language:python
return:
params:
description:
Clear the ReaScript console. See ShowConsoleMsg
------
name:ClearPeakCache
language:c
return:(void:)
params:
description:
resets the global peak caches
------
name:ClearPeakCache
language:eel2
return:
params:
description:
resets the global peak caches
------
name:reaper.ClearPeakCache
language:lua
return:
params:
description:
resets the global peak caches
------
name:RPR_ClearPeakCache
language:python
return:
params:
description:
resets the global peak caches
------
name:ColorFromNative
language:c
return:(void:)
params:(int:col), (int*:rOut), (int*:gOut), (int*:bOut)
description:
Extract RGB values from an OS dependent color. See ColorToNative.
------
name:ColorFromNative
language:eel2
return:
params:(int:col), (int:&r), (int:&g), (int:&b)
description:
Extract RGB values from an OS dependent color. See ColorToNative.
------
name:reaper.ColorFromNative
language:lua
return:(number:r),(number:g),(number:b)
params:(integer:col)
description:
Extract RGB values from an OS dependent color. See ColorToNative.
------
name:RPR_ColorFromNative
language:python
return:(Int:col),(Int:rOut),(Int:gOut),(Int:bOut)
params:(col:), (rOut:), (gOut:), (bOut:)
description:
Extract RGB values from an OS dependent color. See ColorToNative.
------
name:ColorToNative
language:c
return:(int:)
params:(int:r), (int:g), (int:b)
description:
Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.
------
name:ColorToNative
language:eel2
return:(int:)
params:(int:r), (int:g), (int:b)
description:
Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.
------
name:reaper.ColorToNative
language:lua
return:(integer:)
params:(integer:r), (integer:g), (integer:b)
description:
Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.
------
name:RPR_ColorToNative
language:python
return:(Int:)
params:(Int:r), (Int:g), (Int:b)
description:
Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.
------
name:CountAutomationItems
language:c
return:(int:)
params:(TrackEnvelope*:env)
description:
Returns the number of automation items on this envelope. See GetSetAutomationItemInfo
------
name:CountAutomationItems
language:eel2
return:(int:)
params:(TrackEnvelope:env)
description:
Returns the number of automation items on this envelope. See GetSetAutomationItemInfo
------
name:reaper.CountAutomationItems
language:lua
return:(integer:)
params:(TrackEnvelope:env)
description:
Returns the number of automation items on this envelope. See GetSetAutomationItemInfo
------
name:RPR_CountAutomationItems
language:python
return:(Int:)
params:(TrackEnvelope:env)
description:
Returns the number of automation items on this envelope. See GetSetAutomationItemInfo
------
name:CountEnvelopePoints
language:c
return:(int:)
params:(TrackEnvelope*:envelope)
description:
Returns the number of points in the envelope. See CountEnvelopePointsEx.
------
name:CountEnvelopePoints
language:eel2
return:(int:)
params:(TrackEnvelope:envelope)
description:
Returns the number of points in the envelope. See CountEnvelopePointsEx.
------
name:reaper.CountEnvelopePoints
language:lua
return:(integer:)
params:(TrackEnvelope:envelope)
description:
Returns the number of points in the envelope. See CountEnvelopePointsEx.
------
name:RPR_CountEnvelopePoints
language:python
return:(Int:)
params:(TrackEnvelope:envelope)
description:
Returns the number of points in the envelope. See CountEnvelopePointsEx.
------
name:CountEnvelopePointsEx
language:c
return:(int:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx)
description:
Returns the number of points in the envelope.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:CountEnvelopePointsEx
language:eel2
return:(int:)
params:(TrackEnvelope:envelope), (int:autoitem_idx)
description:
Returns the number of points in the envelope.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:reaper.CountEnvelopePointsEx
language:lua
return:(integer:)
params:(TrackEnvelope:envelope), (integer:autoitem_idx)
description:
Returns the number of points in the envelope.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:RPR_CountEnvelopePointsEx
language:python
return:(Int:)
params:(TrackEnvelope:envelope), (Int:autoitem_idx)
description:
Returns the number of points in the envelope.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:CountMediaItems
language:c
return:(int:)
params:(ReaProject*:proj)
description:
count the number of items in the project (proj=0 for active project)
------
name:CountMediaItems
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
count the number of items in the project (proj=0 for active project)
------
name:reaper.CountMediaItems
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
count the number of items in the project (proj=0 for active project)
------
name:RPR_CountMediaItems
language:python
return:(Int:)
params:(ReaProject:proj)
description:
count the number of items in the project (proj=0 for active project)
------
name:CountProjectMarkers
language:c
return:(int:)
params:(ReaProject*:proj), (int*:num_markersOut), (int*:num_regionsOut)
description:
num_markersOut and num_regionsOut may be NULL.
------
name:CountProjectMarkers
language:eel2
return:(int:)
params:(ReaProject:proj), (int:&num_markers), (int:&num_regions)
description:
num_markersOut and num_regionsOut may be NULL.
------
name:reaper.CountProjectMarkers
language:lua
return:(integer:retval),(number:num_markers),(number:num_regions)
params:(ReaProject:proj)
description:
num_markersOut and num_regionsOut may be NULL.
------
name:RPR_CountProjectMarkers
language:python
return:(Int:retval),(ReaProject:proj),(Int:num_markersOut),(Int:num_regionsOut)
params:(proj:), (num_markersOut:), (num_regionsOut:)
description:
num_markersOut and num_regionsOut may be NULL.
------
name:CountSelectedMediaItems
language:c
return:(int:)
params:(ReaProject*:proj)
description:
count the number of selected items in the project (proj=0 for active project)
------
name:CountSelectedMediaItems
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
count the number of selected items in the project (proj=0 for active project)
------
name:reaper.CountSelectedMediaItems
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
count the number of selected items in the project (proj=0 for active project)
------
name:RPR_CountSelectedMediaItems
language:python
return:(Int:)
params:(ReaProject:proj)
description:
count the number of selected items in the project (proj=0 for active project)
------
name:CountSelectedTracks
language:c
return:(int:)
params:(ReaProject*:proj)
description:
Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.
------
name:CountSelectedTracks
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.
------
name:reaper.CountSelectedTracks
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.
------
name:RPR_CountSelectedTracks
language:python
return:(Int:)
params:(ReaProject:proj)
description:
Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.
------
name:CountSelectedTracks2
language:c
return:(int:)
params:(ReaProject*:proj), (bool:wantmaster)
description:
Count the number of selected tracks in the project (proj=0 for active project).
------
name:CountSelectedTracks2
language:eel2
return:(int:)
params:(ReaProject:proj), (bool:wantmaster)
description:
Count the number of selected tracks in the project (proj=0 for active project).
------
name:reaper.CountSelectedTracks2
language:lua
return:(integer:)
params:(ReaProject:proj), (boolean:wantmaster)
description:
Count the number of selected tracks in the project (proj=0 for active project).
------
name:RPR_CountSelectedTracks2
language:python
return:(Int:)
params:(ReaProject:proj), (Boolean:wantmaster)
description:
Count the number of selected tracks in the project (proj=0 for active project).
------
name:CountTakeEnvelopes
language:c
return:(int:)
params:(MediaItem_Take*:take)
description:
See GetTakeEnvelope
------
name:CountTakeEnvelopes
language:eel2
return:(int:)
params:(MediaItem_Take:take)
description:
See GetTakeEnvelope
------
name:reaper.CountTakeEnvelopes
language:lua
return:(integer:)
params:(MediaItem_Take:take)
description:
See GetTakeEnvelope
------
name:RPR_CountTakeEnvelopes
language:python
return:(Int:)
params:(MediaItem_Take:take)
description:
See GetTakeEnvelope
------
name:CountTakes
language:c
return:(int:)
params:(MediaItem*:item)
description:
count the number of takes in the item
------
name:CountTakes
language:eel2
return:(int:)
params:(MediaItem:item)
description:
count the number of takes in the item
------
name:reaper.CountTakes
language:lua
return:(integer:)
params:(MediaItem:item)
description:
count the number of takes in the item
------
name:RPR_CountTakes
language:python
return:(Int:)
params:(MediaItem:item)
description:
count the number of takes in the item
------
name:CountTCPFXParms
language:c
return:(int:)
params:(ReaProject*:project), (MediaTrack*:track)
description:
Count the number of FX parameter knobs displayed on the track control panel.
------
name:CountTCPFXParms
language:eel2
return:(int:)
params:(ReaProject:project), (MediaTrack:track)
description:
Count the number of FX parameter knobs displayed on the track control panel.
------
name:reaper.CountTCPFXParms
language:lua
return:(integer:)
params:(ReaProject:project), (MediaTrack:track)
description:
Count the number of FX parameter knobs displayed on the track control panel.
------
name:RPR_CountTCPFXParms
language:python
return:(Int:)
params:(ReaProject:project), (MediaTrack:track)
description:
Count the number of FX parameter knobs displayed on the track control panel.
------
name:CountTempoTimeSigMarkers
language:c
return:(int:)
params:(ReaProject*:proj)
description:
Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:CountTempoTimeSigMarkers
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:reaper.CountTempoTimeSigMarkers
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:RPR_CountTempoTimeSigMarkers
language:python
return:(Int:)
params:(ReaProject:proj)
description:
Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:CountTrackEnvelopes
language:c
return:(int:)
params:(MediaTrack*:track)
description:
see GetTrackEnvelope
------
name:CountTrackEnvelopes
language:eel2
return:(int:)
params:(MediaTrack:track)
description:
see GetTrackEnvelope
------
name:reaper.CountTrackEnvelopes
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
see GetTrackEnvelope
------
name:RPR_CountTrackEnvelopes
language:python
return:(Int:)
params:(MediaTrack:track)
description:
see GetTrackEnvelope
------
name:CountTrackMediaItems
language:c
return:(int:)
params:(MediaTrack*:track)
description:
count the number of items in the track
------
name:CountTrackMediaItems
language:eel2
return:(int:)
params:(MediaTrack:track)
description:
count the number of items in the track
------
name:reaper.CountTrackMediaItems
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
count the number of items in the track
------
name:RPR_CountTrackMediaItems
language:python
return:(Int:)
params:(MediaTrack:track)
description:
count the number of items in the track
------
name:CountTracks
language:c
return:(int:)
params:(ReaProject*:proj)
description:
count the number of tracks in the project (proj=0 for active project)
------
name:CountTracks
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
count the number of tracks in the project (proj=0 for active project)
------
name:reaper.CountTracks
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
count the number of tracks in the project (proj=0 for active project)
------
name:RPR_CountTracks
language:python
return:(Int:)
params:(ReaProject:proj)
description:
count the number of tracks in the project (proj=0 for active project)
------
name:CreateNewMIDIItemInProj
language:c
return:(MediaItem*:)
params:(MediaTrack*:track), (double:starttime), (double:endtime), (const bool*:qnInOptional)
description:
Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.
------
name:CreateNewMIDIItemInProj
language:eel2
return:(MediaItem:)
params:(MediaTrack:track), (starttime:), (endtime:), (optional bool:qnIn)
description:
Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.
------
name:reaper.CreateNewMIDIItemInProj
language:lua
return:(MediaItem:)
params:(MediaTrack:track), (number:starttime), (number:endtime), (optional boolean:qnIn)
description:
Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.
------
name:RPR_CreateNewMIDIItemInProj
language:python
return:(MediaItem:)
params:(MediaTrack:track), (Float:starttime), (Float:endtime), (const bool:qnInOptional)
description:
Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.
------
name:CreateTakeAudioAccessor
language:c
return:(AudioAccessor*:)
params:(MediaItem_Take*:take)
description:
Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:CreateTakeAudioAccessor
language:eel2
return:(AudioAccessor:)
params:(MediaItem_Take:take)
description:
Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:reaper.CreateTakeAudioAccessor
language:lua
return:(AudioAccessor:)
params:(MediaItem_Take:take)
description:
Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:RPR_CreateTakeAudioAccessor
language:python
return:(AudioAccessor:)
params:(MediaItem_Take:take)
description:
Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:CreateTrackAudioAccessor
language:c
return:(AudioAccessor*:)
params:(MediaTrack*:track)
description:
Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:CreateTrackAudioAccessor
language:eel2
return:(AudioAccessor:)
params:(MediaTrack:track)
description:
Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:reaper.CreateTrackAudioAccessor
language:lua
return:(AudioAccessor:)
params:(MediaTrack:track)
description:
Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:RPR_CreateTrackAudioAccessor
language:python
return:(AudioAccessor:)
params:(MediaTrack:track)
description:
Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:CreateTrackSend
language:c
return:(int:)
params:(MediaTrack*:tr), (MediaTrack*:desttrInOptional)
description:
Create a send/receive (desttrInOptional!=NULL), or a hardware output
(desttrInOptional==NULL) with default properties, return >=0 on
success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.
------
name:CreateTrackSend
language:eel2
return:(int:)
params:(MediaTrack:tr), (MediaTrack:desttrIn)
description:
Create a send/receive (desttrInOptional!=NULL), or a hardware output
(desttrInOptional==NULL) with default properties, return >=0 on
success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.
------
name:reaper.CreateTrackSend
language:lua
return:(integer:)
params:(MediaTrack:tr), (MediaTrack:desttrIn)
description:
Create a send/receive (desttrInOptional!=NULL), or a hardware output
(desttrInOptional==NULL) with default properties, return >=0 on
success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.
------
name:RPR_CreateTrackSend
language:python
return:(Int:)
params:(MediaTrack:tr), (MediaTrack:desttrInOptional)
description:
Create a send/receive (desttrInOptional!=NULL), or a hardware output
(desttrInOptional==NULL) with default properties, return >=0 on
success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.
------
name:CSurf_FlushUndo
language:c
return:(void:)
params:(bool:force)
description:
call this to force flushing of the undo states after using CSurf_On*Change()
------
name:CSurf_FlushUndo
language:eel2
return:
params:(bool:force)
description:
call this to force flushing of the undo states after using CSurf_On*Change()
------
name:reaper.CSurf_FlushUndo
language:lua
return:
params:(boolean:force)
description:
call this to force flushing of the undo states after using CSurf_On*Change()
------
name:RPR_CSurf_FlushUndo
language:python
return:
params:(Boolean:force)
description:
call this to force flushing of the undo states after using CSurf_On*Change()
------
name:CSurf_GetTouchState
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:isPan)
description:

------
name:CSurf_GetTouchState
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:isPan)
description:

------
name:reaper.CSurf_GetTouchState
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:isPan)
description:

------
name:RPR_CSurf_GetTouchState
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:isPan)
description:

------
name:CSurf_GoEnd
language:c
return:(void:)
params:
description:

------
name:CSurf_GoEnd
language:eel2
return:
params:
description:

------
name:reaper.CSurf_GoEnd
language:lua
return:
params:
description:

------
name:RPR_CSurf_GoEnd
language:python
return:
params:
description:

------
name:CSurf_GoStart
language:c
return:(void:)
params:
description:

------
name:CSurf_GoStart
language:eel2
return:
params:
description:

------
name:reaper.CSurf_GoStart
language:lua
return:
params:
description:

------
name:RPR_CSurf_GoStart
language:python
return:
params:
description:

------
name:CSurf_NumTracks
language:c
return:(int:)
params:(bool:mcpView)
description:

------
name:CSurf_NumTracks
language:eel2
return:(int:)
params:(bool:mcpView)
description:

------
name:reaper.CSurf_NumTracks
language:lua
return:(integer:)
params:(boolean:mcpView)
description:

------
name:RPR_CSurf_NumTracks
language:python
return:(Int:)
params:(Boolean:mcpView)
description:

------
name:CSurf_OnArrow
language:c
return:(void:)
params:(int:whichdir), (bool:wantzoom)
description:

------
name:CSurf_OnArrow
language:eel2
return:
params:(int:whichdir), (bool:wantzoom)
description:

------
name:reaper.CSurf_OnArrow
language:lua
return:
params:(integer:whichdir), (boolean:wantzoom)
description:

------
name:RPR_CSurf_OnArrow
language:python
return:
params:(Int:whichdir), (Boolean:wantzoom)
description:

------
name:CSurf_OnFwd
language:c
return:(void:)
params:(int:seekplay)
description:

------
name:CSurf_OnFwd
language:eel2
return:
params:(int:seekplay)
description:

------
name:reaper.CSurf_OnFwd
language:lua
return:
params:(integer:seekplay)
description:

------
name:RPR_CSurf_OnFwd
language:python
return:
params:(Int:seekplay)
description:

------
name:CSurf_OnFXChange
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:en)
description:

------
name:CSurf_OnFXChange
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:en)
description:

------
name:reaper.CSurf_OnFXChange
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:en)
description:

------
name:RPR_CSurf_OnFXChange
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:en)
description:

------
name:CSurf_OnInputMonitorChange
language:c
return:(int:)
params:(MediaTrack*:trackid), (int:monitor)
description:

------
name:CSurf_OnInputMonitorChange
language:eel2
return:(int:)
params:(MediaTrack:trackid), (int:monitor)
description:

------
name:reaper.CSurf_OnInputMonitorChange
language:lua
return:(integer:)
params:(MediaTrack:trackid), (integer:monitor)
description:

------
name:RPR_CSurf_OnInputMonitorChange
language:python
return:(Int:)
params:(MediaTrack:trackid), (Int:monitor)
description:

------
name:CSurf_OnInputMonitorChangeEx
language:c
return:(int:)
params:(MediaTrack*:trackid), (int:monitor), (bool:allowgang)
description:

------
name:CSurf_OnInputMonitorChangeEx
language:eel2
return:(int:)
params:(MediaTrack:trackid), (int:monitor), (bool:allowgang)
description:

------
name:reaper.CSurf_OnInputMonitorChangeEx
language:lua
return:(integer:)
params:(MediaTrack:trackid), (integer:monitor), (boolean:allowgang)
description:

------
name:RPR_CSurf_OnInputMonitorChangeEx
language:python
return:(Int:)
params:(MediaTrack:trackid), (Int:monitor), (Boolean:allowgang)
description:

------
name:CSurf_OnMuteChange
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:mute)
description:

------
name:CSurf_OnMuteChange
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:mute)
description:

------
name:reaper.CSurf_OnMuteChange
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:mute)
description:

------
name:RPR_CSurf_OnMuteChange
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:mute)
description:

------
name:CSurf_OnMuteChangeEx
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:mute), (bool:allowgang)
description:

------
name:CSurf_OnMuteChangeEx
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:mute), (bool:allowgang)
description:

------
name:reaper.CSurf_OnMuteChangeEx
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:mute), (boolean:allowgang)
description:

------
name:RPR_CSurf_OnMuteChangeEx
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:mute), (Boolean:allowgang)
description:

------
name:CSurf_OnPanChange
language:c
return:(double:)
params:(MediaTrack*:trackid), (double:pan), (bool:relative)
description:

------
name:CSurf_OnPanChange
language:eel2
return:(double:)
params:(MediaTrack:trackid), (pan:), (bool:relative)
description:

------
name:reaper.CSurf_OnPanChange
language:lua
return:(number:)
params:(MediaTrack:trackid), (number:pan), (boolean:relative)
description:

------
name:RPR_CSurf_OnPanChange
language:python
return:(Float:)
params:(MediaTrack:trackid), (Float:pan), (Boolean:relative)
description:

------
name:CSurf_OnPanChangeEx
language:c
return:(double:)
params:(MediaTrack*:trackid), (double:pan), (bool:relative), (bool:allowGang)
description:

------
name:CSurf_OnPanChangeEx
language:eel2
return:(double:)
params:(MediaTrack:trackid), (pan:), (bool:relative), (bool:allowGang)
description:

------
name:reaper.CSurf_OnPanChangeEx
language:lua
return:(number:)
params:(MediaTrack:trackid), (number:pan), (boolean:relative), (boolean:allowGang)
description:

------
name:RPR_CSurf_OnPanChangeEx
language:python
return:(Float:)
params:(MediaTrack:trackid), (Float:pan), (Boolean:relative), (Boolean:allowGang)
description:

------
name:CSurf_OnPause
language:c
return:(void:)
params:
description:

------
name:CSurf_OnPause
language:eel2
return:
params:
description:

------
name:reaper.CSurf_OnPause
language:lua
return:
params:
description:

------
name:RPR_CSurf_OnPause
language:python
return:
params:
description:

------
name:CSurf_OnPlay
language:c
return:(void:)
params:
description:

------
name:CSurf_OnPlay
language:eel2
return:
params:
description:

------
name:reaper.CSurf_OnPlay
language:lua
return:
params:
description:

------
name:RPR_CSurf_OnPlay
language:python
return:
params:
description:

------
name:CSurf_OnPlayRateChange
language:c
return:(void:)
params:(double:playrate)
description:

------
name:CSurf_OnPlayRateChange
language:eel2
return:
params:(playrate:)
description:

------
name:reaper.CSurf_OnPlayRateChange
language:lua
return:
params:(number:playrate)
description:

------
name:RPR_CSurf_OnPlayRateChange
language:python
return:
params:(Float:playrate)
description:

------
name:CSurf_OnRecArmChange
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:recarm)
description:

------
name:CSurf_OnRecArmChange
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:recarm)
description:

------
name:reaper.CSurf_OnRecArmChange
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:recarm)
description:

------
name:RPR_CSurf_OnRecArmChange
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:recarm)
description:

------
name:CSurf_OnRecArmChangeEx
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:recarm), (bool:allowgang)
description:

------
name:CSurf_OnRecArmChangeEx
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:recarm), (bool:allowgang)
description:

------
name:reaper.CSurf_OnRecArmChangeEx
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:recarm), (boolean:allowgang)
description:

------
name:RPR_CSurf_OnRecArmChangeEx
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:recarm), (Boolean:allowgang)
description:

------
name:CSurf_OnRecord
language:c
return:(void:)
params:
description:

------
name:CSurf_OnRecord
language:eel2
return:
params:
description:

------
name:reaper.CSurf_OnRecord
language:lua
return:
params:
description:

------
name:RPR_CSurf_OnRecord
language:python
return:
params:
description:

------
name:CSurf_OnRecvPanChange
language:c
return:(double:)
params:(MediaTrack*:trackid), (int:recv_index), (double:pan), (bool:relative)
description:

------
name:CSurf_OnRecvPanChange
language:eel2
return:(double:)
params:(MediaTrack:trackid), (int:recv_index), (pan:), (bool:relative)
description:

------
name:reaper.CSurf_OnRecvPanChange
language:lua
return:(number:)
params:(MediaTrack:trackid), (integer:recv_index), (number:pan), (boolean:relative)
description:

------
name:RPR_CSurf_OnRecvPanChange
language:python
return:(Float:)
params:(MediaTrack:trackid), (Int:recv_index), (Float:pan), (Boolean:relative)
description:

------
name:CSurf_OnRecvVolumeChange
language:c
return:(double:)
params:(MediaTrack*:trackid), (int:recv_index), (double:volume), (bool:relative)
description:

------
name:CSurf_OnRecvVolumeChange
language:eel2
return:(double:)
params:(MediaTrack:trackid), (int:recv_index), (volume:), (bool:relative)
description:

------
name:reaper.CSurf_OnRecvVolumeChange
language:lua
return:(number:)
params:(MediaTrack:trackid), (integer:recv_index), (number:volume), (boolean:relative)
description:

------
name:RPR_CSurf_OnRecvVolumeChange
language:python
return:(Float:)
params:(MediaTrack:trackid), (Int:recv_index), (Float:volume), (Boolean:relative)
description:

------
name:CSurf_OnRew
language:c
return:(void:)
params:(int:seekplay)
description:

------
name:CSurf_OnRew
language:eel2
return:
params:(int:seekplay)
description:

------
name:reaper.CSurf_OnRew
language:lua
return:
params:(integer:seekplay)
description:

------
name:RPR_CSurf_OnRew
language:python
return:
params:(Int:seekplay)
description:

------
name:CSurf_OnRewFwd
language:c
return:(void:)
params:(int:seekplay), (int:dir)
description:

------
name:CSurf_OnRewFwd
language:eel2
return:
params:(int:seekplay), (int:dir)
description:

------
name:reaper.CSurf_OnRewFwd
language:lua
return:
params:(integer:seekplay), (integer:dir)
description:

------
name:RPR_CSurf_OnRewFwd
language:python
return:
params:(Int:seekplay), (Int:dir)
description:

------
name:CSurf_OnScroll
language:c
return:(void:)
params:(int:xdir), (int:ydir)
description:

------
name:CSurf_OnScroll
language:eel2
return:
params:(int:xdir), (int:ydir)
description:

------
name:reaper.CSurf_OnScroll
language:lua
return:
params:(integer:xdir), (integer:ydir)
description:

------
name:RPR_CSurf_OnScroll
language:python
return:
params:(Int:xdir), (Int:ydir)
description:

------
name:CSurf_OnSelectedChange
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:selected)
description:

------
name:CSurf_OnSelectedChange
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:selected)
description:

------
name:reaper.CSurf_OnSelectedChange
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:selected)
description:

------
name:RPR_CSurf_OnSelectedChange
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:selected)
description:

------
name:CSurf_OnSendPanChange
language:c
return:(double:)
params:(MediaTrack*:trackid), (int:send_index), (double:pan), (bool:relative)
description:

------
name:CSurf_OnSendPanChange
language:eel2
return:(double:)
params:(MediaTrack:trackid), (int:send_index), (pan:), (bool:relative)
description:

------
name:reaper.CSurf_OnSendPanChange
language:lua
return:(number:)
params:(MediaTrack:trackid), (integer:send_index), (number:pan), (boolean:relative)
description:

------
name:RPR_CSurf_OnSendPanChange
language:python
return:(Float:)
params:(MediaTrack:trackid), (Int:send_index), (Float:pan), (Boolean:relative)
description:

------
name:CSurf_OnSendVolumeChange
language:c
return:(double:)
params:(MediaTrack*:trackid), (int:send_index), (double:volume), (bool:relative)
description:

------
name:CSurf_OnSendVolumeChange
language:eel2
return:(double:)
params:(MediaTrack:trackid), (int:send_index), (volume:), (bool:relative)
description:

------
name:reaper.CSurf_OnSendVolumeChange
language:lua
return:(number:)
params:(MediaTrack:trackid), (integer:send_index), (number:volume), (boolean:relative)
description:

------
name:RPR_CSurf_OnSendVolumeChange
language:python
return:(Float:)
params:(MediaTrack:trackid), (Int:send_index), (Float:volume), (Boolean:relative)
description:

------
name:CSurf_OnSoloChange
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:solo)
description:

------
name:CSurf_OnSoloChange
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:solo)
description:

------
name:reaper.CSurf_OnSoloChange
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:solo)
description:

------
name:RPR_CSurf_OnSoloChange
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:solo)
description:

------
name:CSurf_OnSoloChangeEx
language:c
return:(bool:)
params:(MediaTrack*:trackid), (int:solo), (bool:allowgang)
description:

------
name:CSurf_OnSoloChangeEx
language:eel2
return:(bool:)
params:(MediaTrack:trackid), (int:solo), (bool:allowgang)
description:

------
name:reaper.CSurf_OnSoloChangeEx
language:lua
return:(boolean:)
params:(MediaTrack:trackid), (integer:solo), (boolean:allowgang)
description:

------
name:RPR_CSurf_OnSoloChangeEx
language:python
return:(Boolean:)
params:(MediaTrack:trackid), (Int:solo), (Boolean:allowgang)
description:

------
name:CSurf_OnStop
language:c
return:(void:)
params:
description:

------
name:CSurf_OnStop
language:eel2
return:
params:
description:

------
name:reaper.CSurf_OnStop
language:lua
return:
params:
description:

------
name:RPR_CSurf_OnStop
language:python
return:
params:
description:

------
name:CSurf_OnTempoChange
language:c
return:(void:)
params:(double:bpm)
description:

------
name:CSurf_OnTempoChange
language:eel2
return:
params:(bpm:)
description:

------
name:reaper.CSurf_OnTempoChange
language:lua
return:
params:(number:bpm)
description:

------
name:RPR_CSurf_OnTempoChange
language:python
return:
params:(Float:bpm)
description:

------
name:CSurf_OnTrackSelection
language:c
return:(void:)
params:(MediaTrack*:trackid)
description:

------
name:CSurf_OnTrackSelection
language:eel2
return:
params:(MediaTrack:trackid)
description:

------
name:reaper.CSurf_OnTrackSelection
language:lua
return:
params:(MediaTrack:trackid)
description:

------
name:RPR_CSurf_OnTrackSelection
language:python
return:
params:(MediaTrack:trackid)
description:

------
name:CSurf_OnVolumeChange
language:c
return:(double:)
params:(MediaTrack*:trackid), (double:volume), (bool:relative)
description:

------
name:CSurf_OnVolumeChange
language:eel2
return:(double:)
params:(MediaTrack:trackid), (volume:), (bool:relative)
description:

------
name:reaper.CSurf_OnVolumeChange
language:lua
return:(number:)
params:(MediaTrack:trackid), (number:volume), (boolean:relative)
description:

------
name:RPR_CSurf_OnVolumeChange
language:python
return:(Float:)
params:(MediaTrack:trackid), (Float:volume), (Boolean:relative)
description:

------
name:CSurf_OnVolumeChangeEx
language:c
return:(double:)
params:(MediaTrack*:trackid), (double:volume), (bool:relative), (bool:allowGang)
description:

------
name:CSurf_OnVolumeChangeEx
language:eel2
return:(double:)
params:(MediaTrack:trackid), (volume:), (bool:relative), (bool:allowGang)
description:

------
name:reaper.CSurf_OnVolumeChangeEx
language:lua
return:(number:)
params:(MediaTrack:trackid), (number:volume), (boolean:relative), (boolean:allowGang)
description:

------
name:RPR_CSurf_OnVolumeChangeEx
language:python
return:(Float:)
params:(MediaTrack:trackid), (Float:volume), (Boolean:relative), (Boolean:allowGang)
description:

------
name:CSurf_OnWidthChange
language:c
return:(double:)
params:(MediaTrack*:trackid), (double:width), (bool:relative)
description:

------
name:CSurf_OnWidthChange
language:eel2
return:(double:)
params:(MediaTrack:trackid), (width:), (bool:relative)
description:

------
name:reaper.CSurf_OnWidthChange
language:lua
return:(number:)
params:(MediaTrack:trackid), (number:width), (boolean:relative)
description:

------
name:RPR_CSurf_OnWidthChange
language:python
return:(Float:)
params:(MediaTrack:trackid), (Float:width), (Boolean:relative)
description:

------
name:CSurf_OnWidthChangeEx
language:c
return:(double:)
params:(MediaTrack*:trackid), (double:width), (bool:relative), (bool:allowGang)
description:

------
name:CSurf_OnWidthChangeEx
language:eel2
return:(double:)
params:(MediaTrack:trackid), (width:), (bool:relative), (bool:allowGang)
description:

------
name:reaper.CSurf_OnWidthChangeEx
language:lua
return:(number:)
params:(MediaTrack:trackid), (number:width), (boolean:relative), (boolean:allowGang)
description:

------
name:RPR_CSurf_OnWidthChangeEx
language:python
return:(Float:)
params:(MediaTrack:trackid), (Float:width), (Boolean:relative), (Boolean:allowGang)
description:

------
name:CSurf_OnZoom
language:c
return:(void:)
params:(int:xdir), (int:ydir)
description:

------
name:CSurf_OnZoom
language:eel2
return:
params:(int:xdir), (int:ydir)
description:

------
name:reaper.CSurf_OnZoom
language:lua
return:
params:(integer:xdir), (integer:ydir)
description:

------
name:RPR_CSurf_OnZoom
language:python
return:
params:(Int:xdir), (Int:ydir)
description:

------
name:CSurf_ResetAllCachedVolPanStates
language:c
return:(void:)
params:
description:

------
name:CSurf_ResetAllCachedVolPanStates
language:eel2
return:
params:
description:

------
name:reaper.CSurf_ResetAllCachedVolPanStates
language:lua
return:
params:
description:

------
name:RPR_CSurf_ResetAllCachedVolPanStates
language:python
return:
params:
description:

------
name:CSurf_ScrubAmt
language:c
return:(void:)
params:(double:amt)
description:

------
name:CSurf_ScrubAmt
language:eel2
return:
params:(amt:)
description:

------
name:reaper.CSurf_ScrubAmt
language:lua
return:
params:(number:amt)
description:

------
name:RPR_CSurf_ScrubAmt
language:python
return:
params:(Float:amt)
description:

------
name:CSurf_SetAutoMode
language:c
return:(void:)
params:(int:mode), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetAutoMode
language:eel2
return:
params:(int:mode), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetAutoMode
language:lua
return:
params:(integer:mode), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetAutoMode
language:python
return:
params:(Int:mode), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetPlayState
language:c
return:(void:)
params:(bool:play), (bool:pause), (bool:rec), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetPlayState
language:eel2
return:
params:(bool:play), (bool:pause), (bool:rec), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetPlayState
language:lua
return:
params:(boolean:play), (boolean:pause), (boolean:rec), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetPlayState
language:python
return:
params:(Boolean:play), (Boolean:pause), (Boolean:rec), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetRepeatState
language:c
return:(void:)
params:(bool:rep), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetRepeatState
language:eel2
return:
params:(bool:rep), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetRepeatState
language:lua
return:
params:(boolean:rep), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetRepeatState
language:python
return:
params:(Boolean:rep), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetSurfaceMute
language:c
return:(void:)
params:(MediaTrack*:trackid), (bool:mute), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetSurfaceMute
language:eel2
return:
params:(MediaTrack:trackid), (bool:mute), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetSurfaceMute
language:lua
return:
params:(MediaTrack:trackid), (boolean:mute), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetSurfaceMute
language:python
return:
params:(MediaTrack:trackid), (Boolean:mute), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetSurfacePan
language:c
return:(void:)
params:(MediaTrack*:trackid), (double:pan), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetSurfacePan
language:eel2
return:
params:(MediaTrack:trackid), (pan:), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetSurfacePan
language:lua
return:
params:(MediaTrack:trackid), (number:pan), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetSurfacePan
language:python
return:
params:(MediaTrack:trackid), (Float:pan), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetSurfaceRecArm
language:c
return:(void:)
params:(MediaTrack*:trackid), (bool:recarm), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetSurfaceRecArm
language:eel2
return:
params:(MediaTrack:trackid), (bool:recarm), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetSurfaceRecArm
language:lua
return:
params:(MediaTrack:trackid), (boolean:recarm), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetSurfaceRecArm
language:python
return:
params:(MediaTrack:trackid), (Boolean:recarm), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetSurfaceSelected
language:c
return:(void:)
params:(MediaTrack*:trackid), (bool:selected), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetSurfaceSelected
language:eel2
return:
params:(MediaTrack:trackid), (bool:selected), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetSurfaceSelected
language:lua
return:
params:(MediaTrack:trackid), (boolean:selected), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetSurfaceSelected
language:python
return:
params:(MediaTrack:trackid), (Boolean:selected), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetSurfaceSolo
language:c
return:(void:)
params:(MediaTrack*:trackid), (bool:solo), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetSurfaceSolo
language:eel2
return:
params:(MediaTrack:trackid), (bool:solo), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetSurfaceSolo
language:lua
return:
params:(MediaTrack:trackid), (boolean:solo), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetSurfaceSolo
language:python
return:
params:(MediaTrack:trackid), (Boolean:solo), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetSurfaceVolume
language:c
return:(void:)
params:(MediaTrack*:trackid), (double:volume), (IReaperControlSurface*:ignoresurf)
description:

------
name:CSurf_SetSurfaceVolume
language:eel2
return:
params:(MediaTrack:trackid), (volume:), (IReaperControlSurface:ignoresurf)
description:

------
name:reaper.CSurf_SetSurfaceVolume
language:lua
return:
params:(MediaTrack:trackid), (number:volume), (IReaperControlSurface:ignoresurf)
description:

------
name:RPR_CSurf_SetSurfaceVolume
language:python
return:
params:(MediaTrack:trackid), (Float:volume), (IReaperControlSurface:ignoresurf)
description:

------
name:CSurf_SetTrackListChange
language:c
return:(void:)
params:
description:

------
name:CSurf_SetTrackListChange
language:eel2
return:
params:
description:

------
name:reaper.CSurf_SetTrackListChange
language:lua
return:
params:
description:

------
name:RPR_CSurf_SetTrackListChange
language:python
return:
params:
description:

------
name:CSurf_TrackFromID
language:c
return:(MediaTrack*:)
params:(int:idx), (bool:mcpView)
description:

------
name:CSurf_TrackFromID
language:eel2
return:(MediaTrack:)
params:(int:idx), (bool:mcpView)
description:

------
name:reaper.CSurf_TrackFromID
language:lua
return:(MediaTrack:)
params:(integer:idx), (boolean:mcpView)
description:

------
name:RPR_CSurf_TrackFromID
language:python
return:(MediaTrack:)
params:(Int:idx), (Boolean:mcpView)
description:

------
name:CSurf_TrackToID
language:c
return:(int:)
params:(MediaTrack*:track), (bool:mcpView)
description:

------
name:CSurf_TrackToID
language:eel2
return:(int:)
params:(MediaTrack:track), (bool:mcpView)
description:

------
name:reaper.CSurf_TrackToID
language:lua
return:(integer:)
params:(MediaTrack:track), (boolean:mcpView)
description:

------
name:RPR_CSurf_TrackToID
language:python
return:(Int:)
params:(MediaTrack:track), (Boolean:mcpView)
description:

------
name:DB2SLIDER
language:c
return:(double:)
params:(double:x)
description:

------
name:DB2SLIDER
language:eel2
return:(double:)
params:(x:)
description:

------
name:reaper.DB2SLIDER
language:lua
return:(number:)
params:(number:x)
description:

------
name:RPR_DB2SLIDER
language:python
return:(Float:)
params:(Float:x)
description:

------
name:DeleteEnvelopePointEx
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx), (int:ptidx)
description:
Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.
------
name:DeleteEnvelopePointEx
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:autoitem_idx), (int:ptidx)
description:
Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.
------
name:reaper.DeleteEnvelopePointEx
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (integer:autoitem_idx), (integer:ptidx)
description:
Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.
------
name:RPR_DeleteEnvelopePointEx
language:python
return:(Boolean:)
params:(TrackEnvelope:envelope), (Int:autoitem_idx), (Int:ptidx)
description:
Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.
------
name:DeleteEnvelopePointRange
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (double:time_start), (double:time_end)
description:
Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.
------
name:DeleteEnvelopePointRange
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (time_start:), (time_end:)
description:
Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.
------
name:reaper.DeleteEnvelopePointRange
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (number:time_start), (number:time_end)
description:
Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.
------
name:RPR_DeleteEnvelopePointRange
language:python
return:(Boolean:)
params:(TrackEnvelope:envelope), (Float:time_start), (Float:time_end)
description:
Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.
------
name:DeleteEnvelopePointRangeEx
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx), (double:time_start), (double:time_end)
description:
Delete a range of envelope points. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc.
------
name:DeleteEnvelopePointRangeEx
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:autoitem_idx), (time_start:), (time_end:)
description:
Delete a range of envelope points. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc.
------
name:reaper.DeleteEnvelopePointRangeEx
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (integer:autoitem_idx), (number:time_start), (number:time_end)
description:
Delete a range of envelope points. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc.
------
name:RPR_DeleteEnvelopePointRangeEx
language:python
return:(Boolean:)
params:(TrackEnvelope:envelope), (Int:autoitem_idx), (Float:time_start), (Float:time_end)
description:
Delete a range of envelope points. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc.
------
name:DeleteExtState
language:c
return:(void:)
params:(const char*:section), (const char*:key), (bool:persist)
description:
Delete the extended state value for a specific section and key.
persist=true means the value should remain deleted the next time REAPER
is opened. See SetExtState, GetExtState, HasExtState.
------
name:DeleteExtState
language:eel2
return:
params:("section":), ("key":), (bool:persist)
description:
Delete the extended state value for a specific section and key.
persist=true means the value should remain deleted the next time REAPER
is opened. See SetExtState, GetExtState, HasExtState.
------
name:reaper.DeleteExtState
language:lua
return:
params:(string:section), (string:key), (boolean:persist)
description:
Delete the extended state value for a specific section and key.
persist=true means the value should remain deleted the next time REAPER
is opened. See SetExtState, GetExtState, HasExtState.
------
name:RPR_DeleteExtState
language:python
return:
params:(String:section), (String:key), (Boolean:persist)
description:
Delete the extended state value for a specific section and key.
persist=true means the value should remain deleted the next time REAPER
is opened. See SetExtState, GetExtState, HasExtState.
------
name:DeleteProjectMarker
language:c
return:(bool:)
params:(ReaProject*:proj), (int:markrgnindexnumber), (bool:isrgn)
description:
Delete a marker.  proj==NULL for the active project.
------
name:DeleteProjectMarker
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:markrgnindexnumber), (bool:isrgn)
description:
Delete a marker.  proj==NULL for the active project.
------
name:reaper.DeleteProjectMarker
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:markrgnindexnumber), (boolean:isrgn)
description:
Delete a marker.  proj==NULL for the active project.
------
name:RPR_DeleteProjectMarker
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:markrgnindexnumber), (Boolean:isrgn)
description:
Delete a marker.  proj==NULL for the active project.
------
name:DeleteProjectMarkerByIndex
language:c
return:(bool:)
params:(ReaProject*:proj), (int:markrgnidx)
description:
Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).
------
name:DeleteProjectMarkerByIndex
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:markrgnidx)
description:
Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).
------
name:reaper.DeleteProjectMarkerByIndex
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:markrgnidx)
description:
Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).
------
name:RPR_DeleteProjectMarkerByIndex
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:markrgnidx)
description:
Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).
------
name:DeleteTakeStretchMarkers
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:idx), (const int*:countInOptional)
description:
Deletes one or more stretch markers. Returns number of stretch markers deleted.
------
name:DeleteTakeStretchMarkers
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:idx), (optional int:countIn)
description:
Deletes one or more stretch markers. Returns number of stretch markers deleted.
------
name:reaper.DeleteTakeStretchMarkers
language:lua
return:(integer:)
params:(MediaItem_Take:take), (integer:idx), (optional number:countIn)
description:
Deletes one or more stretch markers. Returns number of stretch markers deleted.
------
name:RPR_DeleteTakeStretchMarkers
language:python
return:(Int:)
params:(MediaItem_Take:take), (Int:idx), (const int:countInOptional)
description:
Deletes one or more stretch markers. Returns number of stretch markers deleted.
------
name:DeleteTempoTimeSigMarker
language:c
return:(bool:)
params:(ReaProject*:project), (int:markerindex)
description:
Delete a tempo/time signature marker.
------
name:DeleteTempoTimeSigMarker
language:eel2
return:(bool:)
params:(ReaProject:project), (int:markerindex)
description:
Delete a tempo/time signature marker.
------
name:reaper.DeleteTempoTimeSigMarker
language:lua
return:(boolean:)
params:(ReaProject:project), (integer:markerindex)
description:
Delete a tempo/time signature marker.
------
name:RPR_DeleteTempoTimeSigMarker
language:python
return:(Boolean:)
params:(ReaProject:project), (Int:markerindex)
description:
Delete a tempo/time signature marker.
------
name:DeleteTrack
language:c
return:(void:)
params:(MediaTrack*:tr)
description:
deletes a track
------
name:DeleteTrack
language:eel2
return:
params:(MediaTrack:tr)
description:
deletes a track
------
name:reaper.DeleteTrack
language:lua
return:
params:(MediaTrack:tr)
description:
deletes a track
------
name:RPR_DeleteTrack
language:python
return:
params:(MediaTrack:tr)
description:
deletes a track
------
name:DeleteTrackMediaItem
language:c
return:(bool:)
params:(MediaTrack*:tr), (MediaItem*:it)
description:

------
name:DeleteTrackMediaItem
language:eel2
return:(bool:)
params:(MediaTrack:tr), (MediaItem:it)
description:

------
name:reaper.DeleteTrackMediaItem
language:lua
return:(boolean:)
params:(MediaTrack:tr), (MediaItem:it)
description:

------
name:RPR_DeleteTrackMediaItem
language:python
return:(Boolean:)
params:(MediaTrack:tr), (MediaItem:it)
description:

------
name:DestroyAudioAccessor
language:c
return:(void:)
params:(AudioAccessor*:accessor)
description:
Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:DestroyAudioAccessor
language:eel2
return:
params:(AudioAccessor:accessor)
description:
Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:reaper.DestroyAudioAccessor
language:lua
return:
params:(AudioAccessor:accessor)
description:
Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:RPR_DestroyAudioAccessor
language:python
return:
params:(AudioAccessor:accessor)
description:
Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:Dock_UpdateDockID
language:c
return:(void:)
params:(const char*:ident_str), (int:whichDock)
description:
updates preference for docker window ident_str to be in dock whichDock on next open
------
name:Dock_UpdateDockID
language:eel2
return:
params:("ident_str":), (int:whichDock)
description:
updates preference for docker window ident_str to be in dock whichDock on next open
------
name:reaper.Dock_UpdateDockID
language:lua
return:
params:(string:ident_str), (integer:whichDock)
description:
updates preference for docker window ident_str to be in dock whichDock on next open
------
name:RPR_Dock_UpdateDockID
language:python
return:
params:(String:ident_str), (Int:whichDock)
description:
updates preference for docker window ident_str to be in dock whichDock on next open
------
name:DockGetPosition
language:c
return:(int:)
params:(int:whichDock)
description:
-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating
------
name:DockGetPosition
language:eel2
return:(int:)
params:(int:whichDock)
description:
-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating
------
name:reaper.DockGetPosition
language:lua
return:(integer:)
params:(integer:whichDock)
description:
-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating
------
name:RPR_DockGetPosition
language:python
return:(Int:)
params:(Int:whichDock)
description:
-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating
------
name:DockIsChildOfDock
language:c
return:(int:)
params:(HWND:hwnd), (bool*:isFloatingDockerOut)
description:
returns dock index that contains hwnd, or -1
------
name:DockIsChildOfDock
language:eel2
return:(int:)
params:(HWND:hwnd), (bool:&isFloatingDocker)
description:
returns dock index that contains hwnd, or -1
------
name:reaper.DockIsChildOfDock
language:lua
return:(integer:retval),(boolean:isFloatingDocker)
params:(HWND:hwnd)
description:
returns dock index that contains hwnd, or -1
------
name:RPR_DockIsChildOfDock
language:python
return:(Int:retval),(HWND:hwnd),(Boolean:isFloatingDockerOut)
params:(hwnd:), (isFloatingDockerOut:)
description:
returns dock index that contains hwnd, or -1
------
name:DockWindowActivate
language:c
return:(void:)
params:(HWND:hwnd)
description:

------
name:DockWindowActivate
language:eel2
return:
params:(HWND:hwnd)
description:

------
name:reaper.DockWindowActivate
language:lua
return:
params:(HWND:hwnd)
description:

------
name:RPR_DockWindowActivate
language:python
return:
params:(HWND:hwnd)
description:

------
name:DockWindowAdd
language:c
return:(void:)
params:(HWND:hwnd), (const char*:name), (int:pos), (bool:allowShow)
description:

------
name:DockWindowAdd
language:eel2
return:
params:(HWND:hwnd), ("name":), (int:pos), (bool:allowShow)
description:

------
name:reaper.DockWindowAdd
language:lua
return:
params:(HWND:hwnd), (string:name), (integer:pos), (boolean:allowShow)
description:

------
name:RPR_DockWindowAdd
language:python
return:
params:(HWND:hwnd), (String:name), (Int:pos), (Boolean:allowShow)
description:

------
name:DockWindowAddEx
language:c
return:(void:)
params:(HWND:hwnd), (const char*:name), (const char*:identstr), (bool:allowShow)
description:

------
name:DockWindowAddEx
language:eel2
return:
params:(HWND:hwnd), ("name":), ("identstr":), (bool:allowShow)
description:

------
name:reaper.DockWindowAddEx
language:lua
return:
params:(HWND:hwnd), (string:name), (string:identstr), (boolean:allowShow)
description:

------
name:RPR_DockWindowAddEx
language:python
return:
params:(HWND:hwnd), (String:name), (String:identstr), (Boolean:allowShow)
description:

------
name:DockWindowRefresh
language:c
return:(void:)
params:
description:

------
name:DockWindowRefresh
language:eel2
return:
params:
description:

------
name:reaper.DockWindowRefresh
language:lua
return:
params:
description:

------
name:RPR_DockWindowRefresh
language:python
return:
params:
description:

------
name:DockWindowRefreshForHWND
language:c
return:(void:)
params:(HWND:hwnd)
description:

------
name:DockWindowRefreshForHWND
language:eel2
return:
params:(HWND:hwnd)
description:

------
name:reaper.DockWindowRefreshForHWND
language:lua
return:
params:(HWND:hwnd)
description:

------
name:RPR_DockWindowRefreshForHWND
language:python
return:
params:(HWND:hwnd)
description:

------
name:DockWindowRemove
language:c
return:(void:)
params:(HWND:hwnd)
description:

------
name:DockWindowRemove
language:eel2
return:
params:(HWND:hwnd)
description:

------
name:reaper.DockWindowRemove
language:lua
return:
params:(HWND:hwnd)
description:

------
name:RPR_DockWindowRemove
language:python
return:
params:(HWND:hwnd)
description:

------
name:EditTempoTimeSigMarker
language:c
return:(bool:)
params:(ReaProject*:project), (int:markerindex)
description:
Open the tempo/time signature marker editor dialog.
------
name:EditTempoTimeSigMarker
language:eel2
return:(bool:)
params:(ReaProject:project), (int:markerindex)
description:
Open the tempo/time signature marker editor dialog.
------
name:reaper.EditTempoTimeSigMarker
language:lua
return:(boolean:)
params:(ReaProject:project), (integer:markerindex)
description:
Open the tempo/time signature marker editor dialog.
------
name:RPR_EditTempoTimeSigMarker
language:python
return:(Boolean:)
params:(ReaProject:project), (Int:markerindex)
description:
Open the tempo/time signature marker editor dialog.
------
name:EnsureNotCompletelyOffscreen
language:c
return:(void:)
params:(RECT*:rInOut)
description:
call with a saved window rect for your window and it'll correct any positioning info.
------
name:EnsureNotCompletelyOffscreen
language:eel2
return:
params:(int:&r.left), (int:&r.top), (int:&r.right), (int:&r.bot)
description:
call with a saved window rect for your window and it'll correct any positioning info.
------
name:reaper.EnsureNotCompletelyOffscreen
language:lua
return:(numberr.left:),(numberr.top:),(numberr.right:),(numberr.bot:)
params:(numberr.left:), (numberr.top:), (numberr.right:), (numberr.bot:)
description:
call with a saved window rect for your window and it'll correct any positioning info.
------
name:RPR_EnsureNotCompletelyOffscreen
language:python
return:
params:(RECT:rInOut)
description:
call with a saved window rect for your window and it'll correct any positioning info.
------
name:EnumerateFiles
language:c
return:(const:char*)
params:(const char*:path), (int:fileindex)
description:
List the files in the "path" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories
------
name:EnumerateFiles
language:eel2
return:(bool:)
params:(#retval:), ("path":), (int:fileindex)
description:
List the files in the "path" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories
------
name:reaper.EnumerateFiles
language:lua
return:(string:)
params:(string:path), (integer:fileindex)
description:
List the files in the "path" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories
------
name:RPR_EnumerateFiles
language:python
return:(String:)
params:(String:path), (Int:fileindex)
description:
List the files in the "path" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See EnumerateSubdirectories
------
name:EnumerateSubdirectories
language:c
return:(const:char*)
params:(const char*:path), (int:subdirindex)
description:
List the subdirectories in the "path" directory. Returns NULL (or empty
string, in Lua) when all subdirectories have been listed. See EnumerateFiles
------
name:EnumerateSubdirectories
language:eel2
return:(bool:)
params:(#retval:), ("path":), (int:subdirindex)
description:
List the subdirectories in the "path" directory. Returns NULL (or empty
string, in Lua) when all subdirectories have been listed. See EnumerateFiles
------
name:reaper.EnumerateSubdirectories
language:lua
return:(string:)
params:(string:path), (integer:subdirindex)
description:
List the subdirectories in the "path" directory. Returns NULL (or empty
string, in Lua) when all subdirectories have been listed. See EnumerateFiles
------
name:RPR_EnumerateSubdirectories
language:python
return:(String:)
params:(String:path), (Int:subdirindex)
description:
List the subdirectories in the "path" directory. Returns NULL (or empty
string, in Lua) when all subdirectories have been listed. See EnumerateFiles
------
name:EnumPitchShiftModes
language:c
return:(bool:)
params:(int:mode), (const char**:strOut)
description:
Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported
------
name:EnumPitchShiftModes
language:eel2
return:(bool:)
params:(int:mode), (#str:)
description:
Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported
------
name:reaper.EnumPitchShiftModes
language:lua
return:(boolean:retval),(string:str)
params:(integer:mode)
description:
Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported
------
name:RPR_EnumPitchShiftModes
language:python
return:(Boolean:)
params:(Int:mode), (String:strOut)
description:
Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported
------
name:EnumPitchShiftSubModes
language:c
return:(const:char*)
params:(int:mode), (int:submode)
description:
Returns submode name, or NULL
------
name:EnumPitchShiftSubModes
language:eel2
return:(bool:)
params:(#retval:), (int:mode), (int:submode)
description:
Returns submode name, or NULL
------
name:reaper.EnumPitchShiftSubModes
language:lua
return:(string:)
params:(integer:mode), (integer:submode)
description:
Returns submode name, or NULL
------
name:RPR_EnumPitchShiftSubModes
language:python
return:(String:)
params:(Int:mode), (Int:submode)
description:
Returns submode name, or NULL
------
name:EnumProjectMarkers
language:c
return:(int:)
params:(int:idx), (bool*:isrgnOut), (double*:posOut), (double*:rgnendOut), (const char**:nameOut), (int*:markrgnindexnumberOut)
description:

------
name:EnumProjectMarkers
language:eel2
return:(int:)
params:(int:idx), (bool:&isrgn), (&pos:), (&rgnend:), (#name:), (int:&markrgnindexnumber)
description:

------
name:reaper.EnumProjectMarkers
language:lua
return:(integer:retval),(boolean:isrgn),(number:pos),(number:rgnend),(string:name),(number:markrgnindexnumber)
params:(integer:idx)
description:

------
name:RPR_EnumProjectMarkers
language:python
return:(Int:retval),(Int:idx),(Boolean:isrgnOut),(Float:posOut),(Float:rgnendOut),(String:nameOut),(Int:markrgnindexnumberOut)
params:(idx:), (isrgnOut:), (posOut:), (rgnendOut:), (nameOut:), (markrgnindexnumberOut:)
description:

------
name:EnumProjectMarkers2
language:c
return:(int:)
params:(ReaProject*:proj), (int:idx), (bool*:isrgnOut), (double*:posOut), (double*:rgnendOut), (const char**:nameOut), (int*:markrgnindexnumberOut)
description:

------
name:EnumProjectMarkers2
language:eel2
return:(int:)
params:(ReaProject:proj), (int:idx), (bool:&isrgn), (&pos:), (&rgnend:), (#name:), (int:&markrgnindexnumber)
description:

------
name:reaper.EnumProjectMarkers2
language:lua
return:(integer:retval),(boolean:isrgn),(number:pos),(number:rgnend),(string:name),(number:markrgnindexnumber)
params:(ReaProject:proj), (integer:idx)
description:

------
name:RPR_EnumProjectMarkers2
language:python
return:(Int:retval),(ReaProject:proj),(Int:idx),(Boolean:isrgnOut),(Float:posOut),(Float:rgnendOut),(String:nameOut),(Int:markrgnindexnumberOut)
params:(proj:), (idx:), (isrgnOut:), (posOut:), (rgnendOut:), (nameOut:), (markrgnindexnumberOut:)
description:

------
name:EnumProjectMarkers3
language:c
return:(int:)
params:(ReaProject*:proj), (int:idx), (bool*:isrgnOut), (double*:posOut), (double*:rgnendOut), (const char**:nameOut), (int*:markrgnindexnumberOut), (int*:colorOut)
description:

------
name:EnumProjectMarkers3
language:eel2
return:(int:)
params:(ReaProject:proj), (int:idx), (bool:&isrgn), (&pos:), (&rgnend:), (#name:), (int:&markrgnindexnumber), (int:&color)
description:

------
name:reaper.EnumProjectMarkers3
language:lua
return:(integer:retval),(boolean:isrgn),(number:pos),(number:rgnend),(string:name),(number:markrgnindexnumber),(number:color)
params:(ReaProject:proj), (integer:idx)
description:

------
name:RPR_EnumProjectMarkers3
language:python
return:(Int:retval),(ReaProject:proj),(Int:idx),(Boolean:isrgnOut),(Float:posOut),(Float:rgnendOut),(String:nameOut),(Int:markrgnindexnumberOut),(Int:colorOut)
params:(proj:), (idx:), (isrgnOut:), (posOut:), (rgnendOut:), (nameOut:), (markrgnindexnumberOut:), (colorOut:)
description:

------
name:EnumProjects
language:c
return:(ReaProject*:)
params:(int:idx), (char*:projfnOutOptional), (int:projfnOutOptional_sz)
description:
idx=-1 for current project,projfn can be NULL if not interested in
filename. use idx 0x40000000 for currently rendering project, if any.
------
name:EnumProjects
language:eel2
return:(ReaProject:)
params:(int:idx), (optional:#projfn)
description:
idx=-1 for current project,projfn can be NULL if not interested in
filename. use idx 0x40000000 for currently rendering project, if any.
------
name:reaper.EnumProjects
language:lua
return:(ReaProject:retval),(optional string:projfn)
params:(integer:idx)
description:
idx=-1 for current project,projfn can be NULL if not interested in
filename. use idx 0x40000000 for currently rendering project, if any.
------
name:RPR_EnumProjects
language:python
return:(ReaProject:retval),(Int:idx),(String:projfnOutOptional),(Int:projfnOutOptional_sz)
params:(idx:), (projfnOutOptional:), (projfnOutOptional_sz:)
description:
idx=-1 for current project,projfn can be NULL if not interested in
filename. use idx 0x40000000 for currently rendering project, if any.
------
name:EnumProjExtState
language:c
return:(bool:)
params:(ReaProject*:proj), (const char*:extname), (int:idx), (char*:keyOutOptional), (int:keyOutOptional_sz), (char*:valOutOptional), (int:valOutOptional_sz)
description:
Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.
------
name:EnumProjExtState
language:eel2
return:(bool:)
params:(ReaProject:proj), ("extname":), (int:idx), (optional:#key), (optional:#val)
description:
Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.
------
name:reaper.EnumProjExtState
language:lua
return:(boolean:retval),(optional string:key),(optional string:val)
params:(ReaProject:proj), (string:extname), (integer:idx)
description:
Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.
------
name:RPR_EnumProjExtState
language:python
return:(Boolean:retval),(ReaProject:proj),(String:extname),(Int:idx),(String:keyOutOptional),(Int:keyOutOptional_sz),(String:valOutOptional),(Int:valOutOptional_sz)
params:(proj:), (extname:), (idx:), (keyOutOptional:), (keyOutOptional_sz:), (valOutOptional:), (valOutOptional_sz:)
description:
Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.
------
name:EnumRegionRenderMatrix
language:c
return:(MediaTrack*:)
params:(ReaProject*:proj), (int:regionindex), (int:rendertrack)
description:
Enumerate which tracks will be rendered within this region when using
the region render matrix. When called with rendertrack==0, the function
returns the first track that will be rendered (which may be the master
track); rendertrack==1 will return the next track rendered, and so on.
The function returns NULL when there are no more tracks that will be
rendered within this region.
------
name:EnumRegionRenderMatrix
language:eel2
return:(MediaTrack:)
params:(ReaProject:proj), (int:regionindex), (int:rendertrack)
description:
Enumerate which tracks will be rendered within this region when using
the region render matrix. When called with rendertrack==0, the function
returns the first track that will be rendered (which may be the master
track); rendertrack==1 will return the next track rendered, and so on.
The function returns NULL when there are no more tracks that will be
rendered within this region.
------
name:reaper.EnumRegionRenderMatrix
language:lua
return:(MediaTrack:)
params:(ReaProject:proj), (integer:regionindex), (integer:rendertrack)
description:
Enumerate which tracks will be rendered within this region when using
the region render matrix. When called with rendertrack==0, the function
returns the first track that will be rendered (which may be the master
track); rendertrack==1 will return the next track rendered, and so on.
The function returns NULL when there are no more tracks that will be
rendered within this region.
------
name:RPR_EnumRegionRenderMatrix
language:python
return:(MediaTrack:)
params:(ReaProject:proj), (Int:regionindex), (Int:rendertrack)
description:
Enumerate which tracks will be rendered within this region when using
the region render matrix. When called with rendertrack==0, the function
returns the first track that will be rendered (which may be the master
track); rendertrack==1 will return the next track rendered, and so on.
The function returns NULL when there are no more tracks that will be
rendered within this region.
------
name:EnumTrackMIDIProgramNames
language:c
return:(bool:)
params:(int:track), (int:programNumber), (char*:programName), (int:programName_sz)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:EnumTrackMIDIProgramNames
language:eel2
return:(bool:)
params:(int:track), (int:programNumber), (#programName:)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:reaper.EnumTrackMIDIProgramNames
language:lua
return:(boolean:retval),(string:programName)
params:(integer:track), (integer:programNumber), (string:programName)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:RPR_EnumTrackMIDIProgramNames
language:python
return:(Boolean:retval),(Int:track),(Int:programNumber),(String:programName),(Int:programName_sz)
params:(track:), (programNumber:), (programName:), (programName_sz:)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:EnumTrackMIDIProgramNamesEx
language:c
return:(bool:)
params:(ReaProject*:proj), (MediaTrack*:track), (int:programNumber), (char*:programName), (int:programName_sz)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:EnumTrackMIDIProgramNamesEx
language:eel2
return:(bool:)
params:(ReaProject:proj), (MediaTrack:track), (int:programNumber), (#programName:)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:reaper.EnumTrackMIDIProgramNamesEx
language:lua
return:(boolean:retval),(string:programName)
params:(ReaProject:proj), (MediaTrack:track), (integer:programNumber), (string:programName)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:RPR_EnumTrackMIDIProgramNamesEx
language:python
return:(Boolean:retval),(ReaProject:proj),(MediaTrack:track),(Int:programNumber),(String:programName),(Int:programName_sz)
params:(proj:), (track:), (programNumber:), (programName:), (programName_sz:)
description:
returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated
------
name:Envelope_Evaluate
language:c
return:(int:)
params:(TrackEnvelope*:envelope), (double:time), (double:samplerate), (int:samplesRequested), (double*:valueOutOptional), (double*:dVdSOutOptional), (double*:ddVdSOutOptional), (double*:dddVdSOutOptional)
description:
Get the effective envelope value at a given time position.
samplesRequested is how long the caller expects until the next call to
Envelope_Evaluate (often, the buffer block size). The return value is
how many samples beyond that time position that the returned values are
valid. dVdS is the change in value per sample (first derivative), ddVdS
is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.
------
name:Envelope_Evaluate
language:eel2
return:(int:)
params:(TrackEnvelope:envelope), (time:), (samplerate:), (int:samplesRequested), (optional:&value), (optional:&dVdS), (optional:&ddVdS), (optional:&dddVdS)
description:
Get the effective envelope value at a given time position.
samplesRequested is how long the caller expects until the next call to
Envelope_Evaluate (often, the buffer block size). The return value is
how many samples beyond that time position that the returned values are
valid. dVdS is the change in value per sample (first derivative), ddVdS
is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.
------
name:reaper.Envelope_Evaluate
language:lua
return:(integer:retval),(optional number:value),(optional number:dVdS),(optional number:ddVdS),(optional number:dddVdS)
params:(TrackEnvelope:envelope), (number:time), (number:samplerate), (integer:samplesRequested)
description:
Get the effective envelope value at a given time position.
samplesRequested is how long the caller expects until the next call to
Envelope_Evaluate (often, the buffer block size). The return value is
how many samples beyond that time position that the returned values are
valid. dVdS is the change in value per sample (first derivative), ddVdS
is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.
------
name:RPR_Envelope_Evaluate
language:python
return:(Int:retval),(TrackEnvelope:envelope),(Float:time),(Float:samplerate),(Int:samplesRequested),(Float:valueOutOptional),(Float:dVdSOutOptional),(Float:ddVdSOutOptional),(Float:dddVdSOutOptional)
params:(envelope:), (time:), (samplerate:), (samplesRequested:), (valueOutOptional:), (dVdSOutOptional:), (ddVdSOutOptional:), (dddVdSOutOptional:)
description:
Get the effective envelope value at a given time position.
samplesRequested is how long the caller expects until the next call to
Envelope_Evaluate (often, the buffer block size). The return value is
how many samples beyond that time position that the returned values are
valid. dVdS is the change in value per sample (first derivative), ddVdS
is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.
------
name:Envelope_FormatValue
language:c
return:(void:)
params:(TrackEnvelope*:env), (double:value), (char*:bufOut), (int:bufOut_sz)
description:
Formats the value of an envelope to a user-readable form
------
name:Envelope_FormatValue
language:eel2
return:
params:(TrackEnvelope:env), (value:), (#buf:)
description:
Formats the value of an envelope to a user-readable form
------
name:reaper.Envelope_FormatValue
language:lua
return:(string:buf)
params:(TrackEnvelope:env), (number:value)
description:
Formats the value of an envelope to a user-readable form
------
name:RPR_Envelope_FormatValue
language:python
return:(TrackEnvelope:env),(Float:value),(String:bufOut),(Int:bufOut_sz)
params:(env:), (value:), (bufOut:), (bufOut_sz:)
description:
Formats the value of an envelope to a user-readable form
------
name:Envelope_GetParentTake
language:c
return:(MediaItem_Take*:)
params:(TrackEnvelope*:env), (int*:indexOutOptional), (int*:index2OutOptional)
description:
If take envelope, gets the take from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:Envelope_GetParentTake
language:eel2
return:(MediaItem_Take:)
params:(TrackEnvelope:env), (optional int:&index), (optional int:&index2)
description:
If take envelope, gets the take from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:reaper.Envelope_GetParentTake
language:lua
return:(MediaItem_Take:retval),(optional number:index),(optional number:index2)
params:(TrackEnvelope:env)
description:
If take envelope, gets the take from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:RPR_Envelope_GetParentTake
language:python
return:(MediaItem_Take:retval),(TrackEnvelope:env),(Int:indexOutOptional),(Int:index2OutOptional)
params:(env:), (indexOutOptional:), (index2OutOptional:)
description:
If take envelope, gets the take from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:Envelope_GetParentTrack
language:c
return:(MediaTrack*:)
params:(TrackEnvelope*:env), (int*:indexOutOptional), (int*:index2OutOptional)
description:
If track envelope, gets the track from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:Envelope_GetParentTrack
language:eel2
return:(MediaTrack:)
params:(TrackEnvelope:env), (optional int:&index), (optional int:&index2)
description:
If track envelope, gets the track from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:reaper.Envelope_GetParentTrack
language:lua
return:(MediaTrack:retval),(optional number:index),(optional number:index2)
params:(TrackEnvelope:env)
description:
If track envelope, gets the track from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:RPR_Envelope_GetParentTrack
language:python
return:(MediaTrack:retval),(TrackEnvelope:env),(Int:indexOutOptional),(Int:index2OutOptional)
params:(env:), (indexOutOptional:), (index2OutOptional:)
description:
If track envelope, gets the track from the envelope. If FX,
indexOutOptional set to FX index, index2OutOptional set to parameter
index, otherwise -1.
------
name:Envelope_SortPoints
language:c
return:(bool:)
params:(TrackEnvelope*:envelope)
description:
Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:Envelope_SortPoints
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope)
description:
Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:reaper.Envelope_SortPoints
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope)
description:
Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:RPR_Envelope_SortPoints
language:python
return:(Boolean:)
params:(TrackEnvelope:envelope)
description:
Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:Envelope_SortPointsEx
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx)
description:
Sort envelope points by time. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:Envelope_SortPointsEx
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:autoitem_idx)
description:
Sort envelope points by time. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:reaper.Envelope_SortPointsEx
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (integer:autoitem_idx)
description:
Sort envelope points by time. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:RPR_Envelope_SortPointsEx
language:python
return:(Boolean:)
params:(TrackEnvelope:envelope), (Int:autoitem_idx)
description:
Sort envelope points by time. autoitem_idx=-1 for the underlying
envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.
------
name:ExecProcess
language:c
return:(const:char*)
params:(const char*:cmdline), (int:timeoutmsec)
description:
Executes command line, returns NULL on total failure, otherwise the
return value, a newline, and then the output of the command. If
timeoutmsec is 0, command will be allowed to run indefinitely
(recommended for large amounts of returned output). timeoutmsec is -1
for no wait/terminate, -2 for no wait and minimize
------
name:ExecProcess
language:eel2
return:(bool:)
params:(#retval:), ("cmdline":), (int:timeoutmsec)
description:
Executes command line, returns NULL on total failure, otherwise the
return value, a newline, and then the output of the command. If
timeoutmsec is 0, command will be allowed to run indefinitely
(recommended for large amounts of returned output). timeoutmsec is -1
for no wait/terminate, -2 for no wait and minimize
------
name:reaper.ExecProcess
language:lua
return:(string:)
params:(string:cmdline), (integer:timeoutmsec)
description:
Executes command line, returns NULL on total failure, otherwise the
return value, a newline, and then the output of the command. If
timeoutmsec is 0, command will be allowed to run indefinitely
(recommended for large amounts of returned output). timeoutmsec is -1
for no wait/terminate, -2 for no wait and minimize
------
name:RPR_ExecProcess
language:python
return:(String:)
params:(String:cmdline), (Int:timeoutmsec)
description:
Executes command line, returns NULL on total failure, otherwise the
return value, a newline, and then the output of the command. If
timeoutmsec is 0, command will be allowed to run indefinitely
(recommended for large amounts of returned output). timeoutmsec is -1
for no wait/terminate, -2 for no wait and minimize
------
name:file_exists
language:c
return:(bool:)
params:(const char*:path)
description:
returns true if path points to a valid, readable file
------
name:file_exists
language:eel2
return:(bool:)
params:("path":)
description:
returns true if path points to a valid, readable file
------
name:reaper.file_exists
language:lua
return:(boolean:)
params:(string:path)
description:
returns true if path points to a valid, readable file
------
name:RPR_file_exists
language:python
return:(Boolean:)
params:(String:path)
description:
returns true if path points to a valid, readable file
------
name:FindTempoTimeSigMarker
language:c
return:(int:)
params:(ReaProject*:project), (double:time)
description:
Find the tempo/time signature marker that falls at or before this time
position (the marker that is in effect as of this time position).
------
name:FindTempoTimeSigMarker
language:eel2
return:(int:)
params:(ReaProject:project), (time:)
description:
Find the tempo/time signature marker that falls at or before this time
position (the marker that is in effect as of this time position).
------
name:reaper.FindTempoTimeSigMarker
language:lua
return:(integer:)
params:(ReaProject:project), (number:time)
description:
Find the tempo/time signature marker that falls at or before this time
position (the marker that is in effect as of this time position).
------
name:RPR_FindTempoTimeSigMarker
language:python
return:(Int:)
params:(ReaProject:project), (Float:time)
description:
Find the tempo/time signature marker that falls at or before this time
position (the marker that is in effect as of this time position).
------
name:format_timestr
language:c
return:(void:)
params:(double:tpos), (char*:buf), (int:buf_sz)
description:
Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.
------
name:format_timestr
language:eel2
return:
params:(tpos:), (#buf:)
description:
Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.
------
name:reaper.format_timestr
language:lua
return:(string:buf)
params:(number:tpos), (string:buf)
description:
Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.
------
name:RPR_format_timestr
language:python
return:(Float:tpos),(String:buf),(Int:buf_sz)
params:(tpos:), (buf:), (buf_sz:)
description:
Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.
------
name:format_timestr_len
language:c
return:(void:)
params:(double:tpos), (char*:buf), (int:buf_sz), (double:offset), (int:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
offset is start of where the length will be calculated from
------
name:format_timestr_len
language:eel2
return:
params:(tpos:), (#buf:), (offset:), (int:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
offset is start of where the length will be calculated from
------
name:reaper.format_timestr_len
language:lua
return:(string:buf)
params:(number:tpos), (string:buf), (number:offset), (integer:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
offset is start of where the length will be calculated from
------
name:RPR_format_timestr_len
language:python
return:(Float:tpos),(String:buf),(Int:buf_sz),(Float:offset),(Int:modeoverride)
params:(tpos:), (buf:), (buf_sz:), (offset:), (modeoverride:)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
offset is start of where the length will be calculated from
------
name:format_timestr_pos
language:c
return:(void:)
params:(double:tpos), (char*:buf), (int:buf_sz), (int:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:format_timestr_pos
language:eel2
return:
params:(tpos:), (#buf:), (int:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:reaper.format_timestr_pos
language:lua
return:(string:buf)
params:(number:tpos), (string:buf), (integer:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:RPR_format_timestr_pos
language:python
return:(Float:tpos),(String:buf),(Int:buf_sz),(Int:modeoverride)
params:(tpos:), (buf:), (buf_sz:), (modeoverride:)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:genGuid
language:c
return:(void:)
params:(GUID*:g)
description:

------
name:genGuid
language:eel2
return:
params:(#gGUID:)
description:

------
name:reaper.genGuid
language:lua
return:(string:gGUID)
params:(string:gGUID)
description:

------
name:RPR_genGuid
language:python
return:
params:(GUID:g)
description:

------
name:get_config_var_string
language:c
return:(bool:)
params:(const char*:name), (char*:bufOut), (int:bufOut_sz)
description:
gets ini configuration variable value as string
------
name:get_config_var_string
language:eel2
return:(bool:)
params:("name":), (#buf:)
description:
gets ini configuration variable value as string
------
name:reaper.get_config_var_string
language:lua
return:(boolean:retval),(string:buf)
params:(string:name)
description:
gets ini configuration variable value as string
------
name:RPR_get_config_var_string
language:python
return:(Boolean:retval),(String:name),(String:bufOut),(Int:bufOut_sz)
params:(name:), (bufOut:), (bufOut_sz:)
description:
gets ini configuration variable value as string
------
name:get_ini_file
language:c
return:(const:char*)
params:
description:
Get reaper.ini full filename.
------
name:get_ini_file
language:eel2
return:(bool:)
params:(#retval:)
description:
Get reaper.ini full filename.
------
name:reaper.get_ini_file
language:lua
return:(string:)
params:
description:
Get reaper.ini full filename.
------
name:RPR_get_ini_file
language:python
return:(String:)
params:
description:
Get reaper.ini full filename.
------
name:GetActiveTake
language:c
return:(MediaItem_Take*:)
params:(MediaItem*:item)
description:
get the active take in this item
------
name:GetActiveTake
language:eel2
return:(MediaItem_Take:)
params:(MediaItem:item)
description:
get the active take in this item
------
name:reaper.GetActiveTake
language:lua
return:(MediaItem_Take:)
params:(MediaItem:item)
description:
get the active take in this item
------
name:RPR_GetActiveTake
language:python
return:(MediaItem_Take:)
params:(MediaItem:item)
description:
get the active take in this item
------
name:GetAllProjectPlayStates
language:c
return:(int:)
params:(ReaProject*:ignoreProject)
description:
returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)
------
name:GetAllProjectPlayStates
language:eel2
return:(int:)
params:(ReaProject:ignoreProject)
description:
returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)
------
name:reaper.GetAllProjectPlayStates
language:lua
return:(integer:)
params:(ReaProject:ignoreProject)
description:
returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)
------
name:RPR_GetAllProjectPlayStates
language:python
return:(Int:)
params:(ReaProject:ignoreProject)
description:
returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)
------
name:GetAppVersion
language:c
return:(const:char*)
params:
description:

------
name:GetAppVersion
language:eel2
return:(bool:)
params:(#retval:)
description:

------
name:reaper.GetAppVersion
language:lua
return:(string:)
params:
description:

------
name:RPR_GetAppVersion
language:python
return:(String:)
params:
description:

------
name:GetArmedCommand
language:c
return:(int:)
params:(char*:secOut), (int:secOut_sz)
description:
gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.
------
name:GetArmedCommand
language:eel2
return:(int:)
params:(#sec:)
description:
gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.
------
name:reaper.GetArmedCommand
language:lua
return:(integer:retval),(string:sec)
params:
description:
gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.
------
name:RPR_GetArmedCommand
language:python
return:(Int:retval),(String:secOut),(Int:secOut_sz)
params:(secOut:), (secOut_sz:)
description:
gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.
------
name:GetAudioAccessorEndTime
language:c
return:(double:)
params:(AudioAccessor*:accessor)
description:
Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.
------
name:GetAudioAccessorEndTime
language:eel2
return:(double:)
params:(AudioAccessor:accessor)
description:
Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.
------
name:reaper.GetAudioAccessorEndTime
language:lua
return:(number:)
params:(AudioAccessor:accessor)
description:
Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.
------
name:RPR_GetAudioAccessorEndTime
language:python
return:(Float:)
params:(AudioAccessor:accessor)
description:
Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.
------
name:GetAudioAccessorHash
language:c
return:(void:)
params:(AudioAccessor*:accessor), (char*:hashNeed128)
description:
Deprecated. See AudioAccessorStateChanged instead.
------
name:GetAudioAccessorHash
language:eel2
return:
params:(AudioAccessor:accessor), (#hashNeed128:)
description:
Deprecated. See AudioAccessorStateChanged instead.
------
name:reaper.GetAudioAccessorHash
language:lua
return:(string:hashNeed128)
params:(AudioAccessor:accessor), (string:hashNeed128)
description:
Deprecated. See AudioAccessorStateChanged instead.
------
name:RPR_GetAudioAccessorHash
language:python
return:(AudioAccessor:accessor),(String:hashNeed128)
params:(accessor:), (hashNeed128:)
description:
Deprecated. See AudioAccessorStateChanged instead.
------
name:GetAudioAccessorSamples
language:c
return:(int:)
params:(AudioAccessor*:accessor), (int:samplerate), (int:numchannels), (double:starttime_sec), (int:numsamplesperchannel), (double*:samplebuffer)
description:
Get a block of samples from the audio accessor. Samples are extracted
immediately pre-FX, and returned interleaved (first sample of first
channel, first sample of second channel...). Returns 0 if no audio, 1 if
audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.
This function has special handling in Python, and only returns two
objects, the API function return value, and the sample buffer. Example
usage:
tr = RPR_GetTrack(0, 0)
aa = RPR_CreateTrackAudioAccessor(tr)
buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
pos = 0.0
(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
# buf now holds the first 2*1024 audio samples from the track.
# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.
------
name:GetAudioAccessorSamples
language:eel2
return:(int:)
params:(AudioAccessor:accessor), (int:samplerate), (int:numchannels), (starttime_sec:), (int:numsamplesperchannel), (buffer_ptr:samplebuffer)
description:
Get a block of samples from the audio accessor. Samples are extracted
immediately pre-FX, and returned interleaved (first sample of first
channel, first sample of second channel...). Returns 0 if no audio, 1 if
audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.
This function has special handling in Python, and only returns two
objects, the API function return value, and the sample buffer. Example
usage:
tr = RPR_GetTrack(0, 0)
aa = RPR_CreateTrackAudioAccessor(tr)
buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
pos = 0.0
(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
# buf now holds the first 2*1024 audio samples from the track.
# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.
------
name:reaper.GetAudioAccessorSamples
language:lua
return:(integer:)
params:(AudioAccessor:accessor), (integer:samplerate), (integer:numchannels), (number:starttime_sec), (integer:numsamplesperchannel), (reaper_array:samplebuffer)
description:
Get a block of samples from the audio accessor. Samples are extracted
immediately pre-FX, and returned interleaved (first sample of first
channel, first sample of second channel...). Returns 0 if no audio, 1 if
audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.
This function has special handling in Python, and only returns two
objects, the API function return value, and the sample buffer. Example
usage:
tr = RPR_GetTrack(0, 0)
aa = RPR_CreateTrackAudioAccessor(tr)
buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
pos = 0.0
(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
# buf now holds the first 2*1024 audio samples from the track.
# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.
------
name:RPR_GetAudioAccessorSamples
language:python
return:(Int:retval),(AudioAccessor:accessor),(Int:samplerate),(Int:numchannels),(Float:starttime_sec),(Int:numsamplesperchannel),(Float:samplebuffer)
params:(accessor:), (samplerate:), (numchannels:), (starttime_sec:), (numsamplesperchannel:), (samplebuffer:)
description:
Get a block of samples from the audio accessor. Samples are extracted
immediately pre-FX, and returned interleaved (first sample of first
channel, first sample of second channel...). Returns 0 if no audio, 1 if
audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.
This function has special handling in Python, and only returns two
objects, the API function return value, and the sample buffer. Example
usage:
tr = RPR_GetTrack(0, 0)
aa = RPR_CreateTrackAudioAccessor(tr)
buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
pos = 0.0
(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
# buf now holds the first 2*1024 audio samples from the track.
# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.
------
name:GetAudioAccessorStartTime
language:c
return:(double:)
params:(AudioAccessor*:accessor)
description:
Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:GetAudioAccessorStartTime
language:eel2
return:(double:)
params:(AudioAccessor:accessor)
description:
Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:reaper.GetAudioAccessorStartTime
language:lua
return:(number:)
params:(AudioAccessor:accessor)
description:
Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:RPR_GetAudioAccessorStartTime
language:python
return:(Float:)
params:(AudioAccessor:accessor)
description:
Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.
------
name:GetAudioDeviceInfo
language:c
return:(bool:)
params:(const char*:attribute), (char*:desc), (int:desc_sz)
description:
get information about the currently open audio device. attribute can be
MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown
attribute or device not open.
------
name:GetAudioDeviceInfo
language:eel2
return:(bool:)
params:("attribute":), (#desc:)
description:
get information about the currently open audio device. attribute can be
MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown
attribute or device not open.
------
name:reaper.GetAudioDeviceInfo
language:lua
return:(boolean:retval),(string:desc)
params:(string:attribute), (string:desc)
description:
get information about the currently open audio device. attribute can be
MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown
attribute or device not open.
------
name:RPR_GetAudioDeviceInfo
language:python
return:(Boolean:retval),(String:attribute),(String:desc),(Int:desc_sz)
params:(attribute:), (desc:), (desc_sz:)
description:
get information about the currently open audio device. attribute can be
MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown
attribute or device not open.
------
name:GetConfigWantsDock
language:c
return:(int:)
params:(const char*:ident_str)
description:
gets the dock ID desired by ident_str, if any
------
name:GetConfigWantsDock
language:eel2
return:(int:)
params:("ident_str":)
description:
gets the dock ID desired by ident_str, if any
------
name:reaper.GetConfigWantsDock
language:lua
return:(integer:)
params:(string:ident_str)
description:
gets the dock ID desired by ident_str, if any
------
name:RPR_GetConfigWantsDock
language:python
return:(Int:)
params:(String:ident_str)
description:
gets the dock ID desired by ident_str, if any
------
name:GetCurrentProjectInLoadSave
language:c
return:(ReaProject*:)
params:
description:
returns current project if in load/save (usually only used from project_config_extension_t)
------
name:GetCurrentProjectInLoadSave
language:eel2
return:(ReaProject:)
params:
description:
returns current project if in load/save (usually only used from project_config_extension_t)
------
name:reaper.GetCurrentProjectInLoadSave
language:lua
return:(ReaProject:)
params:
description:
returns current project if in load/save (usually only used from project_config_extension_t)
------
name:RPR_GetCurrentProjectInLoadSave
language:python
return:(ReaProject:)
params:
description:
returns current project if in load/save (usually only used from project_config_extension_t)
------
name:GetCursorContext
language:c
return:(int:)
params:
description:
return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown
------
name:GetCursorContext
language:eel2
return:(int:)
params:
description:
return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown
------
name:reaper.GetCursorContext
language:lua
return:(integer:)
params:
description:
return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown
------
name:RPR_GetCursorContext
language:python
return:(Int:)
params:
description:
return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown
------
name:GetCursorContext2
language:c
return:(int:)
params:(bool:want_last_valid)
description:
0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)
------
name:GetCursorContext2
language:eel2
return:(int:)
params:(bool:want_last_valid)
description:
0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)
------
name:reaper.GetCursorContext2
language:lua
return:(integer:)
params:(boolean:want_last_valid)
description:
0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)
------
name:RPR_GetCursorContext2
language:python
return:(Int:)
params:(Boolean:want_last_valid)
description:
0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)
------
name:GetCursorPosition
language:c
return:(double:)
params:
description:
edit cursor position
------
name:GetCursorPosition
language:eel2
return:(double:)
params:
description:
edit cursor position
------
name:reaper.GetCursorPosition
language:lua
return:(number:)
params:
description:
edit cursor position
------
name:RPR_GetCursorPosition
language:python
return:(Float:)
params:
description:
edit cursor position
------
name:GetCursorPositionEx
language:c
return:(double:)
params:(ReaProject*:proj)
description:
edit cursor position
------
name:GetCursorPositionEx
language:eel2
return:(double:)
params:(ReaProject:proj)
description:
edit cursor position
------
name:reaper.GetCursorPositionEx
language:lua
return:(number:)
params:(ReaProject:proj)
description:
edit cursor position
------
name:RPR_GetCursorPositionEx
language:python
return:(Float:)
params:(ReaProject:proj)
description:
edit cursor position
------
name:GetDisplayedMediaItemColor
language:c
return:(int:)
params:(MediaItem*:item)
description:
see GetDisplayedMediaItemColor2.
------
name:GetDisplayedMediaItemColor
language:eel2
return:(int:)
params:(MediaItem:item)
description:
see GetDisplayedMediaItemColor2.
------
name:reaper.GetDisplayedMediaItemColor
language:lua
return:(integer:)
params:(MediaItem:item)
description:
see GetDisplayedMediaItemColor2.
------
name:RPR_GetDisplayedMediaItemColor
language:python
return:(Int:)
params:(MediaItem:item)
description:
see GetDisplayedMediaItemColor2.
------
name:GetDisplayedMediaItemColor2
language:c
return:(int:)
params:(MediaItem*:item), (MediaItem_Take*:take)
description:
Returns the custom take, item, or track color that is used (according to
the user preference) to color the media item. The returned color is OS
dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return
of zero means "no color", not black.
------
name:GetDisplayedMediaItemColor2
language:eel2
return:(int:)
params:(MediaItem:item), (MediaItem_Take:take)
description:
Returns the custom take, item, or track color that is used (according to
the user preference) to color the media item. The returned color is OS
dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return
of zero means "no color", not black.
------
name:reaper.GetDisplayedMediaItemColor2
language:lua
return:(integer:)
params:(MediaItem:item), (MediaItem_Take:take)
description:
Returns the custom take, item, or track color that is used (according to
the user preference) to color the media item. The returned color is OS
dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return
of zero means "no color", not black.
------
name:RPR_GetDisplayedMediaItemColor2
language:python
return:(Int:)
params:(MediaItem:item), (MediaItem_Take:take)
description:
Returns the custom take, item, or track color that is used (according to
the user preference) to color the media item. The returned color is OS
dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return
of zero means "no color", not black.
------
name:GetEnvelopeInfo_Value
language:c
return:(double:)
params:(TrackEnvelope*:tr), (const char*:parmname)
Valid input for parmname: I_TCPY, I_TCPH, I_TCPY_USED, I_TCPH_USED, P_TRACK, P_ITEM, P_TAKE

description:
Gets an envelope numerical-value attribute:
I_TCPY : int *, Y offset of envelope relative to parent track (may be
separate lane or overlap with track contents)I_TCPH : int *, visible
height of envelopeI_TCPY_USED : int *, Y offset of envelope relative to
parent track, exclusive of paddingI_TCPH_USED : int *, visible height of
envelope, exclusive of paddingP_TRACK : MediaTrack *, parent track
pointer (if any)P_ITEM : MediaItem *, parent item pointer (if any)P_TAKE
: MediaItem_Take *, parent take pointer (if any)
------
name:GetEnvelopeInfo_Value
language:eel2
return:(double:)
params:(TrackEnvelope:tr), ("parmname":)
description:
Gets an envelope numerical-value attribute:
I_TCPY : int *, Y offset of envelope relative to parent track (may be
separate lane or overlap with track contents)I_TCPH : int *, visible
height of envelopeI_TCPY_USED : int *, Y offset of envelope relative to
parent track, exclusive of paddingI_TCPH_USED : int *, visible height of
envelope, exclusive of paddingP_TRACK : MediaTrack *, parent track
pointer (if any)P_ITEM : MediaItem *, parent item pointer (if any)P_TAKE
: MediaItem_Take *, parent take pointer (if any)
------
name:reaper.GetEnvelopeInfo_Value
language:lua
return:(number:)
params:(TrackEnvelope:tr), (string:parmname)
Valid input for parmname: I_TCPY, I_TCPH, I_TCPY_USED, I_TCPH_USED, P_TRACK, P_ITEM, P_TAKE

description:
Gets an envelope numerical-value attribute:
I_TCPY : int *, Y offset of envelope relative to parent track (may be
separate lane or overlap with track contents)I_TCPH : int *, visible
height of envelopeI_TCPY_USED : int *, Y offset of envelope relative to
parent track, exclusive of paddingI_TCPH_USED : int *, visible height of
envelope, exclusive of paddingP_TRACK : MediaTrack *, parent track
pointer (if any)P_ITEM : MediaItem *, parent item pointer (if any)P_TAKE
: MediaItem_Take *, parent take pointer (if any)
------
name:RPR_GetEnvelopeInfo_Value
language:python
return:(Float:)
params:(TrackEnvelope:tr), (String:parmname)
Valid input for parmname: I_TCPY, I_TCPH, I_TCPY_USED, I_TCPH_USED, P_TRACK, P_ITEM, P_TAKE

description:
Gets an envelope numerical-value attribute:
I_TCPY : int *, Y offset of envelope relative to parent track (may be
separate lane or overlap with track contents)I_TCPH : int *, visible
height of envelopeI_TCPY_USED : int *, Y offset of envelope relative to
parent track, exclusive of paddingI_TCPH_USED : int *, visible height of
envelope, exclusive of paddingP_TRACK : MediaTrack *, parent track
pointer (if any)P_ITEM : MediaItem *, parent item pointer (if any)P_TAKE
: MediaItem_Take *, parent take pointer (if any)
------
name:GetEnvelopeName
language:c
return:(bool:)
params:(TrackEnvelope*:env), (char*:bufOut), (int:bufOut_sz)
description:

------
name:GetEnvelopeName
language:eel2
return:(bool:)
params:(TrackEnvelope:env), (#buf:)
description:

------
name:reaper.GetEnvelopeName
language:lua
return:(boolean:retval),(string:buf)
params:(TrackEnvelope:env)
description:

------
name:RPR_GetEnvelopeName
language:python
return:(Boolean:retval),(TrackEnvelope:env),(String:bufOut),(Int:bufOut_sz)
params:(env:), (bufOut:), (bufOut_sz:)
description:

------
name:GetEnvelopePoint
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:ptidx), (double*:timeOutOptional), (double*:valueOutOptional), (int*:shapeOutOptional), (double*:tensionOutOptional), (bool*:selectedOutOptional)
description:
Get the attributes of an envelope point. See GetEnvelopePointEx.
------
name:GetEnvelopePoint
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:ptidx), (optional:&time), (optional:&value), (optional int:&shape), (optional:&tension), (optional bool:&selected)
description:
Get the attributes of an envelope point. See GetEnvelopePointEx.
------
name:reaper.GetEnvelopePoint
language:lua
return:(boolean:retval),(optional number:time),(optional number:value),(optional number:shape),(optional number:tension),(optional boolean:selected)
params:(TrackEnvelope:envelope), (integer:ptidx)
description:
Get the attributes of an envelope point. See GetEnvelopePointEx.
------
name:RPR_GetEnvelopePoint
language:python
return:(Boolean:retval),(TrackEnvelope:envelope),(Int:ptidx),(Float:timeOutOptional),(Float:valueOutOptional),(Int:shapeOutOptional),(Float:tensionOutOptional),(Boolean:selectedOutOptional)
params:(envelope:), (ptidx:), (timeOutOptional:), (valueOutOptional:), (shapeOutOptional:), (tensionOutOptional:), (selectedOutOptional:)
description:
Get the attributes of an envelope point. See GetEnvelopePointEx.
------
name:GetEnvelopePointByTime
language:c
return:(int:)
params:(TrackEnvelope*:envelope), (double:time)
description:
Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.
------
name:GetEnvelopePointByTime
language:eel2
return:(int:)
params:(TrackEnvelope:envelope), (time:)
description:
Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.
------
name:reaper.GetEnvelopePointByTime
language:lua
return:(integer:)
params:(TrackEnvelope:envelope), (number:time)
description:
Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.
------
name:RPR_GetEnvelopePointByTime
language:python
return:(Int:)
params:(TrackEnvelope:envelope), (Float:time)
description:
Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.
------
name:GetEnvelopePointByTimeEx
language:c
return:(int:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx), (double:time)
description:
Returns the envelope point at or immediately prior to the given time position.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:GetEnvelopePointByTimeEx
language:eel2
return:(int:)
params:(TrackEnvelope:envelope), (int:autoitem_idx), (time:)
description:
Returns the envelope point at or immediately prior to the given time position.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:reaper.GetEnvelopePointByTimeEx
language:lua
return:(integer:)
params:(TrackEnvelope:envelope), (integer:autoitem_idx), (number:time)
description:
Returns the envelope point at or immediately prior to the given time position.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:RPR_GetEnvelopePointByTimeEx
language:python
return:(Int:)
params:(TrackEnvelope:envelope), (Int:autoitem_idx), (Float:time)
description:
Returns the envelope point at or immediately prior to the given time position.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:GetEnvelopePointEx
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx), (int:ptidx), (double*:timeOutOptional), (double*:valueOutOptional), (int*:shapeOutOptional), (double*:tensionOutOptional), (bool*:selectedOutOptional)
description:
Get the attributes of an envelope point.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:GetEnvelopePointEx
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:autoitem_idx), (int:ptidx), (optional:&time), (optional:&value), (optional int:&shape), (optional:&tension), (optional bool:&selected)
description:
Get the attributes of an envelope point.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:reaper.GetEnvelopePointEx
language:lua
return:(boolean:retval),(optional number:time),(optional number:value),(optional number:shape),(optional number:tension),(optional boolean:selected)
params:(TrackEnvelope:envelope), (integer:autoitem_idx), (integer:ptidx)
description:
Get the attributes of an envelope point.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:RPR_GetEnvelopePointEx
language:python
return:(Boolean:retval),(TrackEnvelope:envelope),(Int:autoitem_idx),(Int:ptidx),(Float:timeOutOptional),(Float:valueOutOptional),(Int:shapeOutOptional),(Float:tensionOutOptional),(Boolean:selectedOutOptional)
params:(envelope:), (autoitem_idx:), (ptidx:), (timeOutOptional:), (valueOutOptional:), (shapeOutOptional:), (tensionOutOptional:), (selectedOutOptional:)
description:
Get the attributes of an envelope point.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:GetEnvelopeScalingMode
language:c
return:(int:)
params:(TrackEnvelope*:env)
description:
Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All
API functions deal with raw envelope point values, to convert raw
from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.
------
name:GetEnvelopeScalingMode
language:eel2
return:(int:)
params:(TrackEnvelope:env)
description:
Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All
API functions deal with raw envelope point values, to convert raw
from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.
------
name:reaper.GetEnvelopeScalingMode
language:lua
return:(integer:)
params:(TrackEnvelope:env)
description:
Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All
API functions deal with raw envelope point values, to convert raw
from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.
------
name:RPR_GetEnvelopeScalingMode
language:python
return:(Int:)
params:(TrackEnvelope:env)
description:
Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All
API functions deal with raw envelope point values, to convert raw
from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.
------
name:GetEnvelopeStateChunk
language:c
return:(bool:)
params:(TrackEnvelope*:env), (char*:strNeedBig), (int:strNeedBig_sz), (bool:isundoOptional)
description:
Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:GetEnvelopeStateChunk
language:eel2
return:(bool:)
params:(TrackEnvelope:env), (#str:), (bool:isundo)
description:
Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:reaper.GetEnvelopeStateChunk
language:lua
return:(boolean:retval),(string:str)
params:(TrackEnvelope:env), (string:str), (boolean:isundo)
description:
Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:RPR_GetEnvelopeStateChunk
language:python
return:(Boolean:retval),(TrackEnvelope:env),(String:strNeedBig),(Int:strNeedBig_sz),(Boolean:isundoOptional)
params:(env:), (strNeedBig:), (strNeedBig_sz:), (isundoOptional:)
description:
Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:GetExePath
language:c
return:(const:char*)
params:
description:
returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER
------
name:GetExePath
language:eel2
return:(bool:)
params:(#retval:)
description:
returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER
------
name:reaper.GetExePath
language:lua
return:(string:)
params:
description:
returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER
------
name:RPR_GetExePath
language:python
return:(String:)
params:
description:
returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER
------
name:GetExtState
language:c
return:(const:char*)
params:(const char*:section), (const char*:key)
description:
Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.
------
name:GetExtState
language:eel2
return:(bool:)
params:(#retval:), ("section":), ("key":)
description:
Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.
------
name:reaper.GetExtState
language:lua
return:(string:)
params:(string:section), (string:key)
description:
Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.
------
name:RPR_GetExtState
language:python
return:(String:)
params:(String:section), (String:key)
description:
Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.
------
name:GetFocusedFX
language:c
return:(int:)
params:(int*:tracknumberOut), (int*:itemnumberOut), (int*:fxnumberOut)
description:
Returns 1 if a track FX window has focus or was the last focused and
still open, 2 if an item FX window has focus or was the last focused and
still open, 0 if no FX window has focus. tracknumber==0 means the
master track, 1 means track 1, etc. itemnumber and fxnumber are
zero-based. If item FX, fxnumber will have the high word be the take
index, the low word the FX index. See GetLastTouchedFX.
------
name:GetFocusedFX
language:eel2
return:(int:)
params:(int:&tracknumber), (int:&itemnumber), (int:&fxnumber)
description:
Returns 1 if a track FX window has focus or was the last focused and
still open, 2 if an item FX window has focus or was the last focused and
still open, 0 if no FX window has focus. tracknumber==0 means the
master track, 1 means track 1, etc. itemnumber and fxnumber are
zero-based. If item FX, fxnumber will have the high word be the take
index, the low word the FX index. See GetLastTouchedFX.
------
name:reaper.GetFocusedFX
language:lua
return:(integer:retval),(number:tracknumber),(number:itemnumber),(number:fxnumber)
params:
description:
Returns 1 if a track FX window has focus or was the last focused and
still open, 2 if an item FX window has focus or was the last focused and
still open, 0 if no FX window has focus. tracknumber==0 means the
master track, 1 means track 1, etc. itemnumber and fxnumber are
zero-based. If item FX, fxnumber will have the high word be the take
index, the low word the FX index. See GetLastTouchedFX.
------
name:RPR_GetFocusedFX
language:python
return:(Int:retval),(Int:tracknumberOut),(Int:itemnumberOut),(Int:fxnumberOut)
params:(tracknumberOut:), (itemnumberOut:), (fxnumberOut:)
description:
Returns 1 if a track FX window has focus or was the last focused and
still open, 2 if an item FX window has focus or was the last focused and
still open, 0 if no FX window has focus. tracknumber==0 means the
master track, 1 means track 1, etc. itemnumber and fxnumber are
zero-based. If item FX, fxnumber will have the high word be the take
index, the low word the FX index. See GetLastTouchedFX.
------
name:GetFreeDiskSpaceForRecordPath
language:c
return:(int:)
params:(ReaProject*:proj), (int:pathidx)
description:
returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.
------
name:GetFreeDiskSpaceForRecordPath
language:eel2
return:(int:)
params:(ReaProject:proj), (int:pathidx)
description:
returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.
------
name:reaper.GetFreeDiskSpaceForRecordPath
language:lua
return:(integer:)
params:(ReaProject:proj), (integer:pathidx)
description:
returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.
------
name:RPR_GetFreeDiskSpaceForRecordPath
language:python
return:(Int:)
params:(ReaProject:proj), (Int:pathidx)
description:
returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.
------
name:GetFXEnvelope
language:c
return:(TrackEnvelope*:)
params:(MediaTrack*:track), (int:fxindex), (int:parameterindex), (bool:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:GetFXEnvelope
language:eel2
return:(TrackEnvelope:)
params:(MediaTrack:track), (int:fxindex), (int:parameterindex), (bool:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:reaper.GetFXEnvelope
language:lua
return:(TrackEnvelope:)
params:(MediaTrack:track), (integer:fxindex), (integer:parameterindex), (boolean:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:RPR_GetFXEnvelope
language:python
return:(TrackEnvelope:)
params:(MediaTrack:track), (Int:fxindex), (Int:parameterindex), (Boolean:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:GetGlobalAutomationOverride
language:c
return:(int:)
params:
description:
return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass
------
name:GetGlobalAutomationOverride
language:eel2
return:(int:)
params:
description:
return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass
------
name:reaper.GetGlobalAutomationOverride
language:lua
return:(integer:)
params:
description:
return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass
------
name:RPR_GetGlobalAutomationOverride
language:python
return:(Int:)
params:
description:
return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass
------
name:GetHZoomLevel
language:c
return:(double:)
params:
description:
returns pixels/second
------
name:GetHZoomLevel
language:eel2
return:(double:)
params:
description:
returns pixels/second
------
name:reaper.GetHZoomLevel
language:lua
return:(number:)
params:
description:
returns pixels/second
------
name:RPR_GetHZoomLevel
language:python
return:(Float:)
params:
description:
returns pixels/second
------
name:GetInputChannelName
language:c
return:(const:char*)
params:(int:channelIndex)
description:

------
name:GetInputChannelName
language:eel2
return:(bool:)
params:(#retval:), (int:channelIndex)
description:

------
name:reaper.GetInputChannelName
language:lua
return:(string:)
params:(integer:channelIndex)
description:

------
name:RPR_GetInputChannelName
language:python
return:(String:)
params:(Int:channelIndex)
description:

------
name:GetInputOutputLatency
language:c
return:(void:)
params:(int*:inputlatencyOut), (int*:outputLatencyOut)
description:
Gets the audio device input/output latency in samples
------
name:GetInputOutputLatency
language:eel2
return:
params:(int:&inputlatency), (int:&outputLatency)
description:
Gets the audio device input/output latency in samples
------
name:reaper.GetInputOutputLatency
language:lua
return:(number:inputlatency),(number:outputLatency)
params:
description:
Gets the audio device input/output latency in samples
------
name:RPR_GetInputOutputLatency
language:python
return:(Int:inputlatencyOut),(Int:outputLatencyOut)
params:(inputlatencyOut:), (outputLatencyOut:)
description:
Gets the audio device input/output latency in samples
------
name:GetItemEditingTime2
language:c
return:(double:)
params:(PCM_source**:which_itemOut), (int*:flagsOut)
description:
returns time of relevant edit, set which_item to the pcm_source (if
applicable), flags (if specified) will be set to 1 for edge resizing, 2
for fade change, 4 for item move, 8 for item slip edit (edit cursor time
or start of item)
------
name:GetItemEditingTime2
language:eel2
return:(double:)
params:(PCM_source:&which_item), (int:&flags)
description:
returns time of relevant edit, set which_item to the pcm_source (if
applicable), flags (if specified) will be set to 1 for edge resizing, 2
for fade change, 4 for item move, 8 for item slip edit (edit cursor time
or start of item)
------
name:reaper.GetItemEditingTime2
language:lua
return:(number:),(PCM_source:which_item),(number:flags)
params:
description:
returns time of relevant edit, set which_item to the pcm_source (if
applicable), flags (if specified) will be set to 1 for edge resizing, 2
for fade change, 4 for item move, 8 for item slip edit (edit cursor time
or start of item)
------
name:RPR_GetItemEditingTime2
language:python
return:(Float:retval),(PCM_source*:which_itemOut),(Int:flagsOut)
params:(which_itemOut:), (flagsOut:)
description:
returns time of relevant edit, set which_item to the pcm_source (if
applicable), flags (if specified) will be set to 1 for edge resizing, 2
for fade change, 4 for item move, 8 for item slip edit (edit cursor time
or start of item)
------
name:GetItemFromPoint
language:c
return:(MediaItem*:)
params:(int:screen_x), (int:screen_y), (bool:allow_locked), (MediaItem_Take**:takeOutOptional)
description:
Returns the first item at the screen coordinates specified. If
allow_locked is false, locked items are ignored. If takeOutOptional
specified, returns the take hit.
------
name:GetItemFromPoint
language:eel2
return:(MediaItem:)
params:(int:screen_x), (int:screen_y), (bool:allow_locked), (MediaItem_Take:&take)
description:
Returns the first item at the screen coordinates specified. If
allow_locked is false, locked items are ignored. If takeOutOptional
specified, returns the take hit.
------
name:reaper.GetItemFromPoint
language:lua
return:(MediaItem:),(MediaItem_Take:take)
params:(integer:screen_x), (integer:screen_y), (boolean:allow_locked)
description:
Returns the first item at the screen coordinates specified. If
allow_locked is false, locked items are ignored. If takeOutOptional
specified, returns the take hit.
------
name:RPR_GetItemFromPoint
language:python
return:(MediaItem:)
params:(Int:screen_x), (Int:screen_y), (Boolean:allow_locked), (MediaItem_Take*:takeOutOptional)
description:
Returns the first item at the screen coordinates specified. If
allow_locked is false, locked items are ignored. If takeOutOptional
specified, returns the take hit.
------
name:GetItemProjectContext
language:c
return:(ReaProject*:)
params:(MediaItem*:item)
description:

------
name:GetItemProjectContext
language:eel2
return:(ReaProject:)
params:(MediaItem:item)
description:

------
name:reaper.GetItemProjectContext
language:lua
return:(ReaProject:)
params:(MediaItem:item)
description:

------
name:RPR_GetItemProjectContext
language:python
return:(ReaProject:)
params:(MediaItem:item)
description:

------
name:GetItemStateChunk
language:c
return:(bool:)
params:(MediaItem*:item), (char*:strNeedBig), (int:strNeedBig_sz), (bool:isundoOptional)
description:
Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:GetItemStateChunk
language:eel2
return:(bool:)
params:(MediaItem:item), (#str:), (bool:isundo)
description:
Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:reaper.GetItemStateChunk
language:lua
return:(boolean:retval),(string:str)
params:(MediaItem:item), (string:str), (boolean:isundo)
description:
Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:RPR_GetItemStateChunk
language:python
return:(Boolean:retval),(MediaItem:item),(String:strNeedBig),(Int:strNeedBig_sz),(Boolean:isundoOptional)
params:(item:), (strNeedBig:), (strNeedBig_sz:), (isundoOptional:)
description:
Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:GetLastColorThemeFile
language:c
return:(const:char*)
params:
description:

------
name:GetLastColorThemeFile
language:eel2
return:(bool:)
params:(#retval:)
description:

------
name:reaper.GetLastColorThemeFile
language:lua
return:(string:)
params:
description:

------
name:RPR_GetLastColorThemeFile
language:python
return:(String:)
params:
description:

------
name:GetLastMarkerAndCurRegion
language:c
return:(void:)
params:(ReaProject*:proj), (double:time), (int*:markeridxOut), (int*:regionidxOut)
description:
Get the last project marker before time, and/or the project region that
includes time. markeridx and regionidx are returned not necessarily as
the displayed marker/region index, but as the index that can be passed
to EnumProjectMarkers. Either or both of markeridx and regionidx may be
NULL. See EnumProjectMarkers.
------
name:GetLastMarkerAndCurRegion
language:eel2
return:
params:(ReaProject:proj), (time:), (int:&markeridx), (int:&regionidx)
description:
Get the last project marker before time, and/or the project region that
includes time. markeridx and regionidx are returned not necessarily as
the displayed marker/region index, but as the index that can be passed
to EnumProjectMarkers. Either or both of markeridx and regionidx may be
NULL. See EnumProjectMarkers.
------
name:reaper.GetLastMarkerAndCurRegion
language:lua
return:(number:markeridx),(number:regionidx)
params:(ReaProject:proj), (number:time)
description:
Get the last project marker before time, and/or the project region that
includes time. markeridx and regionidx are returned not necessarily as
the displayed marker/region index, but as the index that can be passed
to EnumProjectMarkers. Either or both of markeridx and regionidx may be
NULL. See EnumProjectMarkers.
------
name:RPR_GetLastMarkerAndCurRegion
language:python
return:(ReaProject:proj),(Float:time),(Int:markeridxOut),(Int:regionidxOut)
params:(proj:), (time:), (markeridxOut:), (regionidxOut:)
description:
Get the last project marker before time, and/or the project region that
includes time. markeridx and regionidx are returned not necessarily as
the displayed marker/region index, but as the index that can be passed
to EnumProjectMarkers. Either or both of markeridx and regionidx may be
NULL. See EnumProjectMarkers.
------
name:GetLastTouchedFX
language:c
return:(bool:)
params:(int*:tracknumberOut), (int*:fxnumberOut), (int*:paramnumberOut)
description:
Returns true if the last touched FX parameter is valid, false otherwise.
The low word of tracknumber is the 1-based track index -- 0 means the
master track, 1 means track 1, etc. If the high word of tracknumber is
nonzero, it refers to the 1-based item index (1 is the first item on the
track, etc). For track FX, the low 24 bits of fxnumber refer to the FX
index in the chain, and if the next 8 bits are 01, then the FX is record
FX. For item FX, the low word defines the FX index in the chain, and
the high word defines the take number. See GetFocusedFX.
------
name:GetLastTouchedFX
language:eel2
return:(bool:)
params:(int:&tracknumber), (int:&fxnumber), (int:&paramnumber)
description:
Returns true if the last touched FX parameter is valid, false otherwise.
The low word of tracknumber is the 1-based track index -- 0 means the
master track, 1 means track 1, etc. If the high word of tracknumber is
nonzero, it refers to the 1-based item index (1 is the first item on the
track, etc). For track FX, the low 24 bits of fxnumber refer to the FX
index in the chain, and if the next 8 bits are 01, then the FX is record
FX. For item FX, the low word defines the FX index in the chain, and
the high word defines the take number. See GetFocusedFX.
------
name:reaper.GetLastTouchedFX
language:lua
return:(boolean:retval),(number:tracknumber),(number:fxnumber),(number:paramnumber)
params:
description:
Returns true if the last touched FX parameter is valid, false otherwise.
The low word of tracknumber is the 1-based track index -- 0 means the
master track, 1 means track 1, etc. If the high word of tracknumber is
nonzero, it refers to the 1-based item index (1 is the first item on the
track, etc). For track FX, the low 24 bits of fxnumber refer to the FX
index in the chain, and if the next 8 bits are 01, then the FX is record
FX. For item FX, the low word defines the FX index in the chain, and
the high word defines the take number. See GetFocusedFX.
------
name:RPR_GetLastTouchedFX
language:python
return:(Boolean:retval),(Int:tracknumberOut),(Int:fxnumberOut),(Int:paramnumberOut)
params:(tracknumberOut:), (fxnumberOut:), (paramnumberOut:)
description:
Returns true if the last touched FX parameter is valid, false otherwise.
The low word of tracknumber is the 1-based track index -- 0 means the
master track, 1 means track 1, etc. If the high word of tracknumber is
nonzero, it refers to the 1-based item index (1 is the first item on the
track, etc). For track FX, the low 24 bits of fxnumber refer to the FX
index in the chain, and if the next 8 bits are 01, then the FX is record
FX. For item FX, the low word defines the FX index in the chain, and
the high word defines the take number. See GetFocusedFX.
------
name:GetLastTouchedTrack
language:c
return:(MediaTrack*:)
params:
description:

------
name:GetLastTouchedTrack
language:eel2
return:(MediaTrack:)
params:
description:

------
name:reaper.GetLastTouchedTrack
language:lua
return:(MediaTrack:)
params:
description:

------
name:RPR_GetLastTouchedTrack
language:python
return:(MediaTrack:)
params:
description:

------
name:GetMainHwnd
language:c
return:(HWND:)
params:
description:

------
name:GetMainHwnd
language:eel2
return:(HWND:)
params:
description:

------
name:reaper.GetMainHwnd
language:lua
return:(HWND:)
params:
description:

------
name:RPR_GetMainHwnd
language:python
return:(HWND:)
params:
description:

------
name:GetMasterMuteSoloFlags
language:c
return:(int:)
params:
description:
&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.
------
name:GetMasterMuteSoloFlags
language:eel2
return:(int:)
params:
description:
&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.
------
name:reaper.GetMasterMuteSoloFlags
language:lua
return:(integer:)
params:
description:
&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.
------
name:RPR_GetMasterMuteSoloFlags
language:python
return:(Int:)
params:
description:
&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.
------
name:GetMasterTrack
language:c
return:(MediaTrack*:)
params:(ReaProject*:proj)
description:

------
name:GetMasterTrack
language:eel2
return:(MediaTrack:)
params:(ReaProject:proj)
description:

------
name:reaper.GetMasterTrack
language:lua
return:(MediaTrack:)
params:(ReaProject:proj)
description:

------
name:RPR_GetMasterTrack
language:python
return:(MediaTrack:)
params:(ReaProject:proj)
description:

------
name:GetMasterTrackVisibility
language:c
return:(int:)
params:
description:
returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.
------
name:GetMasterTrackVisibility
language:eel2
return:(int:)
params:
description:
returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.
------
name:reaper.GetMasterTrackVisibility
language:lua
return:(integer:)
params:
description:
returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.
------
name:RPR_GetMasterTrackVisibility
language:python
return:(Int:)
params:
description:
returns &1 if the master track is visible in the TCP, &2 if visible in the mixer. See SetMasterTrackVisibility.
------
name:GetMaxMidiInputs
language:c
return:(int:)
params:
description:
returns max dev for midi inputs/outputs
------
name:GetMaxMidiInputs
language:eel2
return:(int:)
params:
description:
returns max dev for midi inputs/outputs
------
name:reaper.GetMaxMidiInputs
language:lua
return:(integer:)
params:
description:
returns max dev for midi inputs/outputs
------
name:RPR_GetMaxMidiInputs
language:python
return:(Int:)
params:
description:
returns max dev for midi inputs/outputs
------
name:GetMaxMidiOutputs
language:c
return:(int:)
params:
description:

------
name:GetMaxMidiOutputs
language:eel2
return:(int:)
params:
description:

------
name:reaper.GetMaxMidiOutputs
language:lua
return:(integer:)
params:
description:

------
name:RPR_GetMaxMidiOutputs
language:python
return:(Int:)
params:
description:

------
name:GetMediaItem
language:c
return:(MediaItem*:)
params:(ReaProject*:proj), (int:itemidx)
description:
get an item from a project by item count (zero-based) (proj=0 for active project)
------
name:GetMediaItem
language:eel2
return:(MediaItem:)
params:(ReaProject:proj), (int:itemidx)
description:
get an item from a project by item count (zero-based) (proj=0 for active project)
------
name:reaper.GetMediaItem
language:lua
return:(MediaItem:)
params:(ReaProject:proj), (integer:itemidx)
description:
get an item from a project by item count (zero-based) (proj=0 for active project)
------
name:RPR_GetMediaItem
language:python
return:(MediaItem:)
params:(ReaProject:proj), (Int:itemidx)
description:
get an item from a project by item count (zero-based) (proj=0 for active project)
------
name:GetMediaItem_Track
language:c
return:(MediaTrack*:)
params:(MediaItem*:item)
description:
Get parent track of media item
------
name:GetMediaItem_Track
language:eel2
return:(MediaTrack:)
params:(MediaItem:item)
description:
Get parent track of media item
------
name:reaper.GetMediaItem_Track
language:lua
return:(MediaTrack:)
params:(MediaItem:item)
description:
Get parent track of media item
------
name:RPR_GetMediaItem_Track
language:python
return:(MediaTrack:)
params:(MediaItem:item)
description:
Get parent track of media item
------
name:GetMediaItemInfo_Value
language:c
return:(double:)
params:(MediaItem*:item), (const char*:parmname)
Valid input for parmname: B_MUTE, B_LOOPSRC, B_ALLTAKESPLAY, B_UISEL, C_BEATATTACHMODE, C_AUTOSTRETCH, C_LOCK, D_VOL, D_POSITION, D_LENGTH, D_SNAPOFFSET, D_FADEINLEN, D_FADEOUTLEN, D_FADEINDIR, D_FADEOUTDIR, D_FADEINLEN_AUTO, D_FADEOUTLEN_AUTO, C_FADEINSHAPE, C_FADEOUTSHAPE, I_GROUPID, I_LASTY, I_LASTH, I_CUSTOMCOLOR, I_CURTAKE, IP_ITEMNUMBER, F_FREEMODE_Y, F_FREEMODE_H, P_TRACK

description:
Get media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
P_TRACK : MediaTrack * (read-only)
------
name:GetMediaItemInfo_Value
language:eel2
return:(double:)
params:(MediaItem:item), ("parmname":)
description:
Get media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
P_TRACK : MediaTrack * (read-only)
------
name:reaper.GetMediaItemInfo_Value
language:lua
return:(number:)
params:(MediaItem:item), (string:parmname)
Valid input for parmname: B_MUTE, B_LOOPSRC, B_ALLTAKESPLAY, B_UISEL, C_BEATATTACHMODE, C_AUTOSTRETCH, C_LOCK, D_VOL, D_POSITION, D_LENGTH, D_SNAPOFFSET, D_FADEINLEN, D_FADEOUTLEN, D_FADEINDIR, D_FADEOUTDIR, D_FADEINLEN_AUTO, D_FADEOUTLEN_AUTO, C_FADEINSHAPE, C_FADEOUTSHAPE, I_GROUPID, I_LASTY, I_LASTH, I_CUSTOMCOLOR, I_CURTAKE, IP_ITEMNUMBER, F_FREEMODE_Y, F_FREEMODE_H, P_TRACK

description:
Get media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
P_TRACK : MediaTrack * (read-only)
------
name:RPR_GetMediaItemInfo_Value
language:python
return:(Float:)
params:(MediaItem:item), (String:parmname)
Valid input for parmname: B_MUTE, B_LOOPSRC, B_ALLTAKESPLAY, B_UISEL, C_BEATATTACHMODE, C_AUTOSTRETCH, C_LOCK, D_VOL, D_POSITION, D_LENGTH, D_SNAPOFFSET, D_FADEINLEN, D_FADEOUTLEN, D_FADEINDIR, D_FADEOUTDIR, D_FADEINLEN_AUTO, D_FADEOUTLEN_AUTO, C_FADEINSHAPE, C_FADEOUTSHAPE, I_GROUPID, I_LASTY, I_LASTH, I_CUSTOMCOLOR, I_CURTAKE, IP_ITEMNUMBER, F_FREEMODE_Y, F_FREEMODE_H, P_TRACK

description:
Get media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
P_TRACK : MediaTrack * (read-only)
------
name:GetMediaItemNumTakes
language:c
return:(int:)
params:(MediaItem*:item)
description:

------
name:GetMediaItemNumTakes
language:eel2
return:(int:)
params:(MediaItem:item)
description:

------
name:reaper.GetMediaItemNumTakes
language:lua
return:(integer:)
params:(MediaItem:item)
description:

------
name:RPR_GetMediaItemNumTakes
language:python
return:(Int:)
params:(MediaItem:item)
description:

------
name:GetMediaItemTake
language:c
return:(MediaItem_Take*:)
params:(MediaItem*:item), (int:tk)
description:

------
name:GetMediaItemTake
language:eel2
return:(MediaItem_Take:)
params:(MediaItem:item), (int:tk)
description:

------
name:reaper.GetMediaItemTake
language:lua
return:(MediaItem_Take:)
params:(MediaItem:item), (integer:tk)
description:

------
name:RPR_GetMediaItemTake
language:python
return:(MediaItem_Take:)
params:(MediaItem:item), (Int:tk)
description:

------
name:GetMediaItemTake_Item
language:c
return:(MediaItem*:)
params:(MediaItem_Take*:take)
description:
Get parent item of media item take
------
name:GetMediaItemTake_Item
language:eel2
return:(MediaItem:)
params:(MediaItem_Take:take)
description:
Get parent item of media item take
------
name:reaper.GetMediaItemTake_Item
language:lua
return:(MediaItem:)
params:(MediaItem_Take:take)
description:
Get parent item of media item take
------
name:RPR_GetMediaItemTake_Item
language:python
return:(MediaItem:)
params:(MediaItem_Take:take)
description:
Get parent item of media item take
------
name:GetMediaItemTake_Peaks
language:c
return:(int:)
params:(MediaItem_Take*:take), (double:peakrate), (double:starttime), (int:numchannels), (int:numsamplesperchannel), (int:want_extra_type), (double*:buf)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:GetMediaItemTake_Peaks
language:eel2
return:(int:)
params:(MediaItem_Take:take), (peakrate:), (starttime:), (int:numchannels), (int:numsamplesperchannel), (int:want_extra_type), (buffer_ptr:buf)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:reaper.GetMediaItemTake_Peaks
language:lua
return:(integer:)
params:(MediaItem_Take:take), (number:peakrate), (number:starttime), (integer:numchannels), (integer:numsamplesperchannel), (integer:want_extra_type), (reaper_array:buf)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:RPR_GetMediaItemTake_Peaks
language:python
return:(Int:retval),(MediaItem_Take:take),(Float:peakrate),(Float:starttime),(Int:numchannels),(Int:numsamplesperchannel),(Int:want_extra_type),(Float:buf)
params:(take:), (peakrate:), (starttime:), (numchannels:), (numsamplesperchannel:), (want_extra_type:), (buf:)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:GetMediaItemTake_Source
language:c
return:(PCM_source*:)
params:(MediaItem_Take*:take)
description:
Get media source of media item take
------
name:GetMediaItemTake_Source
language:eel2
return:(PCM_source:)
params:(MediaItem_Take:take)
description:
Get media source of media item take
------
name:reaper.GetMediaItemTake_Source
language:lua
return:(PCM_source:)
params:(MediaItem_Take:take)
description:
Get media source of media item take
------
name:RPR_GetMediaItemTake_Source
language:python
return:(PCM_source:)
params:(MediaItem_Take:take)
description:
Get media source of media item take
------
name:GetMediaItemTake_Track
language:c
return:(MediaTrack*:)
params:(MediaItem_Take*:take)
description:
Get parent track of media item take
------
name:GetMediaItemTake_Track
language:eel2
return:(MediaTrack:)
params:(MediaItem_Take:take)
description:
Get parent track of media item take
------
name:reaper.GetMediaItemTake_Track
language:lua
return:(MediaTrack:)
params:(MediaItem_Take:take)
description:
Get parent track of media item take
------
name:RPR_GetMediaItemTake_Track
language:python
return:(MediaTrack:)
params:(MediaItem_Take:take)
description:
Get parent track of media item take
------
name:GetMediaItemTakeByGUID
language:c
return:(MediaItem_Take*:)
params:(ReaProject*:project), (const GUID*:guid)
description:

------
name:GetMediaItemTakeByGUID
language:eel2
return:(MediaItem_Take:)
params:(ReaProject:project), ("guidGUID":)
description:

------
name:reaper.GetMediaItemTakeByGUID
language:lua
return:(MediaItem_Take:)
params:(ReaProject:project), (string:guidGUID)
description:

------
name:RPR_GetMediaItemTakeByGUID
language:python
return:(MediaItem_Take:)
params:(ReaProject:project), (const GUID:guid)
description:

------
name:GetMediaItemTakeInfo_Value
language:c
return:(double:)
params:(MediaItem_Take*:take), (const char*:parmname)
Valid input for parmname: D_STARTOFFS, D_VOL, D_PAN, D_PANLAW, D_PLAYRATE, D_PITCH, B_PPITCH, I_CHANMODE, I_PITCHMODE, I_CUSTOMCOLOR, IP_TAKENUMBER, P_TRACK, P_ITEM, P_SOURCE

description:
Get media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
P_TRACK : pointer to MediaTrack (read-only)
P_ITEM : pointer to MediaItem (read-only)
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
------
name:GetMediaItemTakeInfo_Value
language:eel2
return:(double:)
params:(MediaItem_Take:take), ("parmname":)
description:
Get media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
P_TRACK : pointer to MediaTrack (read-only)
P_ITEM : pointer to MediaItem (read-only)
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
------
name:reaper.GetMediaItemTakeInfo_Value
language:lua
return:(number:)
params:(MediaItem_Take:take), (string:parmname)
Valid input for parmname: D_STARTOFFS, D_VOL, D_PAN, D_PANLAW, D_PLAYRATE, D_PITCH, B_PPITCH, I_CHANMODE, I_PITCHMODE, I_CUSTOMCOLOR, IP_TAKENUMBER, P_TRACK, P_ITEM, P_SOURCE

description:
Get media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
P_TRACK : pointer to MediaTrack (read-only)
P_ITEM : pointer to MediaItem (read-only)
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
------
name:RPR_GetMediaItemTakeInfo_Value
language:python
return:(Float:)
params:(MediaItem_Take:take), (String:parmname)
Valid input for parmname: D_STARTOFFS, D_VOL, D_PAN, D_PANLAW, D_PLAYRATE, D_PITCH, B_PPITCH, I_CHANMODE, I_PITCHMODE, I_CUSTOMCOLOR, IP_TAKENUMBER, P_TRACK, P_ITEM, P_SOURCE

description:
Get media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
P_TRACK : pointer to MediaTrack (read-only)
P_ITEM : pointer to MediaItem (read-only)
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
------
name:GetMediaItemTrack
language:c
return:(MediaTrack*:)
params:(MediaItem*:item)
description:

------
name:GetMediaItemTrack
language:eel2
return:(MediaTrack:)
params:(MediaItem:item)
description:

------
name:reaper.GetMediaItemTrack
language:lua
return:(MediaTrack:)
params:(MediaItem:item)
description:

------
name:RPR_GetMediaItemTrack
language:python
return:(MediaTrack:)
params:(MediaItem:item)
description:

------
name:GetMediaSourceFileName
language:c
return:(void:)
params:(PCM_source*:source), (char*:filenamebuf), (int:filenamebuf_sz)
description:
Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.
------
name:GetMediaSourceFileName
language:eel2
return:
params:(PCM_source:source), (#filenamebuf:)
description:
Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.
------
name:reaper.GetMediaSourceFileName
language:lua
return:(string:filenamebuf)
params:(PCM_source:source), (string:filenamebuf)
description:
Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.
------
name:RPR_GetMediaSourceFileName
language:python
return:(PCM_source:source),(String:filenamebuf),(Int:filenamebuf_sz)
params:(source:), (filenamebuf:), (filenamebuf_sz:)
description:
Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.
------
name:GetMediaSourceLength
language:c
return:(double:)
params:(PCM_source*:source), (bool*:lengthIsQNOut)
description:
Returns the length of the source media. If the media source is
beat-based, the length will be in quarter notes, otherwise it will be in
seconds.
------
name:GetMediaSourceLength
language:eel2
return:(double:)
params:(PCM_source:source), (bool:&lengthIsQN)
description:
Returns the length of the source media. If the media source is
beat-based, the length will be in quarter notes, otherwise it will be in
seconds.
------
name:reaper.GetMediaSourceLength
language:lua
return:(number:retval),(boolean:lengthIsQN)
params:(PCM_source:source)
description:
Returns the length of the source media. If the media source is
beat-based, the length will be in quarter notes, otherwise it will be in
seconds.
------
name:RPR_GetMediaSourceLength
language:python
return:(Float:retval),(PCM_source:source),(Boolean:lengthIsQNOut)
params:(source:), (lengthIsQNOut:)
description:
Returns the length of the source media. If the media source is
beat-based, the length will be in quarter notes, otherwise it will be in
seconds.
------
name:GetMediaSourceNumChannels
language:c
return:(int:)
params:(PCM_source*:source)
description:
Returns the number of channels in the source media.
------
name:GetMediaSourceNumChannels
language:eel2
return:(int:)
params:(PCM_source:source)
description:
Returns the number of channels in the source media.
------
name:reaper.GetMediaSourceNumChannels
language:lua
return:(integer:)
params:(PCM_source:source)
description:
Returns the number of channels in the source media.
------
name:RPR_GetMediaSourceNumChannels
language:python
return:(Int:)
params:(PCM_source:source)
description:
Returns the number of channels in the source media.
------
name:GetMediaSourceParent
language:c
return:(PCM_source*:)
params:(PCM_source*:src)
description:
Returns the parent source, or NULL if src is the root source. This can
be used to retrieve the parent properties of sections or reversed
sources for example.
------
name:GetMediaSourceParent
language:eel2
return:(PCM_source:)
params:(PCM_source:src)
description:
Returns the parent source, or NULL if src is the root source. This can
be used to retrieve the parent properties of sections or reversed
sources for example.
------
name:reaper.GetMediaSourceParent
language:lua
return:(PCM_source:)
params:(PCM_source:src)
description:
Returns the parent source, or NULL if src is the root source. This can
be used to retrieve the parent properties of sections or reversed
sources for example.
------
name:RPR_GetMediaSourceParent
language:python
return:(PCM_source:)
params:(PCM_source:src)
description:
Returns the parent source, or NULL if src is the root source. This can
be used to retrieve the parent properties of sections or reversed
sources for example.
------
name:GetMediaSourceSampleRate
language:c
return:(int:)
params:(PCM_source*:source)
description:
Returns the sample rate. MIDI source media will return zero.
------
name:GetMediaSourceSampleRate
language:eel2
return:(int:)
params:(PCM_source:source)
description:
Returns the sample rate. MIDI source media will return zero.
------
name:reaper.GetMediaSourceSampleRate
language:lua
return:(integer:)
params:(PCM_source:source)
description:
Returns the sample rate. MIDI source media will return zero.
------
name:RPR_GetMediaSourceSampleRate
language:python
return:(Int:)
params:(PCM_source:source)
description:
Returns the sample rate. MIDI source media will return zero.
------
name:GetMediaSourceType
language:c
return:(void:)
params:(PCM_source*:source), (char*:typebuf), (int:typebuf_sz)
description:
copies the media source type ("WAV", "MIDI", etc) to typebuf
------
name:GetMediaSourceType
language:eel2
return:
params:(PCM_source:source), (#typebuf:)
description:
copies the media source type ("WAV", "MIDI", etc) to typebuf
------
name:reaper.GetMediaSourceType
language:lua
return:(string:typebuf)
params:(PCM_source:source), (string:typebuf)
description:
copies the media source type ("WAV", "MIDI", etc) to typebuf
------
name:RPR_GetMediaSourceType
language:python
return:(PCM_source:source),(String:typebuf),(Int:typebuf_sz)
params:(source:), (typebuf:), (typebuf_sz:)
description:
copies the media source type ("WAV", "MIDI", etc) to typebuf
------
name:GetMediaTrackInfo_Value
language:c
return:(double:)
params:(MediaTrack*:tr), (const char*:parmname)
Valid input for parmname: B_MUTE, B_PHASE, IP_TRACKNUMBER, I_SOLO, I_FXEN, I_RECARM, I_RECINPUT, I_RECMODE, I_RECMON, I_RECMONITEMS, I_AUTOMODE, I_NCHAN, I_SELECTED, I_WNDH, I_TCPH, I_TCPY, I_MCPX, I_MCPY, I_MCPW, I_MCPH, I_FOLDERDEPTH, I_FOLDERCOMPACT, I_MIDIHWOUT, I_PERFFLAGS, I_CUSTOMCOLOR, I_HEIGHTOVERRIDE, B_HEIGHTLOCK, D_VOL, D_PAN, D_WIDTH, D_DUALPANL, D_DUALPANR, I_PANMODE, D_PANLAW, P_ENV:<envchunkname, B_SHOWINMIXER, B_SHOWINTCP, B_MAINSEND, C_MAINSEND_OFFS, B_FREEMODE, C_BEATATTACHMODE, F_MCP_FXSEND_SCALE, F_MCP_SENDRGN_SCALE, I_PLAY_OFFSET_FLAG, D_PLAY_OFFSET, P_PARTRACK, P_PROJECT

description:
Get track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
P_PARTRACK : MediaTrack * : parent track (read-only)
P_PROJECT : ReaProject * : parent project (read-only)
------
name:GetMediaTrackInfo_Value
language:eel2
return:(double:)
params:(MediaTrack:tr), ("parmname":)
description:
Get track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
P_PARTRACK : MediaTrack * : parent track (read-only)
P_PROJECT : ReaProject * : parent project (read-only)
------
name:reaper.GetMediaTrackInfo_Value
language:lua
return:(number:)
params:(MediaTrack:tr), (string:parmname)
Valid input for parmname: B_MUTE, B_PHASE, IP_TRACKNUMBER, I_SOLO, I_FXEN, I_RECARM, I_RECINPUT, I_RECMODE, I_RECMON, I_RECMONITEMS, I_AUTOMODE, I_NCHAN, I_SELECTED, I_WNDH, I_TCPH, I_TCPY, I_MCPX, I_MCPY, I_MCPW, I_MCPH, I_FOLDERDEPTH, I_FOLDERCOMPACT, I_MIDIHWOUT, I_PERFFLAGS, I_CUSTOMCOLOR, I_HEIGHTOVERRIDE, B_HEIGHTLOCK, D_VOL, D_PAN, D_WIDTH, D_DUALPANL, D_DUALPANR, I_PANMODE, D_PANLAW, P_ENV:<envchunkname, B_SHOWINMIXER, B_SHOWINTCP, B_MAINSEND, C_MAINSEND_OFFS, B_FREEMODE, C_BEATATTACHMODE, F_MCP_FXSEND_SCALE, F_MCP_SENDRGN_SCALE, I_PLAY_OFFSET_FLAG, D_PLAY_OFFSET, P_PARTRACK, P_PROJECT

description:
Get track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
P_PARTRACK : MediaTrack * : parent track (read-only)
P_PROJECT : ReaProject * : parent project (read-only)
------
name:RPR_GetMediaTrackInfo_Value
language:python
return:(Float:)
params:(MediaTrack:tr), (String:parmname)
Valid input for parmname: B_MUTE, B_PHASE, IP_TRACKNUMBER, I_SOLO, I_FXEN, I_RECARM, I_RECINPUT, I_RECMODE, I_RECMON, I_RECMONITEMS, I_AUTOMODE, I_NCHAN, I_SELECTED, I_WNDH, I_TCPH, I_TCPY, I_MCPX, I_MCPY, I_MCPW, I_MCPH, I_FOLDERDEPTH, I_FOLDERCOMPACT, I_MIDIHWOUT, I_PERFFLAGS, I_CUSTOMCOLOR, I_HEIGHTOVERRIDE, B_HEIGHTLOCK, D_VOL, D_PAN, D_WIDTH, D_DUALPANL, D_DUALPANR, I_PANMODE, D_PANLAW, P_ENV:<envchunkname, B_SHOWINMIXER, B_SHOWINTCP, B_MAINSEND, C_MAINSEND_OFFS, B_FREEMODE, C_BEATATTACHMODE, F_MCP_FXSEND_SCALE, F_MCP_SENDRGN_SCALE, I_PLAY_OFFSET_FLAG, D_PLAY_OFFSET, P_PARTRACK, P_PROJECT

description:
Get track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
P_PARTRACK : MediaTrack * : parent track (read-only)
P_PROJECT : ReaProject * : parent project (read-only)
------
name:GetMIDIInputName
language:c
return:(bool:)
params:(int:dev), (char*:nameout), (int:nameout_sz)
description:
returns true if device present
------
name:GetMIDIInputName
language:eel2
return:(bool:)
params:(int:dev), (#nameout:)
description:
returns true if device present
------
name:reaper.GetMIDIInputName
language:lua
return:(boolean:retval),(string:nameout)
params:(integer:dev), (string:nameout)
description:
returns true if device present
------
name:RPR_GetMIDIInputName
language:python
return:(Boolean:retval),(Int:dev),(String:nameout),(Int:nameout_sz)
params:(dev:), (nameout:), (nameout_sz:)
description:
returns true if device present
------
name:GetMIDIOutputName
language:c
return:(bool:)
params:(int:dev), (char*:nameout), (int:nameout_sz)
description:
returns true if device present
------
name:GetMIDIOutputName
language:eel2
return:(bool:)
params:(int:dev), (#nameout:)
description:
returns true if device present
------
name:reaper.GetMIDIOutputName
language:lua
return:(boolean:retval),(string:nameout)
params:(integer:dev), (string:nameout)
description:
returns true if device present
------
name:RPR_GetMIDIOutputName
language:python
return:(Boolean:retval),(Int:dev),(String:nameout),(Int:nameout_sz)
params:(dev:), (nameout:), (nameout_sz:)
description:
returns true if device present
------
name:GetMixerScroll
language:c
return:(MediaTrack*:)
params:
description:
Get the leftmost track visible in the mixer
------
name:GetMixerScroll
language:eel2
return:(MediaTrack:)
params:
description:
Get the leftmost track visible in the mixer
------
name:reaper.GetMixerScroll
language:lua
return:(MediaTrack:)
params:
description:
Get the leftmost track visible in the mixer
------
name:RPR_GetMixerScroll
language:python
return:(MediaTrack:)
params:
description:
Get the leftmost track visible in the mixer
------
name:GetMouseModifier
language:c
return:(void:)
params:(const char*:context), (int:modifier_flag), (char*:action), (int:action_sz)
description:
Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
action will be filled in with the command ID number for a built-in mouse modifier
or built-in REAPER command ID, or the custom action ID string.
See SetMouseModifier for more information.
------
name:GetMouseModifier
language:eel2
return:
params:("context":), (int:modifier_flag), (#action:)
description:
Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
action will be filled in with the command ID number for a built-in mouse modifier
or built-in REAPER command ID, or the custom action ID string.
See SetMouseModifier for more information.
------
name:reaper.GetMouseModifier
language:lua
return:(string:action)
params:(string:context), (integer:modifier_flag), (string:action)
description:
Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
action will be filled in with the command ID number for a built-in mouse modifier
or built-in REAPER command ID, or the custom action ID string.
See SetMouseModifier for more information.
------
name:RPR_GetMouseModifier
language:python
return:(String:context),(Int:modifier_flag),(String:action),(Int:action_sz)
params:(context:), (modifier_flag:), (action:), (action_sz:)
description:
Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
action will be filled in with the command ID number for a built-in mouse modifier
or built-in REAPER command ID, or the custom action ID string.
See SetMouseModifier for more information.
------
name:GetMousePosition
language:c
return:(void:)
params:(int*:xOut), (int*:yOut)
description:
get mouse position in screen coordinates
------
name:GetMousePosition
language:eel2
return:
params:(int:&x), (int:&y)
description:
get mouse position in screen coordinates
------
name:reaper.GetMousePosition
language:lua
return:(number:x),(number:y)
params:
description:
get mouse position in screen coordinates
------
name:RPR_GetMousePosition
language:python
return:(Int:xOut),(Int:yOut)
params:(xOut:), (yOut:)
description:
get mouse position in screen coordinates
------
name:GetNumAudioInputs
language:c
return:(int:)
params:
description:
Return number of normal audio hardware inputs available
------
name:GetNumAudioInputs
language:eel2
return:(int:)
params:
description:
Return number of normal audio hardware inputs available
------
name:reaper.GetNumAudioInputs
language:lua
return:(integer:)
params:
description:
Return number of normal audio hardware inputs available
------
name:RPR_GetNumAudioInputs
language:python
return:(Int:)
params:
description:
Return number of normal audio hardware inputs available
------
name:GetNumAudioOutputs
language:c
return:(int:)
params:
description:
Return number of normal audio hardware outputs available
------
name:GetNumAudioOutputs
language:eel2
return:(int:)
params:
description:
Return number of normal audio hardware outputs available
------
name:reaper.GetNumAudioOutputs
language:lua
return:(integer:)
params:
description:
Return number of normal audio hardware outputs available
------
name:RPR_GetNumAudioOutputs
language:python
return:(Int:)
params:
description:
Return number of normal audio hardware outputs available
------
name:GetNumMIDIInputs
language:c
return:(int:)
params:
description:
returns max number of real midi hardware inputs
------
name:GetNumMIDIInputs
language:eel2
return:(int:)
params:
description:
returns max number of real midi hardware inputs
------
name:reaper.GetNumMIDIInputs
language:lua
return:(integer:)
params:
description:
returns max number of real midi hardware inputs
------
name:RPR_GetNumMIDIInputs
language:python
return:(Int:)
params:
description:
returns max number of real midi hardware inputs
------
name:GetNumMIDIOutputs
language:c
return:(int:)
params:
description:
returns max number of real midi hardware outputs
------
name:GetNumMIDIOutputs
language:eel2
return:(int:)
params:
description:
returns max number of real midi hardware outputs
------
name:reaper.GetNumMIDIOutputs
language:lua
return:(integer:)
params:
description:
returns max number of real midi hardware outputs
------
name:RPR_GetNumMIDIOutputs
language:python
return:(Int:)
params:
description:
returns max number of real midi hardware outputs
------
name:GetNumTracks
language:c
return:(int:)
params:
description:

------
name:GetNumTracks
language:eel2
return:(int:)
params:
description:

------
name:reaper.GetNumTracks
language:lua
return:(integer:)
params:
description:

------
name:RPR_GetNumTracks
language:python
return:(Int:)
params:
description:

------
name:GetOS
language:c
return:(const:char*)
params:
description:
Returns "Win32", "Win64", "OSX32", "OSX64", or "Other".
------
name:GetOS
language:eel2
return:(bool:)
params:(#retval:)
description:
Returns "Win32", "Win64", "OSX32", "OSX64", or "Other".
------
name:reaper.GetOS
language:lua
return:(string:)
params:
description:
Returns "Win32", "Win64", "OSX32", "OSX64", or "Other".
------
name:RPR_GetOS
language:python
return:(String:)
params:
description:
Returns "Win32", "Win64", "OSX32", "OSX64", or "Other".
------
name:GetOutputChannelName
language:c
return:(const:char*)
params:(int:channelIndex)
description:

------
name:GetOutputChannelName
language:eel2
return:(bool:)
params:(#retval:), (int:channelIndex)
description:

------
name:reaper.GetOutputChannelName
language:lua
return:(string:)
params:(integer:channelIndex)
description:

------
name:RPR_GetOutputChannelName
language:python
return:(String:)
params:(Int:channelIndex)
description:

------
name:GetOutputLatency
language:c
return:(double:)
params:
description:
returns output latency in seconds
------
name:GetOutputLatency
language:eel2
return:(double:)
params:
description:
returns output latency in seconds
------
name:reaper.GetOutputLatency
language:lua
return:(number:)
params:
description:
returns output latency in seconds
------
name:RPR_GetOutputLatency
language:python
return:(Float:)
params:
description:
returns output latency in seconds
------
name:GetParentTrack
language:c
return:(MediaTrack*:)
params:(MediaTrack*:track)
description:

------
name:GetParentTrack
language:eel2
return:(MediaTrack:)
params:(MediaTrack:track)
description:

------
name:reaper.GetParentTrack
language:lua
return:(MediaTrack:)
params:(MediaTrack:track)
description:

------
name:RPR_GetParentTrack
language:python
return:(MediaTrack:)
params:(MediaTrack:track)
description:

------
name:GetPeakFileName
language:c
return:(void:)
params:(const char*:fn), (char*:buf), (int:buf_sz)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:GetPeakFileName
language:eel2
return:
params:("fn":), (#buf:)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:reaper.GetPeakFileName
language:lua
return:(string:buf)
params:(string:fn), (string:buf)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:RPR_GetPeakFileName
language:python
return:(String:fn),(String:buf),(Int:buf_sz)
params:(fn:), (buf:), (buf_sz:)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:GetPeakFileNameEx
language:c
return:(void:)
params:(const char*:fn), (char*:buf), (int:buf_sz), (bool:forWrite)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:GetPeakFileNameEx
language:eel2
return:
params:("fn":), (#buf:), (bool:forWrite)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:reaper.GetPeakFileNameEx
language:lua
return:(string:buf)
params:(string:fn), (string:buf), (boolean:forWrite)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:RPR_GetPeakFileNameEx
language:python
return:(String:fn),(String:buf),(Int:buf_sz),(Boolean:forWrite)
params:(fn:), (buf:), (buf_sz:), (forWrite:)
description:
get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)
------
name:GetPeakFileNameEx2
language:c
return:(void:)
params:(const char*:fn), (char*:buf), (int:buf_sz), (bool:forWrite), (const char*:peaksfileextension)
description:
Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"
------
name:GetPeakFileNameEx2
language:eel2
return:
params:("fn":), (#buf:), (bool:forWrite), ("peaksfileextension":)
description:
Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"
------
name:reaper.GetPeakFileNameEx2
language:lua
return:(string:buf)
params:(string:fn), (string:buf), (boolean:forWrite), (string:peaksfileextension)
description:
Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"
------
name:RPR_GetPeakFileNameEx2
language:python
return:(String:fn),(String:buf),(Int:buf_sz),(Boolean:forWrite),(String:peaksfileextension)
params:(fn:), (buf:), (buf_sz:), (forWrite:), (peaksfileextension:)
description:
Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"
------
name:GetPlayPosition
language:c
return:(double:)
params:
description:
returns latency-compensated actual-what-you-hear position
------
name:GetPlayPosition
language:eel2
return:(double:)
params:
description:
returns latency-compensated actual-what-you-hear position
------
name:reaper.GetPlayPosition
language:lua
return:(number:)
params:
description:
returns latency-compensated actual-what-you-hear position
------
name:RPR_GetPlayPosition
language:python
return:(Float:)
params:
description:
returns latency-compensated actual-what-you-hear position
------
name:GetPlayPosition2
language:c
return:(double:)
params:
description:
returns position of next audio block being processed
------
name:GetPlayPosition2
language:eel2
return:(double:)
params:
description:
returns position of next audio block being processed
------
name:reaper.GetPlayPosition2
language:lua
return:(number:)
params:
description:
returns position of next audio block being processed
------
name:RPR_GetPlayPosition2
language:python
return:(Float:)
params:
description:
returns position of next audio block being processed
------
name:GetPlayPosition2Ex
language:c
return:(double:)
params:(ReaProject*:proj)
description:
returns position of next audio block being processed
------
name:GetPlayPosition2Ex
language:eel2
return:(double:)
params:(ReaProject:proj)
description:
returns position of next audio block being processed
------
name:reaper.GetPlayPosition2Ex
language:lua
return:(number:)
params:(ReaProject:proj)
description:
returns position of next audio block being processed
------
name:RPR_GetPlayPosition2Ex
language:python
return:(Float:)
params:(ReaProject:proj)
description:
returns position of next audio block being processed
------
name:GetPlayPositionEx
language:c
return:(double:)
params:(ReaProject*:proj)
description:
returns latency-compensated actual-what-you-hear position
------
name:GetPlayPositionEx
language:eel2
return:(double:)
params:(ReaProject:proj)
description:
returns latency-compensated actual-what-you-hear position
------
name:reaper.GetPlayPositionEx
language:lua
return:(number:)
params:(ReaProject:proj)
description:
returns latency-compensated actual-what-you-hear position
------
name:RPR_GetPlayPositionEx
language:python
return:(Float:)
params:(ReaProject:proj)
description:
returns latency-compensated actual-what-you-hear position
------
name:GetPlayState
language:c
return:(int:)
params:
description:
&1=playing,&2=pause,&=4 is recording
------
name:GetPlayState
language:eel2
return:(int:)
params:
description:
&1=playing,&2=pause,&=4 is recording
------
name:reaper.GetPlayState
language:lua
return:(integer:)
params:
description:
&1=playing,&2=pause,&=4 is recording
------
name:RPR_GetPlayState
language:python
return:(Int:)
params:
description:
&1=playing,&2=pause,&=4 is recording
------
name:GetPlayStateEx
language:c
return:(int:)
params:(ReaProject*:proj)
description:
&1=playing,&2=pause,&=4 is recording
------
name:GetPlayStateEx
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
&1=playing,&2=pause,&=4 is recording
------
name:reaper.GetPlayStateEx
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
&1=playing,&2=pause,&=4 is recording
------
name:RPR_GetPlayStateEx
language:python
return:(Int:)
params:(ReaProject:proj)
description:
&1=playing,&2=pause,&=4 is recording
------
name:GetProjectLength
language:c
return:(double:)
params:(ReaProject*:proj)
description:
returns length of project (maximum of end of media item, markers, end of regions, tempo map
------
name:GetProjectLength
language:eel2
return:(double:)
params:(ReaProject:proj)
description:
returns length of project (maximum of end of media item, markers, end of regions, tempo map
------
name:reaper.GetProjectLength
language:lua
return:(number:)
params:(ReaProject:proj)
description:
returns length of project (maximum of end of media item, markers, end of regions, tempo map
------
name:RPR_GetProjectLength
language:python
return:(Float:)
params:(ReaProject:proj)
description:
returns length of project (maximum of end of media item, markers, end of regions, tempo map
------
name:GetProjectName
language:c
return:(void:)
params:(ReaProject*:proj), (char*:buf), (int:buf_sz)
description:

------
name:GetProjectName
language:eel2
return:
params:(ReaProject:proj), (#buf:)
description:

------
name:reaper.GetProjectName
language:lua
return:(string:buf)
params:(ReaProject:proj), (string:buf)
description:

------
name:RPR_GetProjectName
language:python
return:(ReaProject:proj),(String:buf),(Int:buf_sz)
params:(proj:), (buf:), (buf_sz:)
description:

------
name:GetProjectPath
language:c
return:(void:)
params:(char*:buf), (int:buf_sz)
description:
Get the project recording path.
------
name:GetProjectPath
language:eel2
return:
params:(#buf:)
description:
Get the project recording path.
------
name:reaper.GetProjectPath
language:lua
return:(string:buf)
params:(string:buf)
description:
Get the project recording path.
------
name:RPR_GetProjectPath
language:python
return:(String:buf),(Int:buf_sz)
params:(buf:), (buf_sz:)
description:
Get the project recording path.
------
name:GetProjectPathEx
language:c
return:(void:)
params:(ReaProject*:proj), (char*:buf), (int:buf_sz)
description:
Get the project recording path.
------
name:GetProjectPathEx
language:eel2
return:
params:(ReaProject:proj), (#buf:)
description:
Get the project recording path.
------
name:reaper.GetProjectPathEx
language:lua
return:(string:buf)
params:(ReaProject:proj), (string:buf)
description:
Get the project recording path.
------
name:RPR_GetProjectPathEx
language:python
return:(ReaProject:proj),(String:buf),(Int:buf_sz)
params:(proj:), (buf:), (buf_sz:)
description:
Get the project recording path.
------
name:GetProjectStateChangeCount
language:c
return:(int:)
params:(ReaProject*:proj)
description:
returns an integer that changes when the project state changes
------
name:GetProjectStateChangeCount
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
returns an integer that changes when the project state changes
------
name:reaper.GetProjectStateChangeCount
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
returns an integer that changes when the project state changes
------
name:RPR_GetProjectStateChangeCount
language:python
return:(Int:)
params:(ReaProject:proj)
description:
returns an integer that changes when the project state changes
------
name:GetProjectTimeOffset
language:c
return:(double:)
params:(ReaProject*:proj), (bool:rndframe)
description:
Gets project time offset in seconds (project settings - project start
time). If rndframe is true, the offset is rounded to a multiple of the
project frame size.
------
name:GetProjectTimeOffset
language:eel2
return:(double:)
params:(ReaProject:proj), (bool:rndframe)
description:
Gets project time offset in seconds (project settings - project start
time). If rndframe is true, the offset is rounded to a multiple of the
project frame size.
------
name:reaper.GetProjectTimeOffset
language:lua
return:(number:)
params:(ReaProject:proj), (boolean:rndframe)
description:
Gets project time offset in seconds (project settings - project start
time). If rndframe is true, the offset is rounded to a multiple of the
project frame size.
------
name:RPR_GetProjectTimeOffset
language:python
return:(Float:)
params:(ReaProject:proj), (Boolean:rndframe)
description:
Gets project time offset in seconds (project settings - project start
time). If rndframe is true, the offset is rounded to a multiple of the
project frame size.
------
name:GetProjectTimeSignature
language:c
return:(void:)
params:(double*:bpmOut), (double*:bpiOut)
description:
deprecated
------
name:GetProjectTimeSignature
language:eel2
return:
params:(&bpm:), (&bpi:)
description:
deprecated
------
name:reaper.GetProjectTimeSignature
language:lua
return:(number:bpm),(number:bpi)
params:
description:
deprecated
------
name:RPR_GetProjectTimeSignature
language:python
return:(Float:bpmOut),(Float:bpiOut)
params:(bpmOut:), (bpiOut:)
description:
deprecated
------
name:GetProjectTimeSignature2
language:c
return:(void:)
params:(ReaProject*:proj), (double*:bpmOut), (double*:bpiOut)
description:
Gets basic time signature (beats per minute, numerator of time signature in bpi)
this does not reflect tempo envelopes but is purely what is set in the project settings.
------
name:GetProjectTimeSignature2
language:eel2
return:
params:(ReaProject:proj), (&bpm:), (&bpi:)
description:
Gets basic time signature (beats per minute, numerator of time signature in bpi)
this does not reflect tempo envelopes but is purely what is set in the project settings.
------
name:reaper.GetProjectTimeSignature2
language:lua
return:(number:bpm),(number:bpi)
params:(ReaProject:proj)
description:
Gets basic time signature (beats per minute, numerator of time signature in bpi)
this does not reflect tempo envelopes but is purely what is set in the project settings.
------
name:RPR_GetProjectTimeSignature2
language:python
return:(ReaProject:proj),(Float:bpmOut),(Float:bpiOut)
params:(proj:), (bpmOut:), (bpiOut:)
description:
Gets basic time signature (beats per minute, numerator of time signature in bpi)
this does not reflect tempo envelopes but is purely what is set in the project settings.
------
name:GetProjExtState
language:c
return:(int:)
params:(ReaProject*:proj), (const char*:extname), (const char*:key), (char*:valOutNeedBig), (int:valOutNeedBig_sz)
description:
Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.
------
name:GetProjExtState
language:eel2
return:(int:)
params:(ReaProject:proj), ("extname":), ("key":), (#val:)
description:
Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.
------
name:reaper.GetProjExtState
language:lua
return:(integer:retval),(string:val)
params:(ReaProject:proj), (string:extname), (string:key)
description:
Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.
------
name:RPR_GetProjExtState
language:python
return:(Int:retval),(ReaProject:proj),(String:extname),(String:key),(String:valOutNeedBig),(Int:valOutNeedBig_sz)
params:(proj:), (extname:), (key:), (valOutNeedBig:), (valOutNeedBig_sz:)
description:
Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.
------
name:GetResourcePath
language:c
return:(const:char*)
params:
description:
returns path where ini files are stored, other things are in subdirectories.
------
name:GetResourcePath
language:eel2
return:(bool:)
params:(#retval:)
description:
returns path where ini files are stored, other things are in subdirectories.
------
name:reaper.GetResourcePath
language:lua
return:(string:)
params:
description:
returns path where ini files are stored, other things are in subdirectories.
------
name:RPR_GetResourcePath
language:python
return:(String:)
params:
description:
returns path where ini files are stored, other things are in subdirectories.
------
name:GetSelectedEnvelope
language:c
return:(TrackEnvelope*:)
params:(ReaProject*:proj)
description:
get the currently selected envelope, returns 0 if no envelope is selected
------
name:GetSelectedEnvelope
language:eel2
return:(TrackEnvelope:)
params:(ReaProject:proj)
description:
get the currently selected envelope, returns 0 if no envelope is selected
------
name:reaper.GetSelectedEnvelope
language:lua
return:(TrackEnvelope:)
params:(ReaProject:proj)
description:
get the currently selected envelope, returns 0 if no envelope is selected
------
name:RPR_GetSelectedEnvelope
language:python
return:(TrackEnvelope:)
params:(ReaProject:proj)
description:
get the currently selected envelope, returns 0 if no envelope is selected
------
name:GetSelectedMediaItem
language:c
return:(MediaItem*:)
params:(ReaProject*:proj), (int:selitem)
description:
get a selected item by selected item count (zero-based) (proj=0 for active project)
------
name:GetSelectedMediaItem
language:eel2
return:(MediaItem:)
params:(ReaProject:proj), (int:selitem)
description:
get a selected item by selected item count (zero-based) (proj=0 for active project)
------
name:reaper.GetSelectedMediaItem
language:lua
return:(MediaItem:)
params:(ReaProject:proj), (integer:selitem)
description:
get a selected item by selected item count (zero-based) (proj=0 for active project)
------
name:RPR_GetSelectedMediaItem
language:python
return:(MediaItem:)
params:(ReaProject:proj), (Int:selitem)
description:
get a selected item by selected item count (zero-based) (proj=0 for active project)
------
name:GetSelectedTrack
language:c
return:(MediaTrack*:)
params:(ReaProject*:proj), (int:seltrackidx)
description:
Get a selected track from a project (proj=0 for active project) by
selected track count (zero-based). This function ignores the master
track, see GetSelectedTrack2.
------
name:GetSelectedTrack
language:eel2
return:(MediaTrack:)
params:(ReaProject:proj), (int:seltrackidx)
description:
Get a selected track from a project (proj=0 for active project) by
selected track count (zero-based). This function ignores the master
track, see GetSelectedTrack2.
------
name:reaper.GetSelectedTrack
language:lua
return:(MediaTrack:)
params:(ReaProject:proj), (integer:seltrackidx)
description:
Get a selected track from a project (proj=0 for active project) by
selected track count (zero-based). This function ignores the master
track, see GetSelectedTrack2.
------
name:RPR_GetSelectedTrack
language:python
return:(MediaTrack:)
params:(ReaProject:proj), (Int:seltrackidx)
description:
Get a selected track from a project (proj=0 for active project) by
selected track count (zero-based). This function ignores the master
track, see GetSelectedTrack2.
------
name:GetSelectedTrack2
language:c
return:(MediaTrack*:)
params:(ReaProject*:proj), (int:seltrackidx), (bool:wantmaster)
description:
Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).
------
name:GetSelectedTrack2
language:eel2
return:(MediaTrack:)
params:(ReaProject:proj), (int:seltrackidx), (bool:wantmaster)
description:
Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).
------
name:reaper.GetSelectedTrack2
language:lua
return:(MediaTrack:)
params:(ReaProject:proj), (integer:seltrackidx), (boolean:wantmaster)
description:
Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).
------
name:RPR_GetSelectedTrack2
language:python
return:(MediaTrack:)
params:(ReaProject:proj), (Int:seltrackidx), (Boolean:wantmaster)
description:
Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).
------
name:GetSelectedTrackEnvelope
language:c
return:(TrackEnvelope*:)
params:(ReaProject*:proj)
description:
get the currently selected track envelope, returns 0 if no envelope is selected
------
name:GetSelectedTrackEnvelope
language:eel2
return:(TrackEnvelope:)
params:(ReaProject:proj)
description:
get the currently selected track envelope, returns 0 if no envelope is selected
------
name:reaper.GetSelectedTrackEnvelope
language:lua
return:(TrackEnvelope:)
params:(ReaProject:proj)
description:
get the currently selected track envelope, returns 0 if no envelope is selected
------
name:RPR_GetSelectedTrackEnvelope
language:python
return:(TrackEnvelope:)
params:(ReaProject:proj)
description:
get the currently selected track envelope, returns 0 if no envelope is selected
------
name:GetSet_ArrangeView2
language:c
return:(void:)
params:(ReaProject*:proj), (bool:isSet), (int:screen_x_start), (int:screen_x_end), (double*:start_timeOut), (double*:end_timeOut)
description:
Gets or sets the arrange view start/end time for screen coordinates. use
screen_x_start=screen_x_end=0 to use the full arrange view's start/end
time
------
name:GetSet_ArrangeView2
language:eel2
return:
params:(ReaProject:proj), (bool:isSet), (int:screen_x_start), (int:screen_x_end), (&start_time:), (&end_time:)
description:
Gets or sets the arrange view start/end time for screen coordinates. use
screen_x_start=screen_x_end=0 to use the full arrange view's start/end
time
------
name:reaper.GetSet_ArrangeView2
language:lua
return:(number:start_time),(number:end_time)
params:(ReaProject:proj), (boolean:isSet), (integer:screen_x_start), (integer:screen_x_end)
description:
Gets or sets the arrange view start/end time for screen coordinates. use
screen_x_start=screen_x_end=0 to use the full arrange view's start/end
time
------
name:RPR_GetSet_ArrangeView2
language:python
return:(ReaProject:proj),(Boolean:isSet),(Int:screen_x_start),(Int:screen_x_end),(Float:start_timeOut),(Float:end_timeOut)
params:(proj:), (isSet:), (screen_x_start:), (screen_x_end:), (start_timeOut:), (end_timeOut:)
description:
Gets or sets the arrange view start/end time for screen coordinates. use
screen_x_start=screen_x_end=0 to use the full arrange view's start/end
time
------
name:GetSet_LoopTimeRange
language:c
return:(void:)
params:(bool:isSet), (bool:isLoop), (double*:startOut), (double*:endOut), (bool:allowautoseek)
description:

------
name:GetSet_LoopTimeRange
language:eel2
return:
params:(bool:isSet), (bool:isLoop), (&start:), (&end:), (bool:allowautoseek)
description:

------
name:reaper.GetSet_LoopTimeRange
language:lua
return:(number:start),(number:end)
params:(boolean:isSet), (boolean:isLoop), (number:start), (number:end), (boolean:allowautoseek)
description:

------
name:RPR_GetSet_LoopTimeRange
language:python
return:(Boolean:isSet),(Boolean:isLoop),(Float:startOut),(Float:endOut),(Boolean:allowautoseek)
params:(isSet:), (isLoop:), (startOut:), (endOut:), (allowautoseek:)
description:

------
name:GetSet_LoopTimeRange2
language:c
return:(void:)
params:(ReaProject*:proj), (bool:isSet), (bool:isLoop), (double*:startOut), (double*:endOut), (bool:allowautoseek)
description:

------
name:GetSet_LoopTimeRange2
language:eel2
return:
params:(ReaProject:proj), (bool:isSet), (bool:isLoop), (&start:), (&end:), (bool:allowautoseek)
description:

------
name:reaper.GetSet_LoopTimeRange2
language:lua
return:(number:start),(number:end)
params:(ReaProject:proj), (boolean:isSet), (boolean:isLoop), (number:start), (number:end), (boolean:allowautoseek)
description:

------
name:RPR_GetSet_LoopTimeRange2
language:python
return:(ReaProject:proj),(Boolean:isSet),(Boolean:isLoop),(Float:startOut),(Float:endOut),(Boolean:allowautoseek)
params:(proj:), (isSet:), (isLoop:), (startOut:), (endOut:), (allowautoseek:)
description:

------
name:GetSetAutomationItemInfo
language:c
return:(double:)
params:(TrackEnvelope*:env), (int:autoitem_idx), (const char*:desc), (double:value), (bool:is_set)
Valid input for desc: D_POOL_ID, D_POSITION, D_LENGTH, D_STARTOFFS, D_PLAYRATE, D_BASELINE, D_AMPLITUDE, D_LOOPSRC, D_UISEL, D_POOL_QNLEN

description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. desc can be
any of the following:
D_POOL_ID : double * : automation item pool ID (as an integer); edits
are propagated to all other automation items that share a pool ID
D_POSITION : double * : automation item timeline position in seconds
D_LENGTH : double * : automation item length in seconds
D_STARTOFFS : double * : automation item start offset in seconds
D_PLAYRATE : double * : automation item playback rate
D_BASELINE : double * : automation item baseline value in the range [0,1]
D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]
D_LOOPSRC : double * : nonzero if the automation item contents are looped
D_UISEL : double * : nonzero if the automation item is selected in the arrange view
D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)
------
name:GetSetAutomationItemInfo
language:eel2
return:(double:)
params:(TrackEnvelope:env), (int:autoitem_idx), ("desc":), (value:), (bool:is_set)
description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. desc can be
any of the following:
D_POOL_ID : double * : automation item pool ID (as an integer); edits
are propagated to all other automation items that share a pool ID
D_POSITION : double * : automation item timeline position in seconds
D_LENGTH : double * : automation item length in seconds
D_STARTOFFS : double * : automation item start offset in seconds
D_PLAYRATE : double * : automation item playback rate
D_BASELINE : double * : automation item baseline value in the range [0,1]
D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]
D_LOOPSRC : double * : nonzero if the automation item contents are looped
D_UISEL : double * : nonzero if the automation item is selected in the arrange view
D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)
------
name:reaper.GetSetAutomationItemInfo
language:lua
return:(number:)
params:(TrackEnvelope:env), (integer:autoitem_idx), (string:desc), (number:value), (boolean:is_set)
Valid input for desc: D_POOL_ID, D_POSITION, D_LENGTH, D_STARTOFFS, D_PLAYRATE, D_BASELINE, D_AMPLITUDE, D_LOOPSRC, D_UISEL, D_POOL_QNLEN

description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. desc can be
any of the following:
D_POOL_ID : double * : automation item pool ID (as an integer); edits
are propagated to all other automation items that share a pool ID
D_POSITION : double * : automation item timeline position in seconds
D_LENGTH : double * : automation item length in seconds
D_STARTOFFS : double * : automation item start offset in seconds
D_PLAYRATE : double * : automation item playback rate
D_BASELINE : double * : automation item baseline value in the range [0,1]
D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]
D_LOOPSRC : double * : nonzero if the automation item contents are looped
D_UISEL : double * : nonzero if the automation item is selected in the arrange view
D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)
------
name:RPR_GetSetAutomationItemInfo
language:python
return:(Float:)
params:(TrackEnvelope:env), (Int:autoitem_idx), (String:desc), (Float:value), (Boolean:is_set)
Valid input for desc: D_POOL_ID, D_POSITION, D_LENGTH, D_STARTOFFS, D_PLAYRATE, D_BASELINE, D_AMPLITUDE, D_LOOPSRC, D_UISEL, D_POOL_QNLEN

description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. desc can be
any of the following:
D_POOL_ID : double * : automation item pool ID (as an integer); edits
are propagated to all other automation items that share a pool ID
D_POSITION : double * : automation item timeline position in seconds
D_LENGTH : double * : automation item length in seconds
D_STARTOFFS : double * : automation item start offset in seconds
D_PLAYRATE : double * : automation item playback rate
D_BASELINE : double * : automation item baseline value in the range [0,1]
D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]
D_LOOPSRC : double * : nonzero if the automation item contents are looped
D_UISEL : double * : nonzero if the automation item is selected in the arrange view
D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)
------
name:GetSetAutomationItemInfo_String
language:c
return:(bool:)
params:(TrackEnvelope*:env), (int:autoitem_idx), (const char*:desc), (char*:valuestrNeedBig), (bool:is_set)
Valid input for desc: P_POOL_NAME, P_POOL_EXT:xyz

description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. returns true
on success. desc can be any of the following:
P_POOL_NAME : char *, name of the underlying automation item pool
P_POOL_EXT:xyz : char *, extension-specific persistent data
------
name:GetSetAutomationItemInfo_String
language:eel2
return:(bool:)
params:(TrackEnvelope:env), (int:autoitem_idx), ("desc":), (#valuestrNeedBig:), (bool:is_set)
description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. returns true
on success. desc can be any of the following:
P_POOL_NAME : char *, name of the underlying automation item pool
P_POOL_EXT:xyz : char *, extension-specific persistent data
------
name:reaper.GetSetAutomationItemInfo_String
language:lua
return:(boolean:retval),(string:valuestrNeedBig)
params:(TrackEnvelope:env), (integer:autoitem_idx), (string:desc), (string:valuestrNeedBig), (boolean:is_set)
Valid input for desc: P_POOL_NAME, P_POOL_EXT:xyz

description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. returns true
on success. desc can be any of the following:
P_POOL_NAME : char *, name of the underlying automation item pool
P_POOL_EXT:xyz : char *, extension-specific persistent data
------
name:RPR_GetSetAutomationItemInfo_String
language:python
return:(Boolean:retval),(TrackEnvelope:env),(Int:autoitem_idx),(String:desc),(String:valuestrNeedBig),(Boolean:is_set)
params:(env:), (autoitem_idx:), (desc:), (valuestrNeedBig:), (is_set:)
description:
Get or set automation item information. autoitem_idx=0 for the first
automation item on an envelope, 1 for the second item, etc. returns true
on success. desc can be any of the following:
P_POOL_NAME : char *, name of the underlying automation item pool
P_POOL_EXT:xyz : char *, extension-specific persistent data
------
name:GetSetEnvelopeInfo_String
language:c
return:(bool:)
params:(TrackEnvelope*:env), (const char*:parmname), (char*:stringNeedBig), (bool:setNewValue)
Valid input for parmname: P_EXT:xyz

description:
Gets/sets an attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:GetSetEnvelopeInfo_String
language:eel2
return:(bool:)
params:(TrackEnvelope:env), ("parmname":), (#stringNeedBig:), (bool:setNewValue)
description:
Gets/sets an attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:reaper.GetSetEnvelopeInfo_String
language:lua
return:(boolean:retval),(string:stringNeedBig)
params:(TrackEnvelope:env), (string:parmname), (string:stringNeedBig), (boolean:setNewValue)
Valid input for parmname: P_EXT:xyz

description:
Gets/sets an attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:RPR_GetSetEnvelopeInfo_String
language:python
return:(Boolean:retval),(TrackEnvelope:env),(String:parmname),(String:stringNeedBig),(Boolean:setNewValue)
params:(env:), (parmname:), (stringNeedBig:), (setNewValue:)
description:
Gets/sets an attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:GetSetEnvelopeState
language:c
return:(bool:)
params:(TrackEnvelope*:env), (char*:str), (int:str_sz)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:GetSetEnvelopeState
language:eel2
return:(bool:)
params:(TrackEnvelope:env), (#str:)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:reaper.GetSetEnvelopeState
language:lua
return:(boolean:retval),(string:str)
params:(TrackEnvelope:env), (string:str)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:RPR_GetSetEnvelopeState
language:python
return:(Boolean:retval),(TrackEnvelope:env),(String:str),(Int:str_sz)
params:(env:), (str:), (str_sz:)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:GetSetEnvelopeState2
language:c
return:(bool:)
params:(TrackEnvelope*:env), (char*:str), (int:str_sz), (bool:isundo)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:GetSetEnvelopeState2
language:eel2
return:(bool:)
params:(TrackEnvelope:env), (#str:), (bool:isundo)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:reaper.GetSetEnvelopeState2
language:lua
return:(boolean:retval),(string:str)
params:(TrackEnvelope:env), (string:str), (boolean:isundo)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:RPR_GetSetEnvelopeState2
language:python
return:(Boolean:retval),(TrackEnvelope:env),(String:str),(Int:str_sz),(Boolean:isundo)
params:(env:), (str:), (str_sz:), (isundo:)
description:
deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk
------
name:GetSetItemState
language:c
return:(bool:)
params:(MediaItem*:item), (char*:str), (int:str_sz)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:GetSetItemState
language:eel2
return:(bool:)
params:(MediaItem:item), (#str:)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:reaper.GetSetItemState
language:lua
return:(boolean:retval),(string:str)
params:(MediaItem:item), (string:str)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:RPR_GetSetItemState
language:python
return:(Boolean:retval),(MediaItem:item),(String:str),(Int:str_sz)
params:(item:), (str:), (str_sz:)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:GetSetItemState2
language:c
return:(bool:)
params:(MediaItem*:item), (char*:str), (int:str_sz), (bool:isundo)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:GetSetItemState2
language:eel2
return:(bool:)
params:(MediaItem:item), (#str:), (bool:isundo)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:reaper.GetSetItemState2
language:lua
return:(boolean:retval),(string:str)
params:(MediaItem:item), (string:str), (boolean:isundo)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:RPR_GetSetItemState2
language:python
return:(Boolean:retval),(MediaItem:item),(String:str),(Int:str_sz),(Boolean:isundo)
params:(item:), (str:), (str_sz:), (isundo:)
description:
deprecated -- see SetItemStateChunk, GetItemStateChunk
------
name:GetSetMediaItemInfo_String
language:c
return:(bool:)
params:(MediaItem*:item), (const char*:parmname), (char*:stringNeedBig), (bool:setNewValue)
Valid input for parmname: P_NOTES, P_EXT:xyz, GUID

description:
Gets/sets an item attribute string:
P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:GetSetMediaItemInfo_String
language:eel2
return:(bool:)
params:(MediaItem:item), ("parmname":), (#stringNeedBig:), (bool:setNewValue)
description:
Gets/sets an item attribute string:
P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:reaper.GetSetMediaItemInfo_String
language:lua
return:(boolean:retval),(string:stringNeedBig)
params:(MediaItem:item), (string:parmname), (string:stringNeedBig), (boolean:setNewValue)
Valid input for parmname: P_NOTES, P_EXT:xyz, GUID

description:
Gets/sets an item attribute string:
P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:RPR_GetSetMediaItemInfo_String
language:python
return:(Boolean:retval),(MediaItem:item),(String:parmname),(String:stringNeedBig),(Boolean:setNewValue)
params:(item:), (parmname:), (stringNeedBig:), (setNewValue:)
description:
Gets/sets an item attribute string:
P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:GetSetMediaItemTakeInfo_String
language:c
return:(bool:)
params:(MediaItem_Take*:tk), (const char*:parmname), (char*:stringNeedBig), (bool:setNewValue)
Valid input for parmname: P_NAME, P_EXT:xyz, GUID

description:
Gets/sets a take attribute string:
P_NAME : char * to take name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:GetSetMediaItemTakeInfo_String
language:eel2
return:(bool:)
params:(MediaItem_Take:tk), ("parmname":), (#stringNeedBig:), (bool:setNewValue)
description:
Gets/sets a take attribute string:
P_NAME : char * to take name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:reaper.GetSetMediaItemTakeInfo_String
language:lua
return:(boolean:retval),(string:stringNeedBig)
params:(MediaItem_Take:tk), (string:parmname), (string:stringNeedBig), (boolean:setNewValue)
Valid input for parmname: P_NAME, P_EXT:xyz, GUID

description:
Gets/sets a take attribute string:
P_NAME : char * to take name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:RPR_GetSetMediaItemTakeInfo_String
language:python
return:(Boolean:retval),(MediaItem_Take:tk),(String:parmname),(String:stringNeedBig),(Boolean:setNewValue)
params:(tk:), (parmname:), (stringNeedBig:), (setNewValue:)
description:
Gets/sets a take attribute string:
P_NAME : char * to take name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:GetSetMediaTrackInfo_String
language:c
return:(bool:)
params:(MediaTrack*:tr), (const char*:parmname), (char*:stringNeedBig), (bool:setNewValue)
Valid input for parmname: P_NAME, P_ICON, P_MCP_LAYOUT, P_TCP_LAYOUT, P_EXT:xyz, GUID

description:
Get or set track string attributes.
P_NAME : char * : track name (on master returns NULL)
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
P_MCP_LAYOUT : const char * : layout name
P_TCP_LAYOUT : const char * : layout name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:GetSetMediaTrackInfo_String
language:eel2
return:(bool:)
params:(MediaTrack:tr), ("parmname":), (#stringNeedBig:), (bool:setNewValue)
description:
Get or set track string attributes.
P_NAME : char * : track name (on master returns NULL)
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
P_MCP_LAYOUT : const char * : layout name
P_TCP_LAYOUT : const char * : layout name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:reaper.GetSetMediaTrackInfo_String
language:lua
return:(boolean:retval),(string:stringNeedBig)
params:(MediaTrack:tr), (string:parmname), (string:stringNeedBig), (boolean:setNewValue)
Valid input for parmname: P_NAME, P_ICON, P_MCP_LAYOUT, P_TCP_LAYOUT, P_EXT:xyz, GUID

description:
Get or set track string attributes.
P_NAME : char * : track name (on master returns NULL)
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
P_MCP_LAYOUT : const char * : layout name
P_TCP_LAYOUT : const char * : layout name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:RPR_GetSetMediaTrackInfo_String
language:python
return:(Boolean:retval),(MediaTrack:tr),(String:parmname),(String:stringNeedBig),(Boolean:setNewValue)
params:(tr:), (parmname:), (stringNeedBig:), (setNewValue:)
description:
Get or set track string attributes.
P_NAME : char * : track name (on master returns NULL)
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
P_MCP_LAYOUT : const char * : layout name
P_TCP_LAYOUT : const char * : layout name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
------
name:GetSetProjectAuthor
language:c
return:(void:)
params:(ReaProject*:proj), (bool:set), (char*:author), (int:author_sz)
description:
gets or sets project author, author_sz is ignored when setting
------
name:GetSetProjectAuthor
language:eel2
return:
params:(ReaProject:proj), (bool:set), (#author:)
description:
gets or sets project author, author_sz is ignored when setting
------
name:reaper.GetSetProjectAuthor
language:lua
return:(string:author)
params:(ReaProject:proj), (boolean:set), (string:author)
description:
gets or sets project author, author_sz is ignored when setting
------
name:RPR_GetSetProjectAuthor
language:python
return:(ReaProject:proj),(Boolean:set),(String:author),(Int:author_sz)
params:(proj:), (set:), (author:), (author_sz:)
description:
gets or sets project author, author_sz is ignored when setting
------
name:GetSetProjectGrid
language:c
return:(int:)
params:(ReaProject*:project), (bool:set), (double*:divisionInOutOptional), (int*:swingmodeInOutOptional), (double*:swingamtInOutOptional)
description:
Get or set the arrange view grid division. 0.25=quarter note,
1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled,
swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid
configuration flags
------
name:GetSetProjectGrid
language:eel2
return:(int:)
params:(ReaProject:project), (bool:set), (optional:&division), (optional int:&swingmode), (optional:&swingamt)
description:
Get or set the arrange view grid division. 0.25=quarter note,
1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled,
swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid
configuration flags
------
name:reaper.GetSetProjectGrid
language:lua
return:(integer:retval),(optional number:division),(optional number:swingmode),(optional number:swingamt)
params:(ReaProject:project), (boolean:set), (optional number:division), (optional number:swingmode), (optional number:swingamt)
description:
Get or set the arrange view grid division. 0.25=quarter note,
1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled,
swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid
configuration flags
------
name:RPR_GetSetProjectGrid
language:python
return:(Int:retval),(ReaProject:project),(Boolean:set),(Float:divisionInOutOptional),(Int:swingmodeInOutOptional),(Float:swingamtInOutOptional)
params:(project:), (set:), (divisionInOutOptional:), (swingmodeInOutOptional:), (swingamtInOutOptional:)
description:
Get or set the arrange view grid division. 0.25=quarter note,
1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled,
swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid
configuration flags
------
name:GetSetProjectInfo
language:c
return:(double:)
params:(ReaProject*:project), (const char*:desc), (double:value), (bool:is_set)
Valid input for desc: RENDER_SETTINGS, RENDER_BOUNDSFLAG, RENDER_CHANNELS, RENDER_SRATE, RENDER_STARTPOS, RENDER_ENDPOS, RENDER_TAILFLAG, RENDER_TAILMS, RENDER_ADDTOPROJ, RENDER_DITHER, PROJECT_SRATE, PROJECT_SRATE_USE

description:
Get or set project information.
RENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix,
&2=stems only, &4=multichannel tracks to multichannel files,
&8=use render matrix, &16=tracks with only mono media to mono
files, &32=selected media items, &64=selected media items via
master
RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time
selection, 3=all project regions, 4=selected media items, 5=selected
project regions
RENDER_CHANNELS : number of channels in rendered file
RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)
RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0
RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0
RENDER_TAILFLAG : apply render tail setting when rendering:
&1=custom time bounds, &2=entire project, &4=time selection,
&8=all project regions, &16=selected media items,
&32=selected project regions
RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)
RENDER_ADDTOPROJ : 1=add rendered files to project
RENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems
PROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)
PROJECT_SRATE_USE : set to 1 if project samplerate is used
------
name:GetSetProjectInfo
language:eel2
return:(double:)
params:(ReaProject:project), ("desc":), (value:), (bool:is_set)
description:
Get or set project information.
RENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix,
&2=stems only, &4=multichannel tracks to multichannel files,
&8=use render matrix, &16=tracks with only mono media to mono
files, &32=selected media items, &64=selected media items via
master
RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time
selection, 3=all project regions, 4=selected media items, 5=selected
project regions
RENDER_CHANNELS : number of channels in rendered file
RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)
RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0
RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0
RENDER_TAILFLAG : apply render tail setting when rendering:
&1=custom time bounds, &2=entire project, &4=time selection,
&8=all project regions, &16=selected media items,
&32=selected project regions
RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)
RENDER_ADDTOPROJ : 1=add rendered files to project
RENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems
PROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)
PROJECT_SRATE_USE : set to 1 if project samplerate is used
------
name:reaper.GetSetProjectInfo
language:lua
return:(number:)
params:(ReaProject:project), (string:desc), (number:value), (boolean:is_set)
Valid input for desc: RENDER_SETTINGS, RENDER_BOUNDSFLAG, RENDER_CHANNELS, RENDER_SRATE, RENDER_STARTPOS, RENDER_ENDPOS, RENDER_TAILFLAG, RENDER_TAILMS, RENDER_ADDTOPROJ, RENDER_DITHER, PROJECT_SRATE, PROJECT_SRATE_USE

description:
Get or set project information.
RENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix,
&2=stems only, &4=multichannel tracks to multichannel files,
&8=use render matrix, &16=tracks with only mono media to mono
files, &32=selected media items, &64=selected media items via
master
RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time
selection, 3=all project regions, 4=selected media items, 5=selected
project regions
RENDER_CHANNELS : number of channels in rendered file
RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)
RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0
RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0
RENDER_TAILFLAG : apply render tail setting when rendering:
&1=custom time bounds, &2=entire project, &4=time selection,
&8=all project regions, &16=selected media items,
&32=selected project regions
RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)
RENDER_ADDTOPROJ : 1=add rendered files to project
RENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems
PROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)
PROJECT_SRATE_USE : set to 1 if project samplerate is used
------
name:RPR_GetSetProjectInfo
language:python
return:(Float:)
params:(ReaProject:project), (String:desc), (Float:value), (Boolean:is_set)
Valid input for desc: RENDER_SETTINGS, RENDER_BOUNDSFLAG, RENDER_CHANNELS, RENDER_SRATE, RENDER_STARTPOS, RENDER_ENDPOS, RENDER_TAILFLAG, RENDER_TAILMS, RENDER_ADDTOPROJ, RENDER_DITHER, PROJECT_SRATE, PROJECT_SRATE_USE

description:
Get or set project information.
RENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix,
&2=stems only, &4=multichannel tracks to multichannel files,
&8=use render matrix, &16=tracks with only mono media to mono
files, &32=selected media items, &64=selected media items via
master
RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time
selection, 3=all project regions, 4=selected media items, 5=selected
project regions
RENDER_CHANNELS : number of channels in rendered file
RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)
RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0
RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0
RENDER_TAILFLAG : apply render tail setting when rendering:
&1=custom time bounds, &2=entire project, &4=time selection,
&8=all project regions, &16=selected media items,
&32=selected project regions
RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)
RENDER_ADDTOPROJ : 1=add rendered files to project
RENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems
PROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)
PROJECT_SRATE_USE : set to 1 if project samplerate is used
------
name:GetSetProjectInfo_String
language:c
return:(bool:)
params:(ReaProject*:project), (const char*:desc), (char*:valuestrNeedBig), (bool:is_set)
Valid input for desc: MARKER_GUID:X, RECORD_PATH, RENDER_FILE, RENDER_PATTERN, RENDER_FORMAT, RENDER_FORMAT2

description:
Get or set project information.
MARKER_GUID:X : get the GUID (unique ID) of the marker or region with
index X, where X is the index passed to EnumProjectMarkers, not
necessarily the displayed number
RECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()
RENDER_FILE : render directory
RENDER_PATTERN : render file name (may contain wildcards)
RENDER_FORMAT : base64-encoded sink configuration (see project files,
etc). Callers can also pass a simple 4-byte string (non-base64-encoded),
e.g. "evaw" or "l3pm", to use default settings for that sink type.
RENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers
can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw"
or "l3pm", to use default settings for that sink type, or "" to disable
secondary render.
Formats available on this machine:
"wave" "aiff" "iso " "ddp " "flac" "mp3l" "oggv" "OggS" "FFMP" "GIF " "LCF " "wvpk"
------
name:GetSetProjectInfo_String
language:eel2
return:(bool:)
params:(ReaProject:project), ("desc":), (#valuestrNeedBig:), (bool:is_set)
description:
Get or set project information.
MARKER_GUID:X : get the GUID (unique ID) of the marker or region with
index X, where X is the index passed to EnumProjectMarkers, not
necessarily the displayed number
RECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()
RENDER_FILE : render directory
RENDER_PATTERN : render file name (may contain wildcards)
RENDER_FORMAT : base64-encoded sink configuration (see project files,
etc). Callers can also pass a simple 4-byte string (non-base64-encoded),
e.g. "evaw" or "l3pm", to use default settings for that sink type.
RENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers
can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw"
or "l3pm", to use default settings for that sink type, or "" to disable
secondary render.
Formats available on this machine:
"wave" "aiff" "iso " "ddp " "flac" "mp3l" "oggv" "OggS" "FFMP" "GIF " "LCF " "wvpk"
------
name:reaper.GetSetProjectInfo_String
language:lua
return:(boolean:retval),(string:valuestrNeedBig)
params:(ReaProject:project), (string:desc), (string:valuestrNeedBig), (boolean:is_set)
Valid input for desc: MARKER_GUID:X, RECORD_PATH, RENDER_FILE, RENDER_PATTERN, RENDER_FORMAT, RENDER_FORMAT2

description:
Get or set project information.
MARKER_GUID:X : get the GUID (unique ID) of the marker or region with
index X, where X is the index passed to EnumProjectMarkers, not
necessarily the displayed number
RECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()
RENDER_FILE : render directory
RENDER_PATTERN : render file name (may contain wildcards)
RENDER_FORMAT : base64-encoded sink configuration (see project files,
etc). Callers can also pass a simple 4-byte string (non-base64-encoded),
e.g. "evaw" or "l3pm", to use default settings for that sink type.
RENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers
can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw"
or "l3pm", to use default settings for that sink type, or "" to disable
secondary render.
Formats available on this machine:
"wave" "aiff" "iso " "ddp " "flac" "mp3l" "oggv" "OggS" "FFMP" "GIF " "LCF " "wvpk"
------
name:RPR_GetSetProjectInfo_String
language:python
return:(Boolean:retval),(ReaProject:project),(String:desc),(String:valuestrNeedBig),(Boolean:is_set)
params:(project:), (desc:), (valuestrNeedBig:), (is_set:)
description:
Get or set project information.
MARKER_GUID:X : get the GUID (unique ID) of the marker or region with
index X, where X is the index passed to EnumProjectMarkers, not
necessarily the displayed number
RECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()
RENDER_FILE : render directory
RENDER_PATTERN : render file name (may contain wildcards)
RENDER_FORMAT : base64-encoded sink configuration (see project files,
etc). Callers can also pass a simple 4-byte string (non-base64-encoded),
e.g. "evaw" or "l3pm", to use default settings for that sink type.
RENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers
can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw"
or "l3pm", to use default settings for that sink type, or "" to disable
secondary render.
Formats available on this machine:
"wave" "aiff" "iso " "ddp " "flac" "mp3l" "oggv" "OggS" "FFMP" "GIF " "LCF " "wvpk"
------
name:GetSetProjectNotes
language:c
return:(void:)
params:(ReaProject*:proj), (bool:set), (char*:notesNeedBig), (int:notesNeedBig_sz)
description:
gets or sets project notes, notesNeedBig_sz is ignored when setting
------
name:GetSetProjectNotes
language:eel2
return:
params:(ReaProject:proj), (bool:set), (#notes:)
description:
gets or sets project notes, notesNeedBig_sz is ignored when setting
------
name:reaper.GetSetProjectNotes
language:lua
return:(string:notes)
params:(ReaProject:proj), (boolean:set), (string:notes)
description:
gets or sets project notes, notesNeedBig_sz is ignored when setting
------
name:RPR_GetSetProjectNotes
language:python
return:(ReaProject:proj),(Boolean:set),(String:notesNeedBig),(Int:notesNeedBig_sz)
params:(proj:), (set:), (notesNeedBig:), (notesNeedBig_sz:)
description:
gets or sets project notes, notesNeedBig_sz is ignored when setting
------
name:GetSetRepeat
language:c
return:(int:)
params:(int:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:GetSetRepeat
language:eel2
return:(int:)
params:(int:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:reaper.GetSetRepeat
language:lua
return:(integer:)
params:(integer:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:RPR_GetSetRepeat
language:python
return:(Int:)
params:(Int:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:GetSetRepeatEx
language:c
return:(int:)
params:(ReaProject*:proj), (int:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:GetSetRepeatEx
language:eel2
return:(int:)
params:(ReaProject:proj), (int:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:reaper.GetSetRepeatEx
language:lua
return:(integer:)
params:(ReaProject:proj), (integer:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:RPR_GetSetRepeatEx
language:python
return:(Int:)
params:(ReaProject:proj), (Int:val)
description:
-1 == query,0=clear,1=set,>1=toggle . returns new value
------
name:GetSetTrackGroupMembership
language:c
return:(unsigned:int)
params:(MediaTrack*:tr), (const char*:groupname), (unsigned int:setmask), (unsigned int:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:GetSetTrackGroupMembership
language:eel2
return:(uint:)
params:(MediaTrack:tr), ("groupname":), (uint:setmask), (uint:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:reaper.GetSetTrackGroupMembership
language:lua
return:(integer:)
params:(MediaTrack:tr), (string:groupname), (integer:setmask), (integer:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:RPR_GetSetTrackGroupMembership
language:python
return:(Unknown:)
params:(MediaTrack:tr), (String:groupname), (Unknown:setmask), (Unknown:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:GetSetTrackGroupMembershipHigh
language:c
return:(unsigned:int)
params:(MediaTrack*:tr), (const char*:groupname), (unsigned int:setmask), (unsigned int:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the high 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:GetSetTrackGroupMembershipHigh
language:eel2
return:(uint:)
params:(MediaTrack:tr), ("groupname":), (uint:setmask), (uint:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the high 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:reaper.GetSetTrackGroupMembershipHigh
language:lua
return:(integer:)
params:(MediaTrack:tr), (string:groupname), (integer:setmask), (integer:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the high 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:RPR_GetSetTrackGroupMembershipHigh
language:python
return:(Unknown:)
params:(MediaTrack:tr), (String:groupname), (Unknown:setmask), (Unknown:setvalue)
description:
Gets or modifies the group membership for a track. Returns group state
prior to call (each bit represents one of the high 32 group numbers). if
setmask has bits set, those bits in setvalue will be applied to group.
Group can be one of:
VOLUME_MASTER
VOLUME_SLAVE
VOLUME_VCA_MASTER
VOLUME_VCA_SLAVE
PAN_MASTER
PAN_SLAVE
WIDTH_MASTER
WIDTH_SLAVE
MUTE_MASTER
MUTE_SLAVE
SOLO_MASTER
SOLO_SLAVE
RECARM_MASTER
RECARM_SLAVE
POLARITY_MASTER
POLARITY_SLAVE
AUTOMODE_MASTER
AUTOMODE_SLAVE
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_MASTER_WHEN_SLAVE
VOLUME_VCA_SLAVE_ISPREFX
------
name:GetSetTrackSendInfo_String
language:c
return:(bool:)
params:(MediaTrack*:tr), (int:category), (int:sendidx), (const char*:parmname), (char*:stringNeedBig), (bool:setNewValue)
Valid input for parmname: P_EXT:xyz

description:
Gets/sets a send attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:GetSetTrackSendInfo_String
language:eel2
return:(bool:)
params:(MediaTrack:tr), (int:category), (int:sendidx), ("parmname":), (#stringNeedBig:), (bool:setNewValue)
description:
Gets/sets a send attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:reaper.GetSetTrackSendInfo_String
language:lua
return:(boolean:retval),(string:stringNeedBig)
params:(MediaTrack:tr), (integer:category), (integer:sendidx), (string:parmname), (string:stringNeedBig), (boolean:setNewValue)
Valid input for parmname: P_EXT:xyz

description:
Gets/sets a send attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:RPR_GetSetTrackSendInfo_String
language:python
return:(Boolean:retval),(MediaTrack:tr),(Int:category),(Int:sendidx),(String:parmname),(String:stringNeedBig),(Boolean:setNewValue)
params:(tr:), (category:), (sendidx:), (parmname:), (stringNeedBig:), (setNewValue:)
description:
Gets/sets a send attribute string:
P_EXT:xyz : char * : extension-specific persistent data
------
name:GetSetTrackState
language:c
return:(bool:)
params:(MediaTrack*:track), (char*:str), (int:str_sz)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:GetSetTrackState
language:eel2
return:(bool:)
params:(MediaTrack:track), (#str:)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:reaper.GetSetTrackState
language:lua
return:(boolean:retval),(string:str)
params:(MediaTrack:track), (string:str)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:RPR_GetSetTrackState
language:python
return:(Boolean:retval),(MediaTrack:track),(String:str),(Int:str_sz)
params:(track:), (str:), (str_sz:)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:GetSetTrackState2
language:c
return:(bool:)
params:(MediaTrack*:track), (char*:str), (int:str_sz), (bool:isundo)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:GetSetTrackState2
language:eel2
return:(bool:)
params:(MediaTrack:track), (#str:), (bool:isundo)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:reaper.GetSetTrackState2
language:lua
return:(boolean:retval),(string:str)
params:(MediaTrack:track), (string:str), (boolean:isundo)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:RPR_GetSetTrackState2
language:python
return:(Boolean:retval),(MediaTrack:track),(String:str),(Int:str_sz),(Boolean:isundo)
params:(track:), (str:), (str_sz:), (isundo:)
description:
deprecated -- see SetTrackStateChunk, GetTrackStateChunk
------
name:GetSubProjectFromSource
language:c
return:(ReaProject*:)
params:(PCM_source*:src)
description:

------
name:GetSubProjectFromSource
language:eel2
return:(ReaProject:)
params:(PCM_source:src)
description:

------
name:reaper.GetSubProjectFromSource
language:lua
return:(ReaProject:)
params:(PCM_source:src)
description:

------
name:RPR_GetSubProjectFromSource
language:python
return:(ReaProject:)
params:(PCM_source:src)
description:

------
name:GetTake
language:c
return:(MediaItem_Take*:)
params:(MediaItem*:item), (int:takeidx)
description:
get a take from an item by take count (zero-based)
------
name:GetTake
language:eel2
return:(MediaItem_Take:)
params:(MediaItem:item), (int:takeidx)
description:
get a take from an item by take count (zero-based)
------
name:reaper.GetTake
language:lua
return:(MediaItem_Take:)
params:(MediaItem:item), (integer:takeidx)
description:
get a take from an item by take count (zero-based)
------
name:RPR_GetTake
language:python
return:(MediaItem_Take:)
params:(MediaItem:item), (Int:takeidx)
description:
get a take from an item by take count (zero-based)
------
name:GetTakeEnvelope
language:c
return:(TrackEnvelope*:)
params:(MediaItem_Take*:take), (int:envidx)
description:

------
name:GetTakeEnvelope
language:eel2
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (int:envidx)
description:

------
name:reaper.GetTakeEnvelope
language:lua
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (integer:envidx)
description:

------
name:RPR_GetTakeEnvelope
language:python
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (Int:envidx)
description:

------
name:GetTakeEnvelopeByName
language:c
return:(TrackEnvelope*:)
params:(MediaItem_Take*:take), (const char*:envname)
description:

------
name:GetTakeEnvelopeByName
language:eel2
return:(TrackEnvelope:)
params:(MediaItem_Take:take), ("envname":)
description:

------
name:reaper.GetTakeEnvelopeByName
language:lua
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (string:envname)
description:

------
name:RPR_GetTakeEnvelopeByName
language:python
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (String:envname)
description:

------
name:GetTakeName
language:c
return:(const:char*)
params:(MediaItem_Take*:take)
description:
returns NULL if the take is not valid
------
name:GetTakeName
language:eel2
return:(bool:)
params:(#retval:), (MediaItem_Take:take)
description:
returns NULL if the take is not valid
------
name:reaper.GetTakeName
language:lua
return:(string:)
params:(MediaItem_Take:take)
description:
returns NULL if the take is not valid
------
name:RPR_GetTakeName
language:python
return:(String:)
params:(MediaItem_Take:take)
description:
returns NULL if the take is not valid
------
name:GetTakeNumStretchMarkers
language:c
return:(int:)
params:(MediaItem_Take*:take)
description:
Returns number of stretch markers in take
------
name:GetTakeNumStretchMarkers
language:eel2
return:(int:)
params:(MediaItem_Take:take)
description:
Returns number of stretch markers in take
------
name:reaper.GetTakeNumStretchMarkers
language:lua
return:(integer:)
params:(MediaItem_Take:take)
description:
Returns number of stretch markers in take
------
name:RPR_GetTakeNumStretchMarkers
language:python
return:(Int:)
params:(MediaItem_Take:take)
description:
Returns number of stretch markers in take
------
name:GetTakeStretchMarker
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:idx), (double*:posOut), (double*:srcposOutOptional)
description:
Gets information on a stretch marker, idx is 0..n. Returns false if
stretch marker not valid. posOut will be set to position in item,
srcposOutOptional will be set to source media position. Returns index.
if input index is -1, next marker is found using position (or source
position if position is -1). If position/source position are used to
find marker position, their values are not updated.
------
name:GetTakeStretchMarker
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:idx), (&pos:), (optional:&srcpos)
description:
Gets information on a stretch marker, idx is 0..n. Returns false if
stretch marker not valid. posOut will be set to position in item,
srcposOutOptional will be set to source media position. Returns index.
if input index is -1, next marker is found using position (or source
position if position is -1). If position/source position are used to
find marker position, their values are not updated.
------
name:reaper.GetTakeStretchMarker
language:lua
return:(integer:retval),(number:pos),(optional number:srcpos)
params:(MediaItem_Take:take), (integer:idx)
description:
Gets information on a stretch marker, idx is 0..n. Returns false if
stretch marker not valid. posOut will be set to position in item,
srcposOutOptional will be set to source media position. Returns index.
if input index is -1, next marker is found using position (or source
position if position is -1). If position/source position are used to
find marker position, their values are not updated.
------
name:RPR_GetTakeStretchMarker
language:python
return:(Int:retval),(MediaItem_Take:take),(Int:idx),(Float:posOut),(Float:srcposOutOptional)
params:(take:), (idx:), (posOut:), (srcposOutOptional:)
description:
Gets information on a stretch marker, idx is 0..n. Returns false if
stretch marker not valid. posOut will be set to position in item,
srcposOutOptional will be set to source media position. Returns index.
if input index is -1, next marker is found using position (or source
position if position is -1). If position/source position are used to
find marker position, their values are not updated.
------
name:GetTakeStretchMarkerSlope
language:c
return:(double:)
params:(MediaItem_Take*:take), (int:idx)
description:
See SetTakeStretchMarkerSlope
------
name:GetTakeStretchMarkerSlope
language:eel2
return:(double:)
params:(MediaItem_Take:take), (int:idx)
description:
See SetTakeStretchMarkerSlope
------
name:reaper.GetTakeStretchMarkerSlope
language:lua
return:(number:)
params:(MediaItem_Take:take), (integer:idx)
description:
See SetTakeStretchMarkerSlope
------
name:RPR_GetTakeStretchMarkerSlope
language:python
return:(Float:)
params:(MediaItem_Take:take), (Int:idx)
description:
See SetTakeStretchMarkerSlope
------
name:GetTCPFXParm
language:c
return:(bool:)
params:(ReaProject*:project), (MediaTrack*:track), (int:index), (int*:fxindexOut), (int*:parmidxOut)
description:
Get information about a specific FX parameter knob (see CountTCPFXParms).
------
name:GetTCPFXParm
language:eel2
return:(bool:)
params:(ReaProject:project), (MediaTrack:track), (int:index), (int:&fxindex), (int:&parmidx)
description:
Get information about a specific FX parameter knob (see CountTCPFXParms).
------
name:reaper.GetTCPFXParm
language:lua
return:(boolean:retval),(number:fxindex),(number:parmidx)
params:(ReaProject:project), (MediaTrack:track), (integer:index)
description:
Get information about a specific FX parameter knob (see CountTCPFXParms).
------
name:RPR_GetTCPFXParm
language:python
return:(Boolean:retval),(ReaProject:project),(MediaTrack:track),(Int:index),(Int:fxindexOut),(Int:parmidxOut)
params:(project:), (track:), (index:), (fxindexOut:), (parmidxOut:)
description:
Get information about a specific FX parameter knob (see CountTCPFXParms).
------
name:GetTempoMatchPlayRate
language:c
return:(bool:)
params:(PCM_source*:source), (double:srcscale), (double:position), (double:mult), (double*:rateOut), (double*:targetlenOut)
description:
finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256
------
name:GetTempoMatchPlayRate
language:eel2
return:(bool:)
params:(PCM_source:source), (srcscale:), (position:), (mult:), (&rate:), (&targetlen:)
description:
finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256
------
name:reaper.GetTempoMatchPlayRate
language:lua
return:(boolean:retval),(number:rate),(number:targetlen)
params:(PCM_source:source), (number:srcscale), (number:position), (number:mult)
description:
finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256
------
name:RPR_GetTempoMatchPlayRate
language:python
return:(Boolean:retval),(PCM_source:source),(Float:srcscale),(Float:position),(Float:mult),(Float:rateOut),(Float:targetlenOut)
params:(source:), (srcscale:), (position:), (mult:), (rateOut:), (targetlenOut:)
description:
finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256
------
name:GetTempoTimeSigMarker
language:c
return:(bool:)
params:(ReaProject*:proj), (int:ptidx), (double*:timeposOut), (int*:measureposOut), (double*:beatposOut), (double*:bpmOut), (int*:timesig_numOut), (int*:timesig_denomOut), (bool*:lineartempoOut)
description:
Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:GetTempoTimeSigMarker
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:ptidx), (&timepos:), (int:&measurepos), (&beatpos:), (&bpm:), (int:&timesig_num), (int:&timesig_denom), (bool:&lineartempo)
description:
Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:reaper.GetTempoTimeSigMarker
language:lua
return:(boolean:retval),(number:timepos),(number:measurepos),(number:beatpos),(number:bpm),(number:timesig_num),(number:timesig_denom),(boolean:lineartempo)
params:(ReaProject:proj), (integer:ptidx)
description:
Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:RPR_GetTempoTimeSigMarker
language:python
return:(Boolean:retval),(ReaProject:proj),(Int:ptidx),(Float:timeposOut),(Int:measureposOut),(Float:beatposOut),(Float:bpmOut),(Int:timesig_numOut),(Int:timesig_denomOut),(Boolean:lineartempoOut)
params:(proj:), (ptidx:), (timeposOut:), (measureposOut:), (beatposOut:), (bpmOut:), (timesig_numOut:), (timesig_denomOut:), (lineartempoOut:)
description:
Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:GetToggleCommandState
language:c
return:(int:)
params:(int:command_id)
description:
See GetToggleCommandStateEx.
------
name:GetToggleCommandState
language:eel2
return:(int:)
params:(int:command_id)
description:
See GetToggleCommandStateEx.
------
name:reaper.GetToggleCommandState
language:lua
return:(integer:)
params:(integer:command_id)
description:
See GetToggleCommandStateEx.
------
name:RPR_GetToggleCommandState
language:python
return:(Int:)
params:(Int:command_id)
description:
See GetToggleCommandStateEx.
------
name:GetToggleCommandStateEx
language:c
return:(int:)
params:(int:section_id), (int:command_id)
description:
For the main action context, the MIDI editor, or the media explorer,
returns the toggle state of the action. 0=off, 1=on, -1=NA because the
action does not have on/off states. For the MIDI editor, the action
state for the most recently focused window will be returned.
------
name:GetToggleCommandStateEx
language:eel2
return:(int:)
params:(int:section_id), (int:command_id)
description:
For the main action context, the MIDI editor, or the media explorer,
returns the toggle state of the action. 0=off, 1=on, -1=NA because the
action does not have on/off states. For the MIDI editor, the action
state for the most recently focused window will be returned.
------
name:reaper.GetToggleCommandStateEx
language:lua
return:(integer:)
params:(integer:section_id), (integer:command_id)
description:
For the main action context, the MIDI editor, or the media explorer,
returns the toggle state of the action. 0=off, 1=on, -1=NA because the
action does not have on/off states. For the MIDI editor, the action
state for the most recently focused window will be returned.
------
name:RPR_GetToggleCommandStateEx
language:python
return:(Int:)
params:(Int:section_id), (Int:command_id)
description:
For the main action context, the MIDI editor, or the media explorer,
returns the toggle state of the action. 0=off, 1=on, -1=NA because the
action does not have on/off states. For the MIDI editor, the action
state for the most recently focused window will be returned.
------
name:GetTooltipWindow
language:c
return:(HWND:)
params:
description:
gets a tooltip window,in case you want to ask it for font information. Can return NULL.
------
name:GetTooltipWindow
language:eel2
return:(HWND:)
params:
description:
gets a tooltip window,in case you want to ask it for font information. Can return NULL.
------
name:reaper.GetTooltipWindow
language:lua
return:(HWND:)
params:
description:
gets a tooltip window,in case you want to ask it for font information. Can return NULL.
------
name:RPR_GetTooltipWindow
language:python
return:(HWND:)
params:
description:
gets a tooltip window,in case you want to ask it for font information. Can return NULL.
------
name:GetTrack
language:c
return:(MediaTrack*:)
params:(ReaProject*:proj), (int:trackidx)
description:
get a track from a project by track count (zero-based) (proj=0 for active project)
------
name:GetTrack
language:eel2
return:(MediaTrack:)
params:(ReaProject:proj), (int:trackidx)
description:
get a track from a project by track count (zero-based) (proj=0 for active project)
------
name:reaper.GetTrack
language:lua
return:(MediaTrack:)
params:(ReaProject:proj), (integer:trackidx)
description:
get a track from a project by track count (zero-based) (proj=0 for active project)
------
name:RPR_GetTrack
language:python
return:(MediaTrack:)
params:(ReaProject:proj), (Int:trackidx)
description:
get a track from a project by track count (zero-based) (proj=0 for active project)
------
name:GetTrackAutomationMode
language:c
return:(int:)
params:(MediaTrack*:tr)
description:
return the track mode, regardless of global override
------
name:GetTrackAutomationMode
language:eel2
return:(int:)
params:(MediaTrack:tr)
description:
return the track mode, regardless of global override
------
name:reaper.GetTrackAutomationMode
language:lua
return:(integer:)
params:(MediaTrack:tr)
description:
return the track mode, regardless of global override
------
name:RPR_GetTrackAutomationMode
language:python
return:(Int:)
params:(MediaTrack:tr)
description:
return the track mode, regardless of global override
------
name:GetTrackColor
language:c
return:(int:)
params:(MediaTrack*:track)
description:
Returns the track custom color as OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no
color setting is returned as 0.
------
name:GetTrackColor
language:eel2
return:(int:)
params:(MediaTrack:track)
description:
Returns the track custom color as OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no
color setting is returned as 0.
------
name:reaper.GetTrackColor
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
Returns the track custom color as OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no
color setting is returned as 0.
------
name:RPR_GetTrackColor
language:python
return:(Int:)
params:(MediaTrack:track)
description:
Returns the track custom color as OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no
color setting is returned as 0.
------
name:GetTrackDepth
language:c
return:(int:)
params:(MediaTrack*:track)
description:

------
name:GetTrackDepth
language:eel2
return:(int:)
params:(MediaTrack:track)
description:

------
name:reaper.GetTrackDepth
language:lua
return:(integer:)
params:(MediaTrack:track)
description:

------
name:RPR_GetTrackDepth
language:python
return:(Int:)
params:(MediaTrack:track)
description:

------
name:GetTrackEnvelope
language:c
return:(TrackEnvelope*:)
params:(MediaTrack*:track), (int:envidx)
description:

------
name:GetTrackEnvelope
language:eel2
return:(TrackEnvelope:)
params:(MediaTrack:track), (int:envidx)
description:

------
name:reaper.GetTrackEnvelope
language:lua
return:(TrackEnvelope:)
params:(MediaTrack:track), (integer:envidx)
description:

------
name:RPR_GetTrackEnvelope
language:python
return:(TrackEnvelope:)
params:(MediaTrack:track), (Int:envidx)
description:

------
name:GetTrackEnvelopeByChunkName
language:c
return:(TrackEnvelope*:)
params:(MediaTrack*:tr), (const char*:cfgchunkname)
description:
Gets a built-in track envelope by configuration chunk name, e.g. "<VOLENV".
------
name:GetTrackEnvelopeByChunkName
language:eel2
return:(TrackEnvelope:)
params:(MediaTrack:tr), ("cfgchunkname":)
description:
Gets a built-in track envelope by configuration chunk name, e.g. "<VOLENV".
------
name:reaper.GetTrackEnvelopeByChunkName
language:lua
return:(TrackEnvelope:)
params:(MediaTrack:tr), (string:cfgchunkname)
description:
Gets a built-in track envelope by configuration chunk name, e.g. "<VOLENV".
------
name:RPR_GetTrackEnvelopeByChunkName
language:python
return:(TrackEnvelope:)
params:(MediaTrack:tr), (String:cfgchunkname)
description:
Gets a built-in track envelope by configuration chunk name, e.g. "<VOLENV".
------
name:GetTrackEnvelopeByName
language:c
return:(TrackEnvelope*:)
params:(MediaTrack*:track), (const char*:envname)
description:

------
name:GetTrackEnvelopeByName
language:eel2
return:(TrackEnvelope:)
params:(MediaTrack:track), ("envname":)
description:

------
name:reaper.GetTrackEnvelopeByName
language:lua
return:(TrackEnvelope:)
params:(MediaTrack:track), (string:envname)
description:

------
name:RPR_GetTrackEnvelopeByName
language:python
return:(TrackEnvelope:)
params:(MediaTrack:track), (String:envname)
description:

------
name:GetTrackFromPoint
language:c
return:(MediaTrack*:)
params:(int:screen_x), (int:screen_y), (int*:infoOutOptional)
description:
Returns the track from the screen coordinates specified. If the screen
coordinates refer to a window associated to the track (such as FX), the
track will be returned. infoOutOptional will be set to 1 if it is likely
an envelope, 2 if it is likely a track FX.
------
name:GetTrackFromPoint
language:eel2
return:(MediaTrack:)
params:(int:screen_x), (int:screen_y), (optional int:&info)
description:
Returns the track from the screen coordinates specified. If the screen
coordinates refer to a window associated to the track (such as FX), the
track will be returned. infoOutOptional will be set to 1 if it is likely
an envelope, 2 if it is likely a track FX.
------
name:reaper.GetTrackFromPoint
language:lua
return:(MediaTrack:retval),(optional number:info)
params:(integer:screen_x), (integer:screen_y)
description:
Returns the track from the screen coordinates specified. If the screen
coordinates refer to a window associated to the track (such as FX), the
track will be returned. infoOutOptional will be set to 1 if it is likely
an envelope, 2 if it is likely a track FX.
------
name:RPR_GetTrackFromPoint
language:python
return:(MediaTrack:retval),(Int:screen_x),(Int:screen_y),(Int:infoOutOptional)
params:(screen_x:), (screen_y:), (infoOutOptional:)
description:
Returns the track from the screen coordinates specified. If the screen
coordinates refer to a window associated to the track (such as FX), the
track will be returned. infoOutOptional will be set to 1 if it is likely
an envelope, 2 if it is likely a track FX.
------
name:GetTrackGUID
language:c
return:(GUID*:)
params:(MediaTrack*:tr)
description:

------
name:GetTrackGUID
language:eel2
return:(bool:)
params:(#retguid:), (MediaTrack:tr)
description:

------
name:reaper.GetTrackGUID
language:lua
return:(string:GUID)
params:(MediaTrack:tr)
description:

------
name:RPR_GetTrackGUID
language:python
return:(GUID:)
params:(MediaTrack:tr)
description:

------
name:GetTrackMediaItem
language:c
return:(MediaItem*:)
params:(MediaTrack*:tr), (int:itemidx)
description:

------
name:GetTrackMediaItem
language:eel2
return:(MediaItem:)
params:(MediaTrack:tr), (int:itemidx)
description:

------
name:reaper.GetTrackMediaItem
language:lua
return:(MediaItem:)
params:(MediaTrack:tr), (integer:itemidx)
description:

------
name:RPR_GetTrackMediaItem
language:python
return:(MediaItem:)
params:(MediaTrack:tr), (Int:itemidx)
description:

------
name:GetTrackMIDILyrics
language:c
return:(bool:)
params:(MediaTrack*:track), (int:flag), (char*:bufWantNeedBig), (int*:bufWantNeedBig_sz)
description:
Get all MIDI lyrics on the track. Lyrics will be returned as one string
with tabs between each word. flag&1: double tabs at the end of each
measure and triple tabs when skipping measures, flag&2: each lyric
is preceded by its beat position in the project (example with flag=2:
"1.1.2\tLyric for measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1
"). See SetTrackMIDILyrics
------
name:GetTrackMIDILyrics
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:flag), (#bufWant:)
description:
Get all MIDI lyrics on the track. Lyrics will be returned as one string
with tabs between each word. flag&1: double tabs at the end of each
measure and triple tabs when skipping measures, flag&2: each lyric
is preceded by its beat position in the project (example with flag=2:
"1.1.2\tLyric for measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1
"). See SetTrackMIDILyrics
------
name:reaper.GetTrackMIDILyrics
language:lua
return:(boolean:retval),(string:bufWant)
params:(MediaTrack:track), (integer:flag), (string:bufWant)
description:
Get all MIDI lyrics on the track. Lyrics will be returned as one string
with tabs between each word. flag&1: double tabs at the end of each
measure and triple tabs when skipping measures, flag&2: each lyric
is preceded by its beat position in the project (example with flag=2:
"1.1.2\tLyric for measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1
"). See SetTrackMIDILyrics
------
name:RPR_GetTrackMIDILyrics
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:flag),(String:bufWantNeedBig),(Int:bufWantNeedBig_sz)
params:(track:), (flag:), (bufWantNeedBig:), (bufWantNeedBig_sz:)
description:
Get all MIDI lyrics on the track. Lyrics will be returned as one string
with tabs between each word. flag&1: double tabs at the end of each
measure and triple tabs when skipping measures, flag&2: each lyric
is preceded by its beat position in the project (example with flag=2:
"1.1.2\tLyric for measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1
"). See SetTrackMIDILyrics
------
name:GetTrackMIDINoteName
language:c
return:(const:char*)
params:(int:track), (int:pitch), (int:chan)
description:
see GetTrackMIDINoteNameEx
------
name:GetTrackMIDINoteName
language:eel2
return:(bool:)
params:(#retval:), (int:track), (int:pitch), (int:chan)
description:
see GetTrackMIDINoteNameEx
------
name:reaper.GetTrackMIDINoteName
language:lua
return:(string:)
params:(integer:track), (integer:pitch), (integer:chan)
description:
see GetTrackMIDINoteNameEx
------
name:RPR_GetTrackMIDINoteName
language:python
return:(String:)
params:(Int:track), (Int:pitch), (Int:chan)
description:
see GetTrackMIDINoteNameEx
------
name:GetTrackMIDINoteNameEx
language:c
return:(const:char*)
params:(ReaProject*:proj), (MediaTrack*:track), (int:pitch), (int:chan)
description:
Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx
------
name:GetTrackMIDINoteNameEx
language:eel2
return:(bool:)
params:(#retval:), (ReaProject:proj), (MediaTrack:track), (int:pitch), (int:chan)
description:
Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx
------
name:reaper.GetTrackMIDINoteNameEx
language:lua
return:(string:)
params:(ReaProject:proj), (MediaTrack:track), (integer:pitch), (integer:chan)
description:
Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx
------
name:RPR_GetTrackMIDINoteNameEx
language:python
return:(String:)
params:(ReaProject:proj), (MediaTrack:track), (Int:pitch), (Int:chan)
description:
Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx
------
name:GetTrackMIDINoteRange
language:c
return:(void:)
params:(ReaProject*:proj), (MediaTrack*:track), (int*:note_loOut), (int*:note_hiOut)
description:

------
name:GetTrackMIDINoteRange
language:eel2
return:
params:(ReaProject:proj), (MediaTrack:track), (int:&note_lo), (int:&note_hi)
description:

------
name:reaper.GetTrackMIDINoteRange
language:lua
return:(number:note_lo),(number:note_hi)
params:(ReaProject:proj), (MediaTrack:track)
description:

------
name:RPR_GetTrackMIDINoteRange
language:python
return:(ReaProject:proj),(MediaTrack:track),(Int:note_loOut),(Int:note_hiOut)
params:(proj:), (track:), (note_loOut:), (note_hiOut:)
description:

------
name:GetTrackName
language:c
return:(bool:)
params:(MediaTrack*:track), (char*:bufOut), (int:bufOut_sz)
description:
Returns "MASTER" for master track, "Track N" if track has no name.
------
name:GetTrackName
language:eel2
return:(bool:)
params:(MediaTrack:track), (#buf:)
description:
Returns "MASTER" for master track, "Track N" if track has no name.
------
name:reaper.GetTrackName
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track)
description:
Returns "MASTER" for master track, "Track N" if track has no name.
------
name:RPR_GetTrackName
language:python
return:(Boolean:retval),(MediaTrack:track),(String:bufOut),(Int:bufOut_sz)
params:(track:), (bufOut:), (bufOut_sz:)
description:
Returns "MASTER" for master track, "Track N" if track has no name.
------
name:GetTrackNumMediaItems
language:c
return:(int:)
params:(MediaTrack*:tr)
description:

------
name:GetTrackNumMediaItems
language:eel2
return:(int:)
params:(MediaTrack:tr)
description:

------
name:reaper.GetTrackNumMediaItems
language:lua
return:(integer:)
params:(MediaTrack:tr)
description:

------
name:RPR_GetTrackNumMediaItems
language:python
return:(Int:)
params:(MediaTrack:tr)
description:

------
name:GetTrackNumSends
language:c
return:(int:)
params:(MediaTrack*:tr), (int:category)
description:
returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs
------
name:GetTrackNumSends
language:eel2
return:(int:)
params:(MediaTrack:tr), (int:category)
description:
returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs
------
name:reaper.GetTrackNumSends
language:lua
return:(integer:)
params:(MediaTrack:tr), (integer:category)
description:
returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs
------
name:RPR_GetTrackNumSends
language:python
return:(Int:)
params:(MediaTrack:tr), (Int:category)
description:
returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs
------
name:GetTrackReceiveName
language:c
return:(bool:)
params:(MediaTrack*:track), (int:recv_index), (char*:buf), (int:buf_sz)
description:
See GetTrackSendName.
------
name:GetTrackReceiveName
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:recv_index), (#buf:)
description:
See GetTrackSendName.
------
name:reaper.GetTrackReceiveName
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:recv_index), (string:buf)
description:
See GetTrackSendName.
------
name:RPR_GetTrackReceiveName
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:recv_index),(String:buf),(Int:buf_sz)
params:(track:), (recv_index:), (buf:), (buf_sz:)
description:
See GetTrackSendName.
------
name:GetTrackReceiveUIMute
language:c
return:(bool:)
params:(MediaTrack*:track), (int:recv_index), (bool*:muteOut)
description:
See GetTrackSendUIMute.
------
name:GetTrackReceiveUIMute
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:recv_index), (bool:&mute)
description:
See GetTrackSendUIMute.
------
name:reaper.GetTrackReceiveUIMute
language:lua
return:(boolean:retval),(boolean:mute)
params:(MediaTrack:track), (integer:recv_index)
description:
See GetTrackSendUIMute.
------
name:RPR_GetTrackReceiveUIMute
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:recv_index),(Boolean:muteOut)
params:(track:), (recv_index:), (muteOut:)
description:
See GetTrackSendUIMute.
------
name:GetTrackReceiveUIVolPan
language:c
return:(bool:)
params:(MediaTrack*:track), (int:recv_index), (double*:volumeOut), (double*:panOut)
description:
See GetTrackSendUIVolPan.
------
name:GetTrackReceiveUIVolPan
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:recv_index), (&volume:), (&pan:)
description:
See GetTrackSendUIVolPan.
------
name:reaper.GetTrackReceiveUIVolPan
language:lua
return:(boolean:retval),(number:volume),(number:pan)
params:(MediaTrack:track), (integer:recv_index)
description:
See GetTrackSendUIVolPan.
------
name:RPR_GetTrackReceiveUIVolPan
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:recv_index),(Float:volumeOut),(Float:panOut)
params:(track:), (recv_index:), (volumeOut:), (panOut:)
description:
See GetTrackSendUIVolPan.
------
name:GetTrackSendInfo_Value
language:c
return:(double:)
params:(MediaTrack*:tr), (int:category), (int:sendidx), (const char*:parmname)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_AUTOMODE, I_SRCCHAN, I_DSTCHAN, I_MIDIFLAGS, P_DESTTRACK, P_SRCTRACK, P_ENV:<envchunkname

description:
Get send/receive/hardware output numerical-value attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5
bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns
MediaTrack *, destination track, only applies for sends/recvs
P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
P_ENV:<envchunkname : read only, returns TrackEnvelope *. Call with :<VOLENV, :<PANENV, etc appended.
See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:GetTrackSendInfo_Value
language:eel2
return:(double:)
params:(MediaTrack:tr), (int:category), (int:sendidx), ("parmname":)
description:
Get send/receive/hardware output numerical-value attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5
bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns
MediaTrack *, destination track, only applies for sends/recvs
P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
P_ENV:<envchunkname : read only, returns TrackEnvelope *. Call with :<VOLENV, :<PANENV, etc appended.
See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:reaper.GetTrackSendInfo_Value
language:lua
return:(number:)
params:(MediaTrack:tr), (integer:category), (integer:sendidx), (string:parmname)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_AUTOMODE, I_SRCCHAN, I_DSTCHAN, I_MIDIFLAGS, P_DESTTRACK, P_SRCTRACK, P_ENV:<envchunkname

description:
Get send/receive/hardware output numerical-value attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5
bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns
MediaTrack *, destination track, only applies for sends/recvs
P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
P_ENV:<envchunkname : read only, returns TrackEnvelope *. Call with :<VOLENV, :<PANENV, etc appended.
See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:RPR_GetTrackSendInfo_Value
language:python
return:(Float:)
params:(MediaTrack:tr), (Int:category), (Int:sendidx), (String:parmname)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_AUTOMODE, I_SRCCHAN, I_DSTCHAN, I_MIDIFLAGS, P_DESTTRACK, P_SRCTRACK, P_ENV:<envchunkname

description:
Get send/receive/hardware output numerical-value attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5
bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns
MediaTrack *, destination track, only applies for sends/recvs
P_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs
P_ENV:<envchunkname : read only, returns TrackEnvelope *. Call with :<VOLENV, :<PANENV, etc appended.
See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:GetTrackSendName
language:c
return:(bool:)
params:(MediaTrack*:track), (int:send_index), (char*:buf), (int:buf_sz)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.
------
name:GetTrackSendName
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:send_index), (#buf:)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.
------
name:reaper.GetTrackSendName
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:send_index), (string:buf)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.
------
name:RPR_GetTrackSendName
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:send_index),(String:buf),(Int:buf_sz)
params:(track:), (send_index:), (buf:), (buf_sz:)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.
------
name:GetTrackSendUIMute
language:c
return:(bool:)
params:(MediaTrack*:track), (int:send_index), (bool*:muteOut)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.
------
name:GetTrackSendUIMute
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:send_index), (bool:&mute)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.
------
name:reaper.GetTrackSendUIMute
language:lua
return:(boolean:retval),(boolean:mute)
params:(MediaTrack:track), (integer:send_index)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.
------
name:RPR_GetTrackSendUIMute
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:send_index),(Boolean:muteOut)
params:(track:), (send_index:), (muteOut:)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.
------
name:GetTrackSendUIVolPan
language:c
return:(bool:)
params:(MediaTrack*:track), (int:send_index), (double*:volumeOut), (double*:panOut)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.
------
name:GetTrackSendUIVolPan
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:send_index), (&volume:), (&pan:)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.
------
name:reaper.GetTrackSendUIVolPan
language:lua
return:(boolean:retval),(number:volume),(number:pan)
params:(MediaTrack:track), (integer:send_index)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.
------
name:RPR_GetTrackSendUIVolPan
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:send_index),(Float:volumeOut),(Float:panOut)
params:(track:), (send_index:), (volumeOut:), (panOut:)
description:
send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.
------
name:GetTrackState
language:c
return:(const:char*)
params:(MediaTrack*:track), (int*:flagsOut)
description:
Gets track state, returns track name.
flags will be set to:
&1=folder
&2=selected
&4=has fx enabled
&8=muted
&16=soloed
&32=SIP'd (with &16)
&64=rec armed
&128=rec monitoring on
&256=rec monitoring auto
&512=hide from TCP
&1024=hide from MCP
------
name:GetTrackState
language:eel2
return:(bool:)
params:(#retval:), (MediaTrack:track), (int:&flags)
description:
Gets track state, returns track name.
flags will be set to:
&1=folder
&2=selected
&4=has fx enabled
&8=muted
&16=soloed
&32=SIP'd (with &16)
&64=rec armed
&128=rec monitoring on
&256=rec monitoring auto
&512=hide from TCP
&1024=hide from MCP
------
name:reaper.GetTrackState
language:lua
return:(string:retval),(number:flags)
params:(MediaTrack:track)
description:
Gets track state, returns track name.
flags will be set to:
&1=folder
&2=selected
&4=has fx enabled
&8=muted
&16=soloed
&32=SIP'd (with &16)
&64=rec armed
&128=rec monitoring on
&256=rec monitoring auto
&512=hide from TCP
&1024=hide from MCP
------
name:RPR_GetTrackState
language:python
return:(String:retval),(MediaTrack:track),(Int:flagsOut)
params:(track:), (flagsOut:)
description:
Gets track state, returns track name.
flags will be set to:
&1=folder
&2=selected
&4=has fx enabled
&8=muted
&16=soloed
&32=SIP'd (with &16)
&64=rec armed
&128=rec monitoring on
&256=rec monitoring auto
&512=hide from TCP
&1024=hide from MCP
------
name:GetTrackStateChunk
language:c
return:(bool:)
params:(MediaTrack*:track), (char*:strNeedBig), (int:strNeedBig_sz), (bool:isundoOptional)
description:
Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:GetTrackStateChunk
language:eel2
return:(bool:)
params:(MediaTrack:track), (#str:), (bool:isundo)
description:
Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:reaper.GetTrackStateChunk
language:lua
return:(boolean:retval),(string:str)
params:(MediaTrack:track), (string:str), (boolean:isundo)
description:
Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:RPR_GetTrackStateChunk
language:python
return:(Boolean:retval),(MediaTrack:track),(String:strNeedBig),(Int:strNeedBig_sz),(Boolean:isundoOptional)
params:(track:), (strNeedBig:), (strNeedBig_sz:), (isundoOptional:)
description:
Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:GetTrackUIMute
language:c
return:(bool:)
params:(MediaTrack*:track), (bool*:muteOut)
description:

------
name:GetTrackUIMute
language:eel2
return:(bool:)
params:(MediaTrack:track), (bool:&mute)
description:

------
name:reaper.GetTrackUIMute
language:lua
return:(boolean:retval),(boolean:mute)
params:(MediaTrack:track)
description:

------
name:RPR_GetTrackUIMute
language:python
return:(Boolean:retval),(MediaTrack:track),(Boolean:muteOut)
params:(track:), (muteOut:)
description:

------
name:GetTrackUIPan
language:c
return:(bool:)
params:(MediaTrack*:track), (double*:pan1Out), (double*:pan2Out), (int*:panmodeOut)
description:

------
name:GetTrackUIPan
language:eel2
return:(bool:)
params:(MediaTrack:track), (&pan1:), (&pan2:), (int:&panmode)
description:

------
name:reaper.GetTrackUIPan
language:lua
return:(boolean:retval),(number:pan1),(number:pan2),(number:panmode)
params:(MediaTrack:track)
description:

------
name:RPR_GetTrackUIPan
language:python
return:(Boolean:retval),(MediaTrack:track),(Float:pan1Out),(Float:pan2Out),(Int:panmodeOut)
params:(track:), (pan1Out:), (pan2Out:), (panmodeOut:)
description:

------
name:GetTrackUIVolPan
language:c
return:(bool:)
params:(MediaTrack*:track), (double*:volumeOut), (double*:panOut)
description:

------
name:GetTrackUIVolPan
language:eel2
return:(bool:)
params:(MediaTrack:track), (&volume:), (&pan:)
description:

------
name:reaper.GetTrackUIVolPan
language:lua
return:(boolean:retval),(number:volume),(number:pan)
params:(MediaTrack:track)
description:

------
name:RPR_GetTrackUIVolPan
language:python
return:(Boolean:retval),(MediaTrack:track),(Float:volumeOut),(Float:panOut)
params:(track:), (volumeOut:), (panOut:)
description:

------
name:GetUnderrunTime
language:c
return:(void:)
params:(unsigned int*:audio_xrunOutOptional), (unsigned int*:media_xrunOutOptional), (unsigned int*:curtimeOutOptional)
description:
retrieves the last timestamps of audio xrun (yellow-flash, if
available), media xrun (red-flash), and the current time stamp (all
milliseconds)
------
name:GetUnderrunTime
language:eel2
return:
params:(optional unsigned int:&audio_xrun), (optional unsigned int:&media_xrun), (optional unsigned int:&curtime)
description:
retrieves the last timestamps of audio xrun (yellow-flash, if
available), media xrun (red-flash), and the current time stamp (all
milliseconds)
------
name:reaper.GetUnderrunTime
language:lua
return:(optional number:audio_xrun),(optional number:media_xrun),(optional number:curtime)
params:
description:
retrieves the last timestamps of audio xrun (yellow-flash, if
available), media xrun (red-flash), and the current time stamp (all
milliseconds)
------
name:RPR_GetUnderrunTime
language:python
return:
params:(unsigned int:audio_xrunOutOptional), (unsigned int:media_xrunOutOptional), (unsigned int:curtimeOutOptional)
description:
retrieves the last timestamps of audio xrun (yellow-flash, if
available), media xrun (red-flash), and the current time stamp (all
milliseconds)
------
name:GetUserFileNameForRead
language:c
return:(bool:)
params:(char*:filenameNeed4096), (const char*:title), (const char*:defext)
description:
returns true if the user selected a valid file, false if the user canceled the dialog
------
name:GetUserFileNameForRead
language:eel2
return:(bool:)
params:(#filenameNeed4096:), ("title":), ("defext":)
description:
returns true if the user selected a valid file, false if the user canceled the dialog
------
name:reaper.GetUserFileNameForRead
language:lua
return:(boolean:retval),(string:filenameNeed4096)
params:(string:filenameNeed4096), (string:title), (string:defext)
description:
returns true if the user selected a valid file, false if the user canceled the dialog
------
name:RPR_GetUserFileNameForRead
language:python
return:(Boolean:retval),(String:filenameNeed4096),(String:title),(String:defext)
params:(filenameNeed4096:), (title:), (defext:)
description:
returns true if the user selected a valid file, false if the user canceled the dialog
------
name:GetUserInputs
language:c
return:(bool:)
params:(const char*:title), (int:num_inputs), (const char*:captions_csv), (char*:retvals_csv), (int:retvals_csv_sz)
description:
Get values from the user.
If a caption begins with *, for example "*password", the edit field will not display the input text.
Maximum fields is 16. Values are returned as a comma-separated string.
Returns false if the user canceled the dialog. You can supply special
extra information via additional caption fields: extrawidth=XXX to
increase text field width, separator=X to use a different separator for
returned fields.
------
name:GetUserInputs
language:eel2
return:(bool:)
params:("title":), (int:num_inputs), ("captions_csv":), (#retvals_csv:)
description:
Get values from the user.
If a caption begins with *, for example "*password", the edit field will not display the input text.
Maximum fields is 16. Values are returned as a comma-separated string.
Returns false if the user canceled the dialog. You can supply special
extra information via additional caption fields: extrawidth=XXX to
increase text field width, separator=X to use a different separator for
returned fields.
------
name:reaper.GetUserInputs
language:lua
return:(boolean:retval),(string:retvals_csv)
params:(string:title), (integer:num_inputs), (string:captions_csv), (string:retvals_csv)
description:
Get values from the user.
If a caption begins with *, for example "*password", the edit field will not display the input text.
Maximum fields is 16. Values are returned as a comma-separated string.
Returns false if the user canceled the dialog. You can supply special
extra information via additional caption fields: extrawidth=XXX to
increase text field width, separator=X to use a different separator for
returned fields.
------
name:RPR_GetUserInputs
language:python
return:(Boolean:retval),(String:title),(Int:num_inputs),(String:captions_csv),(String:retvals_csv),(Int:retvals_csv_sz)
params:(title:), (num_inputs:), (captions_csv:), (retvals_csv:), (retvals_csv_sz:)
description:
Get values from the user.
If a caption begins with *, for example "*password", the edit field will not display the input text.
Maximum fields is 16. Values are returned as a comma-separated string.
Returns false if the user canceled the dialog. You can supply special
extra information via additional caption fields: extrawidth=XXX to
increase text field width, separator=X to use a different separator for
returned fields.
------
name:GoToMarker
language:c
return:(void:)
params:(ReaProject*:proj), (int:marker_index), (bool:use_timeline_order)
description:
Go to marker. If use_timeline_order==true, marker_index 1 refers to the
first marker on the timeline.  If use_timeline_order==false,
marker_index 1 refers to the first marker with the user-editable index
of 1.
------
name:GoToMarker
language:eel2
return:
params:(ReaProject:proj), (int:marker_index), (bool:use_timeline_order)
description:
Go to marker. If use_timeline_order==true, marker_index 1 refers to the
first marker on the timeline.  If use_timeline_order==false,
marker_index 1 refers to the first marker with the user-editable index
of 1.
------
name:reaper.GoToMarker
language:lua
return:
params:(ReaProject:proj), (integer:marker_index), (boolean:use_timeline_order)
description:
Go to marker. If use_timeline_order==true, marker_index 1 refers to the
first marker on the timeline.  If use_timeline_order==false,
marker_index 1 refers to the first marker with the user-editable index
of 1.
------
name:RPR_GoToMarker
language:python
return:
params:(ReaProject:proj), (Int:marker_index), (Boolean:use_timeline_order)
description:
Go to marker. If use_timeline_order==true, marker_index 1 refers to the
first marker on the timeline.  If use_timeline_order==false,
marker_index 1 refers to the first marker with the user-editable index
of 1.
------
name:GoToRegion
language:c
return:(void:)
params:(ReaProject*:proj), (int:region_index), (bool:use_timeline_order)
description:
Seek to region after current region finishes playing (smooth seek). If
use_timeline_order==true, region_index 1 refers to the first region on
the timeline.  If use_timeline_order==false, region_index 1 refers to
the first region with the user-editable index of 1.
------
name:GoToRegion
language:eel2
return:
params:(ReaProject:proj), (int:region_index), (bool:use_timeline_order)
description:
Seek to region after current region finishes playing (smooth seek). If
use_timeline_order==true, region_index 1 refers to the first region on
the timeline.  If use_timeline_order==false, region_index 1 refers to
the first region with the user-editable index of 1.
------
name:reaper.GoToRegion
language:lua
return:
params:(ReaProject:proj), (integer:region_index), (boolean:use_timeline_order)
description:
Seek to region after current region finishes playing (smooth seek). If
use_timeline_order==true, region_index 1 refers to the first region on
the timeline.  If use_timeline_order==false, region_index 1 refers to
the first region with the user-editable index of 1.
------
name:RPR_GoToRegion
language:python
return:
params:(ReaProject:proj), (Int:region_index), (Boolean:use_timeline_order)
description:
Seek to region after current region finishes playing (smooth seek). If
use_timeline_order==true, region_index 1 refers to the first region on
the timeline.  If use_timeline_order==false, region_index 1 refers to
the first region with the user-editable index of 1.
------
name:GR_SelectColor
language:c
return:(int:)
params:(HWND:hwnd), (int*:colorOut)
description:
Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.
------
name:GR_SelectColor
language:eel2
return:(int:)
params:(HWND:hwnd), (int:&color)
description:
Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.
------
name:reaper.GR_SelectColor
language:lua
return:(integer:retval),(number:color)
params:(HWND:hwnd)
description:
Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.
------
name:RPR_GR_SelectColor
language:python
return:(Int:retval),(HWND:hwnd),(Int:colorOut)
params:(hwnd:), (colorOut:)
description:
Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.
------
name:GSC_mainwnd
language:c
return:(int:)
params:(int:t)
description:
this is just like win32 GetSysColor() but can have overrides.
------
name:GSC_mainwnd
language:eel2
return:(int:)
params:(int:t)
description:
this is just like win32 GetSysColor() but can have overrides.
------
name:reaper.GSC_mainwnd
language:lua
return:(integer:)
params:(integer:t)
description:
this is just like win32 GetSysColor() but can have overrides.
------
name:RPR_GSC_mainwnd
language:python
return:(Int:)
params:(Int:t)
description:
this is just like win32 GetSysColor() but can have overrides.
------
name:guidToString
language:c
return:(void:)
params:(const GUID*:g), (char*:destNeed64)
description:
dest should be at least 64 chars long to be safe
------
name:guidToString
language:eel2
return:
params:("gGUID":), (#destNeed64:)
description:
dest should be at least 64 chars long to be safe
------
name:reaper.guidToString
language:lua
return:(string:destNeed64)
params:(string:gGUID), (string:destNeed64)
description:
dest should be at least 64 chars long to be safe
------
name:RPR_guidToString
language:python
return:(const GUID:g),(String:destNeed64)
params:(g:), (destNeed64:)
description:
dest should be at least 64 chars long to be safe
------
name:HasExtState
language:c
return:(bool:)
params:(const char*:section), (const char*:key)
description:
Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.
------
name:HasExtState
language:eel2
return:(bool:)
params:("section":), ("key":)
description:
Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.
------
name:reaper.HasExtState
language:lua
return:(boolean:)
params:(string:section), (string:key)
description:
Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.
------
name:RPR_HasExtState
language:python
return:(Boolean:)
params:(String:section), (String:key)
description:
Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.
------
name:HasTrackMIDIPrograms
language:c
return:(const:char*)
params:(int:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:HasTrackMIDIPrograms
language:eel2
return:(bool:)
params:(#retval:), (int:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:reaper.HasTrackMIDIPrograms
language:lua
return:(string:)
params:(integer:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:RPR_HasTrackMIDIPrograms
language:python
return:(String:)
params:(Int:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:HasTrackMIDIProgramsEx
language:c
return:(const:char*)
params:(ReaProject*:proj), (MediaTrack*:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:HasTrackMIDIProgramsEx
language:eel2
return:(bool:)
params:(#retval:), (ReaProject:proj), (MediaTrack:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:reaper.HasTrackMIDIProgramsEx
language:lua
return:(string:)
params:(ReaProject:proj), (MediaTrack:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:RPR_HasTrackMIDIProgramsEx
language:python
return:(String:)
params:(ReaProject:proj), (MediaTrack:track)
description:
returns name of track plugin that is supplying MIDI programs,or NULL if there is none
------
name:Help_Set
language:c
return:(void:)
params:(const char*:helpstring), (bool:is_temporary_help)
description:

------
name:Help_Set
language:eel2
return:
params:("helpstring":), (bool:is_temporary_help)
description:

------
name:reaper.Help_Set
language:lua
return:
params:(string:helpstring), (boolean:is_temporary_help)
description:

------
name:RPR_Help_Set
language:python
return:
params:(String:helpstring), (Boolean:is_temporary_help)
description:

------
name:image_resolve_fn
language:c
return:(void:)
params:(const char*:in), (char*:out), (int:out_sz)
description:

------
name:image_resolve_fn
language:eel2
return:
params:("in":), (#out:)
description:

------
name:reaper.image_resolve_fn
language:lua
return:(string:out)
params:(string:in), (string:out)
description:

------
name:RPR_image_resolve_fn
language:python
return:(String:in),(String:out),(Int:out_sz)
params:(in:), (out:), (out_sz:)
description:

------
name:InsertAutomationItem
language:c
return:(int:)
params:(TrackEnvelope*:env), (int:pool_id), (double:position), (double:length)
description:
Insert a new automation item. pool_id < 0 collects existing envelope
points into the automation item; if pool_id is >= 0 the automation
item will be a new instance of that pool (which will be created as an
empty instance if it does not exist). Returns the index of the item,
suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.
------
name:InsertAutomationItem
language:eel2
return:(int:)
params:(TrackEnvelope:env), (int:pool_id), (position:), (length:)
description:
Insert a new automation item. pool_id < 0 collects existing envelope
points into the automation item; if pool_id is >= 0 the automation
item will be a new instance of that pool (which will be created as an
empty instance if it does not exist). Returns the index of the item,
suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.
------
name:reaper.InsertAutomationItem
language:lua
return:(integer:)
params:(TrackEnvelope:env), (integer:pool_id), (number:position), (number:length)
description:
Insert a new automation item. pool_id < 0 collects existing envelope
points into the automation item; if pool_id is >= 0 the automation
item will be a new instance of that pool (which will be created as an
empty instance if it does not exist). Returns the index of the item,
suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.
------
name:RPR_InsertAutomationItem
language:python
return:(Int:)
params:(TrackEnvelope:env), (Int:pool_id), (Float:position), (Float:length)
description:
Insert a new automation item. pool_id < 0 collects existing envelope
points into the automation item; if pool_id is >= 0 the automation
item will be a new instance of that pool (which will be created as an
empty instance if it does not exist). Returns the index of the item,
suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.
------
name:InsertEnvelopePoint
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (double:time), (double:value), (int:shape), (double:tension), (bool:selected), (bool*:noSortInOptional)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.
------
name:InsertEnvelopePoint
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (time:), (value:), (int:shape), (tension:), (bool:selected), (optional bool:noSortIn)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.
------
name:reaper.InsertEnvelopePoint
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (number:time), (number:value), (integer:shape), (number:tension), (boolean:selected), (optional boolean:noSortIn)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.
------
name:RPR_InsertEnvelopePoint
language:python
return:(Boolean:retval),(TrackEnvelope:envelope),(Float:time),(Float:value),(Int:shape),(Float:tension),(Boolean:selected),(Boolean:noSortInOptional)
params:(envelope:), (time:), (value:), (shape:), (tension:), (selected:), (noSortInOptional:)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.
------
name:InsertEnvelopePointEx
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx), (double:time), (double:value), (int:shape), (double:tension), (bool:selected), (bool*:noSortInOptional)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.
------
name:InsertEnvelopePointEx
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:autoitem_idx), (time:), (value:), (int:shape), (tension:), (bool:selected), (optional bool:noSortIn)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.
------
name:reaper.InsertEnvelopePointEx
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (integer:autoitem_idx), (number:time), (number:value), (integer:shape), (number:tension), (boolean:selected), (optional boolean:noSortIn)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.
------
name:RPR_InsertEnvelopePointEx
language:python
return:(Boolean:retval),(TrackEnvelope:envelope),(Int:autoitem_idx),(Float:time),(Float:value),(Int:shape),(Float:tension),(Boolean:selected),(Boolean:noSortInOptional)
params:(envelope:), (autoitem_idx:), (time:), (value:), (shape:), (tension:), (selected:), (noSortInOptional:)
description:
Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.
------
name:InsertMedia
language:c
return:(int:)
params:(const char*:file), (int:mode)
description:
mode: 0=add to current track, 1=add new track, 3=add to selected items
as takes, &4=stretch/loop to fit time sel, &8=try to match tempo
1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x,
&64=don't preserve pitch when matching tempo, &128=no
loop/section if startpct/endpct set, &256=force loop regardless of
global preference for looping imported items. &512=use high word as
absolute track index if mode&3==0.
------
name:InsertMedia
language:eel2
return:(int:)
params:("file":), (int:mode)
description:
mode: 0=add to current track, 1=add new track, 3=add to selected items
as takes, &4=stretch/loop to fit time sel, &8=try to match tempo
1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x,
&64=don't preserve pitch when matching tempo, &128=no
loop/section if startpct/endpct set, &256=force loop regardless of
global preference for looping imported items. &512=use high word as
absolute track index if mode&3==0.
------
name:reaper.InsertMedia
language:lua
return:(integer:)
params:(string:file), (integer:mode)
description:
mode: 0=add to current track, 1=add new track, 3=add to selected items
as takes, &4=stretch/loop to fit time sel, &8=try to match tempo
1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x,
&64=don't preserve pitch when matching tempo, &128=no
loop/section if startpct/endpct set, &256=force loop regardless of
global preference for looping imported items. &512=use high word as
absolute track index if mode&3==0.
------
name:RPR_InsertMedia
language:python
return:(Int:)
params:(String:file), (Int:mode)
description:
mode: 0=add to current track, 1=add new track, 3=add to selected items
as takes, &4=stretch/loop to fit time sel, &8=try to match tempo
1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x,
&64=don't preserve pitch when matching tempo, &128=no
loop/section if startpct/endpct set, &256=force loop regardless of
global preference for looping imported items. &512=use high word as
absolute track index if mode&3==0.
------
name:InsertMediaSection
language:c
return:(int:)
params:(const char*:file), (int:mode), (double:startpct), (double:endpct), (double:pitchshift)
description:

------
name:InsertMediaSection
language:eel2
return:(int:)
params:("file":), (int:mode), (startpct:), (endpct:), (pitchshift:)
description:

------
name:reaper.InsertMediaSection
language:lua
return:(integer:)
params:(string:file), (integer:mode), (number:startpct), (number:endpct), (number:pitchshift)
description:

------
name:RPR_InsertMediaSection
language:python
return:(Int:)
params:(String:file), (Int:mode), (Float:startpct), (Float:endpct), (Float:pitchshift)
description:

------
name:InsertTrackAtIndex
language:c
return:(void:)
params:(int:idx), (bool:wantDefaults)
description:
inserts a track at idx,of course this will be clamped to
0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise
no enabled fx/env
------
name:InsertTrackAtIndex
language:eel2
return:
params:(int:idx), (bool:wantDefaults)
description:
inserts a track at idx,of course this will be clamped to
0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise
no enabled fx/env
------
name:reaper.InsertTrackAtIndex
language:lua
return:
params:(integer:idx), (boolean:wantDefaults)
description:
inserts a track at idx,of course this will be clamped to
0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise
no enabled fx/env
------
name:RPR_InsertTrackAtIndex
language:python
return:
params:(Int:idx), (Boolean:wantDefaults)
description:
inserts a track at idx,of course this will be clamped to
0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise
no enabled fx/env
------
name:IsMediaExtension
language:c
return:(bool:)
params:(const char*:ext), (bool:wantOthers)
description:
Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.
------
name:IsMediaExtension
language:eel2
return:(bool:)
params:("ext":), (bool:wantOthers)
description:
Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.
------
name:reaper.IsMediaExtension
language:lua
return:(boolean:)
params:(string:ext), (boolean:wantOthers)
description:
Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.
------
name:RPR_IsMediaExtension
language:python
return:(Boolean:)
params:(String:ext), (Boolean:wantOthers)
description:
Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.
------
name:IsMediaItemSelected
language:c
return:(bool:)
params:(MediaItem*:item)
description:

------
name:IsMediaItemSelected
language:eel2
return:(bool:)
params:(MediaItem:item)
description:

------
name:reaper.IsMediaItemSelected
language:lua
return:(boolean:)
params:(MediaItem:item)
description:

------
name:RPR_IsMediaItemSelected
language:python
return:(Boolean:)
params:(MediaItem:item)
description:

------
name:IsProjectDirty
language:c
return:(int:)
params:(ReaProject*:proj)
description:
Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.
------
name:IsProjectDirty
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.
------
name:reaper.IsProjectDirty
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.
------
name:RPR_IsProjectDirty
language:python
return:(Int:)
params:(ReaProject:proj)
description:
Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.
------
name:IsTrackSelected
language:c
return:(bool:)
params:(MediaTrack*:track)
description:

------
name:IsTrackSelected
language:eel2
return:(bool:)
params:(MediaTrack:track)
description:

------
name:reaper.IsTrackSelected
language:lua
return:(boolean:)
params:(MediaTrack:track)
description:

------
name:RPR_IsTrackSelected
language:python
return:(Boolean:)
params:(MediaTrack:track)
description:

------
name:IsTrackVisible
language:c
return:(bool:)
params:(MediaTrack*:track), (bool:mixer)
description:
If mixer==true, returns true if the track is visible in the mixer.  If
mixer==false, returns true if the track is visible in the track control
panel.
------
name:IsTrackVisible
language:eel2
return:(bool:)
params:(MediaTrack:track), (bool:mixer)
description:
If mixer==true, returns true if the track is visible in the mixer.  If
mixer==false, returns true if the track is visible in the track control
panel.
------
name:reaper.IsTrackVisible
language:lua
return:(boolean:)
params:(MediaTrack:track), (boolean:mixer)
description:
If mixer==true, returns true if the track is visible in the mixer.  If
mixer==false, returns true if the track is visible in the track control
panel.
------
name:RPR_IsTrackVisible
language:python
return:(Boolean:)
params:(MediaTrack:track), (Boolean:mixer)
description:
If mixer==true, returns true if the track is visible in the mixer.  If
mixer==false, returns true if the track is visible in the track control
panel.
------
name:joystick_create
language:c
return:(joystick_device*:)
params:(const GUID*:guid)
description:
creates a joystick device
------
name:joystick_create
language:eel2
return:(joystick_device:)
params:("guidGUID":)
description:
creates a joystick device
------
name:reaper.joystick_create
language:lua
return:(joystick_device:)
params:(string:guidGUID)
description:
creates a joystick device
------
name:RPR_joystick_create
language:python
return:(joystick_device:)
params:(const GUID:guid)
description:
creates a joystick device
------
name:joystick_destroy
language:c
return:(void:)
params:(joystick_device*:device)
description:
destroys a joystick device
------
name:joystick_destroy
language:eel2
return:
params:(joystick_device:device)
description:
destroys a joystick device
------
name:reaper.joystick_destroy
language:lua
return:
params:(joystick_device:device)
description:
destroys a joystick device
------
name:RPR_joystick_destroy
language:python
return:
params:(joystick_device:device)
description:
destroys a joystick device
------
name:joystick_enum
language:c
return:(const:char*)
params:(int:index), (const char**:namestrOutOptional)
description:
enumerates installed devices, returns GUID as a string
------
name:joystick_enum
language:eel2
return:(bool:)
params:(#retval:), (int:index), (optional:#namestr)
description:
enumerates installed devices, returns GUID as a string
------
name:reaper.joystick_enum
language:lua
return:(string:retval),(optional string:namestr)
params:(integer:index)
description:
enumerates installed devices, returns GUID as a string
------
name:RPR_joystick_enum
language:python
return:(String:)
params:(Int:index), (String:namestrOutOptional)
description:
enumerates installed devices, returns GUID as a string
------
name:joystick_getaxis
language:c
return:(double:)
params:(joystick_device*:dev), (int:axis)
description:
returns axis value (-1..1)
------
name:joystick_getaxis
language:eel2
return:(double:)
params:(joystick_device:dev), (int:axis)
description:
returns axis value (-1..1)
------
name:reaper.joystick_getaxis
language:lua
return:(number:)
params:(joystick_device:dev), (integer:axis)
description:
returns axis value (-1..1)
------
name:RPR_joystick_getaxis
language:python
return:(Float:)
params:(joystick_device:dev), (Int:axis)
description:
returns axis value (-1..1)
------
name:joystick_getbuttonmask
language:c
return:(unsigned:int)
params:(joystick_device*:dev)
description:
returns button pressed mask, 1=first button, 2=second...
------
name:joystick_getbuttonmask
language:eel2
return:(uint:)
params:(joystick_device:dev)
description:
returns button pressed mask, 1=first button, 2=second...
------
name:reaper.joystick_getbuttonmask
language:lua
return:(integer:)
params:(joystick_device:dev)
description:
returns button pressed mask, 1=first button, 2=second...
------
name:RPR_joystick_getbuttonmask
language:python
return:(Unknown:)
params:(joystick_device:dev)
description:
returns button pressed mask, 1=first button, 2=second...
------
name:joystick_getinfo
language:c
return:(int:)
params:(joystick_device*:dev), (int*:axesOutOptional), (int*:povsOutOptional)
description:
returns button count
------
name:joystick_getinfo
language:eel2
return:(int:)
params:(joystick_device:dev), (optional int:&axes), (optional int:&povs)
description:
returns button count
------
name:reaper.joystick_getinfo
language:lua
return:(integer:retval),(optional number:axes),(optional number:povs)
params:(joystick_device:dev)
description:
returns button count
------
name:RPR_joystick_getinfo
language:python
return:(Int:retval),(joystick_device:dev),(Int:axesOutOptional),(Int:povsOutOptional)
params:(dev:), (axesOutOptional:), (povsOutOptional:)
description:
returns button count
------
name:joystick_getpov
language:c
return:(double:)
params:(joystick_device*:dev), (int:pov)
description:
returns POV value (usually 0..655.35, or 655.35 on error)
------
name:joystick_getpov
language:eel2
return:(double:)
params:(joystick_device:dev), (int:pov)
description:
returns POV value (usually 0..655.35, or 655.35 on error)
------
name:reaper.joystick_getpov
language:lua
return:(number:)
params:(joystick_device:dev), (integer:pov)
description:
returns POV value (usually 0..655.35, or 655.35 on error)
------
name:RPR_joystick_getpov
language:python
return:(Float:)
params:(joystick_device:dev), (Int:pov)
description:
returns POV value (usually 0..655.35, or 655.35 on error)
------
name:joystick_update
language:c
return:(bool:)
params:(joystick_device*:dev)
description:
Updates joystick state from hardware, returns true if successful
(joystick_get* will not be valid until joystick_update() is called
successfully)
------
name:joystick_update
language:eel2
return:(bool:)
params:(joystick_device:dev)
description:
Updates joystick state from hardware, returns true if successful
(joystick_get* will not be valid until joystick_update() is called
successfully)
------
name:reaper.joystick_update
language:lua
return:(boolean:)
params:(joystick_device:dev)
description:
Updates joystick state from hardware, returns true if successful
(joystick_get* will not be valid until joystick_update() is called
successfully)
------
name:RPR_joystick_update
language:python
return:(Boolean:)
params:(joystick_device:dev)
description:
Updates joystick state from hardware, returns true if successful
(joystick_get* will not be valid until joystick_update() is called
successfully)
------
name:LICE_ClipLine
language:c
return:(bool:)
params:(int*:pX1Out), (int*:pY1Out), (int*:pX2Out), (int*:pY2Out), (int:xLo), (int:yLo), (int:xHi), (int:yHi)
description:
Returns false if the line is entirely offscreen.
------
name:LICE_ClipLine
language:eel2
return:(bool:)
params:(int:&pX1), (int:&pY1), (int:&pX2), (int:&pY2), (int:xLo), (int:yLo), (int:xHi), (int:yHi)
description:
Returns false if the line is entirely offscreen.
------
name:reaper.LICE_ClipLine
language:lua
return:(boolean:retval),(number:pX1),(number:pY1),(number:pX2),(number:pY2)
params:(number:pX1), (number:pY1), (number:pX2), (number:pY2), (integer:xLo), (integer:yLo), (integer:xHi), (integer:yHi)
description:
Returns false if the line is entirely offscreen.
------
name:RPR_LICE_ClipLine
language:python
return:(Boolean:retval),(Int:pX1Out),(Int:pY1Out),(Int:pX2Out),(Int:pY2Out),(Int:xLo),(Int:yLo),(Int:xHi),(Int:yHi)
params:(pX1Out:), (pY1Out:), (pX2Out:), (pY2Out:), (xLo:), (yLo:), (xHi:), (yHi:)
description:
Returns false if the line is entirely offscreen.
------
name:Loop_OnArrow
language:c
return:(bool:)
params:(ReaProject*:project), (int:direction)
description:
Move the loop selection left or right. Returns true if snap is enabled.
------
name:Loop_OnArrow
language:eel2
return:(bool:)
params:(ReaProject:project), (int:direction)
description:
Move the loop selection left or right. Returns true if snap is enabled.
------
name:reaper.Loop_OnArrow
language:lua
return:(boolean:)
params:(ReaProject:project), (integer:direction)
description:
Move the loop selection left or right. Returns true if snap is enabled.
------
name:RPR_Loop_OnArrow
language:python
return:(Boolean:)
params:(ReaProject:project), (Int:direction)
description:
Move the loop selection left or right. Returns true if snap is enabled.
------
name:Main_OnCommand
language:c
return:(void:)
params:(int:command), (int:flag)
description:
See Main_OnCommandEx.
------
name:Main_OnCommand
language:eel2
return:
params:(int:command), (int:flag)
description:
See Main_OnCommandEx.
------
name:reaper.Main_OnCommand
language:lua
return:
params:(integer:command), (integer:flag)
description:
See Main_OnCommandEx.
------
name:RPR_Main_OnCommand
language:python
return:
params:(Int:command), (Int:flag)
description:
See Main_OnCommandEx.
------
name:Main_OnCommandEx
language:c
return:(void:)
params:(int:command), (int:flag), (ReaProject*:proj)
description:
Performs an action belonging to the main action section. To perform
non-native actions (ReaScripts, custom or extension plugins' actions)
safely, see NamedCommandLookup().
------
name:Main_OnCommandEx
language:eel2
return:
params:(int:command), (int:flag), (ReaProject:proj)
description:
Performs an action belonging to the main action section. To perform
non-native actions (ReaScripts, custom or extension plugins' actions)
safely, see NamedCommandLookup().
------
name:reaper.Main_OnCommandEx
language:lua
return:
params:(integer:command), (integer:flag), (ReaProject:proj)
description:
Performs an action belonging to the main action section. To perform
non-native actions (ReaScripts, custom or extension plugins' actions)
safely, see NamedCommandLookup().
------
name:RPR_Main_OnCommandEx
language:python
return:
params:(Int:command), (Int:flag), (ReaProject:proj)
description:
Performs an action belonging to the main action section. To perform
non-native actions (ReaScripts, custom or extension plugins' actions)
safely, see NamedCommandLookup().
------
name:Main_openProject
language:c
return:(void:)
params:(const char*:name)
description:
opens a project. will prompt the user to save unless name is prefixed
with 'noprompt:'. If name is prefixed with 'template:', project file
will be loaded as a template.
If passed a .RTrackTemplate file, adds the template to the existing project.
------
name:Main_openProject
language:eel2
return:
params:("name":)
description:
opens a project. will prompt the user to save unless name is prefixed
with 'noprompt:'. If name is prefixed with 'template:', project file
will be loaded as a template.
If passed a .RTrackTemplate file, adds the template to the existing project.
------
name:reaper.Main_openProject
language:lua
return:
params:(string:name)
description:
opens a project. will prompt the user to save unless name is prefixed
with 'noprompt:'. If name is prefixed with 'template:', project file
will be loaded as a template.
If passed a .RTrackTemplate file, adds the template to the existing project.
------
name:RPR_Main_openProject
language:python
return:
params:(String:name)
description:
opens a project. will prompt the user to save unless name is prefixed
with 'noprompt:'. If name is prefixed with 'template:', project file
will be loaded as a template.
If passed a .RTrackTemplate file, adds the template to the existing project.
------
name:Main_SaveProject
language:c
return:(void:)
params:(ReaProject*:proj), (bool:forceSaveAsInOptional)
description:
Save the project.
------
name:Main_SaveProject
language:eel2
return:
params:(ReaProject:proj), (bool:forceSaveAsIn)
description:
Save the project.
------
name:reaper.Main_SaveProject
language:lua
return:
params:(ReaProject:proj), (boolean:forceSaveAsIn)
description:
Save the project.
------
name:RPR_Main_SaveProject
language:python
return:
params:(ReaProject:proj), (Boolean:forceSaveAsInOptional)
description:
Save the project.
------
name:Main_UpdateLoopInfo
language:c
return:(void:)
params:(int:ignoremask)
description:

------
name:Main_UpdateLoopInfo
language:eel2
return:
params:(int:ignoremask)
description:

------
name:reaper.Main_UpdateLoopInfo
language:lua
return:
params:(integer:ignoremask)
description:

------
name:RPR_Main_UpdateLoopInfo
language:python
return:
params:(Int:ignoremask)
description:

------
name:MarkProjectDirty
language:c
return:(void:)
params:(ReaProject*:proj)
description:
Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.
------
name:MarkProjectDirty
language:eel2
return:
params:(ReaProject:proj)
description:
Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.
------
name:reaper.MarkProjectDirty
language:lua
return:
params:(ReaProject:proj)
description:
Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.
------
name:RPR_MarkProjectDirty
language:python
return:
params:(ReaProject:proj)
description:
Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.
------
name:MarkTrackItemsDirty
language:c
return:(void:)
params:(MediaTrack*:track), (MediaItem*:item)
description:
If track is supplied, item is ignored
------
name:MarkTrackItemsDirty
language:eel2
return:
params:(MediaTrack:track), (MediaItem:item)
description:
If track is supplied, item is ignored
------
name:reaper.MarkTrackItemsDirty
language:lua
return:
params:(MediaTrack:track), (MediaItem:item)
description:
If track is supplied, item is ignored
------
name:RPR_MarkTrackItemsDirty
language:python
return:
params:(MediaTrack:track), (MediaItem:item)
description:
If track is supplied, item is ignored
------
name:Master_GetPlayRate
language:c
return:(double:)
params:(ReaProject*:project)
description:

------
name:Master_GetPlayRate
language:eel2
return:(double:)
params:(ReaProject:project)
description:

------
name:reaper.Master_GetPlayRate
language:lua
return:(number:)
params:(ReaProject:project)
description:

------
name:RPR_Master_GetPlayRate
language:python
return:(Float:)
params:(ReaProject:project)
description:

------
name:Master_GetPlayRateAtTime
language:c
return:(double:)
params:(double:time_s), (ReaProject*:proj)
description:

------
name:Master_GetPlayRateAtTime
language:eel2
return:(double:)
params:(time_s:), (ReaProject:proj)
description:

------
name:reaper.Master_GetPlayRateAtTime
language:lua
return:(number:)
params:(number:time_s), (ReaProject:proj)
description:

------
name:RPR_Master_GetPlayRateAtTime
language:python
return:(Float:)
params:(Float:time_s), (ReaProject:proj)
description:

------
name:Master_GetTempo
language:c
return:(double:)
params:
description:

------
name:Master_GetTempo
language:eel2
return:(double:)
params:
description:

------
name:reaper.Master_GetTempo
language:lua
return:(number:)
params:
description:

------
name:RPR_Master_GetTempo
language:python
return:(Float:)
params:
description:

------
name:Master_NormalizePlayRate
language:c
return:(double:)
params:(double:playrate), (bool:isnormalized)
description:
Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.
------
name:Master_NormalizePlayRate
language:eel2
return:(double:)
params:(playrate:), (bool:isnormalized)
description:
Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.
------
name:reaper.Master_NormalizePlayRate
language:lua
return:(number:)
params:(number:playrate), (boolean:isnormalized)
description:
Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.
------
name:RPR_Master_NormalizePlayRate
language:python
return:(Float:)
params:(Float:playrate), (Boolean:isnormalized)
description:
Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.
------
name:Master_NormalizeTempo
language:c
return:(double:)
params:(double:bpm), (bool:isnormalized)
description:
Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.
------
name:Master_NormalizeTempo
language:eel2
return:(double:)
params:(bpm:), (bool:isnormalized)
description:
Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.
------
name:reaper.Master_NormalizeTempo
language:lua
return:(number:)
params:(number:bpm), (boolean:isnormalized)
description:
Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.
------
name:RPR_Master_NormalizeTempo
language:python
return:(Float:)
params:(Float:bpm), (Boolean:isnormalized)
description:
Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.
------
name:MB
language:c
return:(int:)
params:(const char*:msg), (const char*:title), (int:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:MB
language:eel2
return:(int:)
params:("msg":), ("title":), (int:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:reaper.MB
language:lua
return:(integer:)
params:(string:msg), (string:title), (integer:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:RPR_MB
language:python
return:(Int:)
params:(String:msg), (String:title), (Int:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:MediaItemDescendsFromTrack
language:c
return:(int:)
params:(MediaItem*:item), (MediaTrack*:track)
description:
Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.
------
name:MediaItemDescendsFromTrack
language:eel2
return:(int:)
params:(MediaItem:item), (MediaTrack:track)
description:
Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.
------
name:reaper.MediaItemDescendsFromTrack
language:lua
return:(integer:)
params:(MediaItem:item), (MediaTrack:track)
description:
Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.
------
name:RPR_MediaItemDescendsFromTrack
language:python
return:(Int:)
params:(MediaItem:item), (MediaTrack:track)
description:
Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.
------
name:MIDI_CountEvts
language:c
return:(int:)
params:(MediaItem_Take*:take), (int*:notecntOut), (int*:ccevtcntOut), (int*:textsyxevtcntOut)
description:
Count the number of notes, CC events, and text/sysex events in a given MIDI item.
------
name:MIDI_CountEvts
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:&notecnt), (int:&ccevtcnt), (int:&textsyxevtcnt)
description:
Count the number of notes, CC events, and text/sysex events in a given MIDI item.
------
name:reaper.MIDI_CountEvts
language:lua
return:(integer:retval),(number:notecnt),(number:ccevtcnt),(number:textsyxevtcnt)
params:(MediaItem_Take:take)
description:
Count the number of notes, CC events, and text/sysex events in a given MIDI item.
------
name:RPR_MIDI_CountEvts
language:python
return:(Int:retval),(MediaItem_Take:take),(Int:notecntOut),(Int:ccevtcntOut),(Int:textsyxevtcntOut)
params:(take:), (notecntOut:), (ccevtcntOut:), (textsyxevtcntOut:)
description:
Count the number of notes, CC events, and text/sysex events in a given MIDI item.
------
name:MIDI_DeleteCC
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:ccidx)
description:
Delete a MIDI CC event.
------
name:MIDI_DeleteCC
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:ccidx)
description:
Delete a MIDI CC event.
------
name:reaper.MIDI_DeleteCC
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:ccidx)
description:
Delete a MIDI CC event.
------
name:RPR_MIDI_DeleteCC
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:ccidx)
description:
Delete a MIDI CC event.
------
name:MIDI_DeleteEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:evtidx)
description:
Delete a MIDI event.
------
name:MIDI_DeleteEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:evtidx)
description:
Delete a MIDI event.
------
name:reaper.MIDI_DeleteEvt
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:evtidx)
description:
Delete a MIDI event.
------
name:RPR_MIDI_DeleteEvt
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:evtidx)
description:
Delete a MIDI event.
------
name:MIDI_DeleteNote
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:noteidx)
description:
Delete a MIDI note.
------
name:MIDI_DeleteNote
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:noteidx)
description:
Delete a MIDI note.
------
name:reaper.MIDI_DeleteNote
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:noteidx)
description:
Delete a MIDI note.
------
name:RPR_MIDI_DeleteNote
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:noteidx)
description:
Delete a MIDI note.
------
name:MIDI_DeleteTextSysexEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:textsyxevtidx)
description:
Delete a MIDI text or sysex event.
------
name:MIDI_DeleteTextSysexEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:textsyxevtidx)
description:
Delete a MIDI text or sysex event.
------
name:reaper.MIDI_DeleteTextSysexEvt
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:textsyxevtidx)
description:
Delete a MIDI text or sysex event.
------
name:RPR_MIDI_DeleteTextSysexEvt
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:textsyxevtidx)
description:
Delete a MIDI text or sysex event.
------
name:MIDI_DisableSort
language:c
return:(void:)
params:(MediaItem_Take*:take)
description:
Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.
------
name:MIDI_DisableSort
language:eel2
return:
params:(MediaItem_Take:take)
description:
Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.
------
name:reaper.MIDI_DisableSort
language:lua
return:
params:(MediaItem_Take:take)
description:
Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.
------
name:RPR_MIDI_DisableSort
language:python
return:
params:(MediaItem_Take:take)
description:
Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.
------
name:MIDI_EnumSelCC
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:ccidx)
description:
Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).
------
name:MIDI_EnumSelCC
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:ccidx)
description:
Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).
------
name:reaper.MIDI_EnumSelCC
language:lua
return:(integer:)
params:(MediaItem_Take:take), (integer:ccidx)
description:
Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).
------
name:RPR_MIDI_EnumSelCC
language:python
return:(Int:)
params:(MediaItem_Take:take), (Int:ccidx)
description:
Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).
------
name:MIDI_EnumSelEvts
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:evtidx)
description:
Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).
------
name:MIDI_EnumSelEvts
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:evtidx)
description:
Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).
------
name:reaper.MIDI_EnumSelEvts
language:lua
return:(integer:)
params:(MediaItem_Take:take), (integer:evtidx)
description:
Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).
------
name:RPR_MIDI_EnumSelEvts
language:python
return:(Int:)
params:(MediaItem_Take:take), (Int:evtidx)
description:
Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).
------
name:MIDI_EnumSelNotes
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:noteidx)
description:
Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).
------
name:MIDI_EnumSelNotes
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:noteidx)
description:
Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).
------
name:reaper.MIDI_EnumSelNotes
language:lua
return:(integer:)
params:(MediaItem_Take:take), (integer:noteidx)
description:
Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).
------
name:RPR_MIDI_EnumSelNotes
language:python
return:(Int:)
params:(MediaItem_Take:take), (Int:noteidx)
description:
Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).
------
name:MIDI_EnumSelTextSysexEvts
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:textsyxidx)
description:
Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).
------
name:MIDI_EnumSelTextSysexEvts
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:textsyxidx)
description:
Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).
------
name:reaper.MIDI_EnumSelTextSysexEvts
language:lua
return:(integer:)
params:(MediaItem_Take:take), (integer:textsyxidx)
description:
Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).
------
name:RPR_MIDI_EnumSelTextSysexEvts
language:python
return:(Int:)
params:(MediaItem_Take:take), (Int:textsyxidx)
description:
Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).
------
name:MIDI_GetAllEvts
language:c
return:(bool:)
params:(MediaItem_Take*:take), (char*:bufNeedBig), (int*:bufNeedBig_sz)
description:
Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_SetAllEvts.
------
name:MIDI_GetAllEvts
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (#buf:)
description:
Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_SetAllEvts.
------
name:reaper.MIDI_GetAllEvts
language:lua
return:(boolean:retval),(string:buf)
params:(MediaItem_Take:take), (string:buf)
description:
Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_SetAllEvts.
------
name:RPR_MIDI_GetAllEvts
language:python
return:(Boolean:retval),(MediaItem_Take:take),(String:bufNeedBig),(Int:bufNeedBig_sz)
params:(take:), (bufNeedBig:), (bufNeedBig_sz:)
description:
Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_SetAllEvts.
------
name:MIDI_GetCC
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:ccidx), (bool*:selectedOut), (bool*:mutedOut), (double*:ppqposOut), (int*:chanmsgOut), (int*:chanOut), (int*:msg2Out), (int*:msg3Out)
description:
Get MIDI CC event properties.
------
name:MIDI_GetCC
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:ccidx), (bool:&selected), (bool:&muted), (&ppqpos:), (int:&chanmsg), (int:&chan), (int:&msg2), (int:&msg3)
description:
Get MIDI CC event properties.
------
name:reaper.MIDI_GetCC
language:lua
return:(boolean:retval),(boolean:selected),(boolean:muted),(number:ppqpos),(number:chanmsg),(number:chan),(number:msg2),(number:msg3)
params:(MediaItem_Take:take), (integer:ccidx)
description:
Get MIDI CC event properties.
------
name:RPR_MIDI_GetCC
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:ccidx),(Boolean:selectedOut),(Boolean:mutedOut),(Float:ppqposOut),(Int:chanmsgOut),(Int:chanOut),(Int:msg2Out),(Int:msg3Out)
params:(take:), (ccidx:), (selectedOut:), (mutedOut:), (ppqposOut:), (chanmsgOut:), (chanOut:), (msg2Out:), (msg3Out:)
description:
Get MIDI CC event properties.
------
name:MIDI_GetCCShape
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:ccidx), (int*:shapeOut), (double*:beztensionOut)
description:
Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape
------
name:MIDI_GetCCShape
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:ccidx), (int:&shape), (&beztension:)
description:
Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape
------
name:reaper.MIDI_GetCCShape
language:lua
return:(boolean:retval),(number:shape),(number:beztension)
params:(MediaItem_Take:take), (integer:ccidx)
description:
Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape
------
name:RPR_MIDI_GetCCShape
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:ccidx),(Int:shapeOut),(Float:beztensionOut)
params:(take:), (ccidx:), (shapeOut:), (beztensionOut:)
description:
Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape
------
name:MIDI_GetEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:evtidx), (bool*:selectedOut), (bool*:mutedOut), (double*:ppqposOut), (char*:msg), (int*:msg_sz)
description:
Get MIDI event properties.
------
name:MIDI_GetEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:evtidx), (bool:&selected), (bool:&muted), (&ppqpos:), (#msg:)
description:
Get MIDI event properties.
------
name:reaper.MIDI_GetEvt
language:lua
return:(boolean:retval),(boolean:selected),(boolean:muted),(number:ppqpos),(string:msg)
params:(MediaItem_Take:take), (integer:evtidx), (boolean:selected), (boolean:muted), (number:ppqpos), (string:msg)
description:
Get MIDI event properties.
------
name:RPR_MIDI_GetEvt
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:evtidx),(Boolean:selectedOut),(Boolean:mutedOut),(Float:ppqposOut),(String:msg),(Int:msg_sz)
params:(take:), (evtidx:), (selectedOut:), (mutedOut:), (ppqposOut:), (msg:), (msg_sz:)
description:
Get MIDI event properties.
------
name:MIDI_GetGrid
language:c
return:(double:)
params:(MediaItem_Take*:take), (double*:swingOutOptional), (double*:noteLenOutOptional)
description:
Returns the most recent MIDI editor grid size for this MIDI take, in QN.
Swing is between 0 and 1. Note length is 0 if it follows the grid size.
------
name:MIDI_GetGrid
language:eel2
return:(double:)
params:(MediaItem_Take:take), (optional:&swing), (optional:&noteLen)
description:
Returns the most recent MIDI editor grid size for this MIDI take, in QN.
Swing is between 0 and 1. Note length is 0 if it follows the grid size.
------
name:reaper.MIDI_GetGrid
language:lua
return:(number:retval),(optional number:swing),(optional number:noteLen)
params:(MediaItem_Take:take)
description:
Returns the most recent MIDI editor grid size for this MIDI take, in QN.
Swing is between 0 and 1. Note length is 0 if it follows the grid size.
------
name:RPR_MIDI_GetGrid
language:python
return:(Float:retval),(MediaItem_Take:take),(Float:swingOutOptional),(Float:noteLenOutOptional)
params:(take:), (swingOutOptional:), (noteLenOutOptional:)
description:
Returns the most recent MIDI editor grid size for this MIDI take, in QN.
Swing is between 0 and 1. Note length is 0 if it follows the grid size.
------
name:MIDI_GetHash
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:notesonly), (char*:hash), (int:hash_sz)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetTrackHash
------
name:MIDI_GetHash
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (bool:notesonly), (#hash:)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetTrackHash
------
name:reaper.MIDI_GetHash
language:lua
return:(boolean:retval),(string:hash)
params:(MediaItem_Take:take), (boolean:notesonly), (string:hash)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetTrackHash
------
name:RPR_MIDI_GetHash
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Boolean:notesonly),(String:hash),(Int:hash_sz)
params:(take:), (notesonly:), (hash:), (hash_sz:)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetTrackHash
------
name:MIDI_GetNote
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:noteidx), (bool*:selectedOut), (bool*:mutedOut), (double*:startppqposOut), (double*:endppqposOut), (int*:chanOut), (int*:pitchOut), (int*:velOut)
description:
Get MIDI note properties.
------
name:MIDI_GetNote
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:noteidx), (bool:&selected), (bool:&muted), (&startppqpos:), (&endppqpos:), (int:&chan), (int:&pitch), (int:&vel)
description:
Get MIDI note properties.
------
name:reaper.MIDI_GetNote
language:lua
return:(boolean:retval),(boolean:selected),(boolean:muted),(number:startppqpos),(number:endppqpos),(number:chan),(number:pitch),(number:vel)
params:(MediaItem_Take:take), (integer:noteidx)
description:
Get MIDI note properties.
------
name:RPR_MIDI_GetNote
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:noteidx),(Boolean:selectedOut),(Boolean:mutedOut),(Float:startppqposOut),(Float:endppqposOut),(Int:chanOut),(Int:pitchOut),(Int:velOut)
params:(take:), (noteidx:), (selectedOut:), (mutedOut:), (startppqposOut:), (endppqposOut:), (chanOut:), (pitchOut:), (velOut:)
description:
Get MIDI note properties.
------
name:MIDI_GetPPQPos_EndOfMeasure
language:c
return:(double:)
params:(MediaItem_Take*:take), (double:ppqpos)
description:
Returns the MIDI tick (ppq) position corresponding to the end of the measure.
------
name:MIDI_GetPPQPos_EndOfMeasure
language:eel2
return:(double:)
params:(MediaItem_Take:take), (ppqpos:)
description:
Returns the MIDI tick (ppq) position corresponding to the end of the measure.
------
name:reaper.MIDI_GetPPQPos_EndOfMeasure
language:lua
return:(number:)
params:(MediaItem_Take:take), (number:ppqpos)
description:
Returns the MIDI tick (ppq) position corresponding to the end of the measure.
------
name:RPR_MIDI_GetPPQPos_EndOfMeasure
language:python
return:(Float:)
params:(MediaItem_Take:take), (Float:ppqpos)
description:
Returns the MIDI tick (ppq) position corresponding to the end of the measure.
------
name:MIDI_GetPPQPos_StartOfMeasure
language:c
return:(double:)
params:(MediaItem_Take*:take), (double:ppqpos)
description:
Returns the MIDI tick (ppq) position corresponding to the start of the measure.
------
name:MIDI_GetPPQPos_StartOfMeasure
language:eel2
return:(double:)
params:(MediaItem_Take:take), (ppqpos:)
description:
Returns the MIDI tick (ppq) position corresponding to the start of the measure.
------
name:reaper.MIDI_GetPPQPos_StartOfMeasure
language:lua
return:(number:)
params:(MediaItem_Take:take), (number:ppqpos)
description:
Returns the MIDI tick (ppq) position corresponding to the start of the measure.
------
name:RPR_MIDI_GetPPQPos_StartOfMeasure
language:python
return:(Float:)
params:(MediaItem_Take:take), (Float:ppqpos)
description:
Returns the MIDI tick (ppq) position corresponding to the start of the measure.
------
name:MIDI_GetPPQPosFromProjQN
language:c
return:(double:)
params:(MediaItem_Take*:take), (double:projqn)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.
------
name:MIDI_GetPPQPosFromProjQN
language:eel2
return:(double:)
params:(MediaItem_Take:take), (projqn:)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.
------
name:reaper.MIDI_GetPPQPosFromProjQN
language:lua
return:(number:)
params:(MediaItem_Take:take), (number:projqn)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.
------
name:RPR_MIDI_GetPPQPosFromProjQN
language:python
return:(Float:)
params:(MediaItem_Take:take), (Float:projqn)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.
------
name:MIDI_GetPPQPosFromProjTime
language:c
return:(double:)
params:(MediaItem_Take*:take), (double:projtime)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.
------
name:MIDI_GetPPQPosFromProjTime
language:eel2
return:(double:)
params:(MediaItem_Take:take), (projtime:)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.
------
name:reaper.MIDI_GetPPQPosFromProjTime
language:lua
return:(number:)
params:(MediaItem_Take:take), (number:projtime)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.
------
name:RPR_MIDI_GetPPQPosFromProjTime
language:python
return:(Float:)
params:(MediaItem_Take:take), (Float:projtime)
description:
Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.
------
name:MIDI_GetProjQNFromPPQPos
language:c
return:(double:)
params:(MediaItem_Take*:take), (double:ppqpos)
description:
Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.
------
name:MIDI_GetProjQNFromPPQPos
language:eel2
return:(double:)
params:(MediaItem_Take:take), (ppqpos:)
description:
Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.
------
name:reaper.MIDI_GetProjQNFromPPQPos
language:lua
return:(number:)
params:(MediaItem_Take:take), (number:ppqpos)
description:
Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.
------
name:RPR_MIDI_GetProjQNFromPPQPos
language:python
return:(Float:)
params:(MediaItem_Take:take), (Float:ppqpos)
description:
Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.
------
name:MIDI_GetProjTimeFromPPQPos
language:c
return:(double:)
params:(MediaItem_Take*:take), (double:ppqpos)
description:
Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.
------
name:MIDI_GetProjTimeFromPPQPos
language:eel2
return:(double:)
params:(MediaItem_Take:take), (ppqpos:)
description:
Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.
------
name:reaper.MIDI_GetProjTimeFromPPQPos
language:lua
return:(number:)
params:(MediaItem_Take:take), (number:ppqpos)
description:
Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.
------
name:RPR_MIDI_GetProjTimeFromPPQPos
language:python
return:(Float:)
params:(MediaItem_Take:take), (Float:ppqpos)
description:
Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.
------
name:MIDI_GetScale
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int*:rootOut), (int*:scaleOut), (char*:name), (int:name_sz)
description:
Get the active scale in the media source, if any. root 0=C, 1=C#, etc.
scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd,
&0x8=minor 3rd, &0xF=fourth, etc.
------
name:MIDI_GetScale
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:&root), (int:&scale), (#name:)
description:
Get the active scale in the media source, if any. root 0=C, 1=C#, etc.
scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd,
&0x8=minor 3rd, &0xF=fourth, etc.
------
name:reaper.MIDI_GetScale
language:lua
return:(boolean:retval),(number:root),(number:scale),(string:name)
params:(MediaItem_Take:take), (number:root), (number:scale), (string:name)
description:
Get the active scale in the media source, if any. root 0=C, 1=C#, etc.
scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd,
&0x8=minor 3rd, &0xF=fourth, etc.
------
name:RPR_MIDI_GetScale
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:rootOut),(Int:scaleOut),(String:name),(Int:name_sz)
params:(take:), (rootOut:), (scaleOut:), (name:), (name_sz:)
description:
Get the active scale in the media source, if any. root 0=C, 1=C#, etc.
scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd,
&0x8=minor 3rd, &0xF=fourth, etc.
------
name:MIDI_GetTextSysexEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:textsyxevtidx), (bool*:selectedOutOptional), (bool*:mutedOutOptional), (double*:ppqposOutOptional), (int*:typeOutOptional), (char*:msgOptional), (int*:msgOptional_sz)
description:
Get MIDI meta-event properties. Allowable types are -1:sysex (msg should
not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER
notation event. For all other meta-messages, type is returned as -2 and
msg returned as all zeroes. See MIDI_GetEvt.
------
name:MIDI_GetTextSysexEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:textsyxevtidx), (optional bool:&selected), (optional bool:&muted), (optional:&ppqpos), (optional int:&type), (optional:#msg)
description:
Get MIDI meta-event properties. Allowable types are -1:sysex (msg should
not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER
notation event. For all other meta-messages, type is returned as -2 and
msg returned as all zeroes. See MIDI_GetEvt.
------
name:reaper.MIDI_GetTextSysexEvt
language:lua
return:(boolean:retval),(optional boolean:selected),(optional boolean:muted),(optional number:ppqpos),(optional number:type),(optional string:msg)
params:(MediaItem_Take:take), (integer:textsyxevtidx), (optional boolean:selected), (optional boolean:muted), (optional number:ppqpos), (optional number:type), (optional string:msg)
description:
Get MIDI meta-event properties. Allowable types are -1:sysex (msg should
not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER
notation event. For all other meta-messages, type is returned as -2 and
msg returned as all zeroes. See MIDI_GetEvt.
------
name:RPR_MIDI_GetTextSysexEvt
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:textsyxevtidx),(Boolean:selectedOutOptional),(Boolean:mutedOutOptional),(Float:ppqposOutOptional),(Int:typeOutOptional),(String:msgOptional),(Int:msgOptional_sz)
params:(take:), (textsyxevtidx:), (selectedOutOptional:), (mutedOutOptional:), (ppqposOutOptional:), (typeOutOptional:), (msgOptional:), (msgOptional_sz:)
description:
Get MIDI meta-event properties. Allowable types are -1:sysex (msg should
not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER
notation event. For all other meta-messages, type is returned as -2 and
msg returned as all zeroes. See MIDI_GetEvt.
------
name:MIDI_GetTrackHash
language:c
return:(bool:)
params:(MediaTrack*:track), (bool:notesonly), (char*:hash), (int:hash_sz)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetHash
------
name:MIDI_GetTrackHash
language:eel2
return:(bool:)
params:(MediaTrack:track), (bool:notesonly), (#hash:)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetHash
------
name:reaper.MIDI_GetTrackHash
language:lua
return:(boolean:retval),(string:hash)
params:(MediaTrack:track), (boolean:notesonly), (string:hash)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetHash
------
name:RPR_MIDI_GetTrackHash
language:python
return:(Boolean:retval),(MediaTrack:track),(Boolean:notesonly),(String:hash),(Int:hash_sz)
params:(track:), (notesonly:), (hash:), (hash_sz:)
description:
Get a string that only changes when the MIDI data changes. If
notesonly==true, then the string changes only when the MIDI notes
change. See MIDI_GetHash
------
name:MIDI_InsertCC
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:selected), (bool:muted), (double:ppqpos), (int:chanmsg), (int:chan), (int:msg2), (int:msg3)
description:
Insert a new MIDI CC event.
------
name:MIDI_InsertCC
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (bool:selected), (bool:muted), (ppqpos:), (int:chanmsg), (int:chan), (int:msg2), (int:msg3)
description:
Insert a new MIDI CC event.
------
name:reaper.MIDI_InsertCC
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (boolean:selected), (boolean:muted), (number:ppqpos), (integer:chanmsg), (integer:chan), (integer:msg2), (integer:msg3)
description:
Insert a new MIDI CC event.
------
name:RPR_MIDI_InsertCC
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Boolean:selected), (Boolean:muted), (Float:ppqpos), (Int:chanmsg), (Int:chan), (Int:msg2), (Int:msg3)
description:
Insert a new MIDI CC event.
------
name:MIDI_InsertEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:selected), (bool:muted), (double:ppqpos), (const char*:bytestr), (int:bytestr_sz)
description:
Insert a new MIDI event.
------
name:MIDI_InsertEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (bool:selected), (bool:muted), (ppqpos:), ("bytestr":)
description:
Insert a new MIDI event.
------
name:reaper.MIDI_InsertEvt
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (boolean:selected), (boolean:muted), (number:ppqpos), (string:bytestr)
description:
Insert a new MIDI event.
------
name:RPR_MIDI_InsertEvt
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Boolean:selected), (Boolean:muted), (Float:ppqpos), (String:bytestr), (Int:bytestr_sz)
description:
Insert a new MIDI event.
------
name:MIDI_InsertNote
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:selected), (bool:muted), (double:startppqpos), (double:endppqpos), (int:chan), (int:pitch), (int:vel), (const bool*:noSortInOptional)
description:
Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.
------
name:MIDI_InsertNote
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (bool:selected), (bool:muted), (startppqpos:), (endppqpos:), (int:chan), (int:pitch), (int:vel), (optional bool:noSortIn)
description:
Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.
------
name:reaper.MIDI_InsertNote
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (boolean:selected), (boolean:muted), (number:startppqpos), (number:endppqpos), (integer:chan), (integer:pitch), (integer:vel), (optional boolean:noSortIn)
description:
Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.
------
name:RPR_MIDI_InsertNote
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Boolean:selected), (Boolean:muted), (Float:startppqpos), (Float:endppqpos), (Int:chan), (Int:pitch), (Int:vel), (const bool:noSortInOptional)
description:
Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.
------
name:MIDI_InsertTextSysexEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:selected), (bool:muted), (double:ppqpos), (int:type), (const char*:bytestr), (int:bytestr_sz)
description:
Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg
should not include bounding F0..F7), 1-14:MIDI text event types,
15=REAPER notation event.
------
name:MIDI_InsertTextSysexEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (bool:selected), (bool:muted), (ppqpos:), (int:type), ("bytestr":)
description:
Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg
should not include bounding F0..F7), 1-14:MIDI text event types,
15=REAPER notation event.
------
name:reaper.MIDI_InsertTextSysexEvt
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (boolean:selected), (boolean:muted), (number:ppqpos), (integer:type), (string:bytestr)
description:
Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg
should not include bounding F0..F7), 1-14:MIDI text event types,
15=REAPER notation event.
------
name:RPR_MIDI_InsertTextSysexEvt
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Boolean:selected), (Boolean:muted), (Float:ppqpos), (Int:type), (String:bytestr), (Int:bytestr_sz)
description:
Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg
should not include bounding F0..F7), 1-14:MIDI text event types,
15=REAPER notation event.
------
name:midi_reinit
language:c
return:(void:)
params:
description:
Reset all MIDI devices
------
name:midi_reinit
language:eel2
return:
params:
description:
Reset all MIDI devices
------
name:reaper.midi_reinit
language:lua
return:
params:
description:
Reset all MIDI devices
------
name:RPR_midi_reinit
language:python
return:
params:
description:
Reset all MIDI devices
------
name:MIDI_SelectAll
language:c
return:(void:)
params:(MediaItem_Take*:take), (bool:select)
description:
Select or deselect all MIDI content.
------
name:MIDI_SelectAll
language:eel2
return:
params:(MediaItem_Take:take), (bool:select)
description:
Select or deselect all MIDI content.
------
name:reaper.MIDI_SelectAll
language:lua
return:
params:(MediaItem_Take:take), (boolean:select)
description:
Select or deselect all MIDI content.
------
name:RPR_MIDI_SelectAll
language:python
return:
params:(MediaItem_Take:take), (Boolean:select)
description:
Select or deselect all MIDI content.
------
name:MIDI_SetAllEvts
language:c
return:(bool:)
params:(MediaItem_Take*:take), (const char*:buf), (int:buf_sz)
description:
Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_GetAllEvts.
------
name:MIDI_SetAllEvts
language:eel2
return:(bool:)
params:(MediaItem_Take:take), ("buf":)
description:
Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_GetAllEvts.
------
name:reaper.MIDI_SetAllEvts
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (string:buf)
description:
Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_GetAllEvts.
------
name:RPR_MIDI_SetAllEvts
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (String:buf), (Int:buf_sz)
description:
Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end,
&16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents
bezier curve data for the previous MIDI event: 1 byte for the bezier
type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_GetAllEvts.
------
name:MIDI_SetCC
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:ccidx), (const bool*:selectedInOptional), (const bool*:mutedInOptional), (const double*:ppqposInOptional), (const int*:chanmsgInOptional), (const int*:chanInOptional), (const int*:msg2InOptional), (const int*:msg3InOptional), (const bool*:noSortInOptional)
description:
Set MIDI CC event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:MIDI_SetCC
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:ccidx), (optional bool:selectedIn), (optional bool:mutedIn), (optional:ppqposIn), (optional int:chanmsgIn), (optional int:chanIn), (optional int:msg2In), (optional int:msg3In), (optional bool:noSortIn)
description:
Set MIDI CC event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:reaper.MIDI_SetCC
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:ccidx), (optional boolean:selectedIn), (optional boolean:mutedIn), (optional number:ppqposIn), (optional number:chanmsgIn), (optional number:chanIn), (optional number:msg2In), (optional number:msg3In), (optional boolean:noSortIn)
description:
Set MIDI CC event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:RPR_MIDI_SetCC
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:ccidx), (const bool:selectedInOptional), (const bool:mutedInOptional), (const double:ppqposInOptional), (const int:chanmsgInOptional), (const int:chanInOptional), (const int:msg2InOptional), (const int:msg3InOptional), (const bool:noSortInOptional)
description:
Set MIDI CC event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:MIDI_SetCCShape
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:ccidx), (int:shape), (double:beztension), (const bool*:noSortInOptional)
description:
Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape
------
name:MIDI_SetCCShape
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:ccidx), (int:shape), (beztension:), (optional bool:noSortIn)
description:
Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape
------
name:reaper.MIDI_SetCCShape
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:ccidx), (integer:shape), (number:beztension), (optional boolean:noSortIn)
description:
Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape
------
name:RPR_MIDI_SetCCShape
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:ccidx), (Int:shape), (Float:beztension), (const bool:noSortInOptional)
description:
Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape
------
name:MIDI_SetEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:evtidx), (const bool*:selectedInOptional), (const bool*:mutedInOptional), (const double*:ppqposInOptional), (const char*:msgOptional), (int:msgOptional_sz), (const bool*:noSortInOptional)
description:
Set MIDI event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:MIDI_SetEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:evtidx), (optional bool:selectedIn), (optional bool:mutedIn), (optional:ppqposIn), (optional:"msg"), (optional bool:noSortIn)
description:
Set MIDI event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:reaper.MIDI_SetEvt
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:evtidx), (optional boolean:selectedIn), (optional boolean:mutedIn), (optional number:ppqposIn), (optional string:msg), (optional boolean:noSortIn)
description:
Set MIDI event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:RPR_MIDI_SetEvt
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:evtidx), (const bool:selectedInOptional), (const bool:mutedInOptional), (const double:ppqposInOptional), (String:msgOptional), (Int:msgOptional_sz), (const bool:noSortInOptional)
description:
Set MIDI event properties. Properties passed as NULL will not be set.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:MIDI_SetItemExtents
language:c
return:(bool:)
params:(MediaItem*:item), (double:startQN), (double:endQN)
description:
Set the start/end positions of a media item that contains a MIDI take.
------
name:MIDI_SetItemExtents
language:eel2
return:(bool:)
params:(MediaItem:item), (startQN:), (endQN:)
description:
Set the start/end positions of a media item that contains a MIDI take.
------
name:reaper.MIDI_SetItemExtents
language:lua
return:(boolean:)
params:(MediaItem:item), (number:startQN), (number:endQN)
description:
Set the start/end positions of a media item that contains a MIDI take.
------
name:RPR_MIDI_SetItemExtents
language:python
return:(Boolean:)
params:(MediaItem:item), (Float:startQN), (Float:endQN)
description:
Set the start/end positions of a media item that contains a MIDI take.
------
name:MIDI_SetNote
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:noteidx), (const bool*:selectedInOptional), (const bool*:mutedInOptional), (const double*:startppqposInOptional), (const double*:endppqposInOptional), (const int*:chanInOptional), (const int*:pitchInOptional), (const int*:velInOptional), (const bool*:noSortInOptional)
description:
Set MIDI note properties. Properties passed as NULL (or negative values)
will not be set. Set noSort if setting multiple events, then call
MIDI_Sort when done. Setting multiple note start positions at once is
done more safely by deleting and re-inserting the notes.
------
name:MIDI_SetNote
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:noteidx), (optional bool:selectedIn), (optional bool:mutedIn), (optional:startppqposIn), (optional:endppqposIn), (optional int:chanIn), (optional int:pitchIn), (optional int:velIn), (optional bool:noSortIn)
description:
Set MIDI note properties. Properties passed as NULL (or negative values)
will not be set. Set noSort if setting multiple events, then call
MIDI_Sort when done. Setting multiple note start positions at once is
done more safely by deleting and re-inserting the notes.
------
name:reaper.MIDI_SetNote
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:noteidx), (optional boolean:selectedIn), (optional boolean:mutedIn), (optional number:startppqposIn), (optional number:endppqposIn), (optional number:chanIn), (optional number:pitchIn), (optional number:velIn), (optional boolean:noSortIn)
description:
Set MIDI note properties. Properties passed as NULL (or negative values)
will not be set. Set noSort if setting multiple events, then call
MIDI_Sort when done. Setting multiple note start positions at once is
done more safely by deleting and re-inserting the notes.
------
name:RPR_MIDI_SetNote
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:noteidx), (const bool:selectedInOptional), (const bool:mutedInOptional), (const double:startppqposInOptional), (const double:endppqposInOptional), (const int:chanInOptional), (const int:pitchInOptional), (const int:velInOptional), (const bool:noSortInOptional)
description:
Set MIDI note properties. Properties passed as NULL (or negative values)
will not be set. Set noSort if setting multiple events, then call
MIDI_Sort when done. Setting multiple note start positions at once is
done more safely by deleting and re-inserting the notes.
------
name:MIDI_SetTextSysexEvt
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:textsyxevtidx), (const bool*:selectedInOptional), (const bool*:mutedInOptional), (const double*:ppqposInOptional), (const int*:typeInOptional), (const char*:msgOptional), (int:msgOptional_sz), (const bool*:noSortInOptional)
description:
Set MIDI text or sysex event properties. Properties passed as NULL will
not be set. Allowable types are -1:sysex (msg should not include
bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:MIDI_SetTextSysexEvt
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:textsyxevtidx), (optional bool:selectedIn), (optional bool:mutedIn), (optional:ppqposIn), (optional int:typeIn), (optional:"msg"), (optional bool:noSortIn)
description:
Set MIDI text or sysex event properties. Properties passed as NULL will
not be set. Allowable types are -1:sysex (msg should not include
bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:reaper.MIDI_SetTextSysexEvt
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:textsyxevtidx), (optional boolean:selectedIn), (optional boolean:mutedIn), (optional number:ppqposIn), (optional number:typeIn), (optional string:msg), (optional boolean:noSortIn)
description:
Set MIDI text or sysex event properties. Properties passed as NULL will
not be set. Allowable types are -1:sysex (msg should not include
bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:RPR_MIDI_SetTextSysexEvt
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:textsyxevtidx), (const bool:selectedInOptional), (const bool:mutedInOptional), (const double:ppqposInOptional), (const int:typeInOptional), (String:msgOptional), (Int:msgOptional_sz), (const bool:noSortInOptional)
description:
Set MIDI text or sysex event properties. Properties passed as NULL will
not be set. Allowable types are -1:sysex (msg should not include
bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.
set noSort if setting multiple events, then call MIDI_Sort when done.
------
name:MIDI_Sort
language:c
return:(void:)
params:(MediaItem_Take*:take)
description:
Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.
------
name:MIDI_Sort
language:eel2
return:
params:(MediaItem_Take:take)
description:
Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.
------
name:reaper.MIDI_Sort
language:lua
return:
params:(MediaItem_Take:take)
description:
Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.
------
name:RPR_MIDI_Sort
language:python
return:
params:(MediaItem_Take:take)
description:
Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.
------
name:MIDIEditor_GetActive
language:c
return:(HWND:)
params:
description:
get a pointer to the focused MIDI editor window
see MIDIEditor_GetMode, MIDIEditor_OnCommand
------
name:MIDIEditor_GetActive
language:eel2
return:(HWND:)
params:
description:
get a pointer to the focused MIDI editor window
see MIDIEditor_GetMode, MIDIEditor_OnCommand
------
name:reaper.MIDIEditor_GetActive
language:lua
return:(HWND:)
params:
description:
get a pointer to the focused MIDI editor window
see MIDIEditor_GetMode, MIDIEditor_OnCommand
------
name:RPR_MIDIEditor_GetActive
language:python
return:(HWND:)
params:
description:
get a pointer to the focused MIDI editor window
see MIDIEditor_GetMode, MIDIEditor_OnCommand
------
name:MIDIEditor_GetMode
language:c
return:(int:)
params:(HWND:midieditor)
description:
get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
see MIDIEditor_GetActive, MIDIEditor_OnCommand
------
name:MIDIEditor_GetMode
language:eel2
return:(int:)
params:(HWND:midieditor)
description:
get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
see MIDIEditor_GetActive, MIDIEditor_OnCommand
------
name:reaper.MIDIEditor_GetMode
language:lua
return:(integer:)
params:(HWND:midieditor)
description:
get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
see MIDIEditor_GetActive, MIDIEditor_OnCommand
------
name:RPR_MIDIEditor_GetMode
language:python
return:(Int:)
params:(HWND:midieditor)
description:
get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
see MIDIEditor_GetActive, MIDIEditor_OnCommand
------
name:MIDIEditor_GetSetting_int
language:c
return:(int:)
params:(HWND:midieditor), (const char*:setting_desc)
description:
Get settings from a MIDI editor. setting_desc can be:
snap_enabled: returns 0 or 1
active_note_row: returns 0-127
last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events, 0x210=media item lane
default_note_vel: returns 0-127
default_note_chan: returns 0-15
default_note_len: returns default length in MIDI ticks
scale_enabled: returns 0-1
scale_root: returns 0-12 (0=C)
if setting_desc is unsupported, the function returns -1.
See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str
------
name:MIDIEditor_GetSetting_int
language:eel2
return:(int:)
params:(HWND:midieditor), ("setting_desc":)
description:
Get settings from a MIDI editor. setting_desc can be:
snap_enabled: returns 0 or 1
active_note_row: returns 0-127
last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events, 0x210=media item lane
default_note_vel: returns 0-127
default_note_chan: returns 0-15
default_note_len: returns default length in MIDI ticks
scale_enabled: returns 0-1
scale_root: returns 0-12 (0=C)
if setting_desc is unsupported, the function returns -1.
See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str
------
name:reaper.MIDIEditor_GetSetting_int
language:lua
return:(integer:)
params:(HWND:midieditor), (string:setting_desc)
description:
Get settings from a MIDI editor. setting_desc can be:
snap_enabled: returns 0 or 1
active_note_row: returns 0-127
last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events, 0x210=media item lane
default_note_vel: returns 0-127
default_note_chan: returns 0-15
default_note_len: returns default length in MIDI ticks
scale_enabled: returns 0-1
scale_root: returns 0-12 (0=C)
if setting_desc is unsupported, the function returns -1.
See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str
------
name:RPR_MIDIEditor_GetSetting_int
language:python
return:(Int:)
params:(HWND:midieditor), (String:setting_desc)
description:
Get settings from a MIDI editor. setting_desc can be:
snap_enabled: returns 0 or 1
active_note_row: returns 0-127
last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events, 0x210=media item lane
default_note_vel: returns 0-127
default_note_chan: returns 0-15
default_note_len: returns default length in MIDI ticks
scale_enabled: returns 0-1
scale_root: returns 0-12 (0=C)
if setting_desc is unsupported, the function returns -1.
See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str
------
name:MIDIEditor_GetSetting_str
language:c
return:(bool:)
params:(HWND:midieditor), (const char*:setting_desc), (char*:buf), (int:buf_sz)
description:
Get settings from a MIDI editor. setting_desc can be:
last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
scale: returns the scale record, for example "102034050607" for a major scale
if setting_desc is unsupported, the function returns false.
See MIDIEditor_GetActive, MIDIEditor_GetSetting_int
------
name:MIDIEditor_GetSetting_str
language:eel2
return:(bool:)
params:(HWND:midieditor), ("setting_desc":), (#buf:)
description:
Get settings from a MIDI editor. setting_desc can be:
last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
scale: returns the scale record, for example "102034050607" for a major scale
if setting_desc is unsupported, the function returns false.
See MIDIEditor_GetActive, MIDIEditor_GetSetting_int
------
name:reaper.MIDIEditor_GetSetting_str
language:lua
return:(boolean:retval),(string:buf)
params:(HWND:midieditor), (string:setting_desc), (string:buf)
description:
Get settings from a MIDI editor. setting_desc can be:
last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
scale: returns the scale record, for example "102034050607" for a major scale
if setting_desc is unsupported, the function returns false.
See MIDIEditor_GetActive, MIDIEditor_GetSetting_int
------
name:RPR_MIDIEditor_GetSetting_str
language:python
return:(Boolean:retval),(HWND:midieditor),(String:setting_desc),(String:buf),(Int:buf_sz)
params:(midieditor:), (setting_desc:), (buf:), (buf_sz:)
description:
Get settings from a MIDI editor. setting_desc can be:
last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
scale: returns the scale record, for example "102034050607" for a major scale
if setting_desc is unsupported, the function returns false.
See MIDIEditor_GetActive, MIDIEditor_GetSetting_int
------
name:MIDIEditor_GetTake
language:c
return:(MediaItem_Take*:)
params:(HWND:midieditor)
description:
get the take that is currently being edited in this MIDI editor
------
name:MIDIEditor_GetTake
language:eel2
return:(MediaItem_Take:)
params:(HWND:midieditor)
description:
get the take that is currently being edited in this MIDI editor
------
name:reaper.MIDIEditor_GetTake
language:lua
return:(MediaItem_Take:)
params:(HWND:midieditor)
description:
get the take that is currently being edited in this MIDI editor
------
name:RPR_MIDIEditor_GetTake
language:python
return:(MediaItem_Take:)
params:(HWND:midieditor)
description:
get the take that is currently being edited in this MIDI editor
------
name:MIDIEditor_LastFocused_OnCommand
language:c
return:(bool:)
params:(int:command_id), (bool:islistviewcommand)
description:
Send an action command to the last focused MIDI editor. Returns false if
there is no MIDI editor open, or if the view mode (piano roll or event
list) does not match the input.
see MIDIEditor_OnCommand
------
name:MIDIEditor_LastFocused_OnCommand
language:eel2
return:(bool:)
params:(int:command_id), (bool:islistviewcommand)
description:
Send an action command to the last focused MIDI editor. Returns false if
there is no MIDI editor open, or if the view mode (piano roll or event
list) does not match the input.
see MIDIEditor_OnCommand
------
name:reaper.MIDIEditor_LastFocused_OnCommand
language:lua
return:(boolean:)
params:(integer:command_id), (boolean:islistviewcommand)
description:
Send an action command to the last focused MIDI editor. Returns false if
there is no MIDI editor open, or if the view mode (piano roll or event
list) does not match the input.
see MIDIEditor_OnCommand
------
name:RPR_MIDIEditor_LastFocused_OnCommand
language:python
return:(Boolean:)
params:(Int:command_id), (Boolean:islistviewcommand)
description:
Send an action command to the last focused MIDI editor. Returns false if
there is no MIDI editor open, or if the view mode (piano roll or event
list) does not match the input.
see MIDIEditor_OnCommand
------
name:MIDIEditor_OnCommand
language:c
return:(bool:)
params:(HWND:midieditor), (int:command_id)
description:
Send an action command to a MIDI editor. Returns false if the supplied
MIDI editor pointer is not valid (not an open MIDI editor).
see MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand
------
name:MIDIEditor_OnCommand
language:eel2
return:(bool:)
params:(HWND:midieditor), (int:command_id)
description:
Send an action command to a MIDI editor. Returns false if the supplied
MIDI editor pointer is not valid (not an open MIDI editor).
see MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand
------
name:reaper.MIDIEditor_OnCommand
language:lua
return:(boolean:)
params:(HWND:midieditor), (integer:command_id)
description:
Send an action command to a MIDI editor. Returns false if the supplied
MIDI editor pointer is not valid (not an open MIDI editor).
see MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand
------
name:RPR_MIDIEditor_OnCommand
language:python
return:(Boolean:)
params:(HWND:midieditor), (Int:command_id)
description:
Send an action command to a MIDI editor. Returns false if the supplied
MIDI editor pointer is not valid (not an open MIDI editor).
see MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand
------
name:MIDIEditor_SetSetting_int
language:c
return:(bool:)
params:(HWND:midieditor), (const char*:setting_desc), (int:setting)
description:
Set settings for a MIDI editor. setting_desc can be:
active_note_row: 0-127
See MIDIEditor_GetSetting_int
------
name:MIDIEditor_SetSetting_int
language:eel2
return:(bool:)
params:(HWND:midieditor), ("setting_desc":), (int:setting)
description:
Set settings for a MIDI editor. setting_desc can be:
active_note_row: 0-127
See MIDIEditor_GetSetting_int
------
name:reaper.MIDIEditor_SetSetting_int
language:lua
return:(boolean:)
params:(HWND:midieditor), (string:setting_desc), (integer:setting)
description:
Set settings for a MIDI editor. setting_desc can be:
active_note_row: 0-127
See MIDIEditor_GetSetting_int
------
name:RPR_MIDIEditor_SetSetting_int
language:python
return:(Boolean:)
params:(HWND:midieditor), (String:setting_desc), (Int:setting)
description:
Set settings for a MIDI editor. setting_desc can be:
active_note_row: 0-127
See MIDIEditor_GetSetting_int
------
name:mkpanstr
language:c
return:(void:)
params:(char*:strNeed64), (double:pan)
description:

------
name:mkpanstr
language:eel2
return:
params:(#strNeed64:), (pan:)
description:

------
name:reaper.mkpanstr
language:lua
return:(string:strNeed64)
params:(string:strNeed64), (number:pan)
description:

------
name:RPR_mkpanstr
language:python
return:(String:strNeed64),(Float:pan)
params:(strNeed64:), (pan:)
description:

------
name:mkvolpanstr
language:c
return:(void:)
params:(char*:strNeed64), (double:vol), (double:pan)
description:

------
name:mkvolpanstr
language:eel2
return:
params:(#strNeed64:), (vol:), (pan:)
description:

------
name:reaper.mkvolpanstr
language:lua
return:(string:strNeed64)
params:(string:strNeed64), (number:vol), (number:pan)
description:

------
name:RPR_mkvolpanstr
language:python
return:(String:strNeed64),(Float:vol),(Float:pan)
params:(strNeed64:), (vol:), (pan:)
description:

------
name:mkvolstr
language:c
return:(void:)
params:(char*:strNeed64), (double:vol)
description:

------
name:mkvolstr
language:eel2
return:
params:(#strNeed64:), (vol:)
description:

------
name:reaper.mkvolstr
language:lua
return:(string:strNeed64)
params:(string:strNeed64), (number:vol)
description:

------
name:RPR_mkvolstr
language:python
return:(String:strNeed64),(Float:vol)
params:(strNeed64:), (vol:)
description:

------
name:MoveEditCursor
language:c
return:(void:)
params:(double:adjamt), (bool:dosel)
description:

------
name:MoveEditCursor
language:eel2
return:
params:(adjamt:), (bool:dosel)
description:

------
name:reaper.MoveEditCursor
language:lua
return:
params:(number:adjamt), (boolean:dosel)
description:

------
name:RPR_MoveEditCursor
language:python
return:
params:(Float:adjamt), (Boolean:dosel)
description:

------
name:MoveMediaItemToTrack
language:c
return:(bool:)
params:(MediaItem*:item), (MediaTrack*:desttr)
description:
returns TRUE if move succeeded
------
name:MoveMediaItemToTrack
language:eel2
return:(bool:)
params:(MediaItem:item), (MediaTrack:desttr)
description:
returns TRUE if move succeeded
------
name:reaper.MoveMediaItemToTrack
language:lua
return:(boolean:)
params:(MediaItem:item), (MediaTrack:desttr)
description:
returns TRUE if move succeeded
------
name:RPR_MoveMediaItemToTrack
language:python
return:(Boolean:)
params:(MediaItem:item), (MediaTrack:desttr)
description:
returns TRUE if move succeeded
------
name:MuteAllTracks
language:c
return:(void:)
params:(bool:mute)
description:

------
name:MuteAllTracks
language:eel2
return:
params:(bool:mute)
description:

------
name:reaper.MuteAllTracks
language:lua
return:
params:(boolean:mute)
description:

------
name:RPR_MuteAllTracks
language:python
return:
params:(Boolean:mute)
description:

------
name:my_getViewport
language:c
return:(void:)
params:(RECT*:r), (const RECT*:sr), (bool:wantWorkArea)
description:

------
name:my_getViewport
language:eel2
return:
params:(int:&r.left), (int:&r.top), (int:&r.right), (int:&r.bot), (int:sr.left), (int:sr.top), (int:sr.right), (int:sr.bot), (bool:wantWorkArea)
description:

------
name:reaper.my_getViewport
language:lua
return:
params:(numberr.left:), (numberr.top:), (numberr.right:), (numberr.bot:), (number:sr.left), (number:sr.top), (number:sr.right), (number:sr.bot), (boolean:wantWorkArea)
description:

------
name:RPR_my_getViewport
language:python
return:
params:(RECT:r), (const RECT:sr), (Boolean:wantWorkArea)
description:

------
name:NamedCommandLookup
language:c
return:(int:)
params:(const char*:command_name)
description:
Get the command ID number for named command that was registered by an
extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5"
for a ReaScript or a custom action.
------
name:NamedCommandLookup
language:eel2
return:(int:)
params:("command_name":)
description:
Get the command ID number for named command that was registered by an
extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5"
for a ReaScript or a custom action.
------
name:reaper.NamedCommandLookup
language:lua
return:(integer:)
params:(string:command_name)
description:
Get the command ID number for named command that was registered by an
extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5"
for a ReaScript or a custom action.
------
name:RPR_NamedCommandLookup
language:python
return:(Int:)
params:(String:command_name)
description:
Get the command ID number for named command that was registered by an
extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5"
for a ReaScript or a custom action.
------
name:OnPauseButton
language:c
return:(void:)
params:
description:
direct way to simulate pause button hit
------
name:OnPauseButton
language:eel2
return:
params:
description:
direct way to simulate pause button hit
------
name:reaper.OnPauseButton
language:lua
return:
params:
description:
direct way to simulate pause button hit
------
name:RPR_OnPauseButton
language:python
return:
params:
description:
direct way to simulate pause button hit
------
name:OnPauseButtonEx
language:c
return:(void:)
params:(ReaProject*:proj)
description:
direct way to simulate pause button hit
------
name:OnPauseButtonEx
language:eel2
return:
params:(ReaProject:proj)
description:
direct way to simulate pause button hit
------
name:reaper.OnPauseButtonEx
language:lua
return:
params:(ReaProject:proj)
description:
direct way to simulate pause button hit
------
name:RPR_OnPauseButtonEx
language:python
return:
params:(ReaProject:proj)
description:
direct way to simulate pause button hit
------
name:OnPlayButton
language:c
return:(void:)
params:
description:
direct way to simulate play button hit
------
name:OnPlayButton
language:eel2
return:
params:
description:
direct way to simulate play button hit
------
name:reaper.OnPlayButton
language:lua
return:
params:
description:
direct way to simulate play button hit
------
name:RPR_OnPlayButton
language:python
return:
params:
description:
direct way to simulate play button hit
------
name:OnPlayButtonEx
language:c
return:(void:)
params:(ReaProject*:proj)
description:
direct way to simulate play button hit
------
name:OnPlayButtonEx
language:eel2
return:
params:(ReaProject:proj)
description:
direct way to simulate play button hit
------
name:reaper.OnPlayButtonEx
language:lua
return:
params:(ReaProject:proj)
description:
direct way to simulate play button hit
------
name:RPR_OnPlayButtonEx
language:python
return:
params:(ReaProject:proj)
description:
direct way to simulate play button hit
------
name:OnStopButton
language:c
return:(void:)
params:
description:
direct way to simulate stop button hit
------
name:OnStopButton
language:eel2
return:
params:
description:
direct way to simulate stop button hit
------
name:reaper.OnStopButton
language:lua
return:
params:
description:
direct way to simulate stop button hit
------
name:RPR_OnStopButton
language:python
return:
params:
description:
direct way to simulate stop button hit
------
name:OnStopButtonEx
language:c
return:(void:)
params:(ReaProject*:proj)
description:
direct way to simulate stop button hit
------
name:OnStopButtonEx
language:eel2
return:
params:(ReaProject:proj)
description:
direct way to simulate stop button hit
------
name:reaper.OnStopButtonEx
language:lua
return:
params:(ReaProject:proj)
description:
direct way to simulate stop button hit
------
name:RPR_OnStopButtonEx
language:python
return:
params:(ReaProject:proj)
description:
direct way to simulate stop button hit
------
name:OpenColorThemeFile
language:c
return:(bool:)
params:(const char*:fn)
description:

------
name:OpenColorThemeFile
language:eel2
return:(bool:)
params:("fn":)
description:

------
name:reaper.OpenColorThemeFile
language:lua
return:(boolean:)
params:(string:fn)
description:

------
name:RPR_OpenColorThemeFile
language:python
return:(Boolean:)
params:(String:fn)
description:

------
name:OpenMediaExplorer
language:c
return:(HWND:)
params:(const char*:mediafn), (bool:play)
description:
Opens mediafn in the Media Explorer, play=true will play the file
immediately (or toggle playback if mediafn was already open), =false
will just select it.
------
name:OpenMediaExplorer
language:eel2
return:(HWND:)
params:("mediafn":), (bool:play)
description:
Opens mediafn in the Media Explorer, play=true will play the file
immediately (or toggle playback if mediafn was already open), =false
will just select it.
------
name:reaper.OpenMediaExplorer
language:lua
return:(HWND:)
params:(string:mediafn), (boolean:play)
description:
Opens mediafn in the Media Explorer, play=true will play the file
immediately (or toggle playback if mediafn was already open), =false
will just select it.
------
name:RPR_OpenMediaExplorer
language:python
return:(HWND:)
params:(String:mediafn), (Boolean:play)
description:
Opens mediafn in the Media Explorer, play=true will play the file
immediately (or toggle playback if mediafn was already open), =false
will just select it.
------
name:OscLocalMessageToHost
language:c
return:(void:)
params:(const char*:message), (const double*:valueInOptional)
description:
Send an OSC message directly to REAPER. The value argument may be NULL.
The message will be matched against the default OSC patterns. Only
supported if control surface support was enabled when installing REAPER.
------
name:OscLocalMessageToHost
language:eel2
return:
params:("message":), (optional:valueIn)
description:
Send an OSC message directly to REAPER. The value argument may be NULL.
The message will be matched against the default OSC patterns. Only
supported if control surface support was enabled when installing REAPER.
------
name:reaper.OscLocalMessageToHost
language:lua
return:
params:(string:message), (optional number:valueIn)
description:
Send an OSC message directly to REAPER. The value argument may be NULL.
The message will be matched against the default OSC patterns. Only
supported if control surface support was enabled when installing REAPER.
------
name:RPR_OscLocalMessageToHost
language:python
return:
params:(String:message), (const double:valueInOptional)
description:
Send an OSC message directly to REAPER. The value argument may be NULL.
The message will be matched against the default OSC patterns. Only
supported if control surface support was enabled when installing REAPER.
------
name:parse_timestr
language:c
return:(double:)
params:(const char*:buf)
description:
Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.
------
name:parse_timestr
language:eel2
return:(double:)
params:("buf":)
description:
Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.
------
name:reaper.parse_timestr
language:lua
return:(number:)
params:(string:buf)
description:
Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.
------
name:RPR_parse_timestr
language:python
return:(Float:)
params:(String:buf)
description:
Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.
------
name:parse_timestr_len
language:c
return:(double:)
params:(const char*:buf), (double:offset), (int:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:parse_timestr_len
language:eel2
return:(double:)
params:("buf":), (offset:), (int:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:reaper.parse_timestr_len
language:lua
return:(number:)
params:(string:buf), (number:offset), (integer:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:RPR_parse_timestr_len
language:python
return:(Float:)
params:(String:buf), (Float:offset), (Int:modeoverride)
description:
time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:parse_timestr_pos
language:c
return:(double:)
params:(const char*:buf), (int:modeoverride)
description:
Parse time string, time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:parse_timestr_pos
language:eel2
return:(double:)
params:("buf":), (int:modeoverride)
description:
Parse time string, time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:reaper.parse_timestr_pos
language:lua
return:(number:)
params:(string:buf), (integer:modeoverride)
description:
Parse time string, time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:RPR_parse_timestr_pos
language:python
return:(Float:)
params:(String:buf), (Int:modeoverride)
description:
Parse time string, time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
------
name:parsepanstr
language:c
return:(double:)
params:(const char*:str)
description:

------
name:parsepanstr
language:eel2
return:(double:)
params:("str":)
description:

------
name:reaper.parsepanstr
language:lua
return:(number:)
params:(string:str)
description:

------
name:RPR_parsepanstr
language:python
return:(Float:)
params:(String:str)
description:

------
name:PCM_Sink_Enum
language:c
return:(unsigned:int)
params:(int:idx), (const char**:descstrOut)
description:

------
name:PCM_Sink_Enum
language:eel2
return:(uint:)
params:(int:idx), (#descstr:)
description:

------
name:reaper.PCM_Sink_Enum
language:lua
return:(integer:retval),(string:descstr)
params:(integer:idx)
description:

------
name:RPR_PCM_Sink_Enum
language:python
return:(Unknown:)
params:(Int:idx), (String:descstrOut)
description:

------
name:PCM_Sink_GetExtension
language:c
return:(const:char*)
params:(const char*:data), (int:data_sz)
description:

------
name:PCM_Sink_GetExtension
language:eel2
return:(bool:)
params:(#retval:), ("data":)
description:

------
name:reaper.PCM_Sink_GetExtension
language:lua
return:(string:)
params:(string:data)
description:

------
name:RPR_PCM_Sink_GetExtension
language:python
return:(String:)
params:(String:data), (Int:data_sz)
description:

------
name:PCM_Sink_ShowConfig
language:c
return:(HWND:)
params:(const char*:cfg), (int:cfg_sz), (HWND:hwndParent)
description:

------
name:PCM_Sink_ShowConfig
language:eel2
return:(HWND:)
params:("cfg":), (HWND:hwndParent)
description:

------
name:reaper.PCM_Sink_ShowConfig
language:lua
return:(HWND:)
params:(string:cfg), (HWND:hwndParent)
description:

------
name:RPR_PCM_Sink_ShowConfig
language:python
return:(HWND:)
params:(String:cfg), (Int:cfg_sz), (HWND:hwndParent)
description:

------
name:PCM_Source_CreateFromFile
language:c
return:(PCM_source*:)
params:(const char*:filename)
description:
See PCM_Source_CreateFromFileEx.
------
name:PCM_Source_CreateFromFile
language:eel2
return:(PCM_source:)
params:("filename":)
description:
See PCM_Source_CreateFromFileEx.
------
name:reaper.PCM_Source_CreateFromFile
language:lua
return:(PCM_source:)
params:(string:filename)
description:
See PCM_Source_CreateFromFileEx.
------
name:RPR_PCM_Source_CreateFromFile
language:python
return:(PCM_source:)
params:(String:filename)
description:
See PCM_Source_CreateFromFileEx.
------
name:PCM_Source_CreateFromFileEx
language:c
return:(PCM_source*:)
params:(const char*:filename), (bool:forcenoMidiImp)
description:
Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.
------
name:PCM_Source_CreateFromFileEx
language:eel2
return:(PCM_source:)
params:("filename":), (bool:forcenoMidiImp)
description:
Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.
------
name:reaper.PCM_Source_CreateFromFileEx
language:lua
return:(PCM_source:)
params:(string:filename), (boolean:forcenoMidiImp)
description:
Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.
------
name:RPR_PCM_Source_CreateFromFileEx
language:python
return:(PCM_source:)
params:(String:filename), (Boolean:forcenoMidiImp)
description:
Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.
------
name:PCM_Source_CreateFromType
language:c
return:(PCM_source*:)
params:(const char*:sourcetype)
description:
Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.
------
name:PCM_Source_CreateFromType
language:eel2
return:(PCM_source:)
params:("sourcetype":)
description:
Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.
------
name:reaper.PCM_Source_CreateFromType
language:lua
return:(PCM_source:)
params:(string:sourcetype)
description:
Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.
------
name:RPR_PCM_Source_CreateFromType
language:python
return:(PCM_source:)
params:(String:sourcetype)
description:
Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.
------
name:PCM_Source_Destroy
language:c
return:(void:)
params:(PCM_source*:src)
description:
Deletes a PCM_source -- be sure that you remove any project reference before deleting a source
------
name:PCM_Source_Destroy
language:eel2
return:
params:(PCM_source:src)
description:
Deletes a PCM_source -- be sure that you remove any project reference before deleting a source
------
name:reaper.PCM_Source_Destroy
language:lua
return:
params:(PCM_source:src)
description:
Deletes a PCM_source -- be sure that you remove any project reference before deleting a source
------
name:RPR_PCM_Source_Destroy
language:python
return:
params:(PCM_source:src)
description:
Deletes a PCM_source -- be sure that you remove any project reference before deleting a source
------
name:PCM_Source_GetPeaks
language:c
return:(int:)
params:(PCM_source*:src), (double:peakrate), (double:starttime), (int:numchannels), (int:numsamplesperchannel), (int:want_extra_type), (double*:buf)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:PCM_Source_GetPeaks
language:eel2
return:(int:)
params:(PCM_source:src), (peakrate:), (starttime:), (int:numchannels), (int:numsamplesperchannel), (int:want_extra_type), (buffer_ptr:buf)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:reaper.PCM_Source_GetPeaks
language:lua
return:(integer:)
params:(PCM_source:src), (number:peakrate), (number:starttime), (integer:numchannels), (integer:numsamplesperchannel), (integer:want_extra_type), (reaper_array:buf)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:RPR_PCM_Source_GetPeaks
language:python
return:(Int:retval),(PCM_source:src),(Float:peakrate),(Float:starttime),(Int:numchannels),(Int:numsamplesperchannel),(Int:want_extra_type),(Float:buf)
params:(src:), (peakrate:), (starttime:), (numchannels:), (numsamplesperchannel:), (want_extra_type:), (buf:)
description:
Gets block of peak samples to buf. Note that the peak samples are
interleaved, but in two or three blocks (maximums, then minimums, then
extra). Return value has 20 bits of returned sample count, then 4 bits
of output_mode (0xf00000), then a bit to signify whether extra_type was
available (0x1000000). extra_type can be 115 ('s') for spectral
information, which will return peak samples as integers with the low 15
bits frequency, next 14 bits tonality.
------
name:PCM_Source_GetSectionInfo
language:c
return:(bool:)
params:(PCM_source*:src), (double*:offsOut), (double*:lenOut), (bool*:revOut)
description:
If a section/reverse block, retrieves offset/len/reverse. return true if success
------
name:PCM_Source_GetSectionInfo
language:eel2
return:(bool:)
params:(PCM_source:src), (&offs:), (&len:), (bool:&rev)
description:
If a section/reverse block, retrieves offset/len/reverse. return true if success
------
name:reaper.PCM_Source_GetSectionInfo
language:lua
return:(boolean:retval),(number:offs),(number:len),(boolean:rev)
params:(PCM_source:src)
description:
If a section/reverse block, retrieves offset/len/reverse. return true if success
------
name:RPR_PCM_Source_GetSectionInfo
language:python
return:(Boolean:retval),(PCM_source:src),(Float:offsOut),(Float:lenOut),(Boolean:revOut)
params:(src:), (offsOut:), (lenOut:), (revOut:)
description:
If a section/reverse block, retrieves offset/len/reverse. return true if success
------
name:PluginWantsAlwaysRunFx
language:c
return:(void:)
params:(int:amt)
description:

------
name:PluginWantsAlwaysRunFx
language:eel2
return:
params:(int:amt)
description:

------
name:reaper.PluginWantsAlwaysRunFx
language:lua
return:
params:(integer:amt)
description:

------
name:RPR_PluginWantsAlwaysRunFx
language:python
return:
params:(Int:amt)
description:

------
name:PreventUIRefresh
language:c
return:(void:)
params:(int:prevent_count)
description:
adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur
------
name:PreventUIRefresh
language:eel2
return:
params:(int:prevent_count)
description:
adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur
------
name:reaper.PreventUIRefresh
language:lua
return:
params:(integer:prevent_count)
description:
adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur
------
name:RPR_PreventUIRefresh
language:python
return:
params:(Int:prevent_count)
description:
adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur
------
name:ReaScriptError
language:c
return:(void:)
params:(const char*:errmsg)
description:
Causes REAPER to display the error message after the current ReaScript finishes.
------
name:ReaScriptError
language:eel2
return:
params:("errmsg":)
description:
Causes REAPER to display the error message after the current ReaScript finishes.
------
name:reaper.ReaScriptError
language:lua
return:
params:(string:errmsg)
description:
Causes REAPER to display the error message after the current ReaScript finishes.
------
name:RPR_ReaScriptError
language:python
return:
params:(String:errmsg)
description:
Causes REAPER to display the error message after the current ReaScript finishes.
------
name:RecursiveCreateDirectory
language:c
return:(int:)
params:(const char*:path), (size_t:ignored)
description:
returns positive value on success, 0 on failure.
------
name:RecursiveCreateDirectory
language:eel2
return:(int:)
params:("path":), (size_t:ignored)
description:
returns positive value on success, 0 on failure.
------
name:reaper.RecursiveCreateDirectory
language:lua
return:(integer:)
params:(string:path), (integer:ignored)
description:
returns positive value on success, 0 on failure.
------
name:RPR_RecursiveCreateDirectory
language:python
return:(Int:)
params:(String:path), (Unknown:ignored)
description:
returns positive value on success, 0 on failure.
------
name:reduce_open_files
language:c
return:(int:)
params:(int:flags)
description:
garbage-collects extra open files and closes them. if flags has 1 set,
this is done incrementally (call this from a regular timer, if desired).
if flags has 2 set, files are aggressively closed (they may need to be
re-opened very soon). returns number of files closed by this call.
------
name:reduce_open_files
language:eel2
return:(int:)
params:(int:flags)
description:
garbage-collects extra open files and closes them. if flags has 1 set,
this is done incrementally (call this from a regular timer, if desired).
if flags has 2 set, files are aggressively closed (they may need to be
re-opened very soon). returns number of files closed by this call.
------
name:reaper.reduce_open_files
language:lua
return:(integer:)
params:(integer:flags)
description:
garbage-collects extra open files and closes them. if flags has 1 set,
this is done incrementally (call this from a regular timer, if desired).
if flags has 2 set, files are aggressively closed (they may need to be
re-opened very soon). returns number of files closed by this call.
------
name:RPR_reduce_open_files
language:python
return:(Int:)
params:(Int:flags)
description:
garbage-collects extra open files and closes them. if flags has 1 set,
this is done incrementally (call this from a regular timer, if desired).
if flags has 2 set, files are aggressively closed (they may need to be
re-opened very soon). returns number of files closed by this call.
------
name:RefreshToolbar
language:c
return:(void:)
params:(int:command_id)
description:
See RefreshToolbar2.
------
name:RefreshToolbar
language:eel2
return:
params:(int:command_id)
description:
See RefreshToolbar2.
------
name:reaper.RefreshToolbar
language:lua
return:
params:(integer:command_id)
description:
See RefreshToolbar2.
------
name:RPR_RefreshToolbar
language:python
return:
params:(Int:command_id)
description:
See RefreshToolbar2.
------
name:RefreshToolbar2
language:c
return:(void:)
params:(int:section_id), (int:command_id)
description:
Refresh the toolbar button states of a toggle action.
------
name:RefreshToolbar2
language:eel2
return:
params:(int:section_id), (int:command_id)
description:
Refresh the toolbar button states of a toggle action.
------
name:reaper.RefreshToolbar2
language:lua
return:
params:(integer:section_id), (integer:command_id)
description:
Refresh the toolbar button states of a toggle action.
------
name:RPR_RefreshToolbar2
language:python
return:
params:(Int:section_id), (Int:command_id)
description:
Refresh the toolbar button states of a toggle action.
------
name:relative_fn
language:c
return:(void:)
params:(const char*:in), (char*:out), (int:out_sz)
description:
Makes a filename "in" relative to the current project, if any.
------
name:relative_fn
language:eel2
return:
params:("in":), (#out:)
description:
Makes a filename "in" relative to the current project, if any.
------
name:reaper.relative_fn
language:lua
return:(string:out)
params:(string:in), (string:out)
description:
Makes a filename "in" relative to the current project, if any.
------
name:RPR_relative_fn
language:python
return:(String:in),(String:out),(Int:out_sz)
params:(in:), (out:), (out_sz:)
description:
Makes a filename "in" relative to the current project, if any.
------
name:RemoveTrackSend
language:c
return:(bool:)
params:(MediaTrack*:tr), (int:category), (int:sendidx)
description:
Remove a send/receive/hardware output, return true on success. category
is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.
------
name:RemoveTrackSend
language:eel2
return:(bool:)
params:(MediaTrack:tr), (int:category), (int:sendidx)
description:
Remove a send/receive/hardware output, return true on success. category
is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.
------
name:reaper.RemoveTrackSend
language:lua
return:(boolean:)
params:(MediaTrack:tr), (integer:category), (integer:sendidx)
description:
Remove a send/receive/hardware output, return true on success. category
is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.
------
name:RPR_RemoveTrackSend
language:python
return:(Boolean:)
params:(MediaTrack:tr), (Int:category), (Int:sendidx)
description:
Remove a send/receive/hardware output, return true on success. category
is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.
------
name:RenderFileSection
language:c
return:(bool:)
params:(const char*:source_filename), (const char*:target_filename), (double:start_percent), (double:end_percent), (double:playrate)
description:
Not available while playing back.
------
name:RenderFileSection
language:eel2
return:(bool:)
params:("source_filename":), ("target_filename":), (start_percent:), (end_percent:), (playrate:)
description:
Not available while playing back.
------
name:reaper.RenderFileSection
language:lua
return:(boolean:)
params:(string:source_filename), (string:target_filename), (number:start_percent), (number:end_percent), (number:playrate)
description:
Not available while playing back.
------
name:RPR_RenderFileSection
language:python
return:(Boolean:)
params:(String:source_filename), (String:target_filename), (Float:start_percent), (Float:end_percent), (Float:playrate)
description:
Not available while playing back.
------
name:ReorderSelectedTracks
language:c
return:(bool:)
params:(int:beforeTrackIdx), (int:makePrevFolder)
description:
Moves all selected tracks to immediately above track specified by index
beforeTrackIdx, returns false if no tracks were selected.
makePrevFolder=0 for normal, 1 = as child of track preceding track
specified by beforeTrackIdx, 2 = if track preceding track specified by
beforeTrackIdx is last track in folder, extend folder
------
name:ReorderSelectedTracks
language:eel2
return:(bool:)
params:(int:beforeTrackIdx), (int:makePrevFolder)
description:
Moves all selected tracks to immediately above track specified by index
beforeTrackIdx, returns false if no tracks were selected.
makePrevFolder=0 for normal, 1 = as child of track preceding track
specified by beforeTrackIdx, 2 = if track preceding track specified by
beforeTrackIdx is last track in folder, extend folder
------
name:reaper.ReorderSelectedTracks
language:lua
return:(boolean:)
params:(integer:beforeTrackIdx), (integer:makePrevFolder)
description:
Moves all selected tracks to immediately above track specified by index
beforeTrackIdx, returns false if no tracks were selected.
makePrevFolder=0 for normal, 1 = as child of track preceding track
specified by beforeTrackIdx, 2 = if track preceding track specified by
beforeTrackIdx is last track in folder, extend folder
------
name:RPR_ReorderSelectedTracks
language:python
return:(Boolean:)
params:(Int:beforeTrackIdx), (Int:makePrevFolder)
description:
Moves all selected tracks to immediately above track specified by index
beforeTrackIdx, returns false if no tracks were selected.
makePrevFolder=0 for normal, 1 = as child of track preceding track
specified by beforeTrackIdx, 2 = if track preceding track specified by
beforeTrackIdx is last track in folder, extend folder
------
name:Resample_EnumModes
language:c
return:(const:char*)
params:(int:mode)
description:

------
name:Resample_EnumModes
language:eel2
return:(bool:)
params:(#retval:), (int:mode)
description:

------
name:reaper.Resample_EnumModes
language:lua
return:(string:)
params:(integer:mode)
description:

------
name:RPR_Resample_EnumModes
language:python
return:(String:)
params:(Int:mode)
description:

------
name:resolve_fn
language:c
return:(void:)
params:(const char*:in), (char*:out), (int:out_sz)
description:
See resolve_fn2.
------
name:resolve_fn
language:eel2
return:
params:("in":), (#out:)
description:
See resolve_fn2.
------
name:reaper.resolve_fn
language:lua
return:(string:out)
params:(string:in), (string:out)
description:
See resolve_fn2.
------
name:RPR_resolve_fn
language:python
return:(String:in),(String:out),(Int:out_sz)
params:(in:), (out:), (out_sz:)
description:
See resolve_fn2.
------
name:resolve_fn2
language:c
return:(void:)
params:(const char*:in), (char*:out), (int:out_sz), (const char*:checkSubDirOptional)
description:
Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.
------
name:resolve_fn2
language:eel2
return:
params:("in":), (#out:), (optional:"checkSubDir")
description:
Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.
------
name:reaper.resolve_fn2
language:lua
return:(string:out)
params:(string:in), (string:out), (optional string:checkSubDir)
description:
Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.
------
name:RPR_resolve_fn2
language:python
return:(String:in),(String:out),(Int:out_sz),(String:checkSubDirOptional)
params:(in:), (out:), (out_sz:), (checkSubDirOptional:)
description:
Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.
------
name:ReverseNamedCommandLookup
language:c
return:(const:char*)
params:(int:command_id)
description:
Get the named command for the given command ID. The returned string will
not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL
if command_id is a native action.
------
name:ReverseNamedCommandLookup
language:eel2
return:(bool:)
params:(#retval:), (int:command_id)
description:
Get the named command for the given command ID. The returned string will
not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL
if command_id is a native action.
------
name:reaper.ReverseNamedCommandLookup
language:lua
return:(string:)
params:(integer:command_id)
description:
Get the named command for the given command ID. The returned string will
not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL
if command_id is a native action.
------
name:RPR_ReverseNamedCommandLookup
language:python
return:(String:)
params:(Int:command_id)
description:
Get the named command for the given command ID. The returned string will
not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL
if command_id is a native action.
------
name:ScaleFromEnvelopeMode
language:c
return:(double:)
params:(int:scaling_mode), (double:val)
description:
See GetEnvelopeScalingMode.
------
name:ScaleFromEnvelopeMode
language:eel2
return:(double:)
params:(int:scaling_mode), (val:)
description:
See GetEnvelopeScalingMode.
------
name:reaper.ScaleFromEnvelopeMode
language:lua
return:(number:)
params:(integer:scaling_mode), (number:val)
description:
See GetEnvelopeScalingMode.
------
name:RPR_ScaleFromEnvelopeMode
language:python
return:(Float:)
params:(Int:scaling_mode), (Float:val)
description:
See GetEnvelopeScalingMode.
------
name:ScaleToEnvelopeMode
language:c
return:(double:)
params:(int:scaling_mode), (double:val)
description:
See GetEnvelopeScalingMode.
------
name:ScaleToEnvelopeMode
language:eel2
return:(double:)
params:(int:scaling_mode), (val:)
description:
See GetEnvelopeScalingMode.
------
name:reaper.ScaleToEnvelopeMode
language:lua
return:(number:)
params:(integer:scaling_mode), (number:val)
description:
See GetEnvelopeScalingMode.
------
name:RPR_ScaleToEnvelopeMode
language:python
return:(Float:)
params:(Int:scaling_mode), (Float:val)
description:
See GetEnvelopeScalingMode.
------
name:SelectAllMediaItems
language:c
return:(void:)
params:(ReaProject*:proj), (bool:selected)
description:

------
name:SelectAllMediaItems
language:eel2
return:
params:(ReaProject:proj), (bool:selected)
description:

------
name:reaper.SelectAllMediaItems
language:lua
return:
params:(ReaProject:proj), (boolean:selected)
description:

------
name:RPR_SelectAllMediaItems
language:python
return:
params:(ReaProject:proj), (Boolean:selected)
description:

------
name:SelectProjectInstance
language:c
return:(void:)
params:(ReaProject*:proj)
description:

------
name:SelectProjectInstance
language:eel2
return:
params:(ReaProject:proj)
description:

------
name:reaper.SelectProjectInstance
language:lua
return:
params:(ReaProject:proj)
description:

------
name:RPR_SelectProjectInstance
language:python
return:
params:(ReaProject:proj)
description:

------
name:SetActiveTake
language:c
return:(void:)
params:(MediaItem_Take*:take)
description:
set this take active in this media item
------
name:SetActiveTake
language:eel2
return:
params:(MediaItem_Take:take)
description:
set this take active in this media item
------
name:reaper.SetActiveTake
language:lua
return:
params:(MediaItem_Take:take)
description:
set this take active in this media item
------
name:RPR_SetActiveTake
language:python
return:
params:(MediaItem_Take:take)
description:
set this take active in this media item
------
name:SetAutomationMode
language:c
return:(void:)
params:(int:mode), (bool:onlySel)
description:
sets all or selected tracks to mode.
------
name:SetAutomationMode
language:eel2
return:
params:(int:mode), (bool:onlySel)
description:
sets all or selected tracks to mode.
------
name:reaper.SetAutomationMode
language:lua
return:
params:(integer:mode), (boolean:onlySel)
description:
sets all or selected tracks to mode.
------
name:RPR_SetAutomationMode
language:python
return:
params:(Int:mode), (Boolean:onlySel)
description:
sets all or selected tracks to mode.
------
name:SetCurrentBPM
language:c
return:(void:)
params:(ReaProject*:__proj), (double:bpm), (bool:wantUndo)
description:
set current BPM in project, set wantUndo=true to add undo point
------
name:SetCurrentBPM
language:eel2
return:
params:(ReaProject:__proj), (bpm:), (bool:wantUndo)
description:
set current BPM in project, set wantUndo=true to add undo point
------
name:reaper.SetCurrentBPM
language:lua
return:
params:(ReaProject:__proj), (number:bpm), (boolean:wantUndo)
description:
set current BPM in project, set wantUndo=true to add undo point
------
name:RPR_SetCurrentBPM
language:python
return:
params:(ReaProject:__proj), (Float:bpm), (Boolean:wantUndo)
description:
set current BPM in project, set wantUndo=true to add undo point
------
name:SetCursorContext
language:c
return:(void:)
params:(int:mode), (TrackEnvelope*:envInOptional)
description:
You must use this to change the focus programmatically. mode=0 to focus
track panels, 1 to focus the arrange window, 2 to focus the arrange
window and select env (or env==NULL to clear the current track/take
envelope selection)
------
name:SetCursorContext
language:eel2
return:
params:(int:mode), (TrackEnvelope:envIn)
description:
You must use this to change the focus programmatically. mode=0 to focus
track panels, 1 to focus the arrange window, 2 to focus the arrange
window and select env (or env==NULL to clear the current track/take
envelope selection)
------
name:reaper.SetCursorContext
language:lua
return:
params:(integer:mode), (TrackEnvelope:envIn)
description:
You must use this to change the focus programmatically. mode=0 to focus
track panels, 1 to focus the arrange window, 2 to focus the arrange
window and select env (or env==NULL to clear the current track/take
envelope selection)
------
name:RPR_SetCursorContext
language:python
return:
params:(Int:mode), (TrackEnvelope:envInOptional)
description:
You must use this to change the focus programmatically. mode=0 to focus
track panels, 1 to focus the arrange window, 2 to focus the arrange
window and select env (or env==NULL to clear the current track/take
envelope selection)
------
name:SetEditCurPos
language:c
return:(void:)
params:(double:time), (bool:moveview), (bool:seekplay)
description:

------
name:SetEditCurPos
language:eel2
return:
params:(time:), (bool:moveview), (bool:seekplay)
description:

------
name:reaper.SetEditCurPos
language:lua
return:
params:(number:time), (boolean:moveview), (boolean:seekplay)
description:

------
name:RPR_SetEditCurPos
language:python
return:
params:(Float:time), (Boolean:moveview), (Boolean:seekplay)
description:

------
name:SetEditCurPos2
language:c
return:(void:)
params:(ReaProject*:proj), (double:time), (bool:moveview), (bool:seekplay)
description:

------
name:SetEditCurPos2
language:eel2
return:
params:(ReaProject:proj), (time:), (bool:moveview), (bool:seekplay)
description:

------
name:reaper.SetEditCurPos2
language:lua
return:
params:(ReaProject:proj), (number:time), (boolean:moveview), (boolean:seekplay)
description:

------
name:RPR_SetEditCurPos2
language:python
return:
params:(ReaProject:proj), (Float:time), (Boolean:moveview), (Boolean:seekplay)
description:

------
name:SetEnvelopePoint
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:ptidx), (double*:timeInOptional), (double*:valueInOptional), (int*:shapeInOptional), (double*:tensionInOptional), (bool*:selectedInOptional), (bool*:noSortInOptional)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done. See SetEnvelopePointEx.
------
name:SetEnvelopePoint
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:ptidx), (optional:timeIn), (optional:valueIn), (optional int:shapeIn), (optional:tensionIn), (optional bool:selectedIn), (optional bool:noSortIn)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done. See SetEnvelopePointEx.
------
name:reaper.SetEnvelopePoint
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (integer:ptidx), (optional number:timeIn), (optional number:valueIn), (optional number:shapeIn), (optional number:tensionIn), (optional boolean:selectedIn), (optional boolean:noSortIn)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done. See SetEnvelopePointEx.
------
name:RPR_SetEnvelopePoint
language:python
return:(Boolean:retval),(TrackEnvelope:envelope),(Int:ptidx),(Float:timeInOptional),(Float:valueInOptional),(Int:shapeInOptional),(Float:tensionInOptional),(Boolean:selectedInOptional),(Boolean:noSortInOptional)
params:(envelope:), (ptidx:), (timeInOptional:), (valueInOptional:), (shapeInOptional:), (tensionInOptional:), (selectedInOptional:), (noSortInOptional:)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done. See SetEnvelopePointEx.
------
name:SetEnvelopePointEx
language:c
return:(bool:)
params:(TrackEnvelope*:envelope), (int:autoitem_idx), (int:ptidx), (double*:timeInOptional), (double*:valueInOptional), (int*:shapeInOptional), (double*:tensionInOptional), (bool*:selectedInOptional), (bool*:noSortInOptional)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:SetEnvelopePointEx
language:eel2
return:(bool:)
params:(TrackEnvelope:envelope), (int:autoitem_idx), (int:ptidx), (optional:timeIn), (optional:valueIn), (optional int:shapeIn), (optional:tensionIn), (optional bool:selectedIn), (optional bool:noSortIn)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:reaper.SetEnvelopePointEx
language:lua
return:(boolean:)
params:(TrackEnvelope:envelope), (integer:autoitem_idx), (integer:ptidx), (optional number:timeIn), (optional number:valueIn), (optional number:shapeIn), (optional number:tensionIn), (optional boolean:selectedIn), (optional boolean:noSortIn)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:RPR_SetEnvelopePointEx
language:python
return:(Boolean:retval),(TrackEnvelope:envelope),(Int:autoitem_idx),(Int:ptidx),(Float:timeInOptional),(Float:valueInOptional),(Int:shapeInOptional),(Float:tensionInOptional),(Boolean:selectedInOptional),(Boolean:noSortInOptional)
params:(envelope:), (autoitem_idx:), (ptidx:), (timeInOptional:), (valueInOptional:), (shapeInOptional:), (tensionInOptional:), (selectedInOptional:), (noSortInOptional:)
description:
Set attributes of an envelope point. Values that are not supplied will
be ignored. If setting multiple points at once, set noSort=true, and
call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.
------
name:SetEnvelopeStateChunk
language:c
return:(bool:)
params:(TrackEnvelope*:env), (const char*:str), (bool:isundoOptional)
description:
Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:SetEnvelopeStateChunk
language:eel2
return:(bool:)
params:(TrackEnvelope:env), ("str":), (bool:isundo)
description:
Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:reaper.SetEnvelopeStateChunk
language:lua
return:(boolean:)
params:(TrackEnvelope:env), (string:str), (boolean:isundo)
description:
Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:RPR_SetEnvelopeStateChunk
language:python
return:(Boolean:)
params:(TrackEnvelope:env), (String:str), (Boolean:isundoOptional)
description:
Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.
------
name:SetExtState
language:c
return:(void:)
params:(const char*:section), (const char*:key), (const char*:value), (bool:persist)
description:
Set the extended state value for a specific section and key.
persist=true means the value should be stored and reloaded the next time
REAPER is opened. See GetExtState, DeleteExtState, HasExtState.
------
name:SetExtState
language:eel2
return:
params:("section":), ("key":), ("value":), (bool:persist)
description:
Set the extended state value for a specific section and key.
persist=true means the value should be stored and reloaded the next time
REAPER is opened. See GetExtState, DeleteExtState, HasExtState.
------
name:reaper.SetExtState
language:lua
return:
params:(string:section), (string:key), (string:value), (boolean:persist)
description:
Set the extended state value for a specific section and key.
persist=true means the value should be stored and reloaded the next time
REAPER is opened. See GetExtState, DeleteExtState, HasExtState.
------
name:RPR_SetExtState
language:python
return:
params:(String:section), (String:key), (String:value), (Boolean:persist)
description:
Set the extended state value for a specific section and key.
persist=true means the value should be stored and reloaded the next time
REAPER is opened. See GetExtState, DeleteExtState, HasExtState.
------
name:SetGlobalAutomationOverride
language:c
return:(void:)
params:(int:mode)
description:
mode: see GetGlobalAutomationOverride
------
name:SetGlobalAutomationOverride
language:eel2
return:
params:(int:mode)
description:
mode: see GetGlobalAutomationOverride
------
name:reaper.SetGlobalAutomationOverride
language:lua
return:
params:(integer:mode)
description:
mode: see GetGlobalAutomationOverride
------
name:RPR_SetGlobalAutomationOverride
language:python
return:
params:(Int:mode)
description:
mode: see GetGlobalAutomationOverride
------
name:SetItemStateChunk
language:c
return:(bool:)
params:(MediaItem*:item), (const char*:str), (bool:isundoOptional)
description:
Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:SetItemStateChunk
language:eel2
return:(bool:)
params:(MediaItem:item), ("str":), (bool:isundo)
description:
Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:reaper.SetItemStateChunk
language:lua
return:(boolean:)
params:(MediaItem:item), (string:str), (boolean:isundo)
description:
Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:RPR_SetItemStateChunk
language:python
return:(Boolean:)
params:(MediaItem:item), (String:str), (Boolean:isundoOptional)
description:
Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.
------
name:SetMasterTrackVisibility
language:c
return:(int:)
params:(int:flag)
description:
set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.
------
name:SetMasterTrackVisibility
language:eel2
return:(int:)
params:(int:flag)
description:
set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.
------
name:reaper.SetMasterTrackVisibility
language:lua
return:(integer:)
params:(integer:flag)
description:
set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.
------
name:RPR_SetMasterTrackVisibility
language:python
return:(Int:)
params:(Int:flag)
description:
set &1 to show the master track in the TCP, &2 to show in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.
------
name:SetMediaItemInfo_Value
language:c
return:(bool:)
params:(MediaItem*:item), (const char*:parmname), (double:newvalue)
Valid input for parmname: B_MUTE, B_LOOPSRC, B_ALLTAKESPLAY, B_UISEL, C_BEATATTACHMODE, C_AUTOSTRETCH, C_LOCK, D_VOL, D_POSITION, D_LENGTH, D_SNAPOFFSET, D_FADEINLEN, D_FADEOUTLEN, D_FADEINDIR, D_FADEOUTDIR, D_FADEINLEN_AUTO, D_FADEOUTLEN_AUTO, C_FADEINSHAPE, C_FADEOUTSHAPE, I_GROUPID, I_LASTY, I_LASTH, I_CUSTOMCOLOR, I_CURTAKE, IP_ITEMNUMBER, F_FREEMODE_Y, F_FREEMODE_H

description:
Set media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
------
name:SetMediaItemInfo_Value
language:eel2
return:(bool:)
params:(MediaItem:item), ("parmname":), (newvalue:)
description:
Set media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
------
name:reaper.SetMediaItemInfo_Value
language:lua
return:(boolean:)
params:(MediaItem:item), (string:parmname), (number:newvalue)
Valid input for parmname: B_MUTE, B_LOOPSRC, B_ALLTAKESPLAY, B_UISEL, C_BEATATTACHMODE, C_AUTOSTRETCH, C_LOCK, D_VOL, D_POSITION, D_LENGTH, D_SNAPOFFSET, D_FADEINLEN, D_FADEOUTLEN, D_FADEINDIR, D_FADEOUTDIR, D_FADEINLEN_AUTO, D_FADEOUTLEN_AUTO, C_FADEINSHAPE, C_FADEOUTSHAPE, I_GROUPID, I_LASTY, I_LASTH, I_CUSTOMCOLOR, I_CURTAKE, IP_ITEMNUMBER, F_FREEMODE_Y, F_FREEMODE_H

description:
Set media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
------
name:RPR_SetMediaItemInfo_Value
language:python
return:(Boolean:)
params:(MediaItem:item), (String:parmname), (Float:newvalue)
Valid input for parmname: B_MUTE, B_LOOPSRC, B_ALLTAKESPLAY, B_UISEL, C_BEATATTACHMODE, C_AUTOSTRETCH, C_LOCK, D_VOL, D_POSITION, D_LENGTH, D_SNAPOFFSET, D_FADEINLEN, D_FADEOUTLEN, D_FADEINDIR, D_FADEOUTDIR, D_FADEINLEN_AUTO, D_FADEOUTLEN_AUTO, C_FADEINSHAPE, C_FADEOUTSHAPE, I_GROUPID, I_LASTY, I_LASTH, I_CUSTOMCOLOR, I_CURTAKE, IP_ITEMNUMBER, F_FREEMODE_Y, F_FREEMODE_H

description:
Set media item numerical-value attributes.
B_MUTE : bool * : muted
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default,
1=beats (position, length, rate), 2=beats (position only). for
auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position of track in pixels (read-only)
I_LASTH : int * : height in track in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
------
name:SetMediaItemLength
language:c
return:(bool:)
params:(MediaItem*:item), (double:length), (bool:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:SetMediaItemLength
language:eel2
return:(bool:)
params:(MediaItem:item), (length:), (bool:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:reaper.SetMediaItemLength
language:lua
return:(boolean:)
params:(MediaItem:item), (number:length), (boolean:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:RPR_SetMediaItemLength
language:python
return:(Boolean:)
params:(MediaItem:item), (Float:length), (Boolean:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:SetMediaItemPosition
language:c
return:(bool:)
params:(MediaItem*:item), (double:position), (bool:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:SetMediaItemPosition
language:eel2
return:(bool:)
params:(MediaItem:item), (position:), (bool:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:reaper.SetMediaItemPosition
language:lua
return:(boolean:)
params:(MediaItem:item), (number:position), (boolean:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:RPR_SetMediaItemPosition
language:python
return:(Boolean:)
params:(MediaItem:item), (Float:position), (Boolean:refreshUI)
description:
Redraws the screen only if refreshUI == true.
See UpdateArrange().
------
name:SetMediaItemSelected
language:c
return:(void:)
params:(MediaItem*:item), (bool:selected)
description:

------
name:SetMediaItemSelected
language:eel2
return:
params:(MediaItem:item), (bool:selected)
description:

------
name:reaper.SetMediaItemSelected
language:lua
return:
params:(MediaItem:item), (boolean:selected)
description:

------
name:RPR_SetMediaItemSelected
language:python
return:
params:(MediaItem:item), (Boolean:selected)
description:

------
name:SetMediaItemTake_Source
language:c
return:(bool:)
params:(MediaItem_Take*:take), (PCM_source*:source)
description:
Set media source of media item take. The old source will not be
destroyed, it is the caller's responsibility to retrieve it and destroy
it after. If source already exists in any project, it will be duplicated
before being set. C/C++ code should not use this and instead use
GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.
------
name:SetMediaItemTake_Source
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (PCM_source:source)
description:
Set media source of media item take. The old source will not be
destroyed, it is the caller's responsibility to retrieve it and destroy
it after. If source already exists in any project, it will be duplicated
before being set. C/C++ code should not use this and instead use
GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.
------
name:reaper.SetMediaItemTake_Source
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (PCM_source:source)
description:
Set media source of media item take. The old source will not be
destroyed, it is the caller's responsibility to retrieve it and destroy
it after. If source already exists in any project, it will be duplicated
before being set. C/C++ code should not use this and instead use
GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.
------
name:RPR_SetMediaItemTake_Source
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (PCM_source:source)
description:
Set media source of media item take. The old source will not be
destroyed, it is the caller's responsibility to retrieve it and destroy
it after. If source already exists in any project, it will be duplicated
before being set. C/C++ code should not use this and instead use
GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.
------
name:SetMediaItemTakeInfo_Value
language:c
return:(bool:)
params:(MediaItem_Take*:take), (const char*:parmname), (double:newvalue)
Valid input for parmname: D_STARTOFFS, D_VOL, D_PAN, D_PANLAW, D_PLAYRATE, D_PITCH, B_PPITCH, I_CHANMODE, I_PITCHMODE, I_CUSTOMCOLOR, IP_TAKENUMBER

description:
Set media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
------
name:SetMediaItemTakeInfo_Value
language:eel2
return:(bool:)
params:(MediaItem_Take:take), ("parmname":), (newvalue:)
description:
Set media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
------
name:reaper.SetMediaItemTakeInfo_Value
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (string:parmname), (number:newvalue)
Valid input for parmname: D_STARTOFFS, D_VOL, D_PAN, D_PANLAW, D_PLAYRATE, D_PITCH, B_PPITCH, I_CHANMODE, I_PITCHMODE, I_CUSTOMCOLOR, IP_TAKENUMBER

description:
Set media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
------
name:RPR_SetMediaItemTakeInfo_Value
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (String:parmname), (Float:newvalue)
Valid input for parmname: D_STARTOFFS, D_VOL, D_PAN, D_PANLAW, D_PLAYRATE, D_PITCH, B_PPITCH, I_CHANMODE, I_PITCHMODE, I_CUSTOMCOLOR, IP_TAKENUMBER

description:
Set media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
------
name:SetMediaTrackInfo_Value
language:c
return:(bool:)
params:(MediaTrack*:tr), (const char*:parmname), (double:newvalue)
Valid input for parmname: B_MUTE, B_PHASE, IP_TRACKNUMBER, I_SOLO, I_FXEN, I_RECARM, I_RECINPUT, I_RECMODE, I_RECMON, I_RECMONITEMS, I_AUTOMODE, I_NCHAN, I_SELECTED, I_WNDH, I_TCPH, I_TCPY, I_MCPX, I_MCPY, I_MCPW, I_MCPH, I_FOLDERDEPTH, I_FOLDERCOMPACT, I_MIDIHWOUT, I_PERFFLAGS, I_CUSTOMCOLOR, I_HEIGHTOVERRIDE, B_HEIGHTLOCK, D_VOL, D_PAN, D_WIDTH, D_DUALPANL, D_DUALPANR, I_PANMODE, D_PANLAW, P_ENV:<envchunkname, B_SHOWINMIXER, B_SHOWINTCP, B_MAINSEND, C_MAINSEND_OFFS, B_FREEMODE, C_BEATATTACHMODE, F_MCP_FXSEND_SCALE, F_MCP_SENDRGN_SCALE, I_PLAY_OFFSET_FLAG, D_PLAY_OFFSET

description:
Set track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
------
name:SetMediaTrackInfo_Value
language:eel2
return:(bool:)
params:(MediaTrack:tr), ("parmname":), (newvalue:)
description:
Set track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
------
name:reaper.SetMediaTrackInfo_Value
language:lua
return:(boolean:)
params:(MediaTrack:tr), (string:parmname), (number:newvalue)
Valid input for parmname: B_MUTE, B_PHASE, IP_TRACKNUMBER, I_SOLO, I_FXEN, I_RECARM, I_RECINPUT, I_RECMODE, I_RECMON, I_RECMONITEMS, I_AUTOMODE, I_NCHAN, I_SELECTED, I_WNDH, I_TCPH, I_TCPY, I_MCPX, I_MCPY, I_MCPW, I_MCPH, I_FOLDERDEPTH, I_FOLDERCOMPACT, I_MIDIHWOUT, I_PERFFLAGS, I_CUSTOMCOLOR, I_HEIGHTOVERRIDE, B_HEIGHTLOCK, D_VOL, D_PAN, D_WIDTH, D_DUALPANL, D_DUALPANR, I_PANMODE, D_PANLAW, P_ENV:<envchunkname, B_SHOWINMIXER, B_SHOWINTCP, B_MAINSEND, C_MAINSEND_OFFS, B_FREEMODE, C_BEATATTACHMODE, F_MCP_FXSEND_SCALE, F_MCP_SENDRGN_SCALE, I_PLAY_OFFSET_FLAG, D_PLAY_OFFSET

description:
Set track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
------
name:RPR_SetMediaTrackInfo_Value
language:python
return:(Boolean:)
params:(MediaTrack:tr), (String:parmname), (Float:newvalue)
Valid input for parmname: B_MUTE, B_PHASE, IP_TRACKNUMBER, I_SOLO, I_FXEN, I_RECARM, I_RECINPUT, I_RECMODE, I_RECMON, I_RECMONITEMS, I_AUTOMODE, I_NCHAN, I_SELECTED, I_WNDH, I_TCPH, I_TCPY, I_MCPX, I_MCPY, I_MCPW, I_MCPH, I_FOLDERDEPTH, I_FOLDERCOMPACT, I_MIDIHWOUT, I_PERFFLAGS, I_CUSTOMCOLOR, I_HEIGHTOVERRIDE, B_HEIGHTLOCK, D_VOL, D_PAN, D_WIDTH, D_DUALPANL, D_DUALPANR, I_PANMODE, D_PANLAW, P_ENV:<envchunkname, B_SHOWINMIXER, B_SHOWINTCP, B_MAINSEND, C_MAINSEND_OFFS, B_FREEMODE, C_BEATATTACHMODE, F_MCP_FXSEND_SCALE, F_MCP_SENDRGN_SCALE, I_PLAY_OFFSET_FLAG, D_PLAY_OFFSET

description:
Set track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input, 0..n=mono hardware
input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI
input, if set then low 5 bits represent channel (0=all, 1-16=only
chan), next 6 bits represent physical input (63=all, 62=VKB)
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo
out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/
latency compensation, 7=midi overdub, 8=midi replace
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container
I_MCPW : int * : current MCP width in pixels
I_MCPH : int * : current MCP height in pixels
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a
folder parent, -1=track is the last in the innermost folder, -2=track is
the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled,
low 5 bits are which channels (0=all, 1-16), next 5 bits are output
device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e.
ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will
not be used, but will store the color anyway)
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 1=+0dB, etc
P_ENV:<envchunkname : TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
B_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time,
1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the
fx+send total area (0=minimum allowed, 1=maximum allowed)
I_PLAY_OFFSET_FLAG : int * : track playback offset state,
&1=bypassed, &2=offset value is measured in samples (otherwise
measured in seconds)
D_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG
------
name:SetMIDIEditorGrid
language:c
return:(void:)
params:(ReaProject*:project), (double:division)
description:
Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.
------
name:SetMIDIEditorGrid
language:eel2
return:
params:(ReaProject:project), (division:)
description:
Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.
------
name:reaper.SetMIDIEditorGrid
language:lua
return:
params:(ReaProject:project), (number:division)
description:
Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.
------
name:RPR_SetMIDIEditorGrid
language:python
return:
params:(ReaProject:project), (Float:division)
description:
Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.
------
name:SetMixerScroll
language:c
return:(MediaTrack*:)
params:(MediaTrack*:leftmosttrack)
description:
Scroll the mixer so that leftmosttrack is the leftmost visible track.
Returns the leftmost track after scrolling, which may be different from
the passed-in track if there are not enough tracks to its right.
------
name:SetMixerScroll
language:eel2
return:(MediaTrack:)
params:(MediaTrack:leftmosttrack)
description:
Scroll the mixer so that leftmosttrack is the leftmost visible track.
Returns the leftmost track after scrolling, which may be different from
the passed-in track if there are not enough tracks to its right.
------
name:reaper.SetMixerScroll
language:lua
return:(MediaTrack:)
params:(MediaTrack:leftmosttrack)
description:
Scroll the mixer so that leftmosttrack is the leftmost visible track.
Returns the leftmost track after scrolling, which may be different from
the passed-in track if there are not enough tracks to its right.
------
name:RPR_SetMixerScroll
language:python
return:(MediaTrack:)
params:(MediaTrack:leftmosttrack)
description:
Scroll the mixer so that leftmosttrack is the leftmost visible track.
Returns the leftmost track after scrolling, which may be different from
the passed-in track if there are not enough tracks to its right.
------
name:SetMouseModifier
language:c
return:(void:)
params:(const char*:context), (int:modifier_flag), (const char*:action)
description:
Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
Context is a string like "MM_CTX_ITEM". Find these strings by modifying an assignment in
Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)
For left-click and double-click contexts, the action can be any built-in command ID number
or any custom action ID string. Find built-in command IDs in the REAPER actions window
(enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
For built-in mouse modifier behaviors, find action IDs (which will be low numbers)
by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Assigning an action of -1 will reset that mouse modifier behavior to factory default.
See GetMouseModifier.
------
name:SetMouseModifier
language:eel2
return:
params:("context":), (int:modifier_flag), ("action":)
description:
Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
Context is a string like "MM_CTX_ITEM". Find these strings by modifying an assignment in
Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)
For left-click and double-click contexts, the action can be any built-in command ID number
or any custom action ID string. Find built-in command IDs in the REAPER actions window
(enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
For built-in mouse modifier behaviors, find action IDs (which will be low numbers)
by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Assigning an action of -1 will reset that mouse modifier behavior to factory default.
See GetMouseModifier.
------
name:reaper.SetMouseModifier
language:lua
return:
params:(string:context), (integer:modifier_flag), (string:action)
description:
Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
Context is a string like "MM_CTX_ITEM". Find these strings by modifying an assignment in
Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)
For left-click and double-click contexts, the action can be any built-in command ID number
or any custom action ID string. Find built-in command IDs in the REAPER actions window
(enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
For built-in mouse modifier behaviors, find action IDs (which will be low numbers)
by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Assigning an action of -1 will reset that mouse modifier behavior to factory default.
See GetMouseModifier.
------
name:RPR_SetMouseModifier
language:python
return:
params:(String:context), (Int:modifier_flag), (String:action)
description:
Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
Context is a string like "MM_CTX_ITEM". Find these strings by modifying an assignment in
Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)
For left-click and double-click contexts, the action can be any built-in command ID number
or any custom action ID string. Find built-in command IDs in the REAPER actions window
(enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
For built-in mouse modifier behaviors, find action IDs (which will be low numbers)
by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Assigning an action of -1 will reset that mouse modifier behavior to factory default.
See GetMouseModifier.
------
name:SetOnlyTrackSelected
language:c
return:(void:)
params:(MediaTrack*:track)
description:
Set exactly one track selected, deselect all others
------
name:SetOnlyTrackSelected
language:eel2
return:
params:(MediaTrack:track)
description:
Set exactly one track selected, deselect all others
------
name:reaper.SetOnlyTrackSelected
language:lua
return:
params:(MediaTrack:track)
description:
Set exactly one track selected, deselect all others
------
name:RPR_SetOnlyTrackSelected
language:python
return:
params:(MediaTrack:track)
description:
Set exactly one track selected, deselect all others
------
name:SetProjectGrid
language:c
return:(void:)
params:(ReaProject*:project), (double:division)
description:
Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.
------
name:SetProjectGrid
language:eel2
return:
params:(ReaProject:project), (division:)
description:
Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.
------
name:reaper.SetProjectGrid
language:lua
return:
params:(ReaProject:project), (number:division)
description:
Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.
------
name:RPR_SetProjectGrid
language:python
return:
params:(ReaProject:project), (Float:division)
description:
Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.
------
name:SetProjectMarker
language:c
return:(bool:)
params:(int:markrgnindexnumber), (bool:isrgn), (double:pos), (double:rgnend), (const char*:name)
description:

------
name:SetProjectMarker
language:eel2
return:(bool:)
params:(int:markrgnindexnumber), (bool:isrgn), (pos:), (rgnend:), ("name":)
description:

------
name:reaper.SetProjectMarker
language:lua
return:(boolean:)
params:(integer:markrgnindexnumber), (boolean:isrgn), (number:pos), (number:rgnend), (string:name)
description:

------
name:RPR_SetProjectMarker
language:python
return:(Boolean:)
params:(Int:markrgnindexnumber), (Boolean:isrgn), (Float:pos), (Float:rgnend), (String:name)
description:

------
name:SetProjectMarker2
language:c
return:(bool:)
params:(ReaProject*:proj), (int:markrgnindexnumber), (bool:isrgn), (double:pos), (double:rgnend), (const char*:name)
description:

------
name:SetProjectMarker2
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:markrgnindexnumber), (bool:isrgn), (pos:), (rgnend:), ("name":)
description:

------
name:reaper.SetProjectMarker2
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:markrgnindexnumber), (boolean:isrgn), (number:pos), (number:rgnend), (string:name)
description:

------
name:RPR_SetProjectMarker2
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:markrgnindexnumber), (Boolean:isrgn), (Float:pos), (Float:rgnend), (String:name)
description:

------
name:SetProjectMarker3
language:c
return:(bool:)
params:(ReaProject*:proj), (int:markrgnindexnumber), (bool:isrgn), (double:pos), (double:rgnend), (const char*:name), (int:color)
description:

------
name:SetProjectMarker3
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:markrgnindexnumber), (bool:isrgn), (pos:), (rgnend:), ("name":), (int:color)
description:

------
name:reaper.SetProjectMarker3
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:markrgnindexnumber), (boolean:isrgn), (number:pos), (number:rgnend), (string:name), (integer:color)
description:

------
name:RPR_SetProjectMarker3
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:markrgnindexnumber), (Boolean:isrgn), (Float:pos), (Float:rgnend), (String:name), (Int:color)
description:

------
name:SetProjectMarker4
language:c
return:(bool:)
params:(ReaProject*:proj), (int:markrgnindexnumber), (bool:isrgn), (double:pos), (double:rgnend), (const char*:name), (int:color), (int:flags)
description:
color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name
------
name:SetProjectMarker4
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:markrgnindexnumber), (bool:isrgn), (pos:), (rgnend:), ("name":), (int:color), (int:flags)
description:
color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name
------
name:reaper.SetProjectMarker4
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:markrgnindexnumber), (boolean:isrgn), (number:pos), (number:rgnend), (string:name), (integer:color), (integer:flags)
description:
color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name
------
name:RPR_SetProjectMarker4
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:markrgnindexnumber), (Boolean:isrgn), (Float:pos), (Float:rgnend), (String:name), (Int:color), (Int:flags)
description:
color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name
------
name:SetProjectMarkerByIndex
language:c
return:(bool:)
params:(ReaProject*:proj), (int:markrgnidx), (bool:isrgn), (double:pos), (double:rgnend), (int:IDnumber), (const char*:name), (int:color)
description:
See SetProjectMarkerByIndex2.
------
name:SetProjectMarkerByIndex
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:markrgnidx), (bool:isrgn), (pos:), (rgnend:), (int:IDnumber), ("name":), (int:color)
description:
See SetProjectMarkerByIndex2.
------
name:reaper.SetProjectMarkerByIndex
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:markrgnidx), (boolean:isrgn), (number:pos), (number:rgnend), (integer:IDnumber), (string:name), (integer:color)
description:
See SetProjectMarkerByIndex2.
------
name:RPR_SetProjectMarkerByIndex
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:markrgnidx), (Boolean:isrgn), (Float:pos), (Float:rgnend), (Int:IDnumber), (String:name), (Int:color)
description:
See SetProjectMarkerByIndex2.
------
name:SetProjectMarkerByIndex2
language:c
return:(bool:)
params:(ReaProject*:proj), (int:markrgnidx), (bool:isrgn), (double:pos), (double:rgnend), (int:IDnumber), (const char*:name), (int:color), (int:flags)
description:
Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3).
Function will fail if attempting to set a duplicate ID number for a
region (duplicate ID numbers for markers are OK). , flags&1 to clear
name.
------
name:SetProjectMarkerByIndex2
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:markrgnidx), (bool:isrgn), (pos:), (rgnend:), (int:IDnumber), ("name":), (int:color), (int:flags)
description:
Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3).
Function will fail if attempting to set a duplicate ID number for a
region (duplicate ID numbers for markers are OK). , flags&1 to clear
name.
------
name:reaper.SetProjectMarkerByIndex2
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:markrgnidx), (boolean:isrgn), (number:pos), (number:rgnend), (integer:IDnumber), (string:name), (integer:color), (integer:flags)
description:
Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3).
Function will fail if attempting to set a duplicate ID number for a
region (duplicate ID numbers for markers are OK). , flags&1 to clear
name.
------
name:RPR_SetProjectMarkerByIndex2
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:markrgnidx), (Boolean:isrgn), (Float:pos), (Float:rgnend), (Int:IDnumber), (String:name), (Int:color), (Int:flags)
description:
Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3).
Function will fail if attempting to set a duplicate ID number for a
region (duplicate ID numbers for markers are OK). , flags&1 to clear
name.
------
name:SetProjExtState
language:c
return:(int:)
params:(ReaProject*:proj), (const char*:extname), (const char*:key), (const char*:value)
description:
Save a key/value pair for a specific extension, to be restored the next
time this specific project is loaded. Typically extname will be the name
of a reascript or extension section. If key is NULL or "", all extended
data for that extname will be deleted.  If val is NULL or "", the data
previously associated with that key will be deleted. Returns the size of
the state for this extname. See GetProjExtState, EnumProjExtState.
------
name:SetProjExtState
language:eel2
return:(int:)
params:(ReaProject:proj), ("extname":), ("key":), ("value":)
description:
Save a key/value pair for a specific extension, to be restored the next
time this specific project is loaded. Typically extname will be the name
of a reascript or extension section. If key is NULL or "", all extended
data for that extname will be deleted.  If val is NULL or "", the data
previously associated with that key will be deleted. Returns the size of
the state for this extname. See GetProjExtState, EnumProjExtState.
------
name:reaper.SetProjExtState
language:lua
return:(integer:)
params:(ReaProject:proj), (string:extname), (string:key), (string:value)
description:
Save a key/value pair for a specific extension, to be restored the next
time this specific project is loaded. Typically extname will be the name
of a reascript or extension section. If key is NULL or "", all extended
data for that extname will be deleted.  If val is NULL or "", the data
previously associated with that key will be deleted. Returns the size of
the state for this extname. See GetProjExtState, EnumProjExtState.
------
name:RPR_SetProjExtState
language:python
return:(Int:)
params:(ReaProject:proj), (String:extname), (String:key), (String:value)
description:
Save a key/value pair for a specific extension, to be restored the next
time this specific project is loaded. Typically extname will be the name
of a reascript or extension section. If key is NULL or "", all extended
data for that extname will be deleted.  If val is NULL or "", the data
previously associated with that key will be deleted. Returns the size of
the state for this extname. See GetProjExtState, EnumProjExtState.
------
name:SetRegionRenderMatrix
language:c
return:(void:)
params:(ReaProject*:proj), (int:regionindex), (MediaTrack*:track), (int:addorremove)
description:
Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.
------
name:SetRegionRenderMatrix
language:eel2
return:
params:(ReaProject:proj), (int:regionindex), (MediaTrack:track), (int:addorremove)
description:
Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.
------
name:reaper.SetRegionRenderMatrix
language:lua
return:
params:(ReaProject:proj), (integer:regionindex), (MediaTrack:track), (integer:addorremove)
description:
Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.
------
name:RPR_SetRegionRenderMatrix
language:python
return:
params:(ReaProject:proj), (Int:regionindex), (MediaTrack:track), (Int:addorremove)
description:
Add (addorremove > 0) or remove (addorremove < 0) a track from this region when using the region render matrix.
------
name:SetTakeStretchMarker
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:idx), (double:pos), (const double*:srcposInOptional)
description:
Adds or updates a stretch marker. If idx<0, stretch marker will be
added. If idx>=0, stretch marker will be updated. When adding, if
srcposInOptional is omitted, source position will be auto-calculated.
When updating a stretch marker, if srcposInOptional is omitted, srcpos
will not be modified. Position/srcposition values will be constrained to
nearby stretch markers. Returns index of stretch marker, or -1 if did
not insert (or marker already existed at time).
------
name:SetTakeStretchMarker
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:idx), (pos:), (optional:srcposIn)
description:
Adds or updates a stretch marker. If idx<0, stretch marker will be
added. If idx>=0, stretch marker will be updated. When adding, if
srcposInOptional is omitted, source position will be auto-calculated.
When updating a stretch marker, if srcposInOptional is omitted, srcpos
will not be modified. Position/srcposition values will be constrained to
nearby stretch markers. Returns index of stretch marker, or -1 if did
not insert (or marker already existed at time).
------
name:reaper.SetTakeStretchMarker
language:lua
return:(integer:)
params:(MediaItem_Take:take), (integer:idx), (number:pos), (optional number:srcposIn)
description:
Adds or updates a stretch marker. If idx<0, stretch marker will be
added. If idx>=0, stretch marker will be updated. When adding, if
srcposInOptional is omitted, source position will be auto-calculated.
When updating a stretch marker, if srcposInOptional is omitted, srcpos
will not be modified. Position/srcposition values will be constrained to
nearby stretch markers. Returns index of stretch marker, or -1 if did
not insert (or marker already existed at time).
------
name:RPR_SetTakeStretchMarker
language:python
return:(Int:)
params:(MediaItem_Take:take), (Int:idx), (Float:pos), (const double:srcposInOptional)
description:
Adds or updates a stretch marker. If idx<0, stretch marker will be
added. If idx>=0, stretch marker will be updated. When adding, if
srcposInOptional is omitted, source position will be auto-calculated.
When updating a stretch marker, if srcposInOptional is omitted, srcpos
will not be modified. Position/srcposition values will be constrained to
nearby stretch markers. Returns index of stretch marker, or -1 if did
not insert (or marker already existed at time).
------
name:SetTakeStretchMarkerSlope
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:idx), (double:slope)
description:
See GetTakeStretchMarkerSlope
------
name:SetTakeStretchMarkerSlope
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:idx), (slope:)
description:
See GetTakeStretchMarkerSlope
------
name:reaper.SetTakeStretchMarkerSlope
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:idx), (number:slope)
description:
See GetTakeStretchMarkerSlope
------
name:RPR_SetTakeStretchMarkerSlope
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:idx), (Float:slope)
description:
See GetTakeStretchMarkerSlope
------
name:SetTempoTimeSigMarker
language:c
return:(bool:)
params:(ReaProject*:proj), (int:ptidx), (double:timepos), (int:measurepos), (double:beatpos), (double:bpm), (int:timesig_num), (int:timesig_denom), (bool:lineartempo)
description:
Set parameters of a tempo/time signature marker. Provide either timepos
(with measurepos=-1, beatpos=-1), or measurepos and beatpos (with
timepos=-1). If timesig_num and timesig_denom are zero, the previous
time signature will be used. ptidx=-1 will insert a new tempo/time
signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:SetTempoTimeSigMarker
language:eel2
return:(bool:)
params:(ReaProject:proj), (int:ptidx), (timepos:), (int:measurepos), (beatpos:), (bpm:), (int:timesig_num), (int:timesig_denom), (bool:lineartempo)
description:
Set parameters of a tempo/time signature marker. Provide either timepos
(with measurepos=-1, beatpos=-1), or measurepos and beatpos (with
timepos=-1). If timesig_num and timesig_denom are zero, the previous
time signature will be used. ptidx=-1 will insert a new tempo/time
signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:reaper.SetTempoTimeSigMarker
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:ptidx), (number:timepos), (integer:measurepos), (number:beatpos), (number:bpm), (integer:timesig_num), (integer:timesig_denom), (boolean:lineartempo)
description:
Set parameters of a tempo/time signature marker. Provide either timepos
(with measurepos=-1, beatpos=-1), or measurepos and beatpos (with
timepos=-1). If timesig_num and timesig_denom are zero, the previous
time signature will be used. ptidx=-1 will insert a new tempo/time
signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:RPR_SetTempoTimeSigMarker
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:ptidx), (Float:timepos), (Int:measurepos), (Float:beatpos), (Float:bpm), (Int:timesig_num), (Int:timesig_denom), (Boolean:lineartempo)
description:
Set parameters of a tempo/time signature marker. Provide either timepos
(with measurepos=-1, beatpos=-1), or measurepos and beatpos (with
timepos=-1). If timesig_num and timesig_denom are zero, the previous
time signature will be used. ptidx=-1 will insert a new tempo/time
signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.
------
name:SetToggleCommandState
language:c
return:(bool:)
params:(int:section_id), (int:command_id), (int:state)
description:
Updates the toggle state of an action, returns true if succeeded. Only
ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.
------
name:SetToggleCommandState
language:eel2
return:(bool:)
params:(int:section_id), (int:command_id), (int:state)
description:
Updates the toggle state of an action, returns true if succeeded. Only
ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.
------
name:reaper.SetToggleCommandState
language:lua
return:(boolean:)
params:(integer:section_id), (integer:command_id), (integer:state)
description:
Updates the toggle state of an action, returns true if succeeded. Only
ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.
------
name:RPR_SetToggleCommandState
language:python
return:(Boolean:)
params:(Int:section_id), (Int:command_id), (Int:state)
description:
Updates the toggle state of an action, returns true if succeeded. Only
ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.
------
name:SetTrackAutomationMode
language:c
return:(void:)
params:(MediaTrack*:tr), (int:mode)
description:

------
name:SetTrackAutomationMode
language:eel2
return:
params:(MediaTrack:tr), (int:mode)
description:

------
name:reaper.SetTrackAutomationMode
language:lua
return:
params:(MediaTrack:tr), (integer:mode)
description:

------
name:RPR_SetTrackAutomationMode
language:python
return:
params:(MediaTrack:tr), (Int:mode)
description:

------
name:SetTrackColor
language:c
return:(void:)
params:(MediaTrack*:track), (int:color)
description:
Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).
------
name:SetTrackColor
language:eel2
return:
params:(MediaTrack:track), (int:color)
description:
Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).
------
name:reaper.SetTrackColor
language:lua
return:
params:(MediaTrack:track), (integer:color)
description:
Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).
------
name:RPR_SetTrackColor
language:python
return:
params:(MediaTrack:track), (Int:color)
description:
Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b).
------
name:SetTrackMIDILyrics
language:c
return:(bool:)
params:(MediaTrack*:track), (int:flag), (const char*:str)
description:
Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI
items found in range. Flag is unused at present. str is passed in as
beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for
measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1	"). See GetTrackMIDILyrics
------
name:SetTrackMIDILyrics
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:flag), ("str":)
description:
Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI
items found in range. Flag is unused at present. str is passed in as
beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for
measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1	"). See GetTrackMIDILyrics
------
name:reaper.SetTrackMIDILyrics
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:flag), (string:str)
description:
Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI
items found in range. Flag is unused at present. str is passed in as
beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for
measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1	"). See GetTrackMIDILyrics
------
name:RPR_SetTrackMIDILyrics
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:flag), (String:str)
description:
Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI
items found in range. Flag is unused at present. str is passed in as
beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for
measure 1 beat 2\t.1.1\tLyric for measure 2 beat 1	"). See GetTrackMIDILyrics
------
name:SetTrackMIDINoteName
language:c
return:(bool:)
params:(int:track), (int:pitch), (int:chan), (const char*:name)
description:
channel < 0 assigns these note names to all channels.
------
name:SetTrackMIDINoteName
language:eel2
return:(bool:)
params:(int:track), (int:pitch), (int:chan), ("name":)
description:
channel < 0 assigns these note names to all channels.
------
name:reaper.SetTrackMIDINoteName
language:lua
return:(boolean:)
params:(integer:track), (integer:pitch), (integer:chan), (string:name)
description:
channel < 0 assigns these note names to all channels.
------
name:RPR_SetTrackMIDINoteName
language:python
return:(Boolean:)
params:(Int:track), (Int:pitch), (Int:chan), (String:name)
description:
channel < 0 assigns these note names to all channels.
------
name:SetTrackMIDINoteNameEx
language:c
return:(bool:)
params:(ReaProject*:proj), (MediaTrack*:track), (int:pitch), (int:chan), (const char*:name)
description:
channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.
------
name:SetTrackMIDINoteNameEx
language:eel2
return:(bool:)
params:(ReaProject:proj), (MediaTrack:track), (int:pitch), (int:chan), ("name":)
description:
channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.
------
name:reaper.SetTrackMIDINoteNameEx
language:lua
return:(boolean:)
params:(ReaProject:proj), (MediaTrack:track), (integer:pitch), (integer:chan), (string:name)
description:
channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.
------
name:RPR_SetTrackMIDINoteNameEx
language:python
return:(Boolean:)
params:(ReaProject:proj), (MediaTrack:track), (Int:pitch), (Int:chan), (String:name)
description:
channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.
------
name:SetTrackSelected
language:c
return:(void:)
params:(MediaTrack*:track), (bool:selected)
description:

------
name:SetTrackSelected
language:eel2
return:
params:(MediaTrack:track), (bool:selected)
description:

------
name:reaper.SetTrackSelected
language:lua
return:
params:(MediaTrack:track), (boolean:selected)
description:

------
name:RPR_SetTrackSelected
language:python
return:
params:(MediaTrack:track), (Boolean:selected)
description:

------
name:SetTrackSendInfo_Value
language:c
return:(bool:)
params:(MediaTrack*:tr), (int:category), (int:sendidx), (const char*:parmname), (double:newvalue)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_AUTOMODE, I_SRCCHAN, I_DSTCHAN, I_MIDIFLAGS

description:
Set send/receive/hardware output numerical-value attributes, return true on success.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:SetTrackSendInfo_Value
language:eel2
return:(bool:)
params:(MediaTrack:tr), (int:category), (int:sendidx), ("parmname":), (newvalue:)
description:
Set send/receive/hardware output numerical-value attributes, return true on success.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:reaper.SetTrackSendInfo_Value
language:lua
return:(boolean:)
params:(MediaTrack:tr), (integer:category), (integer:sendidx), (string:parmname), (number:newvalue)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_AUTOMODE, I_SRCCHAN, I_DSTCHAN, I_MIDIFLAGS

description:
Set send/receive/hardware output numerical-value attributes, return true on success.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:RPR_SetTrackSendInfo_Value
language:python
return:(Boolean:)
params:(MediaTrack:tr), (Int:category), (Int:sendidx), (String:parmname), (Float:newvalue)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_AUTOMODE, I_SRCCHAN, I_DSTCHAN, I_MIDIFLAGS

description:
Set send/receive/hardware output numerical-value attributes, return true on success.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool *, true to flip phase
B_MONO : bool *
D_VOL : double *, 1.0 = +0dB etc
D_PAN : double *, -1..+1
D_PANLAW : double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int *, index,&1024=mono, -1 for none
I_DSTCHAN : int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.
------
name:SetTrackSendUIPan
language:c
return:(bool:)
params:(MediaTrack*:track), (int:send_idx), (double:pan), (int:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:SetTrackSendUIPan
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:send_idx), (pan:), (int:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:reaper.SetTrackSendUIPan
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:send_idx), (number:pan), (integer:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:RPR_SetTrackSendUIPan
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:send_idx), (Float:pan), (Int:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:SetTrackSendUIVol
language:c
return:(bool:)
params:(MediaTrack*:track), (int:send_idx), (double:vol), (int:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:SetTrackSendUIVol
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:send_idx), (vol:), (int:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:reaper.SetTrackSendUIVol
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:send_idx), (number:vol), (integer:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:RPR_SetTrackSendUIVol
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:send_idx), (Float:vol), (Int:isend)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs
for sends. isend=1 for end of edit, -1 for an instant edit (such as
reset), 0 for normal tweak.
------
name:SetTrackStateChunk
language:c
return:(bool:)
params:(MediaTrack*:track), (const char*:str), (bool:isundoOptional)
description:
Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:SetTrackStateChunk
language:eel2
return:(bool:)
params:(MediaTrack:track), ("str":), (bool:isundo)
description:
Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:reaper.SetTrackStateChunk
language:lua
return:(boolean:)
params:(MediaTrack:track), (string:str), (boolean:isundo)
description:
Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:RPR_SetTrackStateChunk
language:python
return:(Boolean:)
params:(MediaTrack:track), (String:str), (Boolean:isundoOptional)
description:
Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.
------
name:ShowActionList
language:c
return:(void:)
params:(KbdSectionInfo*:caller), (HWND:callerWnd)
description:

------
name:ShowActionList
language:eel2
return:
params:(KbdSectionInfo:caller), (HWND:callerWnd)
description:

------
name:reaper.ShowActionList
language:lua
return:
params:(KbdSectionInfo:caller), (HWND:callerWnd)
description:

------
name:RPR_ShowActionList
language:python
return:
params:(KbdSectionInfo:caller), (HWND:callerWnd)
description:

------
name:ShowConsoleMsg
language:c
return:(void:)
params:(const char*:msg)
description:
Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. See ClearConsole
------
name:ShowConsoleMsg
language:eel2
return:
params:("msg":)
description:
Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. See ClearConsole
------
name:reaper.ShowConsoleMsg
language:lua
return:
params:(string:msg)
description:
Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. See ClearConsole
------
name:RPR_ShowConsoleMsg
language:python
return:
params:(String:msg)
description:
Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. See ClearConsole
------
name:ShowMessageBox
language:c
return:(int:)
params:(const char*:msg), (const char*:title), (int:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:ShowMessageBox
language:eel2
return:(int:)
params:("msg":), ("title":), (int:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:reaper.ShowMessageBox
language:lua
return:(integer:)
params:(string:msg), (string:title), (integer:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:RPR_ShowMessageBox
language:python
return:(Int:)
params:(String:msg), (String:title), (Int:type)
description:
type
0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :
ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO
------
name:ShowPopupMenu
language:c
return:(void:)
params:(const char*:name), (int:x), (int:y), (HWND:hwndParentOptional), (void*:ctxOptional), (int:ctx2Optional), (int:ctx3Optional)
description:
shows a context menu, valid names include: track_input, track_panel,
track_area, track_routing, item, ruler, envelope, envelope_point,
envelope_item. ctxOptional can be a track pointer for track_*, item
pointer for item* (but is optional). for envelope_point, ctx2Optional
has point index, ctx3Optional has item index (0=main envelope, 1=first
AI). for envelope_item, ctx2Optional has AI index (1=first AI)
------
name:ShowPopupMenu
language:eel2
return:
params:("name":), (int:x), (int:y), (HWND:hwndParent), (void*:ctx), (int:ctx2), (int:ctx3)
description:
shows a context menu, valid names include: track_input, track_panel,
track_area, track_routing, item, ruler, envelope, envelope_point,
envelope_item. ctxOptional can be a track pointer for track_*, item
pointer for item* (but is optional). for envelope_point, ctx2Optional
has point index, ctx3Optional has item index (0=main envelope, 1=first
AI). for envelope_item, ctx2Optional has AI index (1=first AI)
------
name:reaper.ShowPopupMenu
language:lua
return:
params:(string:name), (integer:x), (integer:y), (HWND:hwndParent), (identifier:ctx), (integer:ctx2), (integer:ctx3)
description:
shows a context menu, valid names include: track_input, track_panel,
track_area, track_routing, item, ruler, envelope, envelope_point,
envelope_item. ctxOptional can be a track pointer for track_*, item
pointer for item* (but is optional). for envelope_point, ctx2Optional
has point index, ctx3Optional has item index (0=main envelope, 1=first
AI). for envelope_item, ctx2Optional has AI index (1=first AI)
------
name:RPR_ShowPopupMenu
language:python
return:
params:(String:name), (Int:x), (Int:y), (HWND:hwndParentOptional), (void:ctxOptional), (Int:ctx2Optional), (Int:ctx3Optional)
description:
shows a context menu, valid names include: track_input, track_panel,
track_area, track_routing, item, ruler, envelope, envelope_point,
envelope_item. ctxOptional can be a track pointer for track_*, item
pointer for item* (but is optional). for envelope_point, ctx2Optional
has point index, ctx3Optional has item index (0=main envelope, 1=first
AI). for envelope_item, ctx2Optional has AI index (1=first AI)
------
name:SLIDER2DB
language:c
return:(double:)
params:(double:y)
description:

------
name:SLIDER2DB
language:eel2
return:(double:)
params:(y:)
description:

------
name:reaper.SLIDER2DB
language:lua
return:(number:)
params:(number:y)
description:

------
name:RPR_SLIDER2DB
language:python
return:(Float:)
params:(Float:y)
description:

------
name:SnapToGrid
language:c
return:(double:)
params:(ReaProject*:project), (double:time_pos)
description:

------
name:SnapToGrid
language:eel2
return:(double:)
params:(ReaProject:project), (time_pos:)
description:

------
name:reaper.SnapToGrid
language:lua
return:(number:)
params:(ReaProject:project), (number:time_pos)
description:

------
name:RPR_SnapToGrid
language:python
return:(Float:)
params:(ReaProject:project), (Float:time_pos)
description:

------
name:SoloAllTracks
language:c
return:(void:)
params:(int:solo)
description:
solo=2 for SIP
------
name:SoloAllTracks
language:eel2
return:
params:(int:solo)
description:
solo=2 for SIP
------
name:reaper.SoloAllTracks
language:lua
return:
params:(integer:solo)
description:
solo=2 for SIP
------
name:RPR_SoloAllTracks
language:python
return:
params:(Int:solo)
description:
solo=2 for SIP
------
name:Splash_GetWnd
language:c
return:(HWND:)
params:
description:
gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.
------
name:Splash_GetWnd
language:eel2
return:(HWND:)
params:
description:
gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.
------
name:reaper.Splash_GetWnd
language:lua
return:(HWND:)
params:
description:
gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.
------
name:RPR_Splash_GetWnd
language:python
return:(HWND:)
params:
description:
gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.
------
name:SplitMediaItem
language:c
return:(MediaItem*:)
params:(MediaItem*:item), (double:position)
description:
the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)
------
name:SplitMediaItem
language:eel2
return:(MediaItem:)
params:(MediaItem:item), (position:)
description:
the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)
------
name:reaper.SplitMediaItem
language:lua
return:(MediaItem:)
params:(MediaItem:item), (number:position)
description:
the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)
------
name:RPR_SplitMediaItem
language:python
return:(MediaItem:)
params:(MediaItem:item), (Float:position)
description:
the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)
------
name:stringToGuid
language:c
return:(void:)
params:(const char*:str), (GUID*:g)
description:

------
name:stringToGuid
language:eel2
return:
params:("str":), (#gGUID:)
description:

------
name:reaper.stringToGuid
language:lua
return:(string:gGUID)
params:(string:str), (string:gGUID)
description:

------
name:RPR_stringToGuid
language:python
return:
params:(String:str), (GUID:g)
description:

------
name:StuffMIDIMessage
language:c
return:(void:)
params:(int:mode), (int:msg1), (int:msg2), (int:msg3)
description:
Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard
queue, or the MIDI-as-control input queue, or sends to a MIDI hardware
output. mode=0 for VKB, 1 for control (actions map etc), 2 for
VKB-on-current-channel; 16 for external MIDI device 0, 17 for external
MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.
------
name:StuffMIDIMessage
language:eel2
return:
params:(int:mode), (int:msg1), (int:msg2), (int:msg3)
description:
Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard
queue, or the MIDI-as-control input queue, or sends to a MIDI hardware
output. mode=0 for VKB, 1 for control (actions map etc), 2 for
VKB-on-current-channel; 16 for external MIDI device 0, 17 for external
MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.
------
name:reaper.StuffMIDIMessage
language:lua
return:
params:(integer:mode), (integer:msg1), (integer:msg2), (integer:msg3)
description:
Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard
queue, or the MIDI-as-control input queue, or sends to a MIDI hardware
output. mode=0 for VKB, 1 for control (actions map etc), 2 for
VKB-on-current-channel; 16 for external MIDI device 0, 17 for external
MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.
------
name:RPR_StuffMIDIMessage
language:python
return:
params:(Int:mode), (Int:msg1), (Int:msg2), (Int:msg3)
description:
Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard
queue, or the MIDI-as-control input queue, or sends to a MIDI hardware
output. mode=0 for VKB, 1 for control (actions map etc), 2 for
VKB-on-current-channel; 16 for external MIDI device 0, 17 for external
MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.
------
name:TakeFX_AddByName
language:c
return:(int:)
params:(MediaItem_Take*:take), (const char*:fxname), (int:instantiate)
description:
Adds or queries the position of a named FX in a take. Specify a negative
value for instantiate to always create a new effect, 0 to only query
the first instance of an effect, or a positive value to add an instance
if one is not found.
------
name:TakeFX_AddByName
language:eel2
return:(int:)
params:(MediaItem_Take:take), ("fxname":), (int:instantiate)
description:
Adds or queries the position of a named FX in a take. Specify a negative
value for instantiate to always create a new effect, 0 to only query
the first instance of an effect, or a positive value to add an instance
if one is not found.
------
name:reaper.TakeFX_AddByName
language:lua
return:(integer:)
params:(MediaItem_Take:take), (string:fxname), (integer:instantiate)
description:
Adds or queries the position of a named FX in a take. Specify a negative
value for instantiate to always create a new effect, 0 to only query
the first instance of an effect, or a positive value to add an instance
if one is not found.
------
name:RPR_TakeFX_AddByName
language:python
return:(Int:)
params:(MediaItem_Take:take), (String:fxname), (Int:instantiate)
description:
Adds or queries the position of a named FX in a take. Specify a negative
value for instantiate to always create a new effect, 0 to only query
the first instance of an effect, or a positive value to add an instance
if one is not found.
------
name:TakeFX_CopyToTake
language:c
return:(void:)
params:(MediaItem_Take*:src_take), (int:src_fx), (MediaItem_Take*:dest_take), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder.
------
name:TakeFX_CopyToTake
language:eel2
return:
params:(MediaItem_Take:src_take), (int:src_fx), (MediaItem_Take:dest_take), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder.
------
name:reaper.TakeFX_CopyToTake
language:lua
return:
params:(MediaItem_Take:src_take), (integer:src_fx), (MediaItem_Take:dest_take), (integer:dest_fx), (boolean:is_move)
description:
Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder.
------
name:RPR_TakeFX_CopyToTake
language:python
return:
params:(MediaItem_Take:src_take), (Int:src_fx), (MediaItem_Take:dest_take), (Int:dest_fx), (Boolean:is_move)
description:
Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder.
------
name:TakeFX_CopyToTrack
language:c
return:(void:)
params:(MediaItem_Take*:src_take), (int:src_fx), (MediaTrack*:dest_track), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.
------
name:TakeFX_CopyToTrack
language:eel2
return:
params:(MediaItem_Take:src_take), (int:src_fx), (MediaTrack:dest_track), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.
------
name:reaper.TakeFX_CopyToTrack
language:lua
return:
params:(MediaItem_Take:src_take), (integer:src_fx), (MediaTrack:dest_track), (integer:dest_fx), (boolean:is_move)
description:
Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.
------
name:RPR_TakeFX_CopyToTrack
language:python
return:
params:(MediaItem_Take:src_take), (Int:src_fx), (MediaTrack:dest_track), (Int:dest_fx), (Boolean:is_move)
description:
Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.
------
name:TakeFX_Delete
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx)
description:
Remove a FX from take chain (returns true on success)
------
name:TakeFX_Delete
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx)
description:
Remove a FX from take chain (returns true on success)
------
name:reaper.TakeFX_Delete
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx)
description:
Remove a FX from take chain (returns true on success)
------
name:RPR_TakeFX_Delete
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx)
description:
Remove a FX from take chain (returns true on success)
------
name:TakeFX_EndParamEdit
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param)
description:

------
name:TakeFX_EndParamEdit
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param)
description:

------
name:reaper.TakeFX_EndParamEdit
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx), (integer:param)
description:

------
name:RPR_TakeFX_EndParamEdit
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx), (Int:param)
description:

------
name:TakeFX_FormatParamValue
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (double:val), (char*:buf), (int:buf_sz)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TakeFX_FormatParamValue
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param), (val:), (#buf:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:reaper.TakeFX_FormatParamValue
language:lua
return:(boolean:retval),(string:buf)
params:(MediaItem_Take:take), (integer:fx), (integer:param), (number:val), (string:buf)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:RPR_TakeFX_FormatParamValue
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(Int:param),(Float:val),(String:buf),(Int:buf_sz)
params:(take:), (fx:), (param:), (val:), (buf:), (buf_sz:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TakeFX_FormatParamValueNormalized
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (double:value), (char*:buf), (int:buf_sz)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TakeFX_FormatParamValueNormalized
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param), (value:), (#buf:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:reaper.TakeFX_FormatParamValueNormalized
language:lua
return:(boolean:retval),(string:buf)
params:(MediaItem_Take:take), (integer:fx), (integer:param), (number:value), (string:buf)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:RPR_TakeFX_FormatParamValueNormalized
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(Int:param),(Float:value),(String:buf),(Int:buf_sz)
params:(take:), (fx:), (param:), (value:), (buf:), (buf_sz:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TakeFX_GetChainVisible
language:c
return:(int:)
params:(MediaItem_Take*:take)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:TakeFX_GetChainVisible
language:eel2
return:(int:)
params:(MediaItem_Take:take)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:reaper.TakeFX_GetChainVisible
language:lua
return:(integer:)
params:(MediaItem_Take:take)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:RPR_TakeFX_GetChainVisible
language:python
return:(Int:)
params:(MediaItem_Take:take)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:TakeFX_GetCount
language:c
return:(int:)
params:(MediaItem_Take*:take)
description:

------
name:TakeFX_GetCount
language:eel2
return:(int:)
params:(MediaItem_Take:take)
description:

------
name:reaper.TakeFX_GetCount
language:lua
return:(integer:)
params:(MediaItem_Take:take)
description:

------
name:RPR_TakeFX_GetCount
language:python
return:(Int:)
params:(MediaItem_Take:take)
description:

------
name:TakeFX_GetEnabled
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx)
description:
See TakeFX_SetEnabled
------
name:TakeFX_GetEnabled
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx)
description:
See TakeFX_SetEnabled
------
name:reaper.TakeFX_GetEnabled
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx)
description:
See TakeFX_SetEnabled
------
name:RPR_TakeFX_GetEnabled
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx)
description:
See TakeFX_SetEnabled
------
name:TakeFX_GetEnvelope
language:c
return:(TrackEnvelope*:)
params:(MediaItem_Take*:take), (int:fxindex), (int:parameterindex), (bool:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:TakeFX_GetEnvelope
language:eel2
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (int:fxindex), (int:parameterindex), (bool:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:reaper.TakeFX_GetEnvelope
language:lua
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (integer:fxindex), (integer:parameterindex), (boolean:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:RPR_TakeFX_GetEnvelope
language:python
return:(TrackEnvelope:)
params:(MediaItem_Take:take), (Int:fxindex), (Int:parameterindex), (Boolean:create)
description:
Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.
------
name:TakeFX_GetFloatingWindow
language:c
return:(HWND:)
params:(MediaItem_Take*:take), (int:index)
description:
returns HWND of floating window for effect index, if any
------
name:TakeFX_GetFloatingWindow
language:eel2
return:(HWND:)
params:(MediaItem_Take:take), (int:index)
description:
returns HWND of floating window for effect index, if any
------
name:reaper.TakeFX_GetFloatingWindow
language:lua
return:(HWND:)
params:(MediaItem_Take:take), (integer:index)
description:
returns HWND of floating window for effect index, if any
------
name:RPR_TakeFX_GetFloatingWindow
language:python
return:(HWND:)
params:(MediaItem_Take:take), (Int:index)
description:
returns HWND of floating window for effect index, if any
------
name:TakeFX_GetFormattedParamValue
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (char*:buf), (int:buf_sz)
description:

------
name:TakeFX_GetFormattedParamValue
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param), (#buf:)
description:

------
name:reaper.TakeFX_GetFormattedParamValue
language:lua
return:(boolean:retval),(string:buf)
params:(MediaItem_Take:take), (integer:fx), (integer:param), (string:buf)
description:

------
name:RPR_TakeFX_GetFormattedParamValue
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(Int:param),(String:buf),(Int:buf_sz)
params:(take:), (fx:), (param:), (buf:), (buf_sz:)
description:

------
name:TakeFX_GetFXGUID
language:c
return:(GUID*:)
params:(MediaItem_Take*:take), (int:fx)
description:

------
name:TakeFX_GetFXGUID
language:eel2
return:(bool:)
params:(#retguid:), (MediaItem_Take:take), (int:fx)
description:

------
name:reaper.TakeFX_GetFXGUID
language:lua
return:(string:GUID)
params:(MediaItem_Take:take), (integer:fx)
description:

------
name:RPR_TakeFX_GetFXGUID
language:python
return:(GUID:)
params:(MediaItem_Take:take), (Int:fx)
description:

------
name:TakeFX_GetFXName
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (char*:buf), (int:buf_sz)
description:

------
name:TakeFX_GetFXName
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (#buf:)
description:

------
name:reaper.TakeFX_GetFXName
language:lua
return:(boolean:retval),(string:buf)
params:(MediaItem_Take:take), (integer:fx), (string:buf)
description:

------
name:RPR_TakeFX_GetFXName
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(String:buf),(Int:buf_sz)
params:(take:), (fx:), (buf:), (buf_sz:)
description:

------
name:TakeFX_GetIOSize
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:fx), (int*:inputPinsOutOptional), (int*:outputPinsOutOptional)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:TakeFX_GetIOSize
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:fx), (optional int:&inputPins), (optional int:&outputPins)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:reaper.TakeFX_GetIOSize
language:lua
return:(integer:retval),(optional number:inputPins),(optional number:outputPins)
params:(MediaItem_Take:take), (integer:fx)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:RPR_TakeFX_GetIOSize
language:python
return:(Int:retval),(MediaItem_Take:take),(Int:fx),(Int:inputPinsOutOptional),(Int:outputPinsOutOptional)
params:(take:), (fx:), (inputPinsOutOptional:), (outputPinsOutOptional:)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:TakeFX_GetNamedConfigParm
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (const char*:parmname), (char*:bufOut), (int:bufOut_sz)
description:
gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm
------
name:TakeFX_GetNamedConfigParm
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), ("parmname":), (#buf:)
description:
gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm
------
name:reaper.TakeFX_GetNamedConfigParm
language:lua
return:(boolean:retval),(string:buf)
params:(MediaItem_Take:take), (integer:fx), (string:parmname)
description:
gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm
------
name:RPR_TakeFX_GetNamedConfigParm
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(String:parmname),(String:bufOut),(Int:bufOut_sz)
params:(take:), (fx:), (parmname:), (bufOut:), (bufOut_sz:)
description:
gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm
------
name:TakeFX_GetNumParams
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:fx)
description:

------
name:TakeFX_GetNumParams
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:fx)
description:

------
name:reaper.TakeFX_GetNumParams
language:lua
return:(integer:)
params:(MediaItem_Take:take), (integer:fx)
description:

------
name:RPR_TakeFX_GetNumParams
language:python
return:(Int:)
params:(MediaItem_Take:take), (Int:fx)
description:

------
name:TakeFX_GetOffline
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx)
description:
See TakeFX_SetOffline
------
name:TakeFX_GetOffline
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx)
description:
See TakeFX_SetOffline
------
name:reaper.TakeFX_GetOffline
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx)
description:
See TakeFX_SetOffline
------
name:RPR_TakeFX_GetOffline
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx)
description:
See TakeFX_SetOffline
------
name:TakeFX_GetOpen
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen
------
name:TakeFX_GetOpen
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen
------
name:reaper.TakeFX_GetOpen
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen
------
name:RPR_TakeFX_GetOpen
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen
------
name:TakeFX_GetParam
language:c
return:(double:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (double*:minvalOut), (double*:maxvalOut)
description:

------
name:TakeFX_GetParam
language:eel2
return:(double:)
params:(MediaItem_Take:take), (int:fx), (int:param), (&minval:), (&maxval:)
description:

------
name:reaper.TakeFX_GetParam
language:lua
return:(number:retval),(number:minval),(number:maxval)
params:(MediaItem_Take:take), (integer:fx), (integer:param)
description:

------
name:RPR_TakeFX_GetParam
language:python
return:(Float:retval),(MediaItem_Take:take),(Int:fx),(Int:param),(Float:minvalOut),(Float:maxvalOut)
params:(take:), (fx:), (param:), (minvalOut:), (maxvalOut:)
description:

------
name:TakeFX_GetParameterStepSizes
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (double*:stepOut), (double*:smallstepOut), (double*:largestepOut), (bool*:istoggleOut)
description:

------
name:TakeFX_GetParameterStepSizes
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param), (&step:), (&smallstep:), (&largestep:), (bool:&istoggle)
description:

------
name:reaper.TakeFX_GetParameterStepSizes
language:lua
return:(boolean:retval),(number:step),(number:smallstep),(number:largestep),(boolean:istoggle)
params:(MediaItem_Take:take), (integer:fx), (integer:param)
description:

------
name:RPR_TakeFX_GetParameterStepSizes
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(Int:param),(Float:stepOut),(Float:smallstepOut),(Float:largestepOut),(Boolean:istoggleOut)
params:(take:), (fx:), (param:), (stepOut:), (smallstepOut:), (largestepOut:), (istoggleOut:)
description:

------
name:TakeFX_GetParamEx
language:c
return:(double:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (double*:minvalOut), (double*:maxvalOut), (double*:midvalOut)
description:

------
name:TakeFX_GetParamEx
language:eel2
return:(double:)
params:(MediaItem_Take:take), (int:fx), (int:param), (&minval:), (&maxval:), (&midval:)
description:

------
name:reaper.TakeFX_GetParamEx
language:lua
return:(number:retval),(number:minval),(number:maxval),(number:midval)
params:(MediaItem_Take:take), (integer:fx), (integer:param)
description:

------
name:RPR_TakeFX_GetParamEx
language:python
return:(Float:retval),(MediaItem_Take:take),(Int:fx),(Int:param),(Float:minvalOut),(Float:maxvalOut),(Float:midvalOut)
params:(take:), (fx:), (param:), (minvalOut:), (maxvalOut:), (midvalOut:)
description:

------
name:TakeFX_GetParamName
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (char*:buf), (int:buf_sz)
description:

------
name:TakeFX_GetParamName
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param), (#buf:)
description:

------
name:reaper.TakeFX_GetParamName
language:lua
return:(boolean:retval),(string:buf)
params:(MediaItem_Take:take), (integer:fx), (integer:param), (string:buf)
description:

------
name:RPR_TakeFX_GetParamName
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(Int:param),(String:buf),(Int:buf_sz)
params:(take:), (fx:), (param:), (buf:), (buf_sz:)
description:

------
name:TakeFX_GetParamNormalized
language:c
return:(double:)
params:(MediaItem_Take*:take), (int:fx), (int:param)
description:

------
name:TakeFX_GetParamNormalized
language:eel2
return:(double:)
params:(MediaItem_Take:take), (int:fx), (int:param)
description:

------
name:reaper.TakeFX_GetParamNormalized
language:lua
return:(number:)
params:(MediaItem_Take:take), (integer:fx), (integer:param)
description:

------
name:RPR_TakeFX_GetParamNormalized
language:python
return:(Float:)
params:(MediaItem_Take:take), (Int:fx), (Int:param)
description:

------
name:TakeFX_GetPinMappings
language:c
return:(int:)
params:(MediaItem_Take*:tr), (int:fx), (int:isoutput), (int:pin), (int*:high32OutOptional)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:TakeFX_GetPinMappings
language:eel2
return:(int:)
params:(MediaItem_Take:tr), (int:fx), (int:isoutput), (int:pin), (optional int:&high32)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:reaper.TakeFX_GetPinMappings
language:lua
return:(integer:retval),(optional number:high32)
params:(MediaItem_Take:tr), (integer:fx), (integer:isoutput), (integer:pin)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:RPR_TakeFX_GetPinMappings
language:python
return:(Int:retval),(MediaItem_Take:tr),(Int:fx),(Int:isoutput),(Int:pin),(Int:high32OutOptional)
params:(tr:), (fx:), (isoutput:), (pin:), (high32OutOptional:)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:TakeFX_GetPreset
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (char*:presetname), (int:presetname_sz)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TakeFX_SetPreset.
------
name:TakeFX_GetPreset
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (#presetname:)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TakeFX_SetPreset.
------
name:reaper.TakeFX_GetPreset
language:lua
return:(boolean:retval),(string:presetname)
params:(MediaItem_Take:take), (integer:fx), (string:presetname)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TakeFX_SetPreset.
------
name:RPR_TakeFX_GetPreset
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Int:fx),(String:presetname),(Int:presetname_sz)
params:(take:), (fx:), (presetname:), (presetname_sz:)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TakeFX_SetPreset.
------
name:TakeFX_GetPresetIndex
language:c
return:(int:)
params:(MediaItem_Take*:take), (int:fx), (int*:numberOfPresetsOut)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex
------
name:TakeFX_GetPresetIndex
language:eel2
return:(int:)
params:(MediaItem_Take:take), (int:fx), (int:&numberOfPresets)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex
------
name:reaper.TakeFX_GetPresetIndex
language:lua
return:(integer:retval),(number:numberOfPresets)
params:(MediaItem_Take:take), (integer:fx)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex
------
name:RPR_TakeFX_GetPresetIndex
language:python
return:(Int:retval),(MediaItem_Take:take),(Int:fx),(Int:numberOfPresetsOut)
params:(take:), (fx:), (numberOfPresetsOut:)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex
------
name:TakeFX_GetUserPresetFilename
language:c
return:(void:)
params:(MediaItem_Take*:take), (int:fx), (char*:fn), (int:fn_sz)
description:

------
name:TakeFX_GetUserPresetFilename
language:eel2
return:
params:(MediaItem_Take:take), (int:fx), (#fn:)
description:

------
name:reaper.TakeFX_GetUserPresetFilename
language:lua
return:(string:fn)
params:(MediaItem_Take:take), (integer:fx), (string:fn)
description:

------
name:RPR_TakeFX_GetUserPresetFilename
language:python
return:(MediaItem_Take:take),(Int:fx),(String:fn),(Int:fn_sz)
params:(take:), (fx:), (fn:), (fn_sz:)
description:

------
name:TakeFX_NavigatePresets
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:TakeFX_NavigatePresets
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:reaper.TakeFX_NavigatePresets
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx), (integer:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:RPR_TakeFX_NavigatePresets
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx), (Int:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:TakeFX_SetEnabled
language:c
return:(void:)
params:(MediaItem_Take*:take), (int:fx), (bool:enabled)
description:
See TakeFX_GetEnabled
------
name:TakeFX_SetEnabled
language:eel2
return:
params:(MediaItem_Take:take), (int:fx), (bool:enabled)
description:
See TakeFX_GetEnabled
------
name:reaper.TakeFX_SetEnabled
language:lua
return:
params:(MediaItem_Take:take), (integer:fx), (boolean:enabled)
description:
See TakeFX_GetEnabled
------
name:RPR_TakeFX_SetEnabled
language:python
return:
params:(MediaItem_Take:take), (Int:fx), (Boolean:enabled)
description:
See TakeFX_GetEnabled
------
name:TakeFX_SetNamedConfigParm
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (const char*:parmname), (const char*:value)
description:
gets plug-in specific named configuration value (returns true on success)
------
name:TakeFX_SetNamedConfigParm
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), ("parmname":), ("value":)
description:
gets plug-in specific named configuration value (returns true on success)
------
name:reaper.TakeFX_SetNamedConfigParm
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx), (string:parmname), (string:value)
description:
gets plug-in specific named configuration value (returns true on success)
------
name:RPR_TakeFX_SetNamedConfigParm
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx), (String:parmname), (String:value)
description:
gets plug-in specific named configuration value (returns true on success)
------
name:TakeFX_SetOffline
language:c
return:(void:)
params:(MediaItem_Take*:take), (int:fx), (bool:offline)
description:
See TakeFX_GetOffline
------
name:TakeFX_SetOffline
language:eel2
return:
params:(MediaItem_Take:take), (int:fx), (bool:offline)
description:
See TakeFX_GetOffline
------
name:reaper.TakeFX_SetOffline
language:lua
return:
params:(MediaItem_Take:take), (integer:fx), (boolean:offline)
description:
See TakeFX_GetOffline
------
name:RPR_TakeFX_SetOffline
language:python
return:
params:(MediaItem_Take:take), (Int:fx), (Boolean:offline)
description:
See TakeFX_GetOffline
------
name:TakeFX_SetOpen
language:c
return:(void:)
params:(MediaItem_Take*:take), (int:fx), (bool:open)
description:
Open this FX UI. See TakeFX_GetOpen
------
name:TakeFX_SetOpen
language:eel2
return:
params:(MediaItem_Take:take), (int:fx), (bool:open)
description:
Open this FX UI. See TakeFX_GetOpen
------
name:reaper.TakeFX_SetOpen
language:lua
return:
params:(MediaItem_Take:take), (integer:fx), (boolean:open)
description:
Open this FX UI. See TakeFX_GetOpen
------
name:RPR_TakeFX_SetOpen
language:python
return:
params:(MediaItem_Take:take), (Int:fx), (Boolean:open)
description:
Open this FX UI. See TakeFX_GetOpen
------
name:TakeFX_SetParam
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (double:val)
description:

------
name:TakeFX_SetParam
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param), (val:)
description:

------
name:reaper.TakeFX_SetParam
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx), (integer:param), (number:val)
description:

------
name:RPR_TakeFX_SetParam
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx), (Int:param), (Float:val)
description:

------
name:TakeFX_SetParamNormalized
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:param), (double:value)
description:

------
name:TakeFX_SetParamNormalized
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:param), (value:)
description:

------
name:reaper.TakeFX_SetParamNormalized
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx), (integer:param), (number:value)
description:

------
name:RPR_TakeFX_SetParamNormalized
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx), (Int:param), (Float:value)
description:

------
name:TakeFX_SetPinMappings
language:c
return:(bool:)
params:(MediaItem_Take*:tr), (int:fx), (int:isoutput), (int:pin), (int:low32bits), (int:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:TakeFX_SetPinMappings
language:eel2
return:(bool:)
params:(MediaItem_Take:tr), (int:fx), (int:isoutput), (int:pin), (int:low32bits), (int:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:reaper.TakeFX_SetPinMappings
language:lua
return:(boolean:)
params:(MediaItem_Take:tr), (integer:fx), (integer:isoutput), (integer:pin), (integer:low32bits), (integer:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:RPR_TakeFX_SetPinMappings
language:python
return:(Boolean:)
params:(MediaItem_Take:tr), (Int:fx), (Int:isoutput), (Int:pin), (Int:low32bits), (Int:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:TakeFX_SetPreset
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (const char*:presetname)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.
------
name:TakeFX_SetPreset
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), ("presetname":)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.
------
name:reaper.TakeFX_SetPreset
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx), (string:presetname)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.
------
name:RPR_TakeFX_SetPreset
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx), (String:presetname)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.
------
name:TakeFX_SetPresetByIndex
language:c
return:(bool:)
params:(MediaItem_Take*:take), (int:fx), (int:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.
------
name:TakeFX_SetPresetByIndex
language:eel2
return:(bool:)
params:(MediaItem_Take:take), (int:fx), (int:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.
------
name:reaper.TakeFX_SetPresetByIndex
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (integer:fx), (integer:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.
------
name:RPR_TakeFX_SetPresetByIndex
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Int:fx), (Int:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.
------
name:TakeFX_Show
language:c
return:(void:)
params:(MediaItem_Take*:take), (int:index), (int:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:TakeFX_Show
language:eel2
return:
params:(MediaItem_Take:take), (int:index), (int:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:reaper.TakeFX_Show
language:lua
return:
params:(MediaItem_Take:take), (integer:index), (integer:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:RPR_TakeFX_Show
language:python
return:
params:(MediaItem_Take:take), (Int:index), (Int:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:TakeIsMIDI
language:c
return:(bool:)
params:(MediaItem_Take*:take)
description:
Returns true if the active take contains MIDI.
------
name:TakeIsMIDI
language:eel2
return:(bool:)
params:(MediaItem_Take:take)
description:
Returns true if the active take contains MIDI.
------
name:reaper.TakeIsMIDI
language:lua
return:(boolean:)
params:(MediaItem_Take:take)
description:
Returns true if the active take contains MIDI.
------
name:RPR_TakeIsMIDI
language:python
return:(Boolean:)
params:(MediaItem_Take:take)
description:
Returns true if the active take contains MIDI.
------
name:ThemeLayout_GetLayout
language:c
return:(bool:)
params:(const char*:section), (int:idx), (char*:nameOut), (int:nameOut_sz)
description:
Gets theme layout information. section can be 'global' for global layout
override, 'seclist' to enumerate a list of layout sections, otherwise a
layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to
query the current value, -2 to get the description of the section (if
not global), -3 will return the current context DPI-scaling (256=normal,
512=retina, etc), or 0..x. returns false if failed.
------
name:ThemeLayout_GetLayout
language:eel2
return:(bool:)
params:("section":), (int:idx), (#name:)
description:
Gets theme layout information. section can be 'global' for global layout
override, 'seclist' to enumerate a list of layout sections, otherwise a
layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to
query the current value, -2 to get the description of the section (if
not global), -3 will return the current context DPI-scaling (256=normal,
512=retina, etc), or 0..x. returns false if failed.
------
name:reaper.ThemeLayout_GetLayout
language:lua
return:(boolean:retval),(string:name)
params:(string:section), (integer:idx)
description:
Gets theme layout information. section can be 'global' for global layout
override, 'seclist' to enumerate a list of layout sections, otherwise a
layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to
query the current value, -2 to get the description of the section (if
not global), -3 will return the current context DPI-scaling (256=normal,
512=retina, etc), or 0..x. returns false if failed.
------
name:RPR_ThemeLayout_GetLayout
language:python
return:(Boolean:retval),(String:section),(Int:idx),(String:nameOut),(Int:nameOut_sz)
params:(section:), (idx:), (nameOut:), (nameOut_sz:)
description:
Gets theme layout information. section can be 'global' for global layout
override, 'seclist' to enumerate a list of layout sections, otherwise a
layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to
query the current value, -2 to get the description of the section (if
not global), -3 will return the current context DPI-scaling (256=normal,
512=retina, etc), or 0..x. returns false if failed.
------
name:ThemeLayout_GetParameter
language:c
return:(const:char*)
params:(int:wp), (const char**:descOutOptional), (int*:valueOutOptional), (int*:defValueOutOptional), (int*:minValueOutOptional), (int*:maxValueOutOptional)
description:
returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.
------
name:ThemeLayout_GetParameter
language:eel2
return:(bool:)
params:(#retval:), (int:wp), (optional:#desc), (optional int:&value), (optional int:&defValue), (optional int:&minValue), (optional int:&maxValue)
description:
returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.
------
name:reaper.ThemeLayout_GetParameter
language:lua
return:(string:retval),(optional string:desc),(optional number:value),(optional number:defValue),(optional number:minValue),(optional number:maxValue)
params:(integer:wp)
description:
returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.
------
name:RPR_ThemeLayout_GetParameter
language:python
return:(String:retval),(Int:wp),(String:descOutOptional),(Int:valueOutOptional),(Int:defValueOutOptional),(Int:minValueOutOptional),(Int:maxValueOutOptional)
params:(wp:), (descOutOptional:), (valueOutOptional:), (defValueOutOptional:), (minValueOutOptional:), (maxValueOutOptional:)
description:
returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.
------
name:ThemeLayout_RefreshAll
language:c
return:(void:)
params:
description:
Refreshes all layouts
------
name:ThemeLayout_RefreshAll
language:eel2
return:
params:
description:
Refreshes all layouts
------
name:reaper.ThemeLayout_RefreshAll
language:lua
return:
params:
description:
Refreshes all layouts
------
name:RPR_ThemeLayout_RefreshAll
language:python
return:
params:
description:
Refreshes all layouts
------
name:ThemeLayout_SetLayout
language:c
return:(bool:)
params:(const char*:section), (const char* :layout)
description:
Sets theme layout override for a particular section -- section can be
'global' or 'mcp' etc. If setting global layout, prefix a ! to the
layout string to clear any per-layout overrides. Returns false if
failed.
------
name:ThemeLayout_SetLayout
language:eel2
return:(bool:)
params:("section":), (":layout")
description:
Sets theme layout override for a particular section -- section can be
'global' or 'mcp' etc. If setting global layout, prefix a ! to the
layout string to clear any per-layout overrides. Returns false if
failed.
------
name:reaper.ThemeLayout_SetLayout
language:lua
return:(boolean:)
params:(string:section), (string :layout)
description:
Sets theme layout override for a particular section -- section can be
'global' or 'mcp' etc. If setting global layout, prefix a ! to the
layout string to clear any per-layout overrides. Returns false if
failed.
------
name:RPR_ThemeLayout_SetLayout
language:python
return:(Boolean:)
params:(String:section), (String :layout)
description:
Sets theme layout override for a particular section -- section can be
'global' or 'mcp' etc. If setting global layout, prefix a ! to the
layout string to clear any per-layout overrides. Returns false if
failed.
------
name:ThemeLayout_SetParameter
language:c
return:(bool:)
params:(int:wp), (int:value), (bool:persist)
description:
sets theme layout parameter to value. persist=true in order to have
change loaded on next theme load. note that the caller should update
layouts via ??? to make changes visible.
------
name:ThemeLayout_SetParameter
language:eel2
return:(bool:)
params:(int:wp), (int:value), (bool:persist)
description:
sets theme layout parameter to value. persist=true in order to have
change loaded on next theme load. note that the caller should update
layouts via ??? to make changes visible.
------
name:reaper.ThemeLayout_SetParameter
language:lua
return:(boolean:)
params:(integer:wp), (integer:value), (boolean:persist)
description:
sets theme layout parameter to value. persist=true in order to have
change loaded on next theme load. note that the caller should update
layouts via ??? to make changes visible.
------
name:RPR_ThemeLayout_SetParameter
language:python
return:(Boolean:)
params:(Int:wp), (Int:value), (Boolean:persist)
description:
sets theme layout parameter to value. persist=true in order to have
change loaded on next theme load. note that the caller should update
layouts via ??? to make changes visible.
------
name:time_precise
language:c
return:(double:)
params:
description:
Gets a precise system timestamp in seconds
------
name:reaper.time_precise
language:lua
return:(number:)
params:
description:
Gets a precise system timestamp in seconds
------
name:RPR_time_precise
language:python
return:(Float:)
params:
description:
Gets a precise system timestamp in seconds
------
name:TimeMap2_beatsToTime
language:c
return:(double:)
params:(ReaProject*:proj), (double:tpos), (const int*:measuresInOptional)
description:
convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.
------
name:TimeMap2_beatsToTime
language:eel2
return:(double:)
params:(ReaProject:proj), (tpos:), (optional int:measuresIn)
description:
convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.
------
name:reaper.TimeMap2_beatsToTime
language:lua
return:(number:)
params:(ReaProject:proj), (number:tpos), (optional number:measuresIn)
description:
convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.
------
name:RPR_TimeMap2_beatsToTime
language:python
return:(Float:)
params:(ReaProject:proj), (Float:tpos), (const int:measuresInOptional)
description:
convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.
------
name:TimeMap2_GetDividedBpmAtTime
language:c
return:(double:)
params:(ReaProject*:proj), (double:time)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:TimeMap2_GetDividedBpmAtTime
language:eel2
return:(double:)
params:(ReaProject:proj), (time:)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:reaper.TimeMap2_GetDividedBpmAtTime
language:lua
return:(number:)
params:(ReaProject:proj), (number:time)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:RPR_TimeMap2_GetDividedBpmAtTime
language:python
return:(Float:)
params:(ReaProject:proj), (Float:time)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:TimeMap2_GetNextChangeTime
language:c
return:(double:)
params:(ReaProject*:proj), (double:time)
description:
when does the next time map (tempo or time sig) change occur
------
name:TimeMap2_GetNextChangeTime
language:eel2
return:(double:)
params:(ReaProject:proj), (time:)
description:
when does the next time map (tempo or time sig) change occur
------
name:reaper.TimeMap2_GetNextChangeTime
language:lua
return:(number:)
params:(ReaProject:proj), (number:time)
description:
when does the next time map (tempo or time sig) change occur
------
name:RPR_TimeMap2_GetNextChangeTime
language:python
return:(Float:)
params:(ReaProject:proj), (Float:time)
description:
when does the next time map (tempo or time sig) change occur
------
name:TimeMap2_QNToTime
language:c
return:(double:)
params:(ReaProject*:proj), (double:qn)
description:
converts project QN position to time.
------
name:TimeMap2_QNToTime
language:eel2
return:(double:)
params:(ReaProject:proj), (qn:)
description:
converts project QN position to time.
------
name:reaper.TimeMap2_QNToTime
language:lua
return:(number:)
params:(ReaProject:proj), (number:qn)
description:
converts project QN position to time.
------
name:RPR_TimeMap2_QNToTime
language:python
return:(Float:)
params:(ReaProject:proj), (Float:qn)
description:
converts project QN position to time.
------
name:TimeMap2_timeToBeats
language:c
return:(double:)
params:(ReaProject*:proj), (double:tpos), (int*:measuresOutOptional), (int*:cmlOutOptional), (double*:fullbeatsOutOptional), (int*:cdenomOutOptional)
description:
convert a time into beats.
if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get
the full beat count (same value returned if measures is NULL).
if cdenom is non-NULL, will be set to the current time signature denominator.
------
name:TimeMap2_timeToBeats
language:eel2
return:(double:)
params:(ReaProject:proj), (tpos:), (optional int:&measures), (optional int:&cml), (optional:&fullbeats), (optional int:&cdenom)
description:
convert a time into beats.
if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get
the full beat count (same value returned if measures is NULL).
if cdenom is non-NULL, will be set to the current time signature denominator.
------
name:reaper.TimeMap2_timeToBeats
language:lua
return:(number:retval),(optional number:measures),(optional number:cml),(optional number:fullbeats),(optional number:cdenom)
params:(ReaProject:proj), (number:tpos)
description:
convert a time into beats.
if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get
the full beat count (same value returned if measures is NULL).
if cdenom is non-NULL, will be set to the current time signature denominator.
------
name:RPR_TimeMap2_timeToBeats
language:python
return:(Float:retval),(ReaProject:proj),(Float:tpos),(Int:measuresOutOptional),(Int:cmlOutOptional),(Float:fullbeatsOutOptional),(Int:cdenomOutOptional)
params:(proj:), (tpos:), (measuresOutOptional:), (cmlOutOptional:), (fullbeatsOutOptional:), (cdenomOutOptional:)
description:
convert a time into beats.
if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get
the full beat count (same value returned if measures is NULL).
if cdenom is non-NULL, will be set to the current time signature denominator.
------
name:TimeMap2_timeToQN
language:c
return:(double:)
params:(ReaProject*:proj), (double:tpos)
description:
converts project time position to QN position.
------
name:TimeMap2_timeToQN
language:eel2
return:(double:)
params:(ReaProject:proj), (tpos:)
description:
converts project time position to QN position.
------
name:reaper.TimeMap2_timeToQN
language:lua
return:(number:)
params:(ReaProject:proj), (number:tpos)
description:
converts project time position to QN position.
------
name:RPR_TimeMap2_timeToQN
language:python
return:(Float:)
params:(ReaProject:proj), (Float:tpos)
description:
converts project time position to QN position.
------
name:TimeMap_curFrameRate
language:c
return:(double:)
params:(ReaProject*:proj), (bool*:dropFrameOutOptional)
description:
Gets project framerate, and optionally whether it is drop-frame timecode
------
name:TimeMap_curFrameRate
language:eel2
return:(double:)
params:(ReaProject:proj), (optional bool:&dropFrame)
description:
Gets project framerate, and optionally whether it is drop-frame timecode
------
name:reaper.TimeMap_curFrameRate
language:lua
return:(number:retval),(optional boolean:dropFrame)
params:(ReaProject:proj)
description:
Gets project framerate, and optionally whether it is drop-frame timecode
------
name:RPR_TimeMap_curFrameRate
language:python
return:(Float:retval),(ReaProject:proj),(Boolean:dropFrameOutOptional)
params:(proj:), (dropFrameOutOptional:)
description:
Gets project framerate, and optionally whether it is drop-frame timecode
------
name:TimeMap_GetDividedBpmAtTime
language:c
return:(double:)
params:(double:time)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:TimeMap_GetDividedBpmAtTime
language:eel2
return:(double:)
params:(time:)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:reaper.TimeMap_GetDividedBpmAtTime
language:lua
return:(number:)
params:(number:time)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:RPR_TimeMap_GetDividedBpmAtTime
language:python
return:(Float:)
params:(Float:time)
description:
get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)
------
name:TimeMap_GetMeasureInfo
language:c
return:(double:)
params:(ReaProject*:proj), (int:measure), (double*:qn_startOut), (double*:qn_endOut), (int*:timesig_numOut), (int*:timesig_denomOut), (double*:tempoOut)
description:
Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.
------
name:TimeMap_GetMeasureInfo
language:eel2
return:(double:)
params:(ReaProject:proj), (int:measure), (&qn_start:), (&qn_end:), (int:&timesig_num), (int:&timesig_denom), (&tempo:)
description:
Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.
------
name:reaper.TimeMap_GetMeasureInfo
language:lua
return:(number:retval),(number:qn_start),(number:qn_end),(number:timesig_num),(number:timesig_denom),(number:tempo)
params:(ReaProject:proj), (integer:measure)
description:
Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.
------
name:RPR_TimeMap_GetMeasureInfo
language:python
return:(Float:retval),(ReaProject:proj),(Int:measure),(Float:qn_startOut),(Float:qn_endOut),(Int:timesig_numOut),(Int:timesig_denomOut),(Float:tempoOut)
params:(proj:), (measure:), (qn_startOut:), (qn_endOut:), (timesig_numOut:), (timesig_denomOut:), (tempoOut:)
description:
Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.
------
name:TimeMap_GetMetronomePattern
language:c
return:(int:)
params:(ReaProject*:proj), (double:time), (char*:pattern), (int:pattern_sz)
description:
Fills in a string representing the active metronome pattern. For
example, in a 7/8 measure divided 3+4, the pattern might be "1221222".
The length of the string is the time signature numerator, and the
function returns the time signature denominator.
------
name:TimeMap_GetMetronomePattern
language:eel2
return:(int:)
params:(ReaProject:proj), (time:), (#pattern:)
description:
Fills in a string representing the active metronome pattern. For
example, in a 7/8 measure divided 3+4, the pattern might be "1221222".
The length of the string is the time signature numerator, and the
function returns the time signature denominator.
------
name:reaper.TimeMap_GetMetronomePattern
language:lua
return:(integer:retval),(string:pattern)
params:(ReaProject:proj), (number:time), (string:pattern)
description:
Fills in a string representing the active metronome pattern. For
example, in a 7/8 measure divided 3+4, the pattern might be "1221222".
The length of the string is the time signature numerator, and the
function returns the time signature denominator.
------
name:RPR_TimeMap_GetMetronomePattern
language:python
return:(Int:retval),(ReaProject:proj),(Float:time),(String:pattern),(Int:pattern_sz)
params:(proj:), (time:), (pattern:), (pattern_sz:)
description:
Fills in a string representing the active metronome pattern. For
example, in a 7/8 measure divided 3+4, the pattern might be "1221222".
The length of the string is the time signature numerator, and the
function returns the time signature denominator.
------
name:TimeMap_GetTimeSigAtTime
language:c
return:(void:)
params:(ReaProject*:proj), (double:time), (int*:timesig_numOut), (int*:timesig_denomOut), (double*:tempoOut)
description:
get the effective time signature and tempo
------
name:TimeMap_GetTimeSigAtTime
language:eel2
return:
params:(ReaProject:proj), (time:), (int:&timesig_num), (int:&timesig_denom), (&tempo:)
description:
get the effective time signature and tempo
------
name:reaper.TimeMap_GetTimeSigAtTime
language:lua
return:(number:timesig_num),(number:timesig_denom),(number:tempo)
params:(ReaProject:proj), (number:time)
description:
get the effective time signature and tempo
------
name:RPR_TimeMap_GetTimeSigAtTime
language:python
return:(ReaProject:proj),(Float:time),(Int:timesig_numOut),(Int:timesig_denomOut),(Float:tempoOut)
params:(proj:), (time:), (timesig_numOut:), (timesig_denomOut:), (tempoOut:)
description:
get the effective time signature and tempo
------
name:TimeMap_QNToMeasures
language:c
return:(int:)
params:(ReaProject*:proj), (double:qn), (double*:qnMeasureStartOutOptional), (double*:qnMeasureEndOutOptional)
description:
Find which measure the given QN position falls in.
------
name:TimeMap_QNToMeasures
language:eel2
return:(int:)
params:(ReaProject:proj), (qn:), (optional:&qnMeasureStart), (optional:&qnMeasureEnd)
description:
Find which measure the given QN position falls in.
------
name:reaper.TimeMap_QNToMeasures
language:lua
return:(integer:retval),(optional number:qnMeasureStart),(optional number:qnMeasureEnd)
params:(ReaProject:proj), (number:qn)
description:
Find which measure the given QN position falls in.
------
name:RPR_TimeMap_QNToMeasures
language:python
return:(Int:retval),(ReaProject:proj),(Float:qn),(Float:qnMeasureStartOutOptional),(Float:qnMeasureEndOutOptional)
params:(proj:), (qn:), (qnMeasureStartOutOptional:), (qnMeasureEndOutOptional:)
description:
Find which measure the given QN position falls in.
------
name:TimeMap_QNToTime
language:c
return:(double:)
params:(double:qn)
description:
converts project QN position to time.
------
name:TimeMap_QNToTime
language:eel2
return:(double:)
params:(qn:)
description:
converts project QN position to time.
------
name:reaper.TimeMap_QNToTime
language:lua
return:(number:)
params:(number:qn)
description:
converts project QN position to time.
------
name:RPR_TimeMap_QNToTime
language:python
return:(Float:)
params:(Float:qn)
description:
converts project QN position to time.
------
name:TimeMap_QNToTime_abs
language:c
return:(double:)
params:(ReaProject*:proj), (double:qn)
description:
Converts project quarter note count (QN) to time. QN is counted from the
start of the project, regardless of any partial measures. See TimeMap2_QNToTime
------
name:TimeMap_QNToTime_abs
language:eel2
return:(double:)
params:(ReaProject:proj), (qn:)
description:
Converts project quarter note count (QN) to time. QN is counted from the
start of the project, regardless of any partial measures. See TimeMap2_QNToTime
------
name:reaper.TimeMap_QNToTime_abs
language:lua
return:(number:)
params:(ReaProject:proj), (number:qn)
description:
Converts project quarter note count (QN) to time. QN is counted from the
start of the project, regardless of any partial measures. See TimeMap2_QNToTime
------
name:RPR_TimeMap_QNToTime_abs
language:python
return:(Float:)
params:(ReaProject:proj), (Float:qn)
description:
Converts project quarter note count (QN) to time. QN is counted from the
start of the project, regardless of any partial measures. See TimeMap2_QNToTime
------
name:TimeMap_timeToQN
language:c
return:(double:)
params:(double:tpos)
description:
converts project QN position to time.
------
name:TimeMap_timeToQN
language:eel2
return:(double:)
params:(tpos:)
description:
converts project QN position to time.
------
name:reaper.TimeMap_timeToQN
language:lua
return:(number:)
params:(number:tpos)
description:
converts project QN position to time.
------
name:RPR_TimeMap_timeToQN
language:python
return:(Float:)
params:(Float:tpos)
description:
converts project QN position to time.
------
name:TimeMap_timeToQN_abs
language:c
return:(double:)
params:(ReaProject*:proj), (double:tpos)
description:
Converts project time position to quarter note count (QN). QN is counted
from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN
------
name:TimeMap_timeToQN_abs
language:eel2
return:(double:)
params:(ReaProject:proj), (tpos:)
description:
Converts project time position to quarter note count (QN). QN is counted
from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN
------
name:reaper.TimeMap_timeToQN_abs
language:lua
return:(number:)
params:(ReaProject:proj), (number:tpos)
description:
Converts project time position to quarter note count (QN). QN is counted
from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN
------
name:RPR_TimeMap_timeToQN_abs
language:python
return:(Float:)
params:(ReaProject:proj), (Float:tpos)
description:
Converts project time position to quarter note count (QN). QN is counted
from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN
------
name:ToggleTrackSendUIMute
language:c
return:(bool:)
params:(MediaTrack*:track), (int:send_idx)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.
------
name:ToggleTrackSendUIMute
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:send_idx)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.
------
name:reaper.ToggleTrackSendUIMute
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:send_idx)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.
------
name:RPR_ToggleTrackSendUIMute
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:send_idx)
description:
send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.
------
name:Track_GetPeakHoldDB
language:c
return:(double:)
params:(MediaTrack*:track), (int:channel), (bool:clear)
description:

------
name:Track_GetPeakHoldDB
language:eel2
return:(double:)
params:(MediaTrack:track), (int:channel), (bool:clear)
description:

------
name:reaper.Track_GetPeakHoldDB
language:lua
return:(number:)
params:(MediaTrack:track), (integer:channel), (boolean:clear)
description:

------
name:RPR_Track_GetPeakHoldDB
language:python
return:(Float:)
params:(MediaTrack:track), (Int:channel), (Boolean:clear)
description:

------
name:Track_GetPeakInfo
language:c
return:(double:)
params:(MediaTrack*:track), (int:channel)
description:

------
name:Track_GetPeakInfo
language:eel2
return:(double:)
params:(MediaTrack:track), (int:channel)
description:

------
name:reaper.Track_GetPeakInfo
language:lua
return:(number:)
params:(MediaTrack:track), (integer:channel)
description:

------
name:RPR_Track_GetPeakInfo
language:python
return:(Float:)
params:(MediaTrack:track), (Int:channel)
description:

------
name:TrackCtl_SetToolTip
language:c
return:(void:)
params:(const char*:fmt), (int:xpos), (int:ypos), (bool:topmost)
description:
displays tooltip at location, or removes if empty string
------
name:TrackCtl_SetToolTip
language:eel2
return:
params:("fmt":), (int:xpos), (int:ypos), (bool:topmost)
description:
displays tooltip at location, or removes if empty string
------
name:reaper.TrackCtl_SetToolTip
language:lua
return:
params:(string:fmt), (integer:xpos), (integer:ypos), (boolean:topmost)
description:
displays tooltip at location, or removes if empty string
------
name:RPR_TrackCtl_SetToolTip
language:python
return:
params:(String:fmt), (Int:xpos), (Int:ypos), (Boolean:topmost)
description:
displays tooltip at location, or removes if empty string
------
name:TrackFX_AddByName
language:c
return:(int:)
params:(MediaTrack*:track), (const char*:fxname), (bool:recFX), (int:instantiate)
description:
Adds or queries the position of a named FX from the track FX chain
(recFX=false) or record input FX/monitoring FX (recFX=true, monitoring
FX are on master track). Specify a negative value for instantiate to
always create a new effect, 0 to only query the first instance of an
effect, or a positive value to add an instance if one is not found.
fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or
DX:.
------
name:TrackFX_AddByName
language:eel2
return:(int:)
params:(MediaTrack:track), ("fxname":), (bool:recFX), (int:instantiate)
description:
Adds or queries the position of a named FX from the track FX chain
(recFX=false) or record input FX/monitoring FX (recFX=true, monitoring
FX are on master track). Specify a negative value for instantiate to
always create a new effect, 0 to only query the first instance of an
effect, or a positive value to add an instance if one is not found.
fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or
DX:.
------
name:reaper.TrackFX_AddByName
language:lua
return:(integer:)
params:(MediaTrack:track), (string:fxname), (boolean:recFX), (integer:instantiate)
description:
Adds or queries the position of a named FX from the track FX chain
(recFX=false) or record input FX/monitoring FX (recFX=true, monitoring
FX are on master track). Specify a negative value for instantiate to
always create a new effect, 0 to only query the first instance of an
effect, or a positive value to add an instance if one is not found.
fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or
DX:.
------
name:RPR_TrackFX_AddByName
language:python
return:(Int:)
params:(MediaTrack:track), (String:fxname), (Boolean:recFX), (Int:instantiate)
description:
Adds or queries the position of a named FX from the track FX chain
(recFX=false) or record input FX/monitoring FX (recFX=true, monitoring
FX are on master track). Specify a negative value for instantiate to
always create a new effect, 0 to only query the first instance of an
effect, or a positive value to add an instance if one is not found.
fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or
DX:.
------
name:TrackFX_CopyToTake
language:c
return:(void:)
params:(MediaTrack*:src_track), (int:src_fx), (MediaItem_Take*:dest_take), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX.
------
name:TrackFX_CopyToTake
language:eel2
return:
params:(MediaTrack:src_track), (int:src_fx), (MediaItem_Take:dest_take), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX.
------
name:reaper.TrackFX_CopyToTake
language:lua
return:
params:(MediaTrack:src_track), (integer:src_fx), (MediaItem_Take:dest_take), (integer:dest_fx), (boolean:is_move)
description:
Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX.
------
name:RPR_TrackFX_CopyToTake
language:python
return:
params:(MediaTrack:src_track), (Int:src_fx), (MediaItem_Take:dest_take), (Int:dest_fx), (Boolean:is_move)
description:
Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX.
------
name:TrackFX_CopyToTrack
language:c
return:(void:)
params:(MediaTrack*:src_track), (int:src_fx), (MediaTrack*:dest_track), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_track to dest_track. Can be used with
src_track=dest_track to reorder, FX indices have 0x1000000 set to
reference input FX.
------
name:TrackFX_CopyToTrack
language:eel2
return:
params:(MediaTrack:src_track), (int:src_fx), (MediaTrack:dest_track), (int:dest_fx), (bool:is_move)
description:
Copies (or moves) FX from src_track to dest_track. Can be used with
src_track=dest_track to reorder, FX indices have 0x1000000 set to
reference input FX.
------
name:reaper.TrackFX_CopyToTrack
language:lua
return:
params:(MediaTrack:src_track), (integer:src_fx), (MediaTrack:dest_track), (integer:dest_fx), (boolean:is_move)
description:
Copies (or moves) FX from src_track to dest_track. Can be used with
src_track=dest_track to reorder, FX indices have 0x1000000 set to
reference input FX.
------
name:RPR_TrackFX_CopyToTrack
language:python
return:
params:(MediaTrack:src_track), (Int:src_fx), (MediaTrack:dest_track), (Int:dest_fx), (Boolean:is_move)
description:
Copies (or moves) FX from src_track to dest_track. Can be used with
src_track=dest_track to reorder, FX indices have 0x1000000 set to
reference input FX.
------
name:TrackFX_Delete
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx)
description:
Remove a FX from track chain (returns true on success)
------
name:TrackFX_Delete
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx)
description:
Remove a FX from track chain (returns true on success)
------
name:reaper.TrackFX_Delete
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx)
description:
Remove a FX from track chain (returns true on success)
------
name:RPR_TrackFX_Delete
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx)
description:
Remove a FX from track chain (returns true on success)
------
name:TrackFX_EndParamEdit
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param)
description:

------
name:TrackFX_EndParamEdit
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param)
description:

------
name:reaper.TrackFX_EndParamEdit
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx), (integer:param)
description:

------
name:RPR_TrackFX_EndParamEdit
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx), (Int:param)
description:

------
name:TrackFX_FormatParamValue
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param), (double:val), (char*:buf), (int:buf_sz)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TrackFX_FormatParamValue
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param), (val:), (#buf:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:reaper.TrackFX_FormatParamValue
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:fx), (integer:param), (number:val), (string:buf)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:RPR_TrackFX_FormatParamValue
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(Int:param),(Float:val),(String:buf),(Int:buf_sz)
params:(track:), (fx:), (param:), (val:), (buf:), (buf_sz:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TrackFX_FormatParamValueNormalized
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param), (double:value), (char*:buf), (int:buf_sz)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TrackFX_FormatParamValueNormalized
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param), (value:), (#buf:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:reaper.TrackFX_FormatParamValueNormalized
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:fx), (integer:param), (number:value), (string:buf)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:RPR_TrackFX_FormatParamValueNormalized
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(Int:param),(Float:value),(String:buf),(Int:buf_sz)
params:(track:), (fx:), (param:), (value:), (buf:), (buf_sz:)
description:
Note: only works with FX that support Cockos VST extensions.
------
name:TrackFX_GetByName
language:c
return:(int:)
params:(MediaTrack*:track), (const char*:fxname), (bool:instantiate)
description:
Get the index of the first track FX insert that matches fxname. If the
FX is not in the chain and instantiate is true, it will be inserted. See
TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.
------
name:TrackFX_GetByName
language:eel2
return:(int:)
params:(MediaTrack:track), ("fxname":), (bool:instantiate)
description:
Get the index of the first track FX insert that matches fxname. If the
FX is not in the chain and instantiate is true, it will be inserted. See
TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.
------
name:reaper.TrackFX_GetByName
language:lua
return:(integer:)
params:(MediaTrack:track), (string:fxname), (boolean:instantiate)
description:
Get the index of the first track FX insert that matches fxname. If the
FX is not in the chain and instantiate is true, it will be inserted. See
TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.
------
name:RPR_TrackFX_GetByName
language:python
return:(Int:)
params:(MediaTrack:track), (String:fxname), (Boolean:instantiate)
description:
Get the index of the first track FX insert that matches fxname. If the
FX is not in the chain and instantiate is true, it will be inserted. See
TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.
------
name:TrackFX_GetChainVisible
language:c
return:(int:)
params:(MediaTrack*:track)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:TrackFX_GetChainVisible
language:eel2
return:(int:)
params:(MediaTrack:track)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:reaper.TrackFX_GetChainVisible
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:RPR_TrackFX_GetChainVisible
language:python
return:(Int:)
params:(MediaTrack:track)
description:
returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:TrackFX_GetCount
language:c
return:(int:)
params:(MediaTrack*:track)
description:

------
name:TrackFX_GetCount
language:eel2
return:(int:)
params:(MediaTrack:track)
description:

------
name:reaper.TrackFX_GetCount
language:lua
return:(integer:)
params:(MediaTrack:track)
description:

------
name:RPR_TrackFX_GetCount
language:python
return:(Int:)
params:(MediaTrack:track)
description:

------
name:TrackFX_GetEnabled
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx)
description:
See TrackFX_SetEnabled
------
name:TrackFX_GetEnabled
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx)
description:
See TrackFX_SetEnabled
------
name:reaper.TrackFX_GetEnabled
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx)
description:
See TrackFX_SetEnabled
------
name:RPR_TrackFX_GetEnabled
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx)
description:
See TrackFX_SetEnabled
------
name:TrackFX_GetEQ
language:c
return:(int:)
params:(MediaTrack*:track), (bool:instantiate)
description:
Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.
------
name:TrackFX_GetEQ
language:eel2
return:(int:)
params:(MediaTrack:track), (bool:instantiate)
description:
Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.
------
name:reaper.TrackFX_GetEQ
language:lua
return:(integer:)
params:(MediaTrack:track), (boolean:instantiate)
description:
Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.
------
name:RPR_TrackFX_GetEQ
language:python
return:(Int:)
params:(MediaTrack:track), (Boolean:instantiate)
description:
Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.
------
name:TrackFX_GetEQBandEnabled
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fxidx), (int:bandtype), (int:bandidx)
description:
Returns true if the EQ band is enabled.
Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.
------
name:TrackFX_GetEQBandEnabled
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fxidx), (int:bandtype), (int:bandidx)
description:
Returns true if the EQ band is enabled.
Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.
------
name:reaper.TrackFX_GetEQBandEnabled
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fxidx), (integer:bandtype), (integer:bandidx)
description:
Returns true if the EQ band is enabled.
Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.
------
name:RPR_TrackFX_GetEQBandEnabled
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fxidx), (Int:bandtype), (Int:bandidx)
description:
Returns true if the EQ band is enabled.
Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.
------
name:TrackFX_GetEQParam
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fxidx), (int:paramidx), (int*:bandtypeOut), (int*:bandidxOut), (int*:paramtypeOut), (double*:normvalOut)
description:
Returns false if track/fxidx is not ReaEQ.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:TrackFX_GetEQParam
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fxidx), (int:paramidx), (int:&bandtype), (int:&bandidx), (int:&paramtype), (&normval:)
description:
Returns false if track/fxidx is not ReaEQ.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:reaper.TrackFX_GetEQParam
language:lua
return:(boolean:retval),(number:bandtype),(number:bandidx),(number:paramtype),(number:normval)
params:(MediaTrack:track), (integer:fxidx), (integer:paramidx)
description:
Returns false if track/fxidx is not ReaEQ.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:RPR_TrackFX_GetEQParam
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fxidx),(Int:paramidx),(Int:bandtypeOut),(Int:bandidxOut),(Int:paramtypeOut),(Float:normvalOut)
params:(track:), (fxidx:), (paramidx:), (bandtypeOut:), (bandidxOut:), (paramtypeOut:), (normvalOut:)
description:
Returns false if track/fxidx is not ReaEQ.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:TrackFX_GetFloatingWindow
language:c
return:(HWND:)
params:(MediaTrack*:track), (int:index)
description:
returns HWND of floating window for effect index, if any
------
name:TrackFX_GetFloatingWindow
language:eel2
return:(HWND:)
params:(MediaTrack:track), (int:index)
description:
returns HWND of floating window for effect index, if any
------
name:reaper.TrackFX_GetFloatingWindow
language:lua
return:(HWND:)
params:(MediaTrack:track), (integer:index)
description:
returns HWND of floating window for effect index, if any
------
name:RPR_TrackFX_GetFloatingWindow
language:python
return:(HWND:)
params:(MediaTrack:track), (Int:index)
description:
returns HWND of floating window for effect index, if any
------
name:TrackFX_GetFormattedParamValue
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param), (char*:buf), (int:buf_sz)
description:

------
name:TrackFX_GetFormattedParamValue
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param), (#buf:)
description:

------
name:reaper.TrackFX_GetFormattedParamValue
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:fx), (integer:param), (string:buf)
description:

------
name:RPR_TrackFX_GetFormattedParamValue
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(Int:param),(String:buf),(Int:buf_sz)
params:(track:), (fx:), (param:), (buf:), (buf_sz:)
description:

------
name:TrackFX_GetFXGUID
language:c
return:(GUID*:)
params:(MediaTrack*:track), (int:fx)
description:

------
name:TrackFX_GetFXGUID
language:eel2
return:(bool:)
params:(#retguid:), (MediaTrack:track), (int:fx)
description:

------
name:reaper.TrackFX_GetFXGUID
language:lua
return:(string:GUID)
params:(MediaTrack:track), (integer:fx)
description:

------
name:RPR_TrackFX_GetFXGUID
language:python
return:(GUID:)
params:(MediaTrack:track), (Int:fx)
description:

------
name:TrackFX_GetFXName
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (char*:buf), (int:buf_sz)
description:

------
name:TrackFX_GetFXName
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (#buf:)
description:

------
name:reaper.TrackFX_GetFXName
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:fx), (string:buf)
description:

------
name:RPR_TrackFX_GetFXName
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(String:buf),(Int:buf_sz)
params:(track:), (fx:), (buf:), (buf_sz:)
description:

------
name:TrackFX_GetInstrument
language:c
return:(int:)
params:(MediaTrack*:track)
description:
Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.
------
name:TrackFX_GetInstrument
language:eel2
return:(int:)
params:(MediaTrack:track)
description:
Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.
------
name:reaper.TrackFX_GetInstrument
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.
------
name:RPR_TrackFX_GetInstrument
language:python
return:(Int:)
params:(MediaTrack:track)
description:
Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.
------
name:TrackFX_GetIOSize
language:c
return:(int:)
params:(MediaTrack*:track), (int:fx), (int*:inputPinsOutOptional), (int*:outputPinsOutOptional)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:TrackFX_GetIOSize
language:eel2
return:(int:)
params:(MediaTrack:track), (int:fx), (optional int:&inputPins), (optional int:&outputPins)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:reaper.TrackFX_GetIOSize
language:lua
return:(integer:retval),(optional number:inputPins),(optional number:outputPins)
params:(MediaTrack:track), (integer:fx)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:RPR_TrackFX_GetIOSize
language:python
return:(Int:retval),(MediaTrack:track),(Int:fx),(Int:inputPinsOutOptional),(Int:outputPinsOutOptional)
params:(track:), (fx:), (inputPinsOutOptional:), (outputPinsOutOptional:)
description:
sets the number of input/output pins for FX if available, returns plug-in type or -1 on error
------
name:TrackFX_GetNamedConfigParm
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (const char*:parmname), (char*:bufOut), (int:bufOut_sz)
description:
gets plug-in specific named configuration value (returns true on
success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns
name of first input pin (if available), 'out_pin_0' returns name of
first output pin (if available), etc.
------
name:TrackFX_GetNamedConfigParm
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), ("parmname":), (#buf:)
description:
gets plug-in specific named configuration value (returns true on
success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns
name of first input pin (if available), 'out_pin_0' returns name of
first output pin (if available), etc.
------
name:reaper.TrackFX_GetNamedConfigParm
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:fx), (string:parmname)
description:
gets plug-in specific named configuration value (returns true on
success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns
name of first input pin (if available), 'out_pin_0' returns name of
first output pin (if available), etc.
------
name:RPR_TrackFX_GetNamedConfigParm
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(String:parmname),(String:bufOut),(Int:bufOut_sz)
params:(track:), (fx:), (parmname:), (bufOut:), (bufOut_sz:)
description:
gets plug-in specific named configuration value (returns true on
success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns
name of first input pin (if available), 'out_pin_0' returns name of
first output pin (if available), etc.
------
name:TrackFX_GetNumParams
language:c
return:(int:)
params:(MediaTrack*:track), (int:fx)
description:

------
name:TrackFX_GetNumParams
language:eel2
return:(int:)
params:(MediaTrack:track), (int:fx)
description:

------
name:reaper.TrackFX_GetNumParams
language:lua
return:(integer:)
params:(MediaTrack:track), (integer:fx)
description:

------
name:RPR_TrackFX_GetNumParams
language:python
return:(Int:)
params:(MediaTrack:track), (Int:fx)
description:

------
name:TrackFX_GetOffline
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx)
description:
See TrackFX_SetOffline
------
name:TrackFX_GetOffline
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx)
description:
See TrackFX_SetOffline
------
name:reaper.TrackFX_GetOffline
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx)
description:
See TrackFX_SetOffline
------
name:RPR_TrackFX_GetOffline
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx)
description:
See TrackFX_SetOffline
------
name:TrackFX_GetOpen
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen
------
name:TrackFX_GetOpen
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen
------
name:reaper.TrackFX_GetOpen
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen
------
name:RPR_TrackFX_GetOpen
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx)
description:
Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen
------
name:TrackFX_GetParam
language:c
return:(double:)
params:(MediaTrack*:track), (int:fx), (int:param), (double*:minvalOut), (double*:maxvalOut)
description:

------
name:TrackFX_GetParam
language:eel2
return:(double:)
params:(MediaTrack:track), (int:fx), (int:param), (&minval:), (&maxval:)
description:

------
name:reaper.TrackFX_GetParam
language:lua
return:(number:retval),(number:minval),(number:maxval)
params:(MediaTrack:track), (integer:fx), (integer:param)
description:

------
name:RPR_TrackFX_GetParam
language:python
return:(Float:retval),(MediaTrack:track),(Int:fx),(Int:param),(Float:minvalOut),(Float:maxvalOut)
params:(track:), (fx:), (param:), (minvalOut:), (maxvalOut:)
description:

------
name:TrackFX_GetParameterStepSizes
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param), (double*:stepOut), (double*:smallstepOut), (double*:largestepOut), (bool*:istoggleOut)
description:

------
name:TrackFX_GetParameterStepSizes
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param), (&step:), (&smallstep:), (&largestep:), (bool:&istoggle)
description:

------
name:reaper.TrackFX_GetParameterStepSizes
language:lua
return:(boolean:retval),(number:step),(number:smallstep),(number:largestep),(boolean:istoggle)
params:(MediaTrack:track), (integer:fx), (integer:param)
description:

------
name:RPR_TrackFX_GetParameterStepSizes
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(Int:param),(Float:stepOut),(Float:smallstepOut),(Float:largestepOut),(Boolean:istoggleOut)
params:(track:), (fx:), (param:), (stepOut:), (smallstepOut:), (largestepOut:), (istoggleOut:)
description:

------
name:TrackFX_GetParamEx
language:c
return:(double:)
params:(MediaTrack*:track), (int:fx), (int:param), (double*:minvalOut), (double*:maxvalOut), (double*:midvalOut)
description:

------
name:TrackFX_GetParamEx
language:eel2
return:(double:)
params:(MediaTrack:track), (int:fx), (int:param), (&minval:), (&maxval:), (&midval:)
description:

------
name:reaper.TrackFX_GetParamEx
language:lua
return:(number:retval),(number:minval),(number:maxval),(number:midval)
params:(MediaTrack:track), (integer:fx), (integer:param)
description:

------
name:RPR_TrackFX_GetParamEx
language:python
return:(Float:retval),(MediaTrack:track),(Int:fx),(Int:param),(Float:minvalOut),(Float:maxvalOut),(Float:midvalOut)
params:(track:), (fx:), (param:), (minvalOut:), (maxvalOut:), (midvalOut:)
description:

------
name:TrackFX_GetParamName
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param), (char*:buf), (int:buf_sz)
description:

------
name:TrackFX_GetParamName
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param), (#buf:)
description:

------
name:reaper.TrackFX_GetParamName
language:lua
return:(boolean:retval),(string:buf)
params:(MediaTrack:track), (integer:fx), (integer:param), (string:buf)
description:

------
name:RPR_TrackFX_GetParamName
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(Int:param),(String:buf),(Int:buf_sz)
params:(track:), (fx:), (param:), (buf:), (buf_sz:)
description:

------
name:TrackFX_GetParamNormalized
language:c
return:(double:)
params:(MediaTrack*:track), (int:fx), (int:param)
description:

------
name:TrackFX_GetParamNormalized
language:eel2
return:(double:)
params:(MediaTrack:track), (int:fx), (int:param)
description:

------
name:reaper.TrackFX_GetParamNormalized
language:lua
return:(number:)
params:(MediaTrack:track), (integer:fx), (integer:param)
description:

------
name:RPR_TrackFX_GetParamNormalized
language:python
return:(Float:)
params:(MediaTrack:track), (Int:fx), (Int:param)
description:

------
name:TrackFX_GetPinMappings
language:c
return:(int:)
params:(MediaTrack*:tr), (int:fx), (int:isoutput), (int:pin), (int*:high32OutOptional)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:TrackFX_GetPinMappings
language:eel2
return:(int:)
params:(MediaTrack:tr), (int:fx), (int:isoutput), (int:pin), (optional int:&high32)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:reaper.TrackFX_GetPinMappings
language:lua
return:(integer:retval),(optional number:high32)
params:(MediaTrack:tr), (integer:fx), (integer:isoutput), (integer:pin)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:RPR_TrackFX_GetPinMappings
language:python
return:(Int:retval),(MediaTrack:tr),(Int:fx),(Int:isoutput),(Int:pin),(Int:high32OutOptional)
params:(tr:), (fx:), (isoutput:), (pin:), (high32OutOptional:)
description:
gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits
------
name:TrackFX_GetPreset
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (char*:presetname), (int:presetname_sz)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TrackFX_SetPreset.
------
name:TrackFX_GetPreset
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (#presetname:)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TrackFX_SetPreset.
------
name:reaper.TrackFX_GetPreset
language:lua
return:(boolean:retval),(string:presetname)
params:(MediaTrack:track), (integer:fx), (string:presetname)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TrackFX_SetPreset.
------
name:RPR_TrackFX_GetPreset
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(String:presetname),(Int:presetname_sz)
params:(track:), (fx:), (presetname:), (presetname_sz:)
description:
Get the name of the preset currently showing in the REAPER dropdown, or
the full path to a factory preset file for VST3 plug-ins (.vstpreset).
Returns false if the current FX parameters do not exactly match the
preset (in other words, if the user loaded the preset but moved the
knobs afterward). See TrackFX_SetPreset.
------
name:TrackFX_GetPresetIndex
language:c
return:(int:)
params:(MediaTrack*:track), (int:fx), (int*:numberOfPresetsOut)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex
------
name:TrackFX_GetPresetIndex
language:eel2
return:(int:)
params:(MediaTrack:track), (int:fx), (int:&numberOfPresets)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex
------
name:reaper.TrackFX_GetPresetIndex
language:lua
return:(integer:retval),(number:numberOfPresets)
params:(MediaTrack:track), (integer:fx)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex
------
name:RPR_TrackFX_GetPresetIndex
language:python
return:(Int:retval),(MediaTrack:track),(Int:fx),(Int:numberOfPresetsOut)
params:(track:), (fx:), (numberOfPresetsOut:)
description:
Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex
------
name:TrackFX_GetRecChainVisible
language:c
return:(int:)
params:(MediaTrack*:track)
description:
returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:TrackFX_GetRecChainVisible
language:eel2
return:(int:)
params:(MediaTrack:track)
description:
returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:reaper.TrackFX_GetRecChainVisible
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:RPR_TrackFX_GetRecChainVisible
language:python
return:(Int:)
params:(MediaTrack:track)
description:
returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected
------
name:TrackFX_GetRecCount
language:c
return:(int:)
params:(MediaTrack*:track)
description:
returns count of record input FX. To access record input FX, use a FX
indices [0x1000000..0x1000000+n). On the master track, this accesses
monitoring FX rather than record input FX.
------
name:TrackFX_GetRecCount
language:eel2
return:(int:)
params:(MediaTrack:track)
description:
returns count of record input FX. To access record input FX, use a FX
indices [0x1000000..0x1000000+n). On the master track, this accesses
monitoring FX rather than record input FX.
------
name:reaper.TrackFX_GetRecCount
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
returns count of record input FX. To access record input FX, use a FX
indices [0x1000000..0x1000000+n). On the master track, this accesses
monitoring FX rather than record input FX.
------
name:RPR_TrackFX_GetRecCount
language:python
return:(Int:)
params:(MediaTrack:track)
description:
returns count of record input FX. To access record input FX, use a FX
indices [0x1000000..0x1000000+n). On the master track, this accesses
monitoring FX rather than record input FX.
------
name:TrackFX_GetUserPresetFilename
language:c
return:(void:)
params:(MediaTrack*:track), (int:fx), (char*:fn), (int:fn_sz)
description:

------
name:TrackFX_GetUserPresetFilename
language:eel2
return:
params:(MediaTrack:track), (int:fx), (#fn:)
description:

------
name:reaper.TrackFX_GetUserPresetFilename
language:lua
return:(string:fn)
params:(MediaTrack:track), (integer:fx), (string:fn)
description:

------
name:RPR_TrackFX_GetUserPresetFilename
language:python
return:(MediaTrack:track),(Int:fx),(String:fn),(Int:fn_sz)
params:(track:), (fx:), (fn:), (fn_sz:)
description:

------
name:TrackFX_NavigatePresets
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:TrackFX_NavigatePresets
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:reaper.TrackFX_NavigatePresets
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx), (integer:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:RPR_TrackFX_NavigatePresets
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx), (Int:presetmove)
description:
presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.
------
name:TrackFX_SetEnabled
language:c
return:(void:)
params:(MediaTrack*:track), (int:fx), (bool:enabled)
description:
See TrackFX_GetEnabled
------
name:TrackFX_SetEnabled
language:eel2
return:
params:(MediaTrack:track), (int:fx), (bool:enabled)
description:
See TrackFX_GetEnabled
------
name:reaper.TrackFX_SetEnabled
language:lua
return:
params:(MediaTrack:track), (integer:fx), (boolean:enabled)
description:
See TrackFX_GetEnabled
------
name:RPR_TrackFX_SetEnabled
language:python
return:
params:(MediaTrack:track), (Int:fx), (Boolean:enabled)
description:
See TrackFX_GetEnabled
------
name:TrackFX_SetEQBandEnabled
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fxidx), (int:bandtype), (int:bandidx), (bool:enable)
description:
Enable or disable a ReaEQ band.
Returns false if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.
------
name:TrackFX_SetEQBandEnabled
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fxidx), (int:bandtype), (int:bandidx), (bool:enable)
description:
Enable or disable a ReaEQ band.
Returns false if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.
------
name:reaper.TrackFX_SetEQBandEnabled
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fxidx), (integer:bandtype), (integer:bandidx), (boolean:enable)
description:
Enable or disable a ReaEQ band.
Returns false if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.
------
name:RPR_TrackFX_SetEQBandEnabled
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fxidx), (Int:bandtype), (Int:bandidx), (Boolean:enable)
description:
Enable or disable a ReaEQ band.
Returns false if track/fxidx is not ReaEQ.
Bandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.
------
name:TrackFX_SetEQParam
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fxidx), (int:bandtype), (int:bandidx), (int:paramtype), (double:val), (bool:isnorm)
description:
Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:TrackFX_SetEQParam
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fxidx), (int:bandtype), (int:bandidx), (int:paramtype), (val:), (bool:isnorm)
description:
Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:reaper.TrackFX_SetEQParam
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fxidx), (integer:bandtype), (integer:bandidx), (integer:paramtype), (number:val), (boolean:isnorm)
description:
Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:RPR_TrackFX_SetEQParam
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fxidx), (Int:bandtype), (Int:bandidx), (Int:paramtype), (Float:val), (Boolean:isnorm)
description:
Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
Bandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.
------
name:TrackFX_SetNamedConfigParm
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (const char*:parmname), (const char*:value)
description:
sets plug-in specific named configuration value (returns true on success)
------
name:TrackFX_SetNamedConfigParm
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), ("parmname":), ("value":)
description:
sets plug-in specific named configuration value (returns true on success)
------
name:reaper.TrackFX_SetNamedConfigParm
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx), (string:parmname), (string:value)
description:
sets plug-in specific named configuration value (returns true on success)
------
name:RPR_TrackFX_SetNamedConfigParm
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx), (String:parmname), (String:value)
description:
sets plug-in specific named configuration value (returns true on success)
------
name:TrackFX_SetOffline
language:c
return:(void:)
params:(MediaTrack*:track), (int:fx), (bool:offline)
description:
See TrackFX_GetOffline
------
name:TrackFX_SetOffline
language:eel2
return:
params:(MediaTrack:track), (int:fx), (bool:offline)
description:
See TrackFX_GetOffline
------
name:reaper.TrackFX_SetOffline
language:lua
return:
params:(MediaTrack:track), (integer:fx), (boolean:offline)
description:
See TrackFX_GetOffline
------
name:RPR_TrackFX_SetOffline
language:python
return:
params:(MediaTrack:track), (Int:fx), (Boolean:offline)
description:
See TrackFX_GetOffline
------
name:TrackFX_SetOpen
language:c
return:(void:)
params:(MediaTrack*:track), (int:fx), (bool:open)
description:
Open this FX UI. See TrackFX_GetOpen
------
name:TrackFX_SetOpen
language:eel2
return:
params:(MediaTrack:track), (int:fx), (bool:open)
description:
Open this FX UI. See TrackFX_GetOpen
------
name:reaper.TrackFX_SetOpen
language:lua
return:
params:(MediaTrack:track), (integer:fx), (boolean:open)
description:
Open this FX UI. See TrackFX_GetOpen
------
name:RPR_TrackFX_SetOpen
language:python
return:
params:(MediaTrack:track), (Int:fx), (Boolean:open)
description:
Open this FX UI. See TrackFX_GetOpen
------
name:TrackFX_SetParam
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param), (double:val)
description:

------
name:TrackFX_SetParam
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param), (val:)
description:

------
name:reaper.TrackFX_SetParam
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx), (integer:param), (number:val)
description:

------
name:RPR_TrackFX_SetParam
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx), (Int:param), (Float:val)
description:

------
name:TrackFX_SetParamNormalized
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:param), (double:value)
description:

------
name:TrackFX_SetParamNormalized
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:param), (value:)
description:

------
name:reaper.TrackFX_SetParamNormalized
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx), (integer:param), (number:value)
description:

------
name:RPR_TrackFX_SetParamNormalized
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx), (Int:param), (Float:value)
description:

------
name:TrackFX_SetPinMappings
language:c
return:(bool:)
params:(MediaTrack*:tr), (int:fx), (int:isoutput), (int:pin), (int:low32bits), (int:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:TrackFX_SetPinMappings
language:eel2
return:(bool:)
params:(MediaTrack:tr), (int:fx), (int:isoutput), (int:pin), (int:low32bits), (int:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:reaper.TrackFX_SetPinMappings
language:lua
return:(boolean:)
params:(MediaTrack:tr), (integer:fx), (integer:isoutput), (integer:pin), (integer:low32bits), (integer:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:RPR_TrackFX_SetPinMappings
language:python
return:(Boolean:)
params:(MediaTrack:tr), (Int:fx), (Int:isoutput), (Int:pin), (Int:low32bits), (Int:hi32bits)
description:
sets the channel mapping bitmask for a particular pin. returns false if
unsupported (not all types of plug-ins support this capability)
------
name:TrackFX_SetPreset
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (const char*:presetname)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.
------
name:TrackFX_SetPreset
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), ("presetname":)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.
------
name:reaper.TrackFX_SetPreset
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx), (string:presetname)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.
------
name:RPR_TrackFX_SetPreset
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx), (String:presetname)
description:
Activate a preset with the name shown in the REAPER dropdown. Full paths
to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.
------
name:TrackFX_SetPresetByIndex
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (int:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.
------
name:TrackFX_SetPresetByIndex
language:eel2
return:(bool:)
params:(MediaTrack:track), (int:fx), (int:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.
------
name:reaper.TrackFX_SetPresetByIndex
language:lua
return:(boolean:)
params:(MediaTrack:track), (integer:fx), (integer:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.
------
name:RPR_TrackFX_SetPresetByIndex
language:python
return:(Boolean:)
params:(MediaTrack:track), (Int:fx), (Int:idx)
description:
Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.
------
name:TrackFX_Show
language:c
return:(void:)
params:(MediaTrack*:track), (int:index), (int:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:TrackFX_Show
language:eel2
return:
params:(MediaTrack:track), (int:index), (int:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:reaper.TrackFX_Show
language:lua
return:
params:(MediaTrack:track), (integer:index), (integer:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:RPR_TrackFX_Show
language:python
return:
params:(MediaTrack:track), (Int:index), (Int:showFlag)
description:
showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide
floating window(index valid), =3 for show floating window (index valid)
------
name:TrackList_AdjustWindows
language:c
return:(void:)
params:(bool:isMinor)
description:

------
name:TrackList_AdjustWindows
language:eel2
return:
params:(bool:isMinor)
description:

------
name:reaper.TrackList_AdjustWindows
language:lua
return:
params:(boolean:isMinor)
description:

------
name:RPR_TrackList_AdjustWindows
language:python
return:
params:(Boolean:isMinor)
description:

------
name:TrackList_UpdateAllExternalSurfaces
language:c
return:(void:)
params:
description:

------
name:TrackList_UpdateAllExternalSurfaces
language:eel2
return:
params:
description:

------
name:reaper.TrackList_UpdateAllExternalSurfaces
language:lua
return:
params:
description:

------
name:RPR_TrackList_UpdateAllExternalSurfaces
language:python
return:
params:
description:

------
name:Undo_BeginBlock
language:c
return:(void:)
params:
description:
call to start a new block
------
name:Undo_BeginBlock
language:eel2
return:
params:
description:
call to start a new block
------
name:reaper.Undo_BeginBlock
language:lua
return:
params:
description:
call to start a new block
------
name:RPR_Undo_BeginBlock
language:python
return:
params:
description:
call to start a new block
------
name:Undo_BeginBlock2
language:c
return:(void:)
params:(ReaProject*:proj)
description:
call to start a new block
------
name:Undo_BeginBlock2
language:eel2
return:
params:(ReaProject:proj)
description:
call to start a new block
------
name:reaper.Undo_BeginBlock2
language:lua
return:
params:(ReaProject:proj)
description:
call to start a new block
------
name:RPR_Undo_BeginBlock2
language:python
return:
params:(ReaProject:proj)
description:
call to start a new block
------
name:Undo_CanRedo2
language:c
return:(const:char*)
params:(ReaProject*:proj)
description:
returns string of next action,if able,NULL if not
------
name:Undo_CanRedo2
language:eel2
return:(bool:)
params:(#retval:), (ReaProject:proj)
description:
returns string of next action,if able,NULL if not
------
name:reaper.Undo_CanRedo2
language:lua
return:(string:)
params:(ReaProject:proj)
description:
returns string of next action,if able,NULL if not
------
name:RPR_Undo_CanRedo2
language:python
return:(String:)
params:(ReaProject:proj)
description:
returns string of next action,if able,NULL if not
------
name:Undo_CanUndo2
language:c
return:(const:char*)
params:(ReaProject*:proj)
description:
returns string of last action,if able,NULL if not
------
name:Undo_CanUndo2
language:eel2
return:(bool:)
params:(#retval:), (ReaProject:proj)
description:
returns string of last action,if able,NULL if not
------
name:reaper.Undo_CanUndo2
language:lua
return:(string:)
params:(ReaProject:proj)
description:
returns string of last action,if able,NULL if not
------
name:RPR_Undo_CanUndo2
language:python
return:(String:)
params:(ReaProject:proj)
description:
returns string of last action,if able,NULL if not
------
name:Undo_DoRedo2
language:c
return:(int:)
params:(ReaProject*:proj)
description:
nonzero if success
------
name:Undo_DoRedo2
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
nonzero if success
------
name:reaper.Undo_DoRedo2
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
nonzero if success
------
name:RPR_Undo_DoRedo2
language:python
return:(Int:)
params:(ReaProject:proj)
description:
nonzero if success
------
name:Undo_DoUndo2
language:c
return:(int:)
params:(ReaProject*:proj)
description:
nonzero if success
------
name:Undo_DoUndo2
language:eel2
return:(int:)
params:(ReaProject:proj)
description:
nonzero if success
------
name:reaper.Undo_DoUndo2
language:lua
return:(integer:)
params:(ReaProject:proj)
description:
nonzero if success
------
name:RPR_Undo_DoUndo2
language:python
return:(Int:)
params:(ReaProject:proj)
description:
nonzero if success
------
name:Undo_EndBlock
language:c
return:(void:)
params:(const char*:descchange), (int:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:Undo_EndBlock
language:eel2
return:
params:("descchange":), (int:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:reaper.Undo_EndBlock
language:lua
return:
params:(string:descchange), (integer:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:RPR_Undo_EndBlock
language:python
return:
params:(String:descchange), (Int:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:Undo_EndBlock2
language:c
return:(void:)
params:(ReaProject*:proj), (const char*:descchange), (int:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:Undo_EndBlock2
language:eel2
return:
params:(ReaProject:proj), ("descchange":), (int:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:reaper.Undo_EndBlock2
language:lua
return:
params:(ReaProject:proj), (string:descchange), (integer:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:RPR_Undo_EndBlock2
language:python
return:
params:(ReaProject:proj), (String:descchange), (Int:extraflags)
description:
call to end the block,with extra flags if any,and a description
------
name:Undo_OnStateChange
language:c
return:(void:)
params:(const char*:descchange)
description:
limited state change to items
------
name:Undo_OnStateChange
language:eel2
return:
params:("descchange":)
description:
limited state change to items
------
name:reaper.Undo_OnStateChange
language:lua
return:
params:(string:descchange)
description:
limited state change to items
------
name:RPR_Undo_OnStateChange
language:python
return:
params:(String:descchange)
description:
limited state change to items
------
name:Undo_OnStateChange2
language:c
return:(void:)
params:(ReaProject*:proj), (const char*:descchange)
description:
limited state change to items
------
name:Undo_OnStateChange2
language:eel2
return:
params:(ReaProject:proj), ("descchange":)
description:
limited state change to items
------
name:reaper.Undo_OnStateChange2
language:lua
return:
params:(ReaProject:proj), (string:descchange)
description:
limited state change to items
------
name:RPR_Undo_OnStateChange2
language:python
return:
params:(ReaProject:proj), (String:descchange)
description:
limited state change to items
------
name:Undo_OnStateChange_Item
language:c
return:(void:)
params:(ReaProject*:proj), (const char*:name), (MediaItem*:item)
description:

------
name:Undo_OnStateChange_Item
language:eel2
return:
params:(ReaProject:proj), ("name":), (MediaItem:item)
description:

------
name:reaper.Undo_OnStateChange_Item
language:lua
return:
params:(ReaProject:proj), (string:name), (MediaItem:item)
description:

------
name:RPR_Undo_OnStateChange_Item
language:python
return:
params:(ReaProject:proj), (String:name), (MediaItem:item)
description:

------
name:Undo_OnStateChangeEx
language:c
return:(void:)
params:(const char*:descchange), (int:whichStates), (int:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:Undo_OnStateChangeEx
language:eel2
return:
params:("descchange":), (int:whichStates), (int:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:reaper.Undo_OnStateChangeEx
language:lua
return:
params:(string:descchange), (integer:whichStates), (integer:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:RPR_Undo_OnStateChangeEx
language:python
return:
params:(String:descchange), (Int:whichStates), (Int:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:Undo_OnStateChangeEx2
language:c
return:(void:)
params:(ReaProject*:proj), (const char*:descchange), (int:whichStates), (int:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:Undo_OnStateChangeEx2
language:eel2
return:
params:(ReaProject:proj), ("descchange":), (int:whichStates), (int:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:reaper.Undo_OnStateChangeEx2
language:lua
return:
params:(ReaProject:proj), (string:descchange), (integer:whichStates), (integer:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:RPR_Undo_OnStateChangeEx2
language:python
return:
params:(ReaProject:proj), (String:descchange), (Int:whichStates), (Int:trackparm)
description:
trackparm=-1 by default,or if updating one fx chain,you can specify track index
------
name:UpdateArrange
language:c
return:(void:)
params:
description:
Redraw the arrange view
------
name:UpdateArrange
language:eel2
return:
params:
description:
Redraw the arrange view
------
name:reaper.UpdateArrange
language:lua
return:
params:
description:
Redraw the arrange view
------
name:RPR_UpdateArrange
language:python
return:
params:
description:
Redraw the arrange view
------
name:UpdateItemInProject
language:c
return:(void:)
params:(MediaItem*:item)
description:

------
name:UpdateItemInProject
language:eel2
return:
params:(MediaItem:item)
description:

------
name:reaper.UpdateItemInProject
language:lua
return:
params:(MediaItem:item)
description:

------
name:RPR_UpdateItemInProject
language:python
return:
params:(MediaItem:item)
description:

------
name:UpdateTimeline
language:c
return:(void:)
params:
description:
Redraw the arrange view and ruler
------
name:UpdateTimeline
language:eel2
return:
params:
description:
Redraw the arrange view and ruler
------
name:reaper.UpdateTimeline
language:lua
return:
params:
description:
Redraw the arrange view and ruler
------
name:RPR_UpdateTimeline
language:python
return:
params:
description:
Redraw the arrange view and ruler
------
name:ValidatePtr
language:c
return:(bool:)
params:(void*:pointer), (const char*:ctypename)
description:
see ValidatePtr2
------
name:ValidatePtr
language:eel2
return:(bool:)
params:(void*:pointer), ("ctypename":)
description:
see ValidatePtr2
------
name:reaper.ValidatePtr
language:lua
return:(boolean:)
params:(identifier:pointer), (string:ctypename)
description:
see ValidatePtr2
------
name:RPR_ValidatePtr
language:python
return:(Boolean:)
params:(void:pointer), (String:ctypename)
description:
see ValidatePtr2
------
name:ValidatePtr2
language:c
return:(bool:)
params:(ReaProject*:proj), (void*:pointer), (const char*:ctypename)
description:
Return true if the pointer is a valid object of the right type in proj
(proj is ignored if pointer is itself a project). Supported types are:
ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope*
and PCM_source*.
------
name:ValidatePtr2
language:eel2
return:(bool:)
params:(ReaProject:proj), (void*:pointer), ("ctypename":)
description:
Return true if the pointer is a valid object of the right type in proj
(proj is ignored if pointer is itself a project). Supported types are:
ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope*
and PCM_source*.
------
name:reaper.ValidatePtr2
language:lua
return:(boolean:)
params:(ReaProject:proj), (identifier:pointer), (string:ctypename)
description:
Return true if the pointer is a valid object of the right type in proj
(proj is ignored if pointer is itself a project). Supported types are:
ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope*
and PCM_source*.
------
name:RPR_ValidatePtr2
language:python
return:(Boolean:)
params:(ReaProject:proj), (void:pointer), (String:ctypename)
description:
Return true if the pointer is a valid object of the right type in proj
(proj is ignored if pointer is itself a project). Supported types are:
ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope*
and PCM_source*.
------
name:ViewPrefs
language:c
return:(void:)
params:(int:page), (const char*:pageByName)
description:
Opens the prefs to a page, use pageByName if page is 0.
------
name:ViewPrefs
language:eel2
return:
params:(int:page), ("pageByName":)
description:
Opens the prefs to a page, use pageByName if page is 0.
------
name:reaper.ViewPrefs
language:lua
return:
params:(integer:page), (string:pageByName)
description:
Opens the prefs to a page, use pageByName if page is 0.
------
name:RPR_ViewPrefs
language:python
return:
params:(Int:page), (String:pageByName)
description:
Opens the prefs to a page, use pageByName if page is 0.
------
name:BR_EnvAlloc
language:c
return:(BR_Envelope*:)
params:(TrackEnvelope*:envelope), (bool:takeEnvelopesUseProjectTime)
description:
[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.
takeEnvelopesUseProjectTime: take envelope points' positions are
counted from take position, not project start time. If you want to work
with project time instead, pass this as true.
For further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.
------
name:extension_api
language:eel2
return:(BR_Envelope:)
params:("BR_EnvAlloc":), (TrackEnvelope:envelope), (bool:takeEnvelopesUseProjectTime)
description:
[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.
takeEnvelopesUseProjectTime: take envelope points' positions are
counted from take position, not project start time. If you want to work
with project time instead, pass this as true.
For further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.
------
name:reaper.BR_EnvAlloc
language:lua
return:(BR_Envelope:)
params:(TrackEnvelope:envelope), (boolean:takeEnvelopesUseProjectTime)
description:
[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.
takeEnvelopesUseProjectTime: take envelope points' positions are
counted from take position, not project start time. If you want to work
with project time instead, pass this as true.
For further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.
------
name:BR_EnvAlloc
language:python
return:(BR_Envelope:)
params:(TrackEnvelope:envelope), (Boolean:takeEnvelopesUseProjectTime)
description:
[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.
takeEnvelopesUseProjectTime: take envelope points' positions are
counted from take position, not project start time. If you want to work
with project time instead, pass this as true.
For further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.
------
name:BR_EnvCountPoints
language:c
return:(int:)
params:(BR_Envelope*:envelope)
description:
[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.
------
name:extension_api
language:eel2
return:(int:)
params:("BR_EnvCountPoints":), (BR_Envelope:envelope)
description:
[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.
------
name:reaper.BR_EnvCountPoints
language:lua
return:(integer:)
params:(BR_Envelope:envelope)
description:
[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.
------
name:BR_EnvCountPoints
language:python
return:(Int:)
params:(BR_Envelope:envelope)
description:
[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.
------
name:BR_EnvDeletePoint
language:c
return:(bool:)
params:(BR_Envelope*:envelope), (int:id)
description:
[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_EnvDeletePoint":), (BR_Envelope:envelope), (int:id)
description:
[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:reaper.BR_EnvDeletePoint
language:lua
return:(boolean:)
params:(BR_Envelope:envelope), (integer:id)
description:
[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:BR_EnvDeletePoint
language:python
return:(Boolean:)
params:(BR_Envelope:envelope), (Int:id)
description:
[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:BR_EnvFind
language:c
return:(int:)
params:(BR_Envelope*:envelope), (double:position), (double:delta)
description:
[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc.
Pass delta > 0 to search surrounding range - in that case the
closest point to position within delta will be searched for. Returns
envelope point id (zero-based) on success or -1 on failure.
------
name:extension_api
language:eel2
return:(int:)
params:("BR_EnvFind":), (BR_Envelope:envelope), (position:), (delta:)
description:
[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc.
Pass delta > 0 to search surrounding range - in that case the
closest point to position within delta will be searched for. Returns
envelope point id (zero-based) on success or -1 on failure.
------
name:reaper.BR_EnvFind
language:lua
return:(integer:)
params:(BR_Envelope:envelope), (number:position), (number:delta)
description:
[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc.
Pass delta > 0 to search surrounding range - in that case the
closest point to position within delta will be searched for. Returns
envelope point id (zero-based) on success or -1 on failure.
------
name:BR_EnvFind
language:python
return:(Int:)
params:(BR_Envelope:envelope), (Float:position), (Float:delta)
description:
[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc.
Pass delta > 0 to search surrounding range - in that case the
closest point to position within delta will be searched for. Returns
envelope point id (zero-based) on success or -1 on failure.
------
name:BR_EnvFindNext
language:c
return:(int:)
params:(BR_Envelope*:envelope), (double:position)
description:
[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:extension_api
language:eel2
return:(int:)
params:("BR_EnvFindNext":), (BR_Envelope:envelope), (position:)
description:
[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:reaper.BR_EnvFindNext
language:lua
return:(integer:)
params:(BR_Envelope:envelope), (number:position)
description:
[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:BR_EnvFindNext
language:python
return:(Int:)
params:(BR_Envelope:envelope), (Float:position)
description:
[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:BR_EnvFindPrevious
language:c
return:(int:)
params:(BR_Envelope*:envelope), (double:position)
description:
[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:extension_api
language:eel2
return:(int:)
params:("BR_EnvFindPrevious":), (BR_Envelope:envelope), (position:)
description:
[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:reaper.BR_EnvFindPrevious
language:lua
return:(integer:)
params:(BR_Envelope:envelope), (number:position)
description:
[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:BR_EnvFindPrevious
language:python
return:(Int:)
params:(BR_Envelope:envelope), (Float:position)
description:
[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.
------
name:BR_EnvFree
language:c
return:(bool:)
params:(BR_Envelope*:envelope), (bool:commit)
description:
[BR] Free envelope object allocated with BR_EnvAlloc
and commit changes if needed. Returns true if changes were committed
successfully. Note that when envelope object wasn't modified nothing
will get committed even if commit = true - in that case function returns
false.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_EnvFree":), (BR_Envelope:envelope), (bool:commit)
description:
[BR] Free envelope object allocated with BR_EnvAlloc
and commit changes if needed. Returns true if changes were committed
successfully. Note that when envelope object wasn't modified nothing
will get committed even if commit = true - in that case function returns
false.
------
name:reaper.BR_EnvFree
language:lua
return:(boolean:)
params:(BR_Envelope:envelope), (boolean:commit)
description:
[BR] Free envelope object allocated with BR_EnvAlloc
and commit changes if needed. Returns true if changes were committed
successfully. Note that when envelope object wasn't modified nothing
will get committed even if commit = true - in that case function returns
false.
------
name:BR_EnvFree
language:python
return:(Boolean:)
params:(BR_Envelope:envelope), (Boolean:commit)
description:
[BR] Free envelope object allocated with BR_EnvAlloc
and commit changes if needed. Returns true if changes were committed
successfully. Note that when envelope object wasn't modified nothing
will get committed even if commit = true - in that case function returns
false.
------
name:BR_EnvGetParentTake
language:c
return:(MediaItem_Take*:)
params:(BR_Envelope*:envelope)
description:
[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.
------
name:extension_api
language:eel2
return:(MediaItem_Take:)
params:("BR_EnvGetParentTake":), (BR_Envelope:envelope)
description:
[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.
------
name:reaper.BR_EnvGetParentTake
language:lua
return:(MediaItem_Take:)
params:(BR_Envelope:envelope)
description:
[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.
------
name:BR_EnvGetParentTake
language:python
return:(MediaItem_Take:)
params:(BR_Envelope:envelope)
description:
[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.
------
name:BR_EnvGetParentTrack
language:c
return:(MediaItem*:)
params:(BR_Envelope*:envelope)
description:
[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.
------
name:extension_api
language:eel2
return:(MediaItem:)
params:("BR_EnvGetParentTrack":), (BR_Envelope:envelope)
description:
[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.
------
name:reaper.BR_EnvGetParentTrack
language:lua
return:(MediaItem:)
params:(BR_Envelope:envelope)
description:
[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.
------
name:BR_EnvGetParentTrack
language:python
return:(MediaItem:)
params:(BR_Envelope:envelope)
description:
[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.
------
name:BR_EnvGetPoint
language:c
return:(bool:)
params:(BR_Envelope*:envelope), (int:id), (double*:positionOut), (double*:valueOut), (int*:shapeOut), (bool*:selectedOut), (double*:bezierOut)
description:
[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_EnvGetPoint":), (BR_Envelope:envelope), (int:id), (&position:), (&value:), (int:&shape), (bool:&selected), (&bezier:)
description:
[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:reaper.BR_EnvGetPoint
language:lua
return:(boolean:retval),(number:position),(number:value),(number:shape),(boolean:selected),(number:bezier)
params:(BR_Envelope:envelope), (integer:id)
description:
[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:BR_EnvGetPoint
language:python
return:(Boolean:retval),(BR_Envelope:envelope),(Int:id),(Float:positionOut),(Float:valueOut),(Int:shapeOut),(Boolean:selectedOut),(Float:bezierOut)
params:(envelope:), (id:), (positionOut:), (valueOut:), (shapeOut:), (selectedOut:), (bezierOut:)
description:
[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.
------
name:BR_EnvGetProperties
language:c
return:(void:)
params:(BR_Envelope*:envelope), (bool*:activeOut), (bool*:visibleOut), (bool*:armedOut), (bool*:inLaneOut), (int*:laneHeightOut), (int*:defaultShapeOut), (double*:minValueOut), (double*:maxValueOut), (double*:centerValueOut), (int*:typeOut), (bool*:faderScalingOut)
description:
[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.
active: true if envelope is active
visible: true if envelope is visible
armed: true if envelope is armed
inLane: true if envelope has it's own envelope lane
laneHeight: envelope lane override height. 0 for none, otherwise size in pixels
defaultShape: default point shape: 0->Linear, 1->Square,
2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier
minValue: minimum envelope value
maxValue: maximum envelope value
type: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan,
3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute,
7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter
faderScaling: true if envelope uses fader scaling
------
name:extension_api
language:eel2
return:
params:("BR_EnvGetProperties":), (BR_Envelope:envelope), (bool:&active), (bool:&visible), (bool:&armed), (bool:&inLane), (int:&laneHeight), (int:&defaultShape), (&minValue:), (&maxValue:), (&centerValue:), (int:&type), (bool:&faderScaling)
description:
[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.
active: true if envelope is active
visible: true if envelope is visible
armed: true if envelope is armed
inLane: true if envelope has it's own envelope lane
laneHeight: envelope lane override height. 0 for none, otherwise size in pixels
defaultShape: default point shape: 0->Linear, 1->Square,
2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier
minValue: minimum envelope value
maxValue: maximum envelope value
type: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan,
3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute,
7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter
faderScaling: true if envelope uses fader scaling
------
name:reaper.BR_EnvGetProperties
language:lua
return:(boolean:active),(boolean:visible),(boolean:armed),(boolean:inLane),(number:laneHeight),(number:defaultShape),(number:minValue),(number:maxValue),(number:centerValue),(number:type),(boolean:faderScaling)
params:(BR_Envelope:envelope)
description:
[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.
active: true if envelope is active
visible: true if envelope is visible
armed: true if envelope is armed
inLane: true if envelope has it's own envelope lane
laneHeight: envelope lane override height. 0 for none, otherwise size in pixels
defaultShape: default point shape: 0->Linear, 1->Square,
2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier
minValue: minimum envelope value
maxValue: maximum envelope value
type: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan,
3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute,
7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter
faderScaling: true if envelope uses fader scaling
------
name:BR_EnvGetProperties
language:python
return:(BR_Envelope:envelope),(Boolean:activeOut),(Boolean:visibleOut),(Boolean:armedOut),(Boolean:inLaneOut),(Int:laneHeightOut),(Int:defaultShapeOut),(Float:minValueOut),(Float:maxValueOut),(Float:centerValueOut),(Int:typeOut),(Boolean:faderScalingOut)
params:(envelope:), (activeOut:), (visibleOut:), (armedOut:), (inLaneOut:), (laneHeightOut:), (defaultShapeOut:), (minValueOut:), (maxValueOut:), (centerValueOut:), (typeOut:), (faderScalingOut:)
description:
[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.
active: true if envelope is active
visible: true if envelope is visible
armed: true if envelope is armed
inLane: true if envelope has it's own envelope lane
laneHeight: envelope lane override height. 0 for none, otherwise size in pixels
defaultShape: default point shape: 0->Linear, 1->Square,
2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier
minValue: minimum envelope value
maxValue: maximum envelope value
type: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan,
3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute,
7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter
faderScaling: true if envelope uses fader scaling
------
name:BR_EnvSetPoint
language:c
return:(bool:)
params:(BR_Envelope*:envelope), (int:id), (double:position), (double:value), (int:shape), (bool:selected), (double:bezier)
description:
[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc.
To create point instead, pass id = -1. Note that if new point is
inserted or existing point's time position is changed, points won't
automatically get sorted. To do that, see BR_EnvSortPoints.
Returns true on success.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_EnvSetPoint":), (BR_Envelope:envelope), (int:id), (position:), (value:), (int:shape), (bool:selected), (bezier:)
description:
[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc.
To create point instead, pass id = -1. Note that if new point is
inserted or existing point's time position is changed, points won't
automatically get sorted. To do that, see BR_EnvSortPoints.
Returns true on success.
------
name:reaper.BR_EnvSetPoint
language:lua
return:(boolean:)
params:(BR_Envelope:envelope), (integer:id), (number:position), (number:value), (integer:shape), (boolean:selected), (number:bezier)
description:
[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc.
To create point instead, pass id = -1. Note that if new point is
inserted or existing point's time position is changed, points won't
automatically get sorted. To do that, see BR_EnvSortPoints.
Returns true on success.
------
name:BR_EnvSetPoint
language:python
return:(Boolean:)
params:(BR_Envelope:envelope), (Int:id), (Float:position), (Float:value), (Int:shape), (Boolean:selected), (Float:bezier)
description:
[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc.
To create point instead, pass id = -1. Note that if new point is
inserted or existing point's time position is changed, points won't
automatically get sorted. To do that, see BR_EnvSortPoints.
Returns true on success.
------
name:BR_EnvSetProperties
language:c
return:(void:)
params:(BR_Envelope*:envelope), (bool:active), (bool:visible), (bool:armed), (bool:inLane), (int:laneHeight), (int:defaultShape), (bool:faderScaling)
description:
[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.
------
name:extension_api
language:eel2
return:
params:("BR_EnvSetProperties":), (BR_Envelope:envelope), (bool:active), (bool:visible), (bool:armed), (bool:inLane), (int:laneHeight), (int:defaultShape), (bool:faderScaling)
description:
[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.
------
name:reaper.BR_EnvSetProperties
language:lua
return:
params:(BR_Envelope:envelope), (boolean:active), (boolean:visible), (boolean:armed), (boolean:inLane), (integer:laneHeight), (integer:defaultShape), (boolean:faderScaling)
description:
[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.
------
name:BR_EnvSetProperties
language:python
return:
params:(BR_Envelope:envelope), (Boolean:active), (Boolean:visible), (Boolean:armed), (Boolean:inLane), (Int:laneHeight), (Int:defaultShape), (Boolean:faderScaling)
description:
[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.
------
name:BR_EnvSortPoints
language:c
return:(void:)
params:(BR_Envelope*:envelope)
description:
[BR] Sort envelope points by position. The only reason to call this is
if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.
------
name:extension_api
language:eel2
return:
params:("BR_EnvSortPoints":), (BR_Envelope:envelope)
description:
[BR] Sort envelope points by position. The only reason to call this is
if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.
------
name:reaper.BR_EnvSortPoints
language:lua
return:
params:(BR_Envelope:envelope)
description:
[BR] Sort envelope points by position. The only reason to call this is
if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.
------
name:BR_EnvSortPoints
language:python
return:
params:(BR_Envelope:envelope)
description:
[BR] Sort envelope points by position. The only reason to call this is
if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.
------
name:BR_EnvValueAtPos
language:c
return:(double:)
params:(BR_Envelope*:envelope), (double:position)
description:
[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_EnvValueAtPos":), (BR_Envelope:envelope), (position:)
description:
[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.
------
name:reaper.BR_EnvValueAtPos
language:lua
return:(number:)
params:(BR_Envelope:envelope), (number:position)
description:
[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.
------
name:BR_EnvValueAtPos
language:python
return:(Float:)
params:(BR_Envelope:envelope), (Float:position)
description:
[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.
------
name:BR_GetArrangeView
language:c
return:(void:)
params:(ReaProject*:proj), (double*:startTimeOut), (double*:endTimeOut)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.
------
name:extension_api
language:eel2
return:
params:("BR_GetArrangeView":), (ReaProject:proj), (&startTime:), (&endTime:)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.
------
name:reaper.BR_GetArrangeView
language:lua
return:(number:startTime),(number:endTime)
params:(ReaProject:proj)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.
------
name:BR_GetArrangeView
language:python
return:(ReaProject:proj),(Float:startTimeOut),(Float:endTimeOut)
params:(proj:), (startTimeOut:), (endTimeOut:)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.
------
name:BR_GetClosestGridDivision
language:c
return:(double:)
params:(double:position)
description:
[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid
in two regards. SnapToGrid() needs snap enabled to work and this one
works always. Secondly, grid divisions are different from grid lines
because some grid lines may be hidden due to zoom level - this function
ignores grid line visibility and always searches for the closest grid
division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_GetClosestGridDivision":), (position:)
description:
[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid
in two regards. SnapToGrid() needs snap enabled to work and this one
works always. Secondly, grid divisions are different from grid lines
because some grid lines may be hidden due to zoom level - this function
ignores grid line visibility and always searches for the closest grid
division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.
------
name:reaper.BR_GetClosestGridDivision
language:lua
return:(number:)
params:(number:position)
description:
[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid
in two regards. SnapToGrid() needs snap enabled to work and this one
works always. Secondly, grid divisions are different from grid lines
because some grid lines may be hidden due to zoom level - this function
ignores grid line visibility and always searches for the closest grid
division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.
------
name:BR_GetClosestGridDivision
language:python
return:(Float:)
params:(Float:position)
description:
[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid
in two regards. SnapToGrid() needs snap enabled to work and this one
works always. Secondly, grid divisions are different from grid lines
because some grid lines may be hidden due to zoom level - this function
ignores grid line visibility and always searches for the closest grid
division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.
------
name:BR_GetCurrentTheme
language:c
return:(void:)
params:(char*:themePathOut), (int:themePathOut_sz), (char*:themeNameOut), (int:themeNameOut_sz)
description:
[BR] Get current theme information. themePathOut is set to full theme
path and themeNameOut is set to theme name excluding any path info and
extension
------
name:extension_api
language:eel2
return:
params:("BR_GetCurrentTheme":), (#themePath:), (#themeName:)
description:
[BR] Get current theme information. themePathOut is set to full theme
path and themeNameOut is set to theme name excluding any path info and
extension
------
name:reaper.BR_GetCurrentTheme
language:lua
return:(string:themePath),(string:themeName)
params:
description:
[BR] Get current theme information. themePathOut is set to full theme
path and themeNameOut is set to theme name excluding any path info and
extension
------
name:BR_GetCurrentTheme
language:python
return:(String:themePathOut),(Int:themePathOut_sz),(String:themeNameOut),(Int:themeNameOut_sz)
params:(themePathOut:), (themePathOut_sz:), (themeNameOut:), (themeNameOut_sz:)
description:
[BR] Get current theme information. themePathOut is set to full theme
path and themeNameOut is set to theme name excluding any path info and
extension
------
name:BR_GetMediaItemByGUID
language:c
return:(MediaItem*:)
params:(ReaProject*:proj), (const char*:guidStringIn)
description:
[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.
------
name:extension_api
language:eel2
return:(MediaItem:)
params:("BR_GetMediaItemByGUID":), (ReaProject:proj), ("guidStringIn":)
description:
[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.
------
name:reaper.BR_GetMediaItemByGUID
language:lua
return:(MediaItem:)
params:(ReaProject:proj), (string:guidStringIn)
description:
[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.
------
name:BR_GetMediaItemByGUID
language:python
return:(MediaItem:)
params:(ReaProject:proj), (String:guidStringIn)
description:
[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.
------
name:BR_GetMediaItemGUID
language:c
return:(void:)
params:(MediaItem*:item), (char*:guidStringOut), (int:guidStringOut_sz)
description:
[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.
------
name:extension_api
language:eel2
return:
params:("BR_GetMediaItemGUID":), (MediaItem:item), (#guidString:)
description:
[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.
------
name:reaper.BR_GetMediaItemGUID
language:lua
return:(string:guidString)
params:(MediaItem:item)
description:
[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.
------
name:BR_GetMediaItemGUID
language:python
return:(MediaItem:item),(String:guidStringOut),(Int:guidStringOut_sz)
params:(item:), (guidStringOut:), (guidStringOut_sz:)
description:
[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.
------
name:BR_GetMediaItemImageResource
language:c
return:(bool:)
params:(MediaItem*:item), (char*:imageOut), (int:imageOut_sz), (int*:imageFlagsOut)
description:
[BR] Get currently loaded image resource and it's flags for a given
item. Returns false if there is no image resource set. To set image
resource, see BR_SetMediaItemImageResource.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_GetMediaItemImageResource":), (MediaItem:item), (#image:), (int:&imageFlags)
description:
[BR] Get currently loaded image resource and it's flags for a given
item. Returns false if there is no image resource set. To set image
resource, see BR_SetMediaItemImageResource.
------
name:reaper.BR_GetMediaItemImageResource
language:lua
return:(boolean:retval),(string:image),(number:imageFlags)
params:(MediaItem:item)
description:
[BR] Get currently loaded image resource and it's flags for a given
item. Returns false if there is no image resource set. To set image
resource, see BR_SetMediaItemImageResource.
------
name:BR_GetMediaItemImageResource
language:python
return:(Boolean:retval),(MediaItem:item),(String:imageOut),(Int:imageOut_sz),(Int:imageFlagsOut)
params:(item:), (imageOut:), (imageOut_sz:), (imageFlagsOut:)
description:
[BR] Get currently loaded image resource and it's flags for a given
item. Returns false if there is no image resource set. To set image
resource, see BR_SetMediaItemImageResource.
------
name:BR_GetMediaItemTakeGUID
language:c
return:(void:)
params:(MediaItem_Take*:take), (char*:guidStringOut), (int:guidStringOut_sz)
description:
[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.
------
name:extension_api
language:eel2
return:
params:("BR_GetMediaItemTakeGUID":), (MediaItem_Take:take), (#guidString:)
description:
[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.
------
name:reaper.BR_GetMediaItemTakeGUID
language:lua
return:(string:guidString)
params:(MediaItem_Take:take)
description:
[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.
------
name:BR_GetMediaItemTakeGUID
language:python
return:(MediaItem_Take:take),(String:guidStringOut),(Int:guidStringOut_sz)
params:(take:), (guidStringOut:), (guidStringOut_sz:)
description:
[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.
------
name:BR_GetMediaSourceProperties
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool*:sectionOut), (double*:startOut), (double*:lengthOut), (double*:fadeOut), (bool*:reverseOut)
description:
[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).
To set source properties, see BR_SetMediaSourceProperties.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_GetMediaSourceProperties":), (MediaItem_Take:take), (bool:&section), (&start:), (&length:), (&fade:), (bool:&reverse)
description:
[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).
To set source properties, see BR_SetMediaSourceProperties.
------
name:reaper.BR_GetMediaSourceProperties
language:lua
return:(boolean:retval),(boolean:section),(number:start),(number:length),(number:fade),(boolean:reverse)
params:(MediaItem_Take:take)
description:
[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).
To set source properties, see BR_SetMediaSourceProperties.
------
name:BR_GetMediaSourceProperties
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Boolean:sectionOut),(Float:startOut),(Float:lengthOut),(Float:fadeOut),(Boolean:reverseOut)
params:(take:), (sectionOut:), (startOut:), (lengthOut:), (fadeOut:), (reverseOut:)
description:
[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).
To set source properties, see BR_SetMediaSourceProperties.
------
name:BR_GetMediaTrackByGUID
language:c
return:(MediaTrack*:)
params:(ReaProject*:proj), (const char*:guidStringIn)
description:
[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see BR_GetMediaTrackGUID.
------
name:extension_api
language:eel2
return:(MediaTrack:)
params:("BR_GetMediaTrackByGUID":), (ReaProject:proj), ("guidStringIn":)
description:
[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see BR_GetMediaTrackGUID.
------
name:reaper.BR_GetMediaTrackByGUID
language:lua
return:(MediaTrack:)
params:(ReaProject:proj), (string:guidStringIn)
description:
[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see BR_GetMediaTrackGUID.
------
name:BR_GetMediaTrackByGUID
language:python
return:(MediaTrack:)
params:(ReaProject:proj), (String:guidStringIn)
description:
[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see BR_GetMediaTrackGUID.
------
name:BR_GetMediaTrackFreezeCount
language:c
return:(int:)
params:(MediaTrack*:track)
description:
[BR] Get media track freeze count (if track isn't frozen at all, returns 0).
------
name:extension_api
language:eel2
return:(int:)
params:("BR_GetMediaTrackFreezeCount":), (MediaTrack:track)
description:
[BR] Get media track freeze count (if track isn't frozen at all, returns 0).
------
name:reaper.BR_GetMediaTrackFreezeCount
language:lua
return:(integer:)
params:(MediaTrack:track)
description:
[BR] Get media track freeze count (if track isn't frozen at all, returns 0).
------
name:BR_GetMediaTrackFreezeCount
language:python
return:(Int:)
params:(MediaTrack:track)
description:
[BR] Get media track freeze count (if track isn't frozen at all, returns 0).
------
name:BR_GetMediaTrackGUID
language:c
return:(void:)
params:(MediaTrack*:track), (char*:guidStringOut), (int:guidStringOut_sz)
description:
[BR] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.
------
name:extension_api
language:eel2
return:
params:("BR_GetMediaTrackGUID":), (MediaTrack:track), (#guidString:)
description:
[BR] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.
------
name:reaper.BR_GetMediaTrackGUID
language:lua
return:(string:guidString)
params:(MediaTrack:track)
description:
[BR] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.
------
name:BR_GetMediaTrackGUID
language:python
return:(MediaTrack:track),(String:guidStringOut),(Int:guidStringOut_sz)
params:(track:), (guidStringOut:), (guidStringOut_sz:)
description:
[BR] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.
------
name:BR_GetMediaTrackLayouts
language:c
return:(void:)
params:(MediaTrack*:track), (char*:mcpLayoutNameOut), (int:mcpLayoutNameOut_sz), (char*:tcpLayoutNameOut), (int:tcpLayoutNameOut_sz)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string
("") means that layout is set to the default layout. To set media track
layouts, see BR_SetMediaTrackLayouts.
------
name:extension_api
language:eel2
return:
params:("BR_GetMediaTrackLayouts":), (MediaTrack:track), (#mcpLayoutName:), (#tcpLayoutName:)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string
("") means that layout is set to the default layout. To set media track
layouts, see BR_SetMediaTrackLayouts.
------
name:reaper.BR_GetMediaTrackLayouts
language:lua
return:(string:mcpLayoutName),(string:tcpLayoutName)
params:(MediaTrack:track)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string
("") means that layout is set to the default layout. To set media track
layouts, see BR_SetMediaTrackLayouts.
------
name:BR_GetMediaTrackLayouts
language:python
return:(MediaTrack:track),(String:mcpLayoutNameOut),(Int:mcpLayoutNameOut_sz),(String:tcpLayoutNameOut),(Int:tcpLayoutNameOut_sz)
params:(track:), (mcpLayoutNameOut:), (mcpLayoutNameOut_sz:), (tcpLayoutNameOut:), (tcpLayoutNameOut_sz:)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string
("") means that layout is set to the default layout. To set media track
layouts, see BR_SetMediaTrackLayouts.
------
name:BR_GetMediaTrackSendInfo_Envelope
language:c
return:(TrackEnvelope*:)
params:(MediaTrack*:track), (int:category), (int:sendidx), (int:envelopeType)
description:
[BR] Get track envelope for send/receive/hardware output.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.
------
name:extension_api
language:eel2
return:(TrackEnvelope:)
params:("BR_GetMediaTrackSendInfo_Envelope":), (MediaTrack:track), (int:category), (int:sendidx), (int:envelopeType)
description:
[BR] Get track envelope for send/receive/hardware output.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.
------
name:reaper.BR_GetMediaTrackSendInfo_Envelope
language:lua
return:(TrackEnvelope:)
params:(MediaTrack:track), (integer:category), (integer:sendidx), (integer:envelopeType)
description:
[BR] Get track envelope for send/receive/hardware output.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.
------
name:BR_GetMediaTrackSendInfo_Envelope
language:python
return:(TrackEnvelope:)
params:(MediaTrack:track), (Int:category), (Int:sendidx), (Int:envelopeType)
description:
[BR] Get track envelope for send/receive/hardware output.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.
------
name:BR_GetMediaTrackSendInfo_Track
language:c
return:(MediaTrack*:)
params:(MediaTrack*:track), (int:category), (int:sendidx), (int:trackType)
description:
[BR] Get source or destination media track for send/receive.
category is <0 for receives, 0=sends
sendidx is zero-based (see GetTrackNumSends to count track sends/receives)
trackType determines which track is returned (0=source track, 1=destination track)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.
------
name:extension_api
language:eel2
return:(MediaTrack:)
params:("BR_GetMediaTrackSendInfo_Track":), (MediaTrack:track), (int:category), (int:sendidx), (int:trackType)
description:
[BR] Get source or destination media track for send/receive.
category is <0 for receives, 0=sends
sendidx is zero-based (see GetTrackNumSends to count track sends/receives)
trackType determines which track is returned (0=source track, 1=destination track)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.
------
name:reaper.BR_GetMediaTrackSendInfo_Track
language:lua
return:(MediaTrack:)
params:(MediaTrack:track), (integer:category), (integer:sendidx), (integer:trackType)
description:
[BR] Get source or destination media track for send/receive.
category is <0 for receives, 0=sends
sendidx is zero-based (see GetTrackNumSends to count track sends/receives)
trackType determines which track is returned (0=source track, 1=destination track)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.
------
name:BR_GetMediaTrackSendInfo_Track
language:python
return:(MediaTrack:)
params:(MediaTrack:track), (Int:category), (Int:sendidx), (Int:trackType)
description:
[BR] Get source or destination media track for send/receive.
category is <0 for receives, 0=sends
sendidx is zero-based (see GetTrackNumSends to count track sends/receives)
trackType determines which track is returned (0=source track, 1=destination track)
Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.
------
name:BR_GetMidiSourceLenPPQ
language:c
return:(double:)
params:(MediaItem_Take*:take)
description:
[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_GetMidiSourceLenPPQ":), (MediaItem_Take:take)
description:
[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.
------
name:reaper.BR_GetMidiSourceLenPPQ
language:lua
return:(number:)
params:(MediaItem_Take:take)
description:
[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.
------
name:BR_GetMidiSourceLenPPQ
language:python
return:(Float:)
params:(MediaItem_Take:take)
description:
[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.
------
name:BR_GetMidiTakePoolGUID
language:c
return:(bool:)
params:(MediaItem_Take*:take), (char*:guidStringOut), (int:guidStringOut_sz)
description:
[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_GetMidiTakePoolGUID":), (MediaItem_Take:take), (#guidString:)
description:
[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.
------
name:reaper.BR_GetMidiTakePoolGUID
language:lua
return:(boolean:retval),(string:guidString)
params:(MediaItem_Take:take)
description:
[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.
------
name:BR_GetMidiTakePoolGUID
language:python
return:(Boolean:retval),(MediaItem_Take:take),(String:guidStringOut),(Int:guidStringOut_sz)
params:(take:), (guidStringOut:), (guidStringOut_sz:)
description:
[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.
------
name:BR_GetMidiTakeTempoInfo
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool*:ignoreProjTempoOut), (double*:bpmOut), (int*:numOut), (int*:denOut)
description:
[BR] Get "ignore project tempo" information for MIDI take. Returns true
if take can ignore project tempo (no matter if it's actually ignored),
otherwise false.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_GetMidiTakeTempoInfo":), (MediaItem_Take:take), (bool:&ignoreProjTempo), (&bpm:), (int:&num), (int:&den)
description:
[BR] Get "ignore project tempo" information for MIDI take. Returns true
if take can ignore project tempo (no matter if it's actually ignored),
otherwise false.
------
name:reaper.BR_GetMidiTakeTempoInfo
language:lua
return:(boolean:retval),(boolean:ignoreProjTempo),(number:bpm),(number:num),(number:den)
params:(MediaItem_Take:take)
description:
[BR] Get "ignore project tempo" information for MIDI take. Returns true
if take can ignore project tempo (no matter if it's actually ignored),
otherwise false.
------
name:BR_GetMidiTakeTempoInfo
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Boolean:ignoreProjTempoOut),(Float:bpmOut),(Int:numOut),(Int:denOut)
params:(take:), (ignoreProjTempoOut:), (bpmOut:), (numOut:), (denOut:)
description:
[BR] Get "ignore project tempo" information for MIDI take. Returns true
if take can ignore project tempo (no matter if it's actually ignored),
otherwise false.
------
name:BR_GetMouseCursorContext
language:c
return:(void:)
params:(char*:windowOut), (int:windowOut_sz), (char*:segmentOut), (int:segmentOut_sz), (char*:detailsOut), (int:detailsOut_sz)
description:
[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.
To get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track
Window Segment Details  unknown       ""          ""                                                             ruler         region_lane   ""                                                              marker_lane   ""                                                              tempo_lane    ""                                                              timeline      ""                                                             transport     ""          ""                                                             tcp           track         ""                                                              envelope      ""                                                              empty         ""                                                             mcp           track         ""                                                              empty         ""                                                             arrange       track         empty,item, item_stretch_marker,env_point, env_segment    envelope      empty, env_point, env_segment                                     empty         ""                                                             midi_editor   unknown       ""                                                              ruler         ""                                                              piano         ""                                                              notes         ""                                                              cc_lane       cc_selector, cc_lane
------
name:extension_api
language:eel2
return:
params:("BR_GetMouseCursorContext":), (#window:), (#segment:), (#details:)
description:
[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.
To get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track
Window Segment Details  unknown       ""          ""                                                             ruler         region_lane   ""                                                              marker_lane   ""                                                              tempo_lane    ""                                                              timeline      ""                                                             transport     ""          ""                                                             tcp           track         ""                                                              envelope      ""                                                              empty         ""                                                             mcp           track         ""                                                              empty         ""                                                             arrange       track         empty,item, item_stretch_marker,env_point, env_segment    envelope      empty, env_point, env_segment                                     empty         ""                                                             midi_editor   unknown       ""                                                              ruler         ""                                                              piano         ""                                                              notes         ""                                                              cc_lane       cc_selector, cc_lane
------
name:reaper.BR_GetMouseCursorContext
language:lua
return:(string:window),(string:segment),(string:details)
params:
description:
[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.
To get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track
Window Segment Details  unknown       ""          ""                                                             ruler         region_lane   ""                                                              marker_lane   ""                                                              tempo_lane    ""                                                              timeline      ""                                                             transport     ""          ""                                                             tcp           track         ""                                                              envelope      ""                                                              empty         ""                                                             mcp           track         ""                                                              empty         ""                                                             arrange       track         empty,item, item_stretch_marker,env_point, env_segment    envelope      empty, env_point, env_segment                                     empty         ""                                                             midi_editor   unknown       ""                                                              ruler         ""                                                              piano         ""                                                              notes         ""                                                              cc_lane       cc_selector, cc_lane
------
name:BR_GetMouseCursorContext
language:python
return:(String:windowOut),(Int:windowOut_sz),(String:segmentOut),(Int:segmentOut_sz),(String:detailsOut),(Int:detailsOut_sz)
params:(windowOut:), (windowOut_sz:), (segmentOut:), (segmentOut_sz:), (detailsOut:), (detailsOut_sz:)
description:
[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.
To get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track
Window Segment Details  unknown       ""          ""                                                             ruler         region_lane   ""                                                              marker_lane   ""                                                              tempo_lane    ""                                                              timeline      ""                                                             transport     ""          ""                                                             tcp           track         ""                                                              envelope      ""                                                              empty         ""                                                             mcp           track         ""                                                              empty         ""                                                             arrange       track         empty,item, item_stretch_marker,env_point, env_segment    envelope      empty, env_point, env_segment                                     empty         ""                                                             midi_editor   unknown       ""                                                              ruler         ""                                                              piano         ""                                                              notes         ""                                                              cc_lane       cc_selector, cc_lane
------
name:BR_GetMouseCursorContext_Envelope
language:c
return:(TrackEnvelope*:)
params:(bool*:takeEnvelopeOut)
description:
[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.
------
name:extension_api
language:eel2
return:(TrackEnvelope:)
params:("BR_GetMouseCursorContext_Envelope":), (bool:&takeEnvelope)
description:
[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.
------
name:reaper.BR_GetMouseCursorContext_Envelope
language:lua
return:(TrackEnvelope:retval),(boolean:takeEnvelope)
params:
description:
[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.
------
name:BR_GetMouseCursorContext_Envelope
language:python
return:(TrackEnvelope:retval),(Boolean:takeEnvelopeOut)
params:(takeEnvelopeOut:)
description:
[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.
------
name:BR_GetMouseCursorContext_Item
language:c
return:(MediaItem*:)
params:
description:
[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
Note that the function will return item even if mouse cursor is over
some other track lane element like stretch marker or envelope. This
enables for easier identification of items when you want to ignore
elements within the item.
------
name:extension_api
language:eel2
return:(MediaItem:)
params:("BR_GetMouseCursorContext_Item":)
description:
[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
Note that the function will return item even if mouse cursor is over
some other track lane element like stretch marker or envelope. This
enables for easier identification of items when you want to ignore
elements within the item.
------
name:reaper.BR_GetMouseCursorContext_Item
language:lua
return:(MediaItem:)
params:
description:
[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
Note that the function will return item even if mouse cursor is over
some other track lane element like stretch marker or envelope. This
enables for easier identification of items when you want to ignore
elements within the item.
------
name:BR_GetMouseCursorContext_Item
language:python
return:(MediaItem:)
params:
description:
[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
Note that the function will return item even if mouse cursor is over
some other track lane element like stretch marker or envelope. This
enables for easier identification of items when you want to ignore
elements within the item.
------
name:BR_GetMouseCursorContext_MIDI
language:c
return:(void*:)
params:(bool*:inlineEditorOut), (int*:noteRowOut), (int*:ccLaneOut), (int*:ccLaneValOut), (int*:ccLaneIdOut)
description:
[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
inlineEditor: if mouse was captured in inline MIDI editor, this will be
true (consequentially, returned MIDI editor will be NULL)
noteRow: note row or piano key under mouse cursor (0-127)
ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events)
ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)
ccLaneId: lane position, counting from the top (0 based)
Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_GetMouseCursorContext_MIDI":), (bool:&inlineEditor), (int:&noteRow), (int:&ccLane), (int:&ccLaneVal), (int:&ccLaneId)
description:
[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
inlineEditor: if mouse was captured in inline MIDI editor, this will be
true (consequentially, returned MIDI editor will be NULL)
noteRow: note row or piano key under mouse cursor (0-127)
ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events)
ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)
ccLaneId: lane position, counting from the top (0 based)
Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1
------
name:reaper.BR_GetMouseCursorContext_MIDI
language:lua
return:(identifier:retval),(boolean:inlineEditor),(number:noteRow),(number:ccLane),(number:ccLaneVal),(number:ccLaneId)
params:
description:
[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
inlineEditor: if mouse was captured in inline MIDI editor, this will be
true (consequentially, returned MIDI editor will be NULL)
noteRow: note row or piano key under mouse cursor (0-127)
ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events)
ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)
ccLaneId: lane position, counting from the top (0 based)
Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1
------
name:BR_GetMouseCursorContext_MIDI
language:python
return:(void:retval),(Boolean:inlineEditorOut),(Int:noteRowOut),(Int:ccLaneOut),(Int:ccLaneValOut),(Int:ccLaneIdOut)
params:(inlineEditorOut:), (noteRowOut:), (ccLaneOut:), (ccLaneValOut:), (ccLaneIdOut:)
description:
[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
inlineEditor: if mouse was captured in inline MIDI editor, this will be
true (consequentially, returned MIDI editor will be NULL)
noteRow: note row or piano key under mouse cursor (0-127)
ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC,
0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure,
0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity,
0x208=notation events)
ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)
ccLaneId: lane position, counting from the top (0 based)
Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1
------
name:BR_GetMouseCursorContext_Position
language:c
return:(double:)
params:
description:
[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_GetMouseCursorContext_Position":)
description:
[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.
------
name:reaper.BR_GetMouseCursorContext_Position
language:lua
return:(number:)
params:
description:
[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetMouseCursorContext_Position
language:python
return:(Float:)
params:
description:
[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetMouseCursorContext_StretchMarker
language:c
return:(int:)
params:
description:
[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:extension_api
language:eel2
return:(int:)
params:("BR_GetMouseCursorContext_StretchMarker":)
description:
[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:reaper.BR_GetMouseCursorContext_StretchMarker
language:lua
return:(integer:)
params:
description:
[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetMouseCursorContext_StretchMarker
language:python
return:(Int:)
params:
description:
[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetMouseCursorContext_Take
language:c
return:(MediaItem_Take*:)
params:
description:
[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:extension_api
language:eel2
return:(MediaItem_Take:)
params:("BR_GetMouseCursorContext_Take":)
description:
[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:reaper.BR_GetMouseCursorContext_Take
language:lua
return:(MediaItem_Take:)
params:
description:
[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetMouseCursorContext_Take
language:python
return:(MediaItem_Take:)
params:
description:
[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetMouseCursorContext_Track
language:c
return:(MediaTrack*:)
params:
description:
[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:extension_api
language:eel2
return:(MediaTrack:)
params:("BR_GetMouseCursorContext_Track":)
description:
[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:reaper.BR_GetMouseCursorContext_Track
language:lua
return:(MediaTrack:)
params:
description:
[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetMouseCursorContext_Track
language:python
return:(MediaTrack:)
params:
description:
[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.
------
name:BR_GetNextGridDivision
language:c
return:(double:)
params:(double:position)
description:
[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_GetNextGridDivision":), (position:)
description:
[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.
------
name:reaper.BR_GetNextGridDivision
language:lua
return:(number:)
params:(number:position)
description:
[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.
------
name:BR_GetNextGridDivision
language:python
return:(Float:)
params:(Float:position)
description:
[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.
------
name:BR_GetPrevGridDivision
language:c
return:(double:)
params:(double:position)
description:
[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_GetPrevGridDivision":), (position:)
description:
[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.
------
name:reaper.BR_GetPrevGridDivision
language:lua
return:(number:)
params:(number:position)
description:
[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.
------
name:BR_GetPrevGridDivision
language:python
return:(Float:)
params:(Float:position)
description:
[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.
------
name:BR_GetSetTrackSendInfo
language:c
return:(double:)
params:(MediaTrack*:track), (int:category), (int:sendidx), (const char*:parmname), (bool:setNewValue), (double:newValue)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_SRCCHAN, I_DSTCHAN, I_MIDI_SRCCHAN, I_MIDI_DSTCHAN, I_MIDI_SRCBUS, I_MIDI_DSTBUS, I_MIDI_LINK_VOLPAN

description:
[BR] Get or set send attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
To set attribute, pass setNewValue as true
List of possible parameters:
B_MUTE : send mute state (1.0 if muted, otherwise 0.0)
B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
D_VOL : send volume (1.0=+0dB etc...)
D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
I_SRCCHAN : audio source starting channel index or -1 if audio send is
disabled (&1024=mono...note that in that case, when reading index,
you should do (index XOR 1024) to get starting channel index)
I_DSTCHAN : audio destination starting channel index (&1024=mono
(and in case of hardware output &512=rearoute)...note that in that
case, when reading index, you should do (index XOR (1024 OR 512)) to get
starting channel index)
I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI
Note: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_GetSetTrackSendInfo":), (MediaTrack:track), (int:category), (int:sendidx), ("parmname":), (bool:setNewValue), (newValue:)
description:
[BR] Get or set send attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
To set attribute, pass setNewValue as true
List of possible parameters:
B_MUTE : send mute state (1.0 if muted, otherwise 0.0)
B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
D_VOL : send volume (1.0=+0dB etc...)
D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
I_SRCCHAN : audio source starting channel index or -1 if audio send is
disabled (&1024=mono...note that in that case, when reading index,
you should do (index XOR 1024) to get starting channel index)
I_DSTCHAN : audio destination starting channel index (&1024=mono
(and in case of hardware output &512=rearoute)...note that in that
case, when reading index, you should do (index XOR (1024 OR 512)) to get
starting channel index)
I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI
Note: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.
------
name:reaper.BR_GetSetTrackSendInfo
language:lua
return:(number:)
params:(MediaTrack:track), (integer:category), (integer:sendidx), (string:parmname), (boolean:setNewValue), (number:newValue)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_SRCCHAN, I_DSTCHAN, I_MIDI_SRCCHAN, I_MIDI_DSTCHAN, I_MIDI_SRCBUS, I_MIDI_DSTBUS, I_MIDI_LINK_VOLPAN

description:
[BR] Get or set send attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
To set attribute, pass setNewValue as true
List of possible parameters:
B_MUTE : send mute state (1.0 if muted, otherwise 0.0)
B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
D_VOL : send volume (1.0=+0dB etc...)
D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
I_SRCCHAN : audio source starting channel index or -1 if audio send is
disabled (&1024=mono...note that in that case, when reading index,
you should do (index XOR 1024) to get starting channel index)
I_DSTCHAN : audio destination starting channel index (&1024=mono
(and in case of hardware output &512=rearoute)...note that in that
case, when reading index, you should do (index XOR (1024 OR 512)) to get
starting channel index)
I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI
Note: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.
------
name:BR_GetSetTrackSendInfo
language:python
return:(Float:)
params:(MediaTrack:track), (Int:category), (Int:sendidx), (String:parmname), (Boolean:setNewValue), (Float:newValue)
Valid input for parmname: B_MUTE, B_PHASE, B_MONO, D_VOL, D_PAN, D_PANLAW, I_SENDMODE, I_SRCCHAN, I_DSTCHAN, I_MIDI_SRCCHAN, I_MIDI_DSTCHAN, I_MIDI_SRCBUS, I_MIDI_DSTBUS, I_MIDI_LINK_VOLPAN

description:
[BR] Get or set send attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
To set attribute, pass setNewValue as true
List of possible parameters:
B_MUTE : send mute state (1.0 if muted, otherwise 0.0)
B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
D_VOL : send volume (1.0=+0dB etc...)
D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
I_SRCCHAN : audio source starting channel index or -1 if audio send is
disabled (&1024=mono...note that in that case, when reading index,
you should do (index XOR 1024) to get starting channel index)
I_DSTCHAN : audio destination starting channel index (&1024=mono
(and in case of hardware output &512=rearoute)...note that in that
case, when reading index, you should do (index XOR (1024 OR 512)) to get
starting channel index)
I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI
Note: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.
------
name:BR_GetTakeFXCount
language:c
return:(int:)
params:(MediaItem_Take*:take)
description:
[BR] Returns FX count for supplied take
------
name:extension_api
language:eel2
return:(int:)
params:("BR_GetTakeFXCount":), (MediaItem_Take:take)
description:
[BR] Returns FX count for supplied take
------
name:reaper.BR_GetTakeFXCount
language:lua
return:(integer:)
params:(MediaItem_Take:take)
description:
[BR] Returns FX count for supplied take
------
name:BR_GetTakeFXCount
language:python
return:(Int:)
params:(MediaItem_Take:take)
description:
[BR] Returns FX count for supplied take
------
name:BR_IsMidiOpenInInlineEditor
language:c
return:(bool:)
params:(MediaItem_Take*:take)
description:
[SWS] Check if take has MIDI inline editor open and returns true or false.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_IsMidiOpenInInlineEditor":), (MediaItem_Take:take)
description:
[SWS] Check if take has MIDI inline editor open and returns true or false.
------
name:reaper.BR_IsMidiOpenInInlineEditor
language:lua
return:(boolean:)
params:(MediaItem_Take:take)
description:
[SWS] Check if take has MIDI inline editor open and returns true or false.
------
name:BR_IsMidiOpenInInlineEditor
language:python
return:(Boolean:)
params:(MediaItem_Take:take)
description:
[SWS] Check if take has MIDI inline editor open and returns true or false.
------
name:BR_IsTakeMidi
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool*:inProjectMidiOut)
description:
[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI
source data, inProjectMidiOut will be true, otherwise false.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_IsTakeMidi":), (MediaItem_Take:take), (bool:&inProjectMidi)
description:
[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI
source data, inProjectMidiOut will be true, otherwise false.
------
name:reaper.BR_IsTakeMidi
language:lua
return:(boolean:retval),(boolean:inProjectMidi)
params:(MediaItem_Take:take)
description:
[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI
source data, inProjectMidiOut will be true, otherwise false.
------
name:BR_IsTakeMidi
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Boolean:inProjectMidiOut)
params:(take:), (inProjectMidiOut:)
description:
[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI
source data, inProjectMidiOut will be true, otherwise false.
------
name:BR_ItemAtMouseCursor
language:c
return:(MediaItem*:)
params:(double*:positionOut)
description:
[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.
------
name:extension_api
language:eel2
return:(MediaItem:)
params:("BR_ItemAtMouseCursor":), (&position:)
description:
[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.
------
name:reaper.BR_ItemAtMouseCursor
language:lua
return:(MediaItem:retval),(number:position)
params:
description:
[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.
------
name:BR_ItemAtMouseCursor
language:python
return:(MediaItem:retval),(Float:positionOut)
params:(positionOut:)
description:
[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.
------
name:BR_MIDI_CCLaneRemove
language:c
return:(bool:)
params:(void*:midiEditor), (int:laneId)
description:
[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_MIDI_CCLaneRemove":), (void*:midiEditor), (int:laneId)
description:
[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success
------
name:reaper.BR_MIDI_CCLaneRemove
language:lua
return:(boolean:)
params:(identifier:midiEditor), (integer:laneId)
description:
[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success
------
name:BR_MIDI_CCLaneRemove
language:python
return:(Boolean:)
params:(void:midiEditor), (Int:laneId)
description:
[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success
------
name:BR_MIDI_CCLaneReplace
language:c
return:(bool:)
params:(void*:midiEditor), (int:laneId), (int:newCC)
description:
[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.
Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity,
0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program
select, 0x205=text, 0x206=sysex, 0x207
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_MIDI_CCLaneReplace":), (void*:midiEditor), (int:laneId), (int:newCC)
description:
[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.
Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity,
0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program
select, 0x205=text, 0x206=sysex, 0x207
------
name:reaper.BR_MIDI_CCLaneReplace
language:lua
return:(boolean:)
params:(identifier:midiEditor), (integer:laneId), (integer:newCC)
description:
[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.
Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity,
0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program
select, 0x205=text, 0x206=sysex, 0x207
------
name:BR_MIDI_CCLaneReplace
language:python
return:(Boolean:)
params:(void:midiEditor), (Int:laneId), (Int:newCC)
description:
[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.
Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity,
0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program
select, 0x205=text, 0x206=sysex, 0x207
------
name:BR_PositionAtMouseCursor
language:c
return:(double:)
params:(bool:checkRuler)
description:
[BR] Get position at mouse cursor. To check ruler along with arrange,
pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.
------
name:extension_api
language:eel2
return:(double:)
params:("BR_PositionAtMouseCursor":), (bool:checkRuler)
description:
[BR] Get position at mouse cursor. To check ruler along with arrange,
pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.
------
name:reaper.BR_PositionAtMouseCursor
language:lua
return:(number:)
params:(boolean:checkRuler)
description:
[BR] Get position at mouse cursor. To check ruler along with arrange,
pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.
------
name:BR_PositionAtMouseCursor
language:python
return:(Float:)
params:(Boolean:checkRuler)
description:
[BR] Get position at mouse cursor. To check ruler along with arrange,
pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.
------
name:BR_SetArrangeView
language:c
return:(void:)
params:(ReaProject*:proj), (double:startTime), (double:endTime)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.
------
name:extension_api
language:eel2
return:
params:("BR_SetArrangeView":), (ReaProject:proj), (startTime:), (endTime:)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.
------
name:reaper.BR_SetArrangeView
language:lua
return:
params:(ReaProject:proj), (number:startTime), (number:endTime)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.
------
name:BR_SetArrangeView
language:python
return:
params:(ReaProject:proj), (Float:startTime), (Float:endTime)
description:
[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.
------
name:BR_SetItemEdges
language:c
return:(bool:)
params:(MediaItem*:item), (double:startTime), (double:endTime)
description:
[BR] Set item start and end edges' position - returns true in case of any changes
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_SetItemEdges":), (MediaItem:item), (startTime:), (endTime:)
description:
[BR] Set item start and end edges' position - returns true in case of any changes
------
name:reaper.BR_SetItemEdges
language:lua
return:(boolean:)
params:(MediaItem:item), (number:startTime), (number:endTime)
description:
[BR] Set item start and end edges' position - returns true in case of any changes
------
name:BR_SetItemEdges
language:python
return:(Boolean:)
params:(MediaItem:item), (Float:startTime), (Float:endTime)
description:
[BR] Set item start and end edges' position - returns true in case of any changes
------
name:BR_SetMediaItemImageResource
language:c
return:(void:)
params:(MediaItem*:item), (const char*:imageIn), (int:imageFlags)
description:
[BR] Set image resource and it's flags for a given item. To clear
current image resource, pass imageIn as . To get image resource, see BR_GetMediaItemImageResource.
------
name:extension_api
language:eel2
return:
params:("BR_SetMediaItemImageResource":), (MediaItem:item), ("imageIn":), (int:imageFlags)
description:
[BR] Set image resource and it's flags for a given item. To clear
current image resource, pass imageIn as . To get image resource, see BR_GetMediaItemImageResource.
------
name:reaper.BR_SetMediaItemImageResource
language:lua
return:
params:(MediaItem:item), (string:imageIn), (integer:imageFlags)
description:
[BR] Set image resource and it's flags for a given item. To clear
current image resource, pass imageIn as . To get image resource, see BR_GetMediaItemImageResource.
------
name:BR_SetMediaItemImageResource
language:python
return:
params:(MediaItem:item), (String:imageIn), (Int:imageFlags)
description:
[BR] Set image resource and it's flags for a given item. To clear
current image resource, pass imageIn as . To get image resource, see BR_GetMediaItemImageResource.
------
name:BR_SetMediaSourceProperties
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:section), (double:start), (double:length), (double:fade), (bool:reverse)
description:
[BR] Set take media source properties. Returns false if take can't have
them (MIDI items etc.). Section parameters have to be valid only when
passing section=true.
To get source properties, see BR_GetMediaSourceProperties.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_SetMediaSourceProperties":), (MediaItem_Take:take), (bool:section), (start:), (length:), (fade:), (bool:reverse)
description:
[BR] Set take media source properties. Returns false if take can't have
them (MIDI items etc.). Section parameters have to be valid only when
passing section=true.
To get source properties, see BR_GetMediaSourceProperties.
------
name:reaper.BR_SetMediaSourceProperties
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (boolean:section), (number:start), (number:length), (number:fade), (boolean:reverse)
description:
[BR] Set take media source properties. Returns false if take can't have
them (MIDI items etc.). Section parameters have to be valid only when
passing section=true.
To get source properties, see BR_GetMediaSourceProperties.
------
name:BR_SetMediaSourceProperties
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Boolean:section), (Float:start), (Float:length), (Float:fade), (Boolean:reverse)
description:
[BR] Set take media source properties. Returns false if take can't have
them (MIDI items etc.). Section parameters have to be valid only when
passing section=true.
To get source properties, see BR_GetMediaSourceProperties.
------
name:BR_SetMediaTrackLayouts
language:c
return:(bool:)
params:(MediaTrack*:track), (const char*:mcpLayoutNameIn), (const char*:tcpLayoutNameIn)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Set media track layouts for MCP and TCP. To set
default layout, pass empty string ("") as layout name. In case layouts
were successfully set, returns true (if layouts are already set to
supplied layout names, it will return false since no changes were made).
To get media track layouts, see BR_GetMediaTrackLayouts.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_SetMediaTrackLayouts":), (MediaTrack:track), ("mcpLayoutNameIn":), ("tcpLayoutNameIn":)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Set media track layouts for MCP and TCP. To set
default layout, pass empty string ("") as layout name. In case layouts
were successfully set, returns true (if layouts are already set to
supplied layout names, it will return false since no changes were made).
To get media track layouts, see BR_GetMediaTrackLayouts.
------
name:reaper.BR_SetMediaTrackLayouts
language:lua
return:(boolean:)
params:(MediaTrack:track), (string:mcpLayoutNameIn), (string:tcpLayoutNameIn)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Set media track layouts for MCP and TCP. To set
default layout, pass empty string ("") as layout name. In case layouts
were successfully set, returns true (if layouts are already set to
supplied layout names, it will return false since no changes were made).
To get media track layouts, see BR_GetMediaTrackLayouts.
------
name:BR_SetMediaTrackLayouts
language:python
return:(Boolean:)
params:(MediaTrack:track), (String:mcpLayoutNameIn), (String:tcpLayoutNameIn)
description:
[BR] Deprecated, see GetSetMediaTrackInfo
(REAPER v5.02+). Set media track layouts for MCP and TCP. To set
default layout, pass empty string ("") as layout name. In case layouts
were successfully set, returns true (if layouts are already set to
supplied layout names, it will return false since no changes were made).
To get media track layouts, see BR_GetMediaTrackLayouts.
------
name:BR_SetMidiTakeTempoInfo
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:ignoreProjTempo), (double:bpm), (int:num), (int:den)
description:
[BR] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_SetMidiTakeTempoInfo":), (MediaItem_Take:take), (bool:ignoreProjTempo), (bpm:), (int:num), (int:den)
description:
[BR] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.
------
name:reaper.BR_SetMidiTakeTempoInfo
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (boolean:ignoreProjTempo), (number:bpm), (integer:num), (integer:den)
description:
[BR] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.
------
name:BR_SetMidiTakeTempoInfo
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (Boolean:ignoreProjTempo), (Float:bpm), (Int:num), (Int:den)
description:
[BR] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.
------
name:BR_SetTakeSourceFromFile
language:c
return:(bool:)
params:(MediaItem_Take*:take), (const char*:filenameIn), (bool:inProjectData)
description:
[BR] Set new take source from file. To import MIDI file as in-project
source data pass inProjectData=true. Returns false if failed.
Any take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.
Note: To set source from existing take, see SNM_GetSetSourceState2.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_SetTakeSourceFromFile":), (MediaItem_Take:take), ("filenameIn":), (bool:inProjectData)
description:
[BR] Set new take source from file. To import MIDI file as in-project
source data pass inProjectData=true. Returns false if failed.
Any take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.
Note: To set source from existing take, see SNM_GetSetSourceState2.
------
name:reaper.BR_SetTakeSourceFromFile
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (string:filenameIn), (boolean:inProjectData)
description:
[BR] Set new take source from file. To import MIDI file as in-project
source data pass inProjectData=true. Returns false if failed.
Any take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.
Note: To set source from existing take, see SNM_GetSetSourceState2.
------
name:BR_SetTakeSourceFromFile
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (String:filenameIn), (Boolean:inProjectData)
description:
[BR] Set new take source from file. To import MIDI file as in-project
source data pass inProjectData=true. Returns false if failed.
Any take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.
Note: To set source from existing take, see SNM_GetSetSourceState2.
------
name:BR_SetTakeSourceFromFile2
language:c
return:(bool:)
params:(MediaItem_Take*:take), (const char*:filenameIn), (bool:inProjectData), (bool:keepSourceProperties)
description:
[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_SetTakeSourceFromFile2":), (MediaItem_Take:take), ("filenameIn":), (bool:inProjectData), (bool:keepSourceProperties)
description:
[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.
------
name:reaper.BR_SetTakeSourceFromFile2
language:lua
return:(boolean:)
params:(MediaItem_Take:take), (string:filenameIn), (boolean:inProjectData), (boolean:keepSourceProperties)
description:
[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.
------
name:BR_SetTakeSourceFromFile2
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (String:filenameIn), (Boolean:inProjectData), (Boolean:keepSourceProperties)
description:
[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.
------
name:BR_TakeAtMouseCursor
language:c
return:(MediaItem_Take*:)
params:(double*:positionOut)
description:
[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.
------
name:extension_api
language:eel2
return:(MediaItem_Take:)
params:("BR_TakeAtMouseCursor":), (&position:)
description:
[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.
------
name:reaper.BR_TakeAtMouseCursor
language:lua
return:(MediaItem_Take:retval),(number:position)
params:
description:
[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.
------
name:BR_TakeAtMouseCursor
language:python
return:(MediaItem_Take:retval),(Float:positionOut)
params:(positionOut:)
description:
[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.
------
name:BR_TrackAtMouseCursor
language:c
return:(MediaTrack*:)
params:(int*:contextOut), (double*:positionOut)
description:
[BR] Get track under mouse cursor.
Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.
Position will hold mouse cursor position in arrange if applicable.
------
name:extension_api
language:eel2
return:(MediaTrack:)
params:("BR_TrackAtMouseCursor":), (int:&context), (&position:)
description:
[BR] Get track under mouse cursor.
Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.
Position will hold mouse cursor position in arrange if applicable.
------
name:reaper.BR_TrackAtMouseCursor
language:lua
return:(MediaTrack:retval),(number:context),(number:position)
params:
description:
[BR] Get track under mouse cursor.
Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.
Position will hold mouse cursor position in arrange if applicable.
------
name:BR_TrackAtMouseCursor
language:python
return:(MediaTrack:retval),(Int:contextOut),(Float:positionOut)
params:(contextOut:), (positionOut:)
description:
[BR] Get track under mouse cursor.
Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.
Position will hold mouse cursor position in arrange if applicable.
------
name:BR_TrackFX_GetFXModuleName
language:c
return:(bool:)
params:(MediaTrack*:track), (int:fx), (char* :nameOut), (int :nameOutSz)
description:
[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_TrackFX_GetFXModuleName":), (MediaTrack:track), (int:fx), (#:name), (int :name)
description:
[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.
------
name:reaper.BR_TrackFX_GetFXModuleName
language:lua
return:(boolean:retval),(string :name)
params:(MediaTrack:track), (integer:fx)
description:
[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.
------
name:BR_TrackFX_GetFXModuleName
language:python
return:(Boolean:retval),(MediaTrack:track),(Int:fx),(String :nameOut),(Int :nameOutSz)
params:(track:), (fx:), (:nameOut), (:nameOutSz)
description:
[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.
------
name:BR_Win32_CB_FindString
language:c
return:(int:)
params:(void*:comboBoxHwnd), (int:startId), (const char*:string)
description:
[BR] Equivalent to win32 API ComboBox_FindString().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_CB_FindString":), (void*:comboBoxHwnd), (int:startId), ("string":)
description:
[BR] Equivalent to win32 API ComboBox_FindString().
------
name:reaper.BR_Win32_CB_FindString
language:lua
return:(integer:)
params:(identifier:comboBoxHwnd), (integer:startId), (string:string)
description:
[BR] Equivalent to win32 API ComboBox_FindString().
------
name:BR_Win32_CB_FindString
language:python
return:(Int:)
params:(void:comboBoxHwnd), (Int:startId), (String:string)
description:
[BR] Equivalent to win32 API ComboBox_FindString().
------
name:BR_Win32_CB_FindStringExact
language:c
return:(int:)
params:(void*:comboBoxHwnd), (int:startId), (const char*:string)
description:
[BR] Equivalent to win32 API ComboBox_FindStringExact().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_CB_FindStringExact":), (void*:comboBoxHwnd), (int:startId), ("string":)
description:
[BR] Equivalent to win32 API ComboBox_FindStringExact().
------
name:reaper.BR_Win32_CB_FindStringExact
language:lua
return:(integer:)
params:(identifier:comboBoxHwnd), (integer:startId), (string:string)
description:
[BR] Equivalent to win32 API ComboBox_FindStringExact().
------
name:BR_Win32_CB_FindStringExact
language:python
return:(Int:)
params:(void:comboBoxHwnd), (Int:startId), (String:string)
description:
[BR] Equivalent to win32 API ComboBox_FindStringExact().
------
name:BR_Win32_ClientToScreen
language:c
return:(void:)
params:(void*:hwnd), (int:xIn), (int:yIn), (int*:xOut), (int*:yOut)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:extension_api
language:eel2
return:
params:("BR_Win32_ClientToScreen":), (void*:hwnd), (int:xIn), (int:yIn), (int:&x), (int:&y)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:reaper.BR_Win32_ClientToScreen
language:lua
return:(number:x),(number:y)
params:(identifier:hwnd), (integer:xIn), (integer:yIn)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:BR_Win32_ClientToScreen
language:python
return:(void:hwnd),(Int:xIn),(Int:yIn),(Int:xOut),(Int:yOut)
params:(hwnd:), (xIn:), (yIn:), (xOut:), (yOut:)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:BR_Win32_FindWindowEx
language:c
return:(void*:)
params:(const char*:hwndParent), (const char*:hwndChildAfter), (const char*:className), (const char*:windowName), (bool:searchClass), (bool:searchName)
description:
[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't
allow passing NULL (None in Python, nil in Lua etc...) parameters, to
search by supplied class or name set searchClass and searchName
accordingly. HWND parameters should be passed as either "0" to signify
NULL or as string obtained from BR_Win32_HwndToString.
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_FindWindowEx":), ("hwndParent":), ("hwndChildAfter":), ("className":), ("windowName":), (bool:searchClass), (bool:searchName)
description:
[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't
allow passing NULL (None in Python, nil in Lua etc...) parameters, to
search by supplied class or name set searchClass and searchName
accordingly. HWND parameters should be passed as either "0" to signify
NULL or as string obtained from BR_Win32_HwndToString.
------
name:reaper.BR_Win32_FindWindowEx
language:lua
return:(identifier:)
params:(string:hwndParent), (string:hwndChildAfter), (string:className), (string:windowName), (boolean:searchClass), (boolean:searchName)
description:
[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't
allow passing NULL (None in Python, nil in Lua etc...) parameters, to
search by supplied class or name set searchClass and searchName
accordingly. HWND parameters should be passed as either "0" to signify
NULL or as string obtained from BR_Win32_HwndToString.
------
name:BR_Win32_FindWindowEx
language:python
return:(void:)
params:(String:hwndParent), (String:hwndChildAfter), (String:className), (String:windowName), (Boolean:searchClass), (Boolean:searchName)
description:
[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't
allow passing NULL (None in Python, nil in Lua etc...) parameters, to
search by supplied class or name set searchClass and searchName
accordingly. HWND parameters should be passed as either "0" to signify
NULL or as string obtained from BR_Win32_HwndToString.
------
name:BR_Win32_GET_X_LPARAM
language:c
return:(int:)
params:(int:lParam)
description:
[BR] Equivalent to win32 API GET_X_LPARAM().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_GET_X_LPARAM":), (int:lParam)
description:
[BR] Equivalent to win32 API GET_X_LPARAM().
------
name:reaper.BR_Win32_GET_X_LPARAM
language:lua
return:(integer:)
params:(integer:lParam)
description:
[BR] Equivalent to win32 API GET_X_LPARAM().
------
name:BR_Win32_GET_X_LPARAM
language:python
return:(Int:)
params:(Int:lParam)
description:
[BR] Equivalent to win32 API GET_X_LPARAM().
------
name:BR_Win32_GET_Y_LPARAM
language:c
return:(int:)
params:(int:lParam)
description:
[BR] Equivalent to win32 API GET_Y_LPARAM().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_GET_Y_LPARAM":), (int:lParam)
description:
[BR] Equivalent to win32 API GET_Y_LPARAM().
------
name:reaper.BR_Win32_GET_Y_LPARAM
language:lua
return:(integer:)
params:(integer:lParam)
description:
[BR] Equivalent to win32 API GET_Y_LPARAM().
------
name:BR_Win32_GET_Y_LPARAM
language:python
return:(Int:)
params:(Int:lParam)
description:
[BR] Equivalent to win32 API GET_Y_LPARAM().
------
name:BR_Win32_GetConstant
language:c
return:(int:)
params:(const char*:constantName)
description:
[BR] Returns various constants needed for BR_Win32 functions.
Supported constants are:
CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL
EM_SETSEL
GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER
GWL_STYLE
SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL
SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER
VK_DOWN, VK_UP
WM_CLOSE, WM_KEYDOWN
WS_MAXIMIZE, WS_OVERLAPPEDWINDOW
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_GetConstant":), ("constantName":)
description:
[BR] Returns various constants needed for BR_Win32 functions.
Supported constants are:
CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL
EM_SETSEL
GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER
GWL_STYLE
SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL
SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER
VK_DOWN, VK_UP
WM_CLOSE, WM_KEYDOWN
WS_MAXIMIZE, WS_OVERLAPPEDWINDOW
------
name:reaper.BR_Win32_GetConstant
language:lua
return:(integer:)
params:(string:constantName)
description:
[BR] Returns various constants needed for BR_Win32 functions.
Supported constants are:
CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL
EM_SETSEL
GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER
GWL_STYLE
SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL
SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER
VK_DOWN, VK_UP
WM_CLOSE, WM_KEYDOWN
WS_MAXIMIZE, WS_OVERLAPPEDWINDOW
------
name:BR_Win32_GetConstant
language:python
return:(Int:)
params:(String:constantName)
description:
[BR] Returns various constants needed for BR_Win32 functions.
Supported constants are:
CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL
EM_SETSEL
GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER
GWL_STYLE
SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL
SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER
VK_DOWN, VK_UP
WM_CLOSE, WM_KEYDOWN
WS_MAXIMIZE, WS_OVERLAPPEDWINDOW
------
name:BR_Win32_GetCursorPos
language:c
return:(bool:)
params:(int*:xOut), (int*:yOut)
description:
[BR] Equivalent to win32 API GetCursorPos().
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_Win32_GetCursorPos":), (int:&x), (int:&y)
description:
[BR] Equivalent to win32 API GetCursorPos().
------
name:reaper.BR_Win32_GetCursorPos
language:lua
return:(boolean:retval),(number:x),(number:y)
params:
description:
[BR] Equivalent to win32 API GetCursorPos().
------
name:BR_Win32_GetCursorPos
language:python
return:(Boolean:retval),(Int:xOut),(Int:yOut)
params:(xOut:), (yOut:)
description:
[BR] Equivalent to win32 API GetCursorPos().
------
name:BR_Win32_GetFocus
language:c
return:(void*:)
params:
description:
[BR] Equivalent to win32 API GetFocus().
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_GetFocus":)
description:
[BR] Equivalent to win32 API GetFocus().
------
name:reaper.BR_Win32_GetFocus
language:lua
return:(identifier:)
params:
description:
[BR] Equivalent to win32 API GetFocus().
------
name:BR_Win32_GetFocus
language:python
return:(void:)
params:
description:
[BR] Equivalent to win32 API GetFocus().
------
name:BR_Win32_GetForegroundWindow
language:c
return:(void*:)
params:
description:
[BR] Equivalent to win32 API GetForegroundWindow().
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_GetForegroundWindow":)
description:
[BR] Equivalent to win32 API GetForegroundWindow().
------
name:reaper.BR_Win32_GetForegroundWindow
language:lua
return:(identifier:)
params:
description:
[BR] Equivalent to win32 API GetForegroundWindow().
------
name:BR_Win32_GetForegroundWindow
language:python
return:(void:)
params:
description:
[BR] Equivalent to win32 API GetForegroundWindow().
------
name:BR_Win32_GetMainHwnd
language:c
return:(void*:)
params:
description:
[BR] Alternative to GetMainHwnd. REAPER seems
to have problems with extensions using HWND type for exported functions
so all BR_Win32 functions use void* instead of HWND type
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_GetMainHwnd":)
description:
[BR] Alternative to GetMainHwnd. REAPER seems
to have problems with extensions using HWND type for exported functions
so all BR_Win32 functions use void* instead of HWND type
------
name:reaper.BR_Win32_GetMainHwnd
language:lua
return:(identifier:)
params:
description:
[BR] Alternative to GetMainHwnd. REAPER seems
to have problems with extensions using HWND type for exported functions
so all BR_Win32 functions use void* instead of HWND type
------
name:BR_Win32_GetMainHwnd
language:python
return:(void:)
params:
description:
[BR] Alternative to GetMainHwnd. REAPER seems
to have problems with extensions using HWND type for exported functions
so all BR_Win32 functions use void* instead of HWND type
------
name:BR_Win32_GetMixerHwnd
language:c
return:(void*:)
params:(bool*:isDockedOut)
description:
[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_GetMixerHwnd":), (bool:&isDocked)
description:
[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked
------
name:reaper.BR_Win32_GetMixerHwnd
language:lua
return:(identifier:retval),(boolean:isDocked)
params:
description:
[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked
------
name:BR_Win32_GetMixerHwnd
language:python
return:(void:retval),(Boolean:isDockedOut)
params:(isDockedOut:)
description:
[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked
------
name:BR_Win32_GetMonitorRectFromRect
language:c
return:(void:)
params:(bool:workingAreaOnly), (int:leftIn), (int:topIn), (int:rightIn), (int:bottomIn), (int*:leftOut), (int*:topOut), (int*:rightOut), (int*:bottomOut)
description:
[BR] Get coordinates for screen which is nearest to supplied
coordinates. Pass workingAreaOnly as true to get screen coordinates
excluding taskbar (or menu bar on OSX).
------
name:extension_api
language:eel2
return:
params:("BR_Win32_GetMonitorRectFromRect":), (bool:workingAreaOnly), (int:leftIn), (int:topIn), (int:rightIn), (int:bottomIn), (int:&left), (int:&top), (int:&right), (int:&bottom)
description:
[BR] Get coordinates for screen which is nearest to supplied
coordinates. Pass workingAreaOnly as true to get screen coordinates
excluding taskbar (or menu bar on OSX).
------
name:reaper.BR_Win32_GetMonitorRectFromRect
language:lua
return:(number:left),(number:top),(number:right),(number:bottom)
params:(boolean:workingAreaOnly), (integer:leftIn), (integer:topIn), (integer:rightIn), (integer:bottomIn)
description:
[BR] Get coordinates for screen which is nearest to supplied
coordinates. Pass workingAreaOnly as true to get screen coordinates
excluding taskbar (or menu bar on OSX).
------
name:BR_Win32_GetMonitorRectFromRect
language:python
return:(Boolean:workingAreaOnly),(Int:leftIn),(Int:topIn),(Int:rightIn),(Int:bottomIn),(Int:leftOut),(Int:topOut),(Int:rightOut),(Int:bottomOut)
params:(workingAreaOnly:), (leftIn:), (topIn:), (rightIn:), (bottomIn:), (leftOut:), (topOut:), (rightOut:), (bottomOut:)
description:
[BR] Get coordinates for screen which is nearest to supplied
coordinates. Pass workingAreaOnly as true to get screen coordinates
excluding taskbar (or menu bar on OSX).
------
name:BR_Win32_GetParent
language:c
return:(void*:)
params:(void*:hwnd)
description:
[BR] Equivalent to win32 API GetParent().
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_GetParent":), (void*:hwnd)
description:
[BR] Equivalent to win32 API GetParent().
------
name:reaper.BR_Win32_GetParent
language:lua
return:(identifier:)
params:(identifier:hwnd)
description:
[BR] Equivalent to win32 API GetParent().
------
name:BR_Win32_GetParent
language:python
return:(void:)
params:(void:hwnd)
description:
[BR] Equivalent to win32 API GetParent().
------
name:BR_Win32_GetPrivateProfileString
language:c
return:(int:)
params:(const char*:sectionName), (const char*:keyName), (const char*:defaultString), (const char*:filePath), (char*:stringOut), (int:stringOut_sz)
description:
[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_GetPrivateProfileString":), ("sectionName":), ("keyName":), ("defaultString":), ("filePath":), (#string:)
description:
[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini
------
name:reaper.BR_Win32_GetPrivateProfileString
language:lua
return:(integer:retval),(string:string)
params:(string:sectionName), (string:keyName), (string:defaultString), (string:filePath)
description:
[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini
------
name:BR_Win32_GetPrivateProfileString
language:python
return:(Int:retval),(String:sectionName),(String:keyName),(String:defaultString),(String:filePath),(String:stringOut),(Int:stringOut_sz)
params:(sectionName:), (keyName:), (defaultString:), (filePath:), (stringOut:), (stringOut_sz:)
description:
[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini
------
name:BR_Win32_GetWindow
language:c
return:(void*:)
params:(void*:hwnd), (int:cmd)
description:
[BR] Equivalent to win32 API GetWindow().
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_GetWindow":), (void*:hwnd), (int:cmd)
description:
[BR] Equivalent to win32 API GetWindow().
------
name:reaper.BR_Win32_GetWindow
language:lua
return:(identifier:)
params:(identifier:hwnd), (integer:cmd)
description:
[BR] Equivalent to win32 API GetWindow().
------
name:BR_Win32_GetWindow
language:python
return:(void:)
params:(void:hwnd), (Int:cmd)
description:
[BR] Equivalent to win32 API GetWindow().
------
name:BR_Win32_GetWindowLong
language:c
return:(int:)
params:(void*:hwnd), (int:index)
description:
[BR] Equivalent to win32 API GetWindowLong().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_GetWindowLong":), (void*:hwnd), (int:index)
description:
[BR] Equivalent to win32 API GetWindowLong().
------
name:reaper.BR_Win32_GetWindowLong
language:lua
return:(integer:)
params:(identifier:hwnd), (integer:index)
description:
[BR] Equivalent to win32 API GetWindowLong().
------
name:BR_Win32_GetWindowLong
language:python
return:(Int:)
params:(void:hwnd), (Int:index)
description:
[BR] Equivalent to win32 API GetWindowLong().
------
name:BR_Win32_GetWindowRect
language:c
return:(bool:)
params:(void*:hwnd), (int*:leftOut), (int*:topOut), (int*:rightOut), (int*:bottomOut)
description:
[BR] Equivalent to win32 API GetWindowRect().
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_Win32_GetWindowRect":), (void*:hwnd), (int:&left), (int:&top), (int:&right), (int:&bottom)
description:
[BR] Equivalent to win32 API GetWindowRect().
------
name:reaper.BR_Win32_GetWindowRect
language:lua
return:(boolean:retval),(number:left),(number:top),(number:right),(number:bottom)
params:(identifier:hwnd)
description:
[BR] Equivalent to win32 API GetWindowRect().
------
name:BR_Win32_GetWindowRect
language:python
return:(Boolean:retval),(void:hwnd),(Int:leftOut),(Int:topOut),(Int:rightOut),(Int:bottomOut)
params:(hwnd:), (leftOut:), (topOut:), (rightOut:), (bottomOut:)
description:
[BR] Equivalent to win32 API GetWindowRect().
------
name:BR_Win32_GetWindowText
language:c
return:(int:)
params:(void*:hwnd), (char*:textOut), (int:textOut_sz)
description:
[BR] Equivalent to win32 API GetWindowText().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_GetWindowText":), (void*:hwnd), (#text:)
description:
[BR] Equivalent to win32 API GetWindowText().
------
name:reaper.BR_Win32_GetWindowText
language:lua
return:(integer:retval),(string:text)
params:(identifier:hwnd)
description:
[BR] Equivalent to win32 API GetWindowText().
------
name:BR_Win32_GetWindowText
language:python
return:(Int:retval),(void:hwnd),(String:textOut),(Int:textOut_sz)
params:(hwnd:), (textOut:), (textOut_sz:)
description:
[BR] Equivalent to win32 API GetWindowText().
------
name:BR_Win32_HIBYTE
language:c
return:(int:)
params:(int:value)
description:
[BR] Equivalent to win32 API HIBYTE().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_HIBYTE":), (int:value)
description:
[BR] Equivalent to win32 API HIBYTE().
------
name:reaper.BR_Win32_HIBYTE
language:lua
return:(integer:)
params:(integer:value)
description:
[BR] Equivalent to win32 API HIBYTE().
------
name:BR_Win32_HIBYTE
language:python
return:(Int:)
params:(Int:value)
description:
[BR] Equivalent to win32 API HIBYTE().
------
name:BR_Win32_HIWORD
language:c
return:(int:)
params:(int:value)
description:
[BR] Equivalent to win32 API HIWORD().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_HIWORD":), (int:value)
description:
[BR] Equivalent to win32 API HIWORD().
------
name:reaper.BR_Win32_HIWORD
language:lua
return:(integer:)
params:(integer:value)
description:
[BR] Equivalent to win32 API HIWORD().
------
name:BR_Win32_HIWORD
language:python
return:(Int:)
params:(Int:value)
description:
[BR] Equivalent to win32 API HIWORD().
------
name:BR_Win32_HwndToString
language:c
return:(void:)
params:(void*:hwnd), (char*:stringOut), (int:stringOut_sz)
description:
[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.
------
name:extension_api
language:eel2
return:
params:("BR_Win32_HwndToString":), (void*:hwnd), (#string:)
description:
[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.
------
name:reaper.BR_Win32_HwndToString
language:lua
return:(string:string)
params:(identifier:hwnd)
description:
[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.
------
name:BR_Win32_HwndToString
language:python
return:(void:hwnd),(String:stringOut),(Int:stringOut_sz)
params:(hwnd:), (stringOut:), (stringOut_sz:)
description:
[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.
------
name:BR_Win32_IsWindow
language:c
return:(bool:)
params:(void*:hwnd)
description:
[BR] Equivalent to win32 API IsWindow().
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_Win32_IsWindow":), (void*:hwnd)
description:
[BR] Equivalent to win32 API IsWindow().
------
name:reaper.BR_Win32_IsWindow
language:lua
return:(boolean:)
params:(identifier:hwnd)
description:
[BR] Equivalent to win32 API IsWindow().
------
name:BR_Win32_IsWindow
language:python
return:(Boolean:)
params:(void:hwnd)
description:
[BR] Equivalent to win32 API IsWindow().
------
name:BR_Win32_IsWindowVisible
language:c
return:(bool:)
params:(void*:hwnd)
description:
[BR] Equivalent to win32 API IsWindowVisible().
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_Win32_IsWindowVisible":), (void*:hwnd)
description:
[BR] Equivalent to win32 API IsWindowVisible().
------
name:reaper.BR_Win32_IsWindowVisible
language:lua
return:(boolean:)
params:(identifier:hwnd)
description:
[BR] Equivalent to win32 API IsWindowVisible().
------
name:BR_Win32_IsWindowVisible
language:python
return:(Boolean:)
params:(void:hwnd)
description:
[BR] Equivalent to win32 API IsWindowVisible().
------
name:BR_Win32_LOBYTE
language:c
return:(int:)
params:(int:value)
description:
[BR] Equivalent to win32 API LOBYTE().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_LOBYTE":), (int:value)
description:
[BR] Equivalent to win32 API LOBYTE().
------
name:reaper.BR_Win32_LOBYTE
language:lua
return:(integer:)
params:(integer:value)
description:
[BR] Equivalent to win32 API LOBYTE().
------
name:BR_Win32_LOBYTE
language:python
return:(Int:)
params:(Int:value)
description:
[BR] Equivalent to win32 API LOBYTE().
------
name:BR_Win32_LOWORD
language:c
return:(int:)
params:(int:value)
description:
[BR] Equivalent to win32 API LOWORD().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_LOWORD":), (int:value)
description:
[BR] Equivalent to win32 API LOWORD().
------
name:reaper.BR_Win32_LOWORD
language:lua
return:(integer:)
params:(integer:value)
description:
[BR] Equivalent to win32 API LOWORD().
------
name:BR_Win32_LOWORD
language:python
return:(Int:)
params:(Int:value)
description:
[BR] Equivalent to win32 API LOWORD().
------
name:BR_Win32_MAKELONG
language:c
return:(int:)
params:(int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKELONG().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_MAKELONG":), (int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKELONG().
------
name:reaper.BR_Win32_MAKELONG
language:lua
return:(integer:)
params:(integer:low), (integer:high)
description:
[BR] Equivalent to win32 API MAKELONG().
------
name:BR_Win32_MAKELONG
language:python
return:(Int:)
params:(Int:low), (Int:high)
description:
[BR] Equivalent to win32 API MAKELONG().
------
name:BR_Win32_MAKELPARAM
language:c
return:(int:)
params:(int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKELPARAM().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_MAKELPARAM":), (int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKELPARAM().
------
name:reaper.BR_Win32_MAKELPARAM
language:lua
return:(integer:)
params:(integer:low), (integer:high)
description:
[BR] Equivalent to win32 API MAKELPARAM().
------
name:BR_Win32_MAKELPARAM
language:python
return:(Int:)
params:(Int:low), (Int:high)
description:
[BR] Equivalent to win32 API MAKELPARAM().
------
name:BR_Win32_MAKELRESULT
language:c
return:(int:)
params:(int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKELRESULT().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_MAKELRESULT":), (int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKELRESULT().
------
name:reaper.BR_Win32_MAKELRESULT
language:lua
return:(integer:)
params:(integer:low), (integer:high)
description:
[BR] Equivalent to win32 API MAKELRESULT().
------
name:BR_Win32_MAKELRESULT
language:python
return:(Int:)
params:(Int:low), (Int:high)
description:
[BR] Equivalent to win32 API MAKELRESULT().
------
name:BR_Win32_MAKEWORD
language:c
return:(int:)
params:(int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKEWORD().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_MAKEWORD":), (int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKEWORD().
------
name:reaper.BR_Win32_MAKEWORD
language:lua
return:(integer:)
params:(integer:low), (integer:high)
description:
[BR] Equivalent to win32 API MAKEWORD().
------
name:BR_Win32_MAKEWORD
language:python
return:(Int:)
params:(Int:low), (Int:high)
description:
[BR] Equivalent to win32 API MAKEWORD().
------
name:BR_Win32_MAKEWPARAM
language:c
return:(int:)
params:(int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKEWPARAM().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_MAKEWPARAM":), (int:low), (int:high)
description:
[BR] Equivalent to win32 API MAKEWPARAM().
------
name:reaper.BR_Win32_MAKEWPARAM
language:lua
return:(integer:)
params:(integer:low), (integer:high)
description:
[BR] Equivalent to win32 API MAKEWPARAM().
------
name:BR_Win32_MAKEWPARAM
language:python
return:(Int:)
params:(Int:low), (Int:high)
description:
[BR] Equivalent to win32 API MAKEWPARAM().
------
name:BR_Win32_MIDIEditor_GetActive
language:c
return:(void*:)
params:
description:
[BR] Alternative to MIDIEditor_GetActive.
REAPER seems to have problems with extensions using HWND type for
exported functions so all BR_Win32 functions use void* instead of HWND
type.
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_MIDIEditor_GetActive":)
description:
[BR] Alternative to MIDIEditor_GetActive.
REAPER seems to have problems with extensions using HWND type for
exported functions so all BR_Win32 functions use void* instead of HWND
type.
------
name:reaper.BR_Win32_MIDIEditor_GetActive
language:lua
return:(identifier:)
params:
description:
[BR] Alternative to MIDIEditor_GetActive.
REAPER seems to have problems with extensions using HWND type for
exported functions so all BR_Win32 functions use void* instead of HWND
type.
------
name:BR_Win32_MIDIEditor_GetActive
language:python
return:(void:)
params:
description:
[BR] Alternative to MIDIEditor_GetActive.
REAPER seems to have problems with extensions using HWND type for
exported functions so all BR_Win32 functions use void* instead of HWND
type.
------
name:BR_Win32_ScreenToClient
language:c
return:(void:)
params:(void*:hwnd), (int:xIn), (int:yIn), (int*:xOut), (int*:yOut)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:extension_api
language:eel2
return:
params:("BR_Win32_ScreenToClient":), (void*:hwnd), (int:xIn), (int:yIn), (int:&x), (int:&y)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:reaper.BR_Win32_ScreenToClient
language:lua
return:(number:x),(number:y)
params:(identifier:hwnd), (integer:xIn), (integer:yIn)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:BR_Win32_ScreenToClient
language:python
return:(void:hwnd),(Int:xIn),(Int:yIn),(Int:xOut),(Int:yOut)
params:(hwnd:), (xIn:), (yIn:), (xOut:), (yOut:)
description:
[BR] Equivalent to win32 API ClientToScreen().
------
name:BR_Win32_SendMessage
language:c
return:(int:)
params:(void*:hwnd), (int:msg), (int:lParam), (int:wParam)
description:
[BR] Equivalent to win32 API SendMessage().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_SendMessage":), (void*:hwnd), (int:msg), (int:lParam), (int:wParam)
description:
[BR] Equivalent to win32 API SendMessage().
------
name:reaper.BR_Win32_SendMessage
language:lua
return:(integer:)
params:(identifier:hwnd), (integer:msg), (integer:lParam), (integer:wParam)
description:
[BR] Equivalent to win32 API SendMessage().
------
name:BR_Win32_SendMessage
language:python
return:(Int:)
params:(void:hwnd), (Int:msg), (Int:lParam), (Int:wParam)
description:
[BR] Equivalent to win32 API SendMessage().
------
name:BR_Win32_SetFocus
language:c
return:(void*:)
params:(void*:hwnd)
description:
[BR] Equivalent to win32 API SetFocus().
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_SetFocus":), (void*:hwnd)
description:
[BR] Equivalent to win32 API SetFocus().
------
name:reaper.BR_Win32_SetFocus
language:lua
return:(identifier:)
params:(identifier:hwnd)
description:
[BR] Equivalent to win32 API SetFocus().
------
name:BR_Win32_SetFocus
language:python
return:(void:)
params:(void:hwnd)
description:
[BR] Equivalent to win32 API SetFocus().
------
name:BR_Win32_SetForegroundWindow
language:c
return:(int:)
params:(void*:hwnd)
description:
[BR] Equivalent to win32 API SetForegroundWindow().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_SetForegroundWindow":), (void*:hwnd)
description:
[BR] Equivalent to win32 API SetForegroundWindow().
------
name:reaper.BR_Win32_SetForegroundWindow
language:lua
return:(integer:)
params:(identifier:hwnd)
description:
[BR] Equivalent to win32 API SetForegroundWindow().
------
name:BR_Win32_SetForegroundWindow
language:python
return:(Int:)
params:(void:hwnd)
description:
[BR] Equivalent to win32 API SetForegroundWindow().
------
name:BR_Win32_SetWindowLong
language:c
return:(int:)
params:(void*:hwnd), (int:index), (int:newLong)
description:
[BR] Equivalent to win32 API SetWindowLong().
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_SetWindowLong":), (void*:hwnd), (int:index), (int:newLong)
description:
[BR] Equivalent to win32 API SetWindowLong().
------
name:reaper.BR_Win32_SetWindowLong
language:lua
return:(integer:)
params:(identifier:hwnd), (integer:index), (integer:newLong)
description:
[BR] Equivalent to win32 API SetWindowLong().
------
name:BR_Win32_SetWindowLong
language:python
return:(Int:)
params:(void:hwnd), (Int:index), (Int:newLong)
description:
[BR] Equivalent to win32 API SetWindowLong().
------
name:BR_Win32_SetWindowPos
language:c
return:(bool:)
params:(void*:hwnd), (const char*:hwndInsertAfter), (int:x), (int:y), (int:width), (int:height), (int:flags)
description:
[BR] Equivalent to win32 API SetWindowPos().
hwndInsertAfter may be a string: "HWND_BOTTOM", "HWND_NOTOPMOST", "HWND_TOP", "HWND_TOPMOST" or a string obtained with BR_Win32_HwndToString.
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_Win32_SetWindowPos":), (void*:hwnd), ("hwndInsertAfter":), (int:x), (int:y), (int:width), (int:height), (int:flags)
description:
[BR] Equivalent to win32 API SetWindowPos().
hwndInsertAfter may be a string: "HWND_BOTTOM", "HWND_NOTOPMOST", "HWND_TOP", "HWND_TOPMOST" or a string obtained with BR_Win32_HwndToString.
------
name:reaper.BR_Win32_SetWindowPos
language:lua
return:(boolean:)
params:(identifier:hwnd), (string:hwndInsertAfter), (integer:x), (integer:y), (integer:width), (integer:height), (integer:flags)
description:
[BR] Equivalent to win32 API SetWindowPos().
hwndInsertAfter may be a string: "HWND_BOTTOM", "HWND_NOTOPMOST", "HWND_TOP", "HWND_TOPMOST" or a string obtained with BR_Win32_HwndToString.
------
name:BR_Win32_SetWindowPos
language:python
return:(Boolean:)
params:(void:hwnd), (String:hwndInsertAfter), (Int:x), (Int:y), (Int:width), (Int:height), (Int:flags)
description:
[BR] Equivalent to win32 API SetWindowPos().
hwndInsertAfter may be a string: "HWND_BOTTOM", "HWND_NOTOPMOST", "HWND_TOP", "HWND_TOPMOST" or a string obtained with BR_Win32_HwndToString.
------
name:BR_Win32_ShellExecute
language:c
return:(int:)
params:(const char*:operation), (const char*:file), (const char*:parameters), (const char*:directory), (int:showFlags)
description:
[BR] Equivalent to win32 API ShellExecute() with HWND set to main window
------
name:extension_api
language:eel2
return:(int:)
params:("BR_Win32_ShellExecute":), ("operation":), ("file":), ("parameters":), ("directory":), (int:showFlags)
description:
[BR] Equivalent to win32 API ShellExecute() with HWND set to main window
------
name:reaper.BR_Win32_ShellExecute
language:lua
return:(integer:)
params:(string:operation), (string:file), (string:parameters), (string:directory), (integer:showFlags)
description:
[BR] Equivalent to win32 API ShellExecute() with HWND set to main window
------
name:BR_Win32_ShellExecute
language:python
return:(Int:)
params:(String:operation), (String:file), (String:parameters), (String:directory), (Int:showFlags)
description:
[BR] Equivalent to win32 API ShellExecute() with HWND set to main window
------
name:BR_Win32_ShowWindow
language:c
return:(bool:)
params:(void*:hwnd), (int:cmdShow)
description:
[BR] Equivalent to win32 API ShowWindow().
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_Win32_ShowWindow":), (void*:hwnd), (int:cmdShow)
description:
[BR] Equivalent to win32 API ShowWindow().
------
name:reaper.BR_Win32_ShowWindow
language:lua
return:(boolean:)
params:(identifier:hwnd), (integer:cmdShow)
description:
[BR] Equivalent to win32 API ShowWindow().
------
name:BR_Win32_ShowWindow
language:python
return:(Boolean:)
params:(void:hwnd), (Int:cmdShow)
description:
[BR] Equivalent to win32 API ShowWindow().
------
name:BR_Win32_StringToHwnd
language:c
return:(void*:)
params:(const char*:string)
description:
[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_StringToHwnd":), ("string":)
description:
[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.
------
name:reaper.BR_Win32_StringToHwnd
language:lua
return:(identifier:)
params:(string:string)
description:
[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.
------
name:BR_Win32_StringToHwnd
language:python
return:(void:)
params:(String:string)
description:
[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.
------
name:BR_Win32_WindowFromPoint
language:c
return:(void*:)
params:(int:x), (int:y)
description:
[BR] Equivalent to win32 API WindowFromPoint().
------
name:extension_api
language:eel2
return:(void*:)
params:("BR_Win32_WindowFromPoint":), (int:x), (int:y)
description:
[BR] Equivalent to win32 API WindowFromPoint().
------
name:reaper.BR_Win32_WindowFromPoint
language:lua
return:(identifier:)
params:(integer:x), (integer:y)
description:
[BR] Equivalent to win32 API WindowFromPoint().
------
name:BR_Win32_WindowFromPoint
language:python
return:(void:)
params:(Int:x), (Int:y)
description:
[BR] Equivalent to win32 API WindowFromPoint().
------
name:BR_Win32_WritePrivateProfileString
language:c
return:(bool:)
params:(const char*:sectionName), (const char*:keyName), (const char*:value), (const char*:filePath)
description:
[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini
------
name:extension_api
language:eel2
return:(bool:)
params:("BR_Win32_WritePrivateProfileString":), ("sectionName":), ("keyName":), ("value":), ("filePath":)
description:
[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini
------
name:reaper.BR_Win32_WritePrivateProfileString
language:lua
return:(boolean:)
params:(string:sectionName), (string:keyName), (string:value), (string:filePath)
description:
[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini
------
name:BR_Win32_WritePrivateProfileString
language:python
return:(Boolean:)
params:(String:sectionName), (String:keyName), (String:value), (String:filePath)
description:
[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini
------
name:CF_EnumMediaSourceCues
language:c
return:(int:)
params:(PCM_source*:src), (int:index), (double*:timeOut), (double*:endTimeOut), (bool*:isRegionOut), (char*:nameOut), (int:nameOut_sz)
description:
Enumerate the source's media cues. Returns the next index or 0 when finished.
------
name:extension_api
language:eel2
return:(int:)
params:("CF_EnumMediaSourceCues":), (PCM_source:src), (int:index), (&time:), (&endTime:), (bool:&isRegion), (#name:)
description:
Enumerate the source's media cues. Returns the next index or 0 when finished.
------
name:reaper.CF_EnumMediaSourceCues
language:lua
return:(integer:retval),(number:time),(number:endTime),(boolean:isRegion),(string:name)
params:(PCM_source:src), (integer:index)
description:
Enumerate the source's media cues. Returns the next index or 0 when finished.
------
name:CF_EnumMediaSourceCues
language:python
return:(Int:retval),(PCM_source:src),(Int:index),(Float:timeOut),(Float:endTimeOut),(Boolean:isRegionOut),(String:nameOut),(Int:nameOut_sz)
params:(src:), (index:), (timeOut:), (endTimeOut:), (isRegionOut:), (nameOut:), (nameOut_sz:)
description:
Enumerate the source's media cues. Returns the next index or 0 when finished.
------
name:CF_EnumSelectedFX
language:c
return:(int:)
params:(FxChain*:hwnd), (int:index)
description:
Return the index of the next selected effect in the given FX chain.
Start index should be -1. Returns -1 if there are no more selected
effects.
------
name:extension_api
language:eel2
return:(int:)
params:("CF_EnumSelectedFX":), (FxChain:hwnd), (int:index)
description:
Return the index of the next selected effect in the given FX chain.
Start index should be -1. Returns -1 if there are no more selected
effects.
------
name:reaper.CF_EnumSelectedFX
language:lua
return:(integer:)
params:(FxChain:hwnd), (integer:index)
description:
Return the index of the next selected effect in the given FX chain.
Start index should be -1. Returns -1 if there are no more selected
effects.
------
name:CF_EnumSelectedFX
language:python
return:(Int:)
params:(FxChain:hwnd), (Int:index)
description:
Return the index of the next selected effect in the given FX chain.
Start index should be -1. Returns -1 if there are no more selected
effects.
------
name:CF_EnumerateActions
language:c
return:(int:)
params:(int:section), (int:index), (char*:name), (int:name_sz)
description:
Wrapper for the unexposed kbd_enumerateActions API function.
Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List
Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063
------
name:extension_api
language:eel2
return:(int:)
params:("CF_EnumerateActions":), (int:section), (int:index), (#name:)
description:
Wrapper for the unexposed kbd_enumerateActions API function.
Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List
Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063
------
name:reaper.CF_EnumerateActions
language:lua
return:(integer:retval),(string:name)
params:(integer:section), (integer:index), (string:name)
description:
Wrapper for the unexposed kbd_enumerateActions API function.
Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List
Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063
------
name:CF_EnumerateActions
language:python
return:(Int:retval),(Int:section),(Int:index),(String:name),(Int:name_sz)
params:(section:), (index:), (name:), (name_sz:)
description:
Wrapper for the unexposed kbd_enumerateActions API function.
Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List
Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063
------
name:CF_ExportMediaSource
language:c
return:(bool:)
params:(PCM_source*:src), (const char*:fn)
description:
Export the source to the given file (MIDI only).
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_ExportMediaSource":), (PCM_source:src), ("fn":)
description:
Export the source to the given file (MIDI only).
------
name:reaper.CF_ExportMediaSource
language:lua
return:(boolean:)
params:(PCM_source:src), (string:fn)
description:
Export the source to the given file (MIDI only).
------
name:CF_ExportMediaSource
language:python
return:(Boolean:)
params:(PCM_source:src), (String:fn)
description:
Export the source to the given file (MIDI only).
------
name:CF_GetClipboard
language:c
return:(void:)
params:(char*:buf), (int:buf_sz)
description:
Read the contents of the system clipboard (limited to 1023 characters in Lua).
------
name:extension_api
language:eel2
return:
params:("CF_GetClipboard":), (#buf:)
description:
Read the contents of the system clipboard (limited to 1023 characters in Lua).
------
name:reaper.CF_GetClipboard
language:lua
return:(string:buf)
params:(string:buf)
description:
Read the contents of the system clipboard (limited to 1023 characters in Lua).
------
name:CF_GetClipboard
language:python
return:(String:buf),(Int:buf_sz)
params:(buf:), (buf_sz:)
description:
Read the contents of the system clipboard (limited to 1023 characters in Lua).
------
name:CF_GetClipboardBig
language:c
return:(const:char*)
params:(WDL_FastString*:output)
description:
Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_GetClipboardBig":), (#retval:), (WDL_FastString:output)
description:
Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.
------
name:reaper.CF_GetClipboardBig
language:lua
return:(string:)
params:(WDL_FastString:output)
description:
Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.
------
name:CF_GetClipboardBig
language:python
return:(String:)
params:(WDL_FastString:output)
description:
Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.
------
name:CF_GetCommandText
language:c
return:(const:char*)
params:(int:section), (int:command)
description:
Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_GetCommandText":), (#retval:), (int:section), (int:command)
description:
Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.
------
name:reaper.CF_GetCommandText
language:lua
return:(string:)
params:(integer:section), (integer:command)
description:
Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.
------
name:CF_GetCommandText
language:python
return:(String:)
params:(Int:section), (Int:command)
description:
Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.
------
name:CF_GetFocusedFXChain
language:c
return:(FxChain*:)
params:
description:
Return a handle to the currently focused FX chain window.
------
name:extension_api
language:eel2
return:(FxChain:)
params:("CF_GetFocusedFXChain":)
description:
Return a handle to the currently focused FX chain window.
------
name:reaper.CF_GetFocusedFXChain
language:lua
return:(FxChain:)
params:
description:
Return a handle to the currently focused FX chain window.
------
name:CF_GetFocusedFXChain
language:python
return:(FxChain:)
params:
description:
Return a handle to the currently focused FX chain window.
------
name:CF_GetMediaSourceBitDepth
language:c
return:(int:)
params:(PCM_source*:src)
description:
Returns the bit depth if available (0 otherwise).
------
name:extension_api
language:eel2
return:(int:)
params:("CF_GetMediaSourceBitDepth":), (PCM_source:src)
description:
Returns the bit depth if available (0 otherwise).
------
name:reaper.CF_GetMediaSourceBitDepth
language:lua
return:(integer:)
params:(PCM_source:src)
description:
Returns the bit depth if available (0 otherwise).
------
name:CF_GetMediaSourceBitDepth
language:python
return:(Int:)
params:(PCM_source:src)
description:
Returns the bit depth if available (0 otherwise).
------
name:CF_GetMediaSourceMetadata
language:c
return:(bool:)
params:(PCM_source*:src), (const char*:name), (char*:out), (int:out_sz)
description:
Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_GetMediaSourceMetadata":), (PCM_source:src), ("name":), (#out:)
description:
Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).
------
name:reaper.CF_GetMediaSourceMetadata
language:lua
return:(boolean:retval),(string:out)
params:(PCM_source:src), (string:name), (string:out)
description:
Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).
------
name:CF_GetMediaSourceMetadata
language:python
return:(Boolean:retval),(PCM_source:src),(String:name),(String:out),(Int:out_sz)
params:(src:), (name:), (out:), (out_sz:)
description:
Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).
------
name:CF_GetMediaSourceOnline
language:c
return:(bool:)
params:(PCM_source*:src)
description:
Returns the online/offline status of the given source.
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_GetMediaSourceOnline":), (PCM_source:src)
description:
Returns the online/offline status of the given source.
------
name:reaper.CF_GetMediaSourceOnline
language:lua
return:(boolean:)
params:(PCM_source:src)
description:
Returns the online/offline status of the given source.
------
name:CF_GetMediaSourceOnline
language:python
return:(Boolean:)
params:(PCM_source:src)
description:
Returns the online/offline status of the given source.
------
name:CF_GetMediaSourceRPP
language:c
return:(bool:)
params:(PCM_source*:src), (char*:fn), (int:fn_sz)
description:
Get the project associated with this source (BWF, subproject...).
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_GetMediaSourceRPP":), (PCM_source:src), (#fn:)
description:
Get the project associated with this source (BWF, subproject...).
------
name:reaper.CF_GetMediaSourceRPP
language:lua
return:(boolean:retval),(string:fn)
params:(PCM_source:src), (string:fn)
description:
Get the project associated with this source (BWF, subproject...).
------
name:CF_GetMediaSourceRPP
language:python
return:(Boolean:retval),(PCM_source:src),(String:fn),(Int:fn_sz)
params:(src:), (fn:), (fn_sz:)
description:
Get the project associated with this source (BWF, subproject...).
------
name:CF_GetSWSVersion
language:c
return:(void:)
params:(char*:buf), (int:buf_sz)
description:
Return the current SWS version number.
------
name:extension_api
language:eel2
return:
params:("CF_GetSWSVersion":), (#buf:)
description:
Return the current SWS version number.
------
name:reaper.CF_GetSWSVersion
language:lua
return:(string:buf)
params:(string:buf)
description:
Return the current SWS version number.
------
name:CF_GetSWSVersion
language:python
return:(String:buf),(Int:buf_sz)
params:(buf:), (buf_sz:)
description:
Return the current SWS version number.
------
name:CF_GetTakeFXChain
language:c
return:(FxChain*:)
params:(MediaItem_Take*:take)
description:
Return a handle to the given take FX chain window. HACK: This
temporarily renames the take in order to disambiguate the take FX chain
window from similarily named takes.
------
name:extension_api
language:eel2
return:(FxChain:)
params:("CF_GetTakeFXChain":), (MediaItem_Take:take)
description:
Return a handle to the given take FX chain window. HACK: This
temporarily renames the take in order to disambiguate the take FX chain
window from similarily named takes.
------
name:reaper.CF_GetTakeFXChain
language:lua
return:(FxChain:)
params:(MediaItem_Take:take)
description:
Return a handle to the given take FX chain window. HACK: This
temporarily renames the take in order to disambiguate the take FX chain
window from similarily named takes.
------
name:CF_GetTakeFXChain
language:python
return:(FxChain:)
params:(MediaItem_Take:take)
description:
Return a handle to the given take FX chain window. HACK: This
temporarily renames the take in order to disambiguate the take FX chain
window from similarily named takes.
------
name:CF_GetTrackFXChain
language:c
return:(FxChain*:)
params:(MediaTrack*:track)
description:
Return a handle to the given track FX chain window.
------
name:extension_api
language:eel2
return:(FxChain:)
params:("CF_GetTrackFXChain":), (MediaTrack:track)
description:
Return a handle to the given track FX chain window.
------
name:reaper.CF_GetTrackFXChain
language:lua
return:(FxChain:)
params:(MediaTrack:track)
description:
Return a handle to the given track FX chain window.
------
name:CF_GetTrackFXChain
language:python
return:(FxChain:)
params:(MediaTrack:track)
description:
Return a handle to the given track FX chain window.
------
name:CF_LocateInExplorer
language:c
return:(bool:)
params:(const char*:file)
description:
Select the given file in explorer/finder.
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_LocateInExplorer":), ("file":)
description:
Select the given file in explorer/finder.
------
name:reaper.CF_LocateInExplorer
language:lua
return:(boolean:)
params:(string:file)
description:
Select the given file in explorer/finder.
------
name:CF_LocateInExplorer
language:python
return:(Boolean:)
params:(String:file)
description:
Select the given file in explorer/finder.
------
name:CF_SetClipboard
language:c
return:(void:)
params:(const char*:str)
description:
Write the given string into the system clipboard.
------
name:extension_api
language:eel2
return:
params:("CF_SetClipboard":), ("str":)
description:
Write the given string into the system clipboard.
------
name:reaper.CF_SetClipboard
language:lua
return:
params:(string:str)
description:
Write the given string into the system clipboard.
------
name:CF_SetClipboard
language:python
return:
params:(String:str)
description:
Write the given string into the system clipboard.
------
name:CF_SetMediaSourceOnline
language:c
return:(void:)
params:(PCM_source*:src), (bool:set)
description:
Set the online/offline status of the given source (closes files when set=false).
------
name:extension_api
language:eel2
return:
params:("CF_SetMediaSourceOnline":), (PCM_source:src), (bool:set)
description:
Set the online/offline status of the given source (closes files when set=false).
------
name:reaper.CF_SetMediaSourceOnline
language:lua
return:
params:(PCM_source:src), (boolean:set)
description:
Set the online/offline status of the given source (closes files when set=false).
------
name:CF_SetMediaSourceOnline
language:python
return:
params:(PCM_source:src), (Boolean:set)
description:
Set the online/offline status of the given source (closes files when set=false).
------
name:CF_ShellExecute
language:c
return:(bool:)
params:(const char*:file)
description:
Open the given file or URL in the default application. See also CF_LocateInExplorer.
------
name:extension_api
language:eel2
return:(bool:)
params:("CF_ShellExecute":), ("file":)
description:
Open the given file or URL in the default application. See also CF_LocateInExplorer.
------
name:reaper.CF_ShellExecute
language:lua
return:(boolean:)
params:(string:file)
description:
Open the given file or URL in the default application. See also CF_LocateInExplorer.
------
name:CF_ShellExecute
language:python
return:(Boolean:)
params:(String:file)
description:
Open the given file or URL in the default application. See also CF_LocateInExplorer.
------
name:FNG_AddMidiNote
language:c
return:(RprMidiNote*:)
params:(RprMidiTake*:midiTake)
description:
[FNG] Add MIDI note to MIDI take
------
name:extension_api
language:eel2
return:(RprMidiNote:)
params:("FNG_AddMidiNote":), (RprMidiTake:midiTake)
description:
[FNG] Add MIDI note to MIDI take
------
name:reaper.FNG_AddMidiNote
language:lua
return:(RprMidiNote:)
params:(RprMidiTake:midiTake)
description:
[FNG] Add MIDI note to MIDI take
------
name:FNG_AddMidiNote
language:python
return:(RprMidiNote:)
params:(RprMidiTake:midiTake)
description:
[FNG] Add MIDI note to MIDI take
------
name:FNG_AllocMidiTake
language:c
return:(RprMidiTake*:)
params:(MediaItem_Take*:take)
description:
[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take
------
name:extension_api
language:eel2
return:(RprMidiTake:)
params:("FNG_AllocMidiTake":), (MediaItem_Take:take)
description:
[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take
------
name:reaper.FNG_AllocMidiTake
language:lua
return:(RprMidiTake:)
params:(MediaItem_Take:take)
description:
[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take
------
name:FNG_AllocMidiTake
language:python
return:(RprMidiTake:)
params:(MediaItem_Take:take)
description:
[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take
------
name:FNG_CountMidiNotes
language:c
return:(int:)
params:(RprMidiTake*:midiTake)
description:
[FNG] Count of how many MIDI notes are in the MIDI take
------
name:extension_api
language:eel2
return:(int:)
params:("FNG_CountMidiNotes":), (RprMidiTake:midiTake)
description:
[FNG] Count of how many MIDI notes are in the MIDI take
------
name:reaper.FNG_CountMidiNotes
language:lua
return:(integer:)
params:(RprMidiTake:midiTake)
description:
[FNG] Count of how many MIDI notes are in the MIDI take
------
name:FNG_CountMidiNotes
language:python
return:(Int:)
params:(RprMidiTake:midiTake)
description:
[FNG] Count of how many MIDI notes are in the MIDI take
------
name:FNG_FreeMidiTake
language:c
return:(void:)
params:(RprMidiTake*:midiTake)
description:
[FNG] Commit changes to MIDI take and free allocated memory
------
name:extension_api
language:eel2
return:
params:("FNG_FreeMidiTake":), (RprMidiTake:midiTake)
description:
[FNG] Commit changes to MIDI take and free allocated memory
------
name:reaper.FNG_FreeMidiTake
language:lua
return:
params:(RprMidiTake:midiTake)
description:
[FNG] Commit changes to MIDI take and free allocated memory
------
name:FNG_FreeMidiTake
language:python
return:
params:(RprMidiTake:midiTake)
description:
[FNG] Commit changes to MIDI take and free allocated memory
------
name:FNG_GetMidiNote
language:c
return:(RprMidiNote*:)
params:(RprMidiTake*:midiTake), (int:index)
description:
[FNG] Get a MIDI note from a MIDI take at specified index
------
name:extension_api
language:eel2
return:(RprMidiNote:)
params:("FNG_GetMidiNote":), (RprMidiTake:midiTake), (int:index)
description:
[FNG] Get a MIDI note from a MIDI take at specified index
------
name:reaper.FNG_GetMidiNote
language:lua
return:(RprMidiNote:)
params:(RprMidiTake:midiTake), (integer:index)
description:
[FNG] Get a MIDI note from a MIDI take at specified index
------
name:FNG_GetMidiNote
language:python
return:(RprMidiNote:)
params:(RprMidiTake:midiTake), (Int:index)
description:
[FNG] Get a MIDI note from a MIDI take at specified index
------
name:FNG_GetMidiNoteIntProperty
language:c
return:(int:)
params:(RprMidiNote*:midiNote), (const char*:property)
description:
[FNG] Get MIDI note property
------
name:extension_api
language:eel2
return:(int:)
params:("FNG_GetMidiNoteIntProperty":), (RprMidiNote:midiNote), ("property":)
description:
[FNG] Get MIDI note property
------
name:reaper.FNG_GetMidiNoteIntProperty
language:lua
return:(integer:)
params:(RprMidiNote:midiNote), (string:property)
description:
[FNG] Get MIDI note property
------
name:FNG_GetMidiNoteIntProperty
language:python
return:(Int:)
params:(RprMidiNote:midiNote), (String:property)
description:
[FNG] Get MIDI note property
------
name:FNG_SetMidiNoteIntProperty
language:c
return:(void:)
params:(RprMidiNote*:midiNote), (const char*:property), (int:value)
description:
[FNG] Set MIDI note property
------
name:extension_api
language:eel2
return:
params:("FNG_SetMidiNoteIntProperty":), (RprMidiNote:midiNote), ("property":), (int:value)
description:
[FNG] Set MIDI note property
------
name:reaper.FNG_SetMidiNoteIntProperty
language:lua
return:
params:(RprMidiNote:midiNote), (string:property), (integer:value)
description:
[FNG] Set MIDI note property
------
name:FNG_SetMidiNoteIntProperty
language:python
return:
params:(RprMidiNote:midiNote), (String:property), (Int:value)
description:
[FNG] Set MIDI note property
------
name:JS_Byte
language:c
return:(void:)
params:(void*:pointer), (int:offset), (int*:byteOut)
description:
Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.
------
name:extension_api
language:eel2
return:
params:("JS_Byte":), (void*:pointer), (int:offset), (int:&byte)
description:
Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.
------
name:reaper.JS_Byte
language:lua
return:(number:byte)
params:(identifier:pointer), (integer:offset)
description:
Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.
------
name:JS_Byte
language:python
return:(void:pointer),(Int:offset),(Int:byteOut)
params:(pointer:), (offset:), (byteOut:)
description:
Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.
------
name:JS_Composite
language:c
return:(int:)
params:(void*:windowHWND), (int:srcx), (int:srcy), (int:srcw), (int:srch), (void*:sysBitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (bool*:autoUpdateOptional)
description:
Composites a LICE bitmap with a REAPER window.  Each time that the
window is re-drawn, the bitmap will be blitted over the window's client
area (with per-pixel alpha blending).
* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.
* autoUpdate is an optional parameter that is false by default. If
true, JS_Composite will automatically invalidate and re-draw the part of
the window that covers the current position of the bitmap, and if the
bitmap is being moved, also the previous position. (If only one or a
handful of bitmaps are being moved across the screen, autoUpdate should
result in smoother animation on WindowsOS; if numerous bitmaps are
spread over the entire window, it may be faster to disable autoUpdate
and instead call JS_Window_InvalidateRect explicitly once all bitmaps
have been moved.)
* InvalidateRect should also be called whenever the contents of the
bitmap contents have been changed, but not the position, to trigger a
window update.
* On WindowsOS, the key to reducing flickering is to slow down the
frequency at which the window is re-drawn. InvalidateRect should only be
called when absolutely necessary, preferably not more than 10 times per
second.  (Also refer to the JS_Composite_Delay function.)
* On WindowsOS, flickering can further be reduced by keeping the
invalidated area as small as possible, covering only the bitmaps that
have been edited or moved.  However, if numerous bitmaps are spread over
the entire window, it may be faster to simply invalidate the entire
client area.
* This function should not be applied directly to top-level windows, but rather to child windows.
* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.
* On WindowsOS, GDI blitting does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
Returns:
1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could
not obtain the original window process, -4 = sysBitmap is not a LICE
bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the
window HDC.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Composite":), (void*:windowHWND), (int:srcx), (int:srcy), (int:srcw), (int:srch), (void*:sysBitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (unsupported:autoUpdateOptional)
description:
Composites a LICE bitmap with a REAPER window.  Each time that the
window is re-drawn, the bitmap will be blitted over the window's client
area (with per-pixel alpha blending).
* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.
* autoUpdate is an optional parameter that is false by default. If
true, JS_Composite will automatically invalidate and re-draw the part of
the window that covers the current position of the bitmap, and if the
bitmap is being moved, also the previous position. (If only one or a
handful of bitmaps are being moved across the screen, autoUpdate should
result in smoother animation on WindowsOS; if numerous bitmaps are
spread over the entire window, it may be faster to disable autoUpdate
and instead call JS_Window_InvalidateRect explicitly once all bitmaps
have been moved.)
* InvalidateRect should also be called whenever the contents of the
bitmap contents have been changed, but not the position, to trigger a
window update.
* On WindowsOS, the key to reducing flickering is to slow down the
frequency at which the window is re-drawn. InvalidateRect should only be
called when absolutely necessary, preferably not more than 10 times per
second.  (Also refer to the JS_Composite_Delay function.)
* On WindowsOS, flickering can further be reduced by keeping the
invalidated area as small as possible, covering only the bitmaps that
have been edited or moved.  However, if numerous bitmaps are spread over
the entire window, it may be faster to simply invalidate the entire
client area.
* This function should not be applied directly to top-level windows, but rather to child windows.
* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.
* On WindowsOS, GDI blitting does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
Returns:
1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could
not obtain the original window process, -4 = sysBitmap is not a LICE
bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the
window HDC.
------
name:reaper.JS_Composite
language:lua
return:(integer:)
params:(identifier:windowHWND), (integer:srcx), (integer:srcy), (integer:srcw), (integer:srch), (identifier:sysBitmap), (integer:dstx), (integer:dsty), (integer:dstw), (integer:dsth), (unsupported:autoUpdate)
description:
Composites a LICE bitmap with a REAPER window.  Each time that the
window is re-drawn, the bitmap will be blitted over the window's client
area (with per-pixel alpha blending).
* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.
* autoUpdate is an optional parameter that is false by default. If
true, JS_Composite will automatically invalidate and re-draw the part of
the window that covers the current position of the bitmap, and if the
bitmap is being moved, also the previous position. (If only one or a
handful of bitmaps are being moved across the screen, autoUpdate should
result in smoother animation on WindowsOS; if numerous bitmaps are
spread over the entire window, it may be faster to disable autoUpdate
and instead call JS_Window_InvalidateRect explicitly once all bitmaps
have been moved.)
* InvalidateRect should also be called whenever the contents of the
bitmap contents have been changed, but not the position, to trigger a
window update.
* On WindowsOS, the key to reducing flickering is to slow down the
frequency at which the window is re-drawn. InvalidateRect should only be
called when absolutely necessary, preferably not more than 10 times per
second.  (Also refer to the JS_Composite_Delay function.)
* On WindowsOS, flickering can further be reduced by keeping the
invalidated area as small as possible, covering only the bitmaps that
have been edited or moved.  However, if numerous bitmaps are spread over
the entire window, it may be faster to simply invalidate the entire
client area.
* This function should not be applied directly to top-level windows, but rather to child windows.
* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.
* On WindowsOS, GDI blitting does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
Returns:
1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could
not obtain the original window process, -4 = sysBitmap is not a LICE
bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the
window HDC.
------
name:JS_Composite
language:python
return:(Int:retval),(void:windowHWND),(Int:srcx),(Int:srcy),(Int:srcw),(Int:srch),(void:sysBitmap),(Int:dstx),(Int:dsty),(Int:dstw),(Int:dsth),(Boolean:autoUpdateOptional)
params:(windowHWND:), (srcx:), (srcy:), (srcw:), (srch:), (sysBitmap:), (dstx:), (dsty:), (dstw:), (dsth:), (autoUpdateOptional:)
description:
Composites a LICE bitmap with a REAPER window.  Each time that the
window is re-drawn, the bitmap will be blitted over the window's client
area (with per-pixel alpha blending).
* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.
* autoUpdate is an optional parameter that is false by default. If
true, JS_Composite will automatically invalidate and re-draw the part of
the window that covers the current position of the bitmap, and if the
bitmap is being moved, also the previous position. (If only one or a
handful of bitmaps are being moved across the screen, autoUpdate should
result in smoother animation on WindowsOS; if numerous bitmaps are
spread over the entire window, it may be faster to disable autoUpdate
and instead call JS_Window_InvalidateRect explicitly once all bitmaps
have been moved.)
* InvalidateRect should also be called whenever the contents of the
bitmap contents have been changed, but not the position, to trigger a
window update.
* On WindowsOS, the key to reducing flickering is to slow down the
frequency at which the window is re-drawn. InvalidateRect should only be
called when absolutely necessary, preferably not more than 10 times per
second.  (Also refer to the JS_Composite_Delay function.)
* On WindowsOS, flickering can further be reduced by keeping the
invalidated area as small as possible, covering only the bitmaps that
have been edited or moved.  However, if numerous bitmaps are spread over
the entire window, it may be faster to simply invalidate the entire
client area.
* This function should not be applied directly to top-level windows, but rather to child windows.
* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.
* On WindowsOS, GDI blitting does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
Returns:
1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could
not obtain the original window process, -4 = sysBitmap is not a LICE
bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the
window HDC.
------
name:JS_Composite_Delay
language:c
return:(int:)
params:(void*:windowHWND), (double:minTime), (double:maxTime), (int:numBitmapsWhenMax), (double*:prevMinTimeOut), (double*:prevMaxTimeOut), (int*:prevBitmapsOut)
description:
On WindowsOS, flickering of composited images can be improved
considerably by slowing the refresh rate of the window.  The optimal
refresh rate may depend on the number of composited bitmaps.
minTime is the minimum refresh delay, in seconds, when only one bitmap
is composited onto the window.  The delay time will increase linearly
with the number of bitmaps, up to a maximum of maxTime when
numBitmapsWhenMax is reached.
Returns:
* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).
* If delay times have not previously been set for this window, prev values are -1.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Composite_Delay":), (void*:windowHWND), (minTime:), (maxTime:), (int:numBitmapsWhenMax), (&prevMinTime:), (&prevMaxTime:), (int:&prevBitmaps)
description:
On WindowsOS, flickering of composited images can be improved
considerably by slowing the refresh rate of the window.  The optimal
refresh rate may depend on the number of composited bitmaps.
minTime is the minimum refresh delay, in seconds, when only one bitmap
is composited onto the window.  The delay time will increase linearly
with the number of bitmaps, up to a maximum of maxTime when
numBitmapsWhenMax is reached.
Returns:
* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).
* If delay times have not previously been set for this window, prev values are -1.
------
name:reaper.JS_Composite_Delay
language:lua
return:(integer:retval),(number:prevMinTime),(number:prevMaxTime),(number:prevBitmaps)
params:(identifier:windowHWND), (number:minTime), (number:maxTime), (integer:numBitmapsWhenMax)
description:
On WindowsOS, flickering of composited images can be improved
considerably by slowing the refresh rate of the window.  The optimal
refresh rate may depend on the number of composited bitmaps.
minTime is the minimum refresh delay, in seconds, when only one bitmap
is composited onto the window.  The delay time will increase linearly
with the number of bitmaps, up to a maximum of maxTime when
numBitmapsWhenMax is reached.
Returns:
* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).
* If delay times have not previously been set for this window, prev values are -1.
------
name:JS_Composite_Delay
language:python
return:(Int:retval),(void:windowHWND),(Float:minTime),(Float:maxTime),(Int:numBitmapsWhenMax),(Float:prevMinTimeOut),(Float:prevMaxTimeOut),(Int:prevBitmapsOut)
params:(windowHWND:), (minTime:), (maxTime:), (numBitmapsWhenMax:), (prevMinTimeOut:), (prevMaxTimeOut:), (prevBitmapsOut:)
description:
On WindowsOS, flickering of composited images can be improved
considerably by slowing the refresh rate of the window.  The optimal
refresh rate may depend on the number of composited bitmaps.
minTime is the minimum refresh delay, in seconds, when only one bitmap
is composited onto the window.  The delay time will increase linearly
with the number of bitmaps, up to a maximum of maxTime when
numBitmapsWhenMax is reached.
Returns:
* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).
* If delay times have not previously been set for this window, prev values are -1.
------
name:JS_Composite_ListBitmaps
language:c
return:(int:)
params:(void*:windowHWND), (char*:listOutNeedBig), (int:listOutNeedBig_sz)
description:
Returns all bitmaps composited to the given window.
The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.
retval is the number of linked bitmaps found, or negative if an error occured.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Composite_ListBitmaps":), (void*:windowHWND), (#list:)
description:
Returns all bitmaps composited to the given window.
The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.
retval is the number of linked bitmaps found, or negative if an error occured.
------
name:reaper.JS_Composite_ListBitmaps
language:lua
return:(integer:retval),(string:list)
params:(identifier:windowHWND)
description:
Returns all bitmaps composited to the given window.
The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.
retval is the number of linked bitmaps found, or negative if an error occured.
------
name:JS_Composite_ListBitmaps
language:python
return:(Int:retval),(void:windowHWND),(String:listOutNeedBig),(Int:listOutNeedBig_sz)
params:(windowHWND:), (listOutNeedBig:), (listOutNeedBig_sz:)
description:
Returns all bitmaps composited to the given window.
The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.
retval is the number of linked bitmaps found, or negative if an error occured.
------
name:JS_Composite_Unlink
language:c
return:(void:)
params:(void*:windowHWND), (void*:bitmapOptional), (bool*:autoUpdateOptional)
description:
Unlinks the window and bitmap.
* autoUpdate is an optional parameter. If unlinking a single bitmap and
autoUpdate is true, the function will automatically re-draw the window
to remove the blitted image.
If no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.
------
name:extension_api
language:eel2
return:
params:("JS_Composite_Unlink":), (void*:windowHWND), (void*:bitmap), (unsupported:autoUpdateOptional)
description:
Unlinks the window and bitmap.
* autoUpdate is an optional parameter. If unlinking a single bitmap and
autoUpdate is true, the function will automatically re-draw the window
to remove the blitted image.
If no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.
------
name:reaper.JS_Composite_Unlink
language:lua
return:
params:(identifier:windowHWND), (identifier:bitmap), (unsupported:autoUpdate)
description:
Unlinks the window and bitmap.
* autoUpdate is an optional parameter. If unlinking a single bitmap and
autoUpdate is true, the function will automatically re-draw the window
to remove the blitted image.
If no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.
------
name:JS_Composite_Unlink
language:python
return:(void:windowHWND),(void:bitmapOptional),(Boolean:autoUpdateOptional)
params:(windowHWND:), (bitmapOptional:), (autoUpdateOptional:)
description:
Unlinks the window and bitmap.
* autoUpdate is an optional parameter. If unlinking a single bitmap and
autoUpdate is true, the function will automatically re-draw the window
to remove the blitted image.
If no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.
------
name:JS_Dialog_BrowseForFolder
language:c
return:(int:)
params:(const char*:caption), (const char*:initialFolder), (char*:folderOutNeedBig), (int:folderOutNeedBig_sz)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Dialog_BrowseForFolder":), ("caption":), ("initialFolder":), (#folder:)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.
------
name:reaper.JS_Dialog_BrowseForFolder
language:lua
return:(integer:retval),(string:folder)
params:(string:caption), (string:initialFolder)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.
------
name:JS_Dialog_BrowseForFolder
language:python
return:(Int:retval),(String:caption),(String:initialFolder),(String:folderOutNeedBig),(Int:folderOutNeedBig_sz)
params:(caption:), (initialFolder:), (folderOutNeedBig:), (folderOutNeedBig_sz:)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.
------
name:JS_Dialog_BrowseForOpenFiles
language:c
return:(int:)
params:(const char*:windowTitle), (const char*:initialFolder), (const char*:initialFile), (const char*:extensionList), (bool:allowMultiple), (char*:fileNamesOutNeedBig), (int:fileNamesOutNeedBig_sz)
description:
If allowMultiple is true, multiple files may be selected. The returned
string is \0-separated, with the first substring containing the folder
path and subsequent substrings containing the file names.
* On macOS, the first substring may be empty, and each file name will then contain its entire path.
* This function only allows selection of existing files, and does not allow creation of new files.
extensionList is a string containing pairs of \0-terminated substrings.
The last substring must be terminated by two \0 characters. Each pair
defines one filter pattern:
* The first substring in each pair describes the filter in
user-readable form (for example, "Lua script files (*.lua)") and will be
displayed in the dialog box.
* The second substring specifies the filter that the operating system
must use to search for the files (for example, "*.txt"; the wildcard
should not be omitted). To specify multiple extensions for a single
display string, use a semicolon to separate the patterns (for example,
"*.lua;*.eel").
An example of an extensionList string:
"ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".
On macOS, file dialogs do not accept empty extensionLists, nor wildcard
extensions (such as "All files\0*.*\0\0"), so each acceptable extension
must be listed explicitly. On Linux and Windows, wildcard extensions are
acceptable, and if the extensionList string is empty, the dialog will
display a default "All files (*.*)" filter.
retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.
Displaying \0-separated strings:
* REAPER's IDE and ShowConsoleMsg only display strings up to the first
\0 byte. If multiple files were selected, only the first substring
containing the path will be displayed. This is not a problem for Lua or
EEL, which can access the full string beyond the first \0 byte as usual.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Dialog_BrowseForOpenFiles":), ("windowTitle":), ("initialFolder":), ("initialFile":), ("extensionList":), (bool:allowMultiple), (#fileNames:)
description:
If allowMultiple is true, multiple files may be selected. The returned
string is \0-separated, with the first substring containing the folder
path and subsequent substrings containing the file names.
* On macOS, the first substring may be empty, and each file name will then contain its entire path.
* This function only allows selection of existing files, and does not allow creation of new files.
extensionList is a string containing pairs of \0-terminated substrings.
The last substring must be terminated by two \0 characters. Each pair
defines one filter pattern:
* The first substring in each pair describes the filter in
user-readable form (for example, "Lua script files (*.lua)") and will be
displayed in the dialog box.
* The second substring specifies the filter that the operating system
must use to search for the files (for example, "*.txt"; the wildcard
should not be omitted). To specify multiple extensions for a single
display string, use a semicolon to separate the patterns (for example,
"*.lua;*.eel").
An example of an extensionList string:
"ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".
On macOS, file dialogs do not accept empty extensionLists, nor wildcard
extensions (such as "All files\0*.*\0\0"), so each acceptable extension
must be listed explicitly. On Linux and Windows, wildcard extensions are
acceptable, and if the extensionList string is empty, the dialog will
display a default "All files (*.*)" filter.
retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.
Displaying \0-separated strings:
* REAPER's IDE and ShowConsoleMsg only display strings up to the first
\0 byte. If multiple files were selected, only the first substring
containing the path will be displayed. This is not a problem for Lua or
EEL, which can access the full string beyond the first \0 byte as usual.
------
name:reaper.JS_Dialog_BrowseForOpenFiles
language:lua
return:(integer:retval),(string:fileNames)
params:(string:windowTitle), (string:initialFolder), (string:initialFile), (string:extensionList), (boolean:allowMultiple)
description:
If allowMultiple is true, multiple files may be selected. The returned
string is \0-separated, with the first substring containing the folder
path and subsequent substrings containing the file names.
* On macOS, the first substring may be empty, and each file name will then contain its entire path.
* This function only allows selection of existing files, and does not allow creation of new files.
extensionList is a string containing pairs of \0-terminated substrings.
The last substring must be terminated by two \0 characters. Each pair
defines one filter pattern:
* The first substring in each pair describes the filter in
user-readable form (for example, "Lua script files (*.lua)") and will be
displayed in the dialog box.
* The second substring specifies the filter that the operating system
must use to search for the files (for example, "*.txt"; the wildcard
should not be omitted). To specify multiple extensions for a single
display string, use a semicolon to separate the patterns (for example,
"*.lua;*.eel").
An example of an extensionList string:
"ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".
On macOS, file dialogs do not accept empty extensionLists, nor wildcard
extensions (such as "All files\0*.*\0\0"), so each acceptable extension
must be listed explicitly. On Linux and Windows, wildcard extensions are
acceptable, and if the extensionList string is empty, the dialog will
display a default "All files (*.*)" filter.
retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.
Displaying \0-separated strings:
* REAPER's IDE and ShowConsoleMsg only display strings up to the first
\0 byte. If multiple files were selected, only the first substring
containing the path will be displayed. This is not a problem for Lua or
EEL, which can access the full string beyond the first \0 byte as usual.
------
name:JS_Dialog_BrowseForOpenFiles
language:python
return:(Int:retval),(String:windowTitle),(String:initialFolder),(String:initialFile),(String:extensionList),(Boolean:allowMultiple),(String:fileNamesOutNeedBig),(Int:fileNamesOutNeedBig_sz)
params:(windowTitle:), (initialFolder:), (initialFile:), (extensionList:), (allowMultiple:), (fileNamesOutNeedBig:), (fileNamesOutNeedBig_sz:)
description:
If allowMultiple is true, multiple files may be selected. The returned
string is \0-separated, with the first substring containing the folder
path and subsequent substrings containing the file names.
* On macOS, the first substring may be empty, and each file name will then contain its entire path.
* This function only allows selection of existing files, and does not allow creation of new files.
extensionList is a string containing pairs of \0-terminated substrings.
The last substring must be terminated by two \0 characters. Each pair
defines one filter pattern:
* The first substring in each pair describes the filter in
user-readable form (for example, "Lua script files (*.lua)") and will be
displayed in the dialog box.
* The second substring specifies the filter that the operating system
must use to search for the files (for example, "*.txt"; the wildcard
should not be omitted). To specify multiple extensions for a single
display string, use a semicolon to separate the patterns (for example,
"*.lua;*.eel").
An example of an extensionList string:
"ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".
On macOS, file dialogs do not accept empty extensionLists, nor wildcard
extensions (such as "All files\0*.*\0\0"), so each acceptable extension
must be listed explicitly. On Linux and Windows, wildcard extensions are
acceptable, and if the extensionList string is empty, the dialog will
display a default "All files (*.*)" filter.
retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.
Displaying \0-separated strings:
* REAPER's IDE and ShowConsoleMsg only display strings up to the first
\0 byte. If multiple files were selected, only the first substring
containing the path will be displayed. This is not a problem for Lua or
EEL, which can access the full string beyond the first \0 byte as usual.
------
name:JS_Dialog_BrowseForSaveFile
language:c
return:(int:)
params:(const char*:windowTitle), (const char*:initialFolder), (const char*:initialFile), (const char*:extensionList), (char*:fileNameOutNeedBig), (int:fileNameOutNeedBig_sz)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.
extensionList is as described for JS_Dialog_BrowseForOpenFiles.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Dialog_BrowseForSaveFile":), ("windowTitle":), ("initialFolder":), ("initialFile":), ("extensionList":), (#fileName:)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.
extensionList is as described for JS_Dialog_BrowseForOpenFiles.
------
name:reaper.JS_Dialog_BrowseForSaveFile
language:lua
return:(integer:retval),(string:fileName)
params:(string:windowTitle), (string:initialFolder), (string:initialFile), (string:extensionList)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.
extensionList is as described for JS_Dialog_BrowseForOpenFiles.
------
name:JS_Dialog_BrowseForSaveFile
language:python
return:(Int:retval),(String:windowTitle),(String:initialFolder),(String:initialFile),(String:extensionList),(String:fileNameOutNeedBig),(Int:fileNameOutNeedBig_sz)
params:(windowTitle:), (initialFolder:), (initialFile:), (extensionList:), (fileNameOutNeedBig:), (fileNameOutNeedBig_sz:)
description:
retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.
extensionList is as described for JS_Dialog_BrowseForOpenFiles.
------
name:JS_Double
language:c
return:(void:)
params:(void*:pointer), (int:offset), (double*:doubleOut)
description:
Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.
------
name:extension_api
language:eel2
return:
params:("JS_Double":), (void*:pointer), (int:offset), (&double:)
description:
Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.
------
name:reaper.JS_Double
language:lua
return:(number:double)
params:(identifier:pointer), (integer:offset)
description:
Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.
------
name:JS_Double
language:python
return:(void:pointer),(Int:offset),(Float:doubleOut)
params:(pointer:), (offset:), (doubleOut:)
description:
Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.
------
name:JS_GDI_Blit
language:c
return:(void:)
params:(void*:destHDC), (int:dstx), (int:dsty), (void*:sourceHDC), (int:srcx), (int:srxy), (int:width), (int:height), (const char*:modeOptional)
description:
Blits between two device contexts, which may include LICE "system bitmaps".
mode: Optional parameter. "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:extension_api
language:eel2
return:
params:("JS_GDI_Blit":), (void*:destHDC), (int:dstx), (int:dsty), (void*:sourceHDC), (int:srcx), (int:srxy), (int:width), (int:height), (optional:"mode")
description:
Blits between two device contexts, which may include LICE "system bitmaps".
mode: Optional parameter. "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:reaper.JS_GDI_Blit
language:lua
return:
params:(identifier:destHDC), (integer:dstx), (integer:dsty), (identifier:sourceHDC), (integer:srcx), (integer:srxy), (integer:width), (integer:height), (optional string:mode)
description:
Blits between two device contexts, which may include LICE "system bitmaps".
mode: Optional parameter. "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:JS_GDI_Blit
language:python
return:
params:(void:destHDC), (Int:dstx), (Int:dsty), (void:sourceHDC), (Int:srcx), (Int:srxy), (Int:width), (Int:height), (String:modeOptional)
description:
Blits between two device contexts, which may include LICE "system bitmaps".
mode: Optional parameter. "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:JS_GDI_CreateFillBrush
language:c
return:(void*:)
params:(int:color)
description:

------
name:extension_api
language:eel2
return:(void*:)
params:("JS_GDI_CreateFillBrush":), (int:color)
description:

------
name:reaper.JS_GDI_CreateFillBrush
language:lua
return:(identifier:)
params:(integer:color)
description:

------
name:JS_GDI_CreateFillBrush
language:python
return:(void:)
params:(Int:color)
description:

------
name:JS_GDI_CreateFont
language:c
return:(void*:)
params:(int:height), (int:weight), (int:angle), (bool:italic), (bool:underline), (bool:strikeOut), (const char*:fontName)
description:
Parameters:
* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.
* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.
* fontName: If empty string "", uses first font that matches the other specified attributes.
Note: Text color must be set separately.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_GDI_CreateFont":), (int:height), (int:weight), (int:angle), (bool:italic), (bool:underline), (bool:strike), ("fontName":)
description:
Parameters:
* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.
* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.
* fontName: If empty string "", uses first font that matches the other specified attributes.
Note: Text color must be set separately.
------
name:reaper.JS_GDI_CreateFont
language:lua
return:(identifier:)
params:(integer:height), (integer:weight), (integer:angle), (boolean:italic), (boolean:underline), (boolean:strike), (string:fontName)
description:
Parameters:
* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.
* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.
* fontName: If empty string "", uses first font that matches the other specified attributes.
Note: Text color must be set separately.
------
name:JS_GDI_CreateFont
language:python
return:(void:)
params:(Int:height), (Int:weight), (Int:angle), (Boolean:italic), (Boolean:underline), (Boolean:strikeOut), (String:fontName)
description:
Parameters:
* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.
* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.
* fontName: If empty string "", uses first font that matches the other specified attributes.
Note: Text color must be set separately.
------
name:JS_GDI_CreatePen
language:c
return:(void*:)
params:(int:width), (int:color)
description:

------
name:extension_api
language:eel2
return:(void*:)
params:("JS_GDI_CreatePen":), (int:width), (int:color)
description:

------
name:reaper.JS_GDI_CreatePen
language:lua
return:(identifier:)
params:(integer:width), (integer:color)
description:

------
name:JS_GDI_CreatePen
language:python
return:(void:)
params:(Int:width), (Int:color)
description:

------
name:JS_GDI_DeleteObject
language:c
return:(void:)
params:(void*:GDIObject)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_DeleteObject":), (void*:GDIObject)
description:

------
name:reaper.JS_GDI_DeleteObject
language:lua
return:
params:(identifier:GDIObject)
description:

------
name:JS_GDI_DeleteObject
language:python
return:
params:(void:GDIObject)
description:

------
name:JS_GDI_DrawText
language:c
return:(int:)
params:(void*:deviceHDC), (const char*:text), (int:len), (int:left), (int:top), (int:right), (int:bottom), (const char*:align)
description:
Parameters:
* align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT",
"BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or
"ELLIPSIS"
------
name:extension_api
language:eel2
return:(int:)
params:("JS_GDI_DrawText":), (void*:deviceHDC), ("text":), (int:len), (int:left), (int:top), (int:right), (int:bottom), ("align":)
description:
Parameters:
* align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT",
"BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or
"ELLIPSIS"
------
name:reaper.JS_GDI_DrawText
language:lua
return:(integer:)
params:(identifier:deviceHDC), (string:text), (integer:len), (integer:left), (integer:top), (integer:right), (integer:bottom), (string:align)
description:
Parameters:
* align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT",
"BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or
"ELLIPSIS"
------
name:JS_GDI_DrawText
language:python
return:(Int:)
params:(void:deviceHDC), (String:text), (Int:len), (Int:left), (Int:top), (Int:right), (Int:bottom), (String:align)
description:
Parameters:
* align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT",
"BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or
"ELLIPSIS"
------
name:JS_GDI_FillEllipse
language:c
return:(void:)
params:(void*:deviceHDC), (int:left), (int:top), (int:right), (int:bottom)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_FillEllipse":), (void*:deviceHDC), (int:left), (int:top), (int:right), (int:bottom)
description:

------
name:reaper.JS_GDI_FillEllipse
language:lua
return:
params:(identifier:deviceHDC), (integer:left), (integer:top), (integer:right), (integer:bottom)
description:

------
name:JS_GDI_FillEllipse
language:python
return:
params:(void:deviceHDC), (Int:left), (Int:top), (Int:right), (Int:bottom)
description:

------
name:JS_GDI_FillPolygon
language:c
return:(void:)
params:(void*:deviceHDC), (const char*:packedX), (const char*:packedY), (int:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:extension_api
language:eel2
return:
params:("JS_GDI_FillPolygon":), (void*:deviceHDC), ("packedX":), ("packedY":), (int:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:reaper.JS_GDI_FillPolygon
language:lua
return:
params:(identifier:deviceHDC), (string:packedX), (string:packedY), (integer:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:JS_GDI_FillPolygon
language:python
return:
params:(void:deviceHDC), (String:packedX), (String:packedY), (Int:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:JS_GDI_FillRect
language:c
return:(void:)
params:(void*:deviceHDC), (int:left), (int:top), (int:right), (int:bottom)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_FillRect":), (void*:deviceHDC), (int:left), (int:top), (int:right), (int:bottom)
description:

------
name:reaper.JS_GDI_FillRect
language:lua
return:
params:(identifier:deviceHDC), (integer:left), (integer:top), (integer:right), (integer:bottom)
description:

------
name:JS_GDI_FillRect
language:python
return:
params:(void:deviceHDC), (Int:left), (Int:top), (Int:right), (Int:bottom)
description:

------
name:JS_GDI_FillRoundRect
language:c
return:(void:)
params:(void*:deviceHDC), (int:left), (int:top), (int:right), (int:bottom), (int:xrnd), (int:yrnd)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_FillRoundRect":), (void*:deviceHDC), (int:left), (int:top), (int:right), (int:bottom), (int:xrnd), (int:yrnd)
description:

------
name:reaper.JS_GDI_FillRoundRect
language:lua
return:
params:(identifier:deviceHDC), (integer:left), (integer:top), (integer:right), (integer:bottom), (integer:xrnd), (integer:yrnd)
description:

------
name:JS_GDI_FillRoundRect
language:python
return:
params:(void:deviceHDC), (Int:left), (Int:top), (Int:right), (Int:bottom), (Int:xrnd), (Int:yrnd)
description:

------
name:JS_GDI_GetClientDC
language:c
return:(void*:)
params:(void*:windowHWND)
description:
Returns the device context for the client area of the specified window.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_GDI_GetClientDC":), (void*:windowHWND)
description:
Returns the device context for the client area of the specified window.
------
name:reaper.JS_GDI_GetClientDC
language:lua
return:(identifier:)
params:(identifier:windowHWND)
description:
Returns the device context for the client area of the specified window.
------
name:JS_GDI_GetClientDC
language:python
return:(void:)
params:(void:windowHWND)
description:
Returns the device context for the client area of the specified window.
------
name:JS_GDI_GetScreenDC
language:c
return:(void*:)
params:
description:
Returns a device context for the entire screen.
WARNING: Only available on Windows, not Linux or macOS.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_GDI_GetScreenDC":)
description:
Returns a device context for the entire screen.
WARNING: Only available on Windows, not Linux or macOS.
------
name:reaper.JS_GDI_GetScreenDC
language:lua
return:(identifier:)
params:
description:
Returns a device context for the entire screen.
WARNING: Only available on Windows, not Linux or macOS.
------
name:JS_GDI_GetScreenDC
language:python
return:(void:)
params:
description:
Returns a device context for the entire screen.
WARNING: Only available on Windows, not Linux or macOS.
------
name:JS_GDI_GetSysColor
language:c
return:(int:)
params:(const char*:GUIElement)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_GDI_GetSysColor":), ("GUIElement":)
description:

------
name:reaper.JS_GDI_GetSysColor
language:lua
return:(integer:)
params:(string:GUIElement)
description:

------
name:JS_GDI_GetSysColor
language:python
return:(Int:)
params:(String:GUIElement)
description:

------
name:JS_GDI_GetTextColor
language:c
return:(int:)
params:(void*:deviceHDC)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_GDI_GetTextColor":), (void*:deviceHDC)
description:

------
name:reaper.JS_GDI_GetTextColor
language:lua
return:(integer:)
params:(identifier:deviceHDC)
description:

------
name:JS_GDI_GetTextColor
language:python
return:(Int:)
params:(void:deviceHDC)
description:

------
name:JS_GDI_GetWindowDC
language:c
return:(void*:)
params:(void*:windowHWND)
description:
Returns the device context for the entire window, including title bar and frame.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_GDI_GetWindowDC":), (void*:windowHWND)
description:
Returns the device context for the entire window, including title bar and frame.
------
name:reaper.JS_GDI_GetWindowDC
language:lua
return:(identifier:)
params:(identifier:windowHWND)
description:
Returns the device context for the entire window, including title bar and frame.
------
name:JS_GDI_GetWindowDC
language:python
return:(void:)
params:(void:windowHWND)
description:
Returns the device context for the entire window, including title bar and frame.
------
name:JS_GDI_Line
language:c
return:(void:)
params:(void*:deviceHDC), (int:x1), (int:y1), (int:x2), (int:y2)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_Line":), (void*:deviceHDC), (int:x1), (int:y1), (int:x2), (int:y2)
description:

------
name:reaper.JS_GDI_Line
language:lua
return:
params:(identifier:deviceHDC), (integer:x1), (integer:y1), (integer:x2), (integer:y2)
description:

------
name:JS_GDI_Line
language:python
return:
params:(void:deviceHDC), (Int:x1), (Int:y1), (Int:x2), (Int:y2)
description:

------
name:JS_GDI_Polyline
language:c
return:(void:)
params:(void*:deviceHDC), (const char*:packedX), (const char*:packedY), (int:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:extension_api
language:eel2
return:
params:("JS_GDI_Polyline":), (void*:deviceHDC), ("packedX":), ("packedY":), (int:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:reaper.JS_GDI_Polyline
language:lua
return:
params:(identifier:deviceHDC), (string:packedX), (string:packedY), (integer:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:JS_GDI_Polyline
language:python
return:
params:(void:deviceHDC), (String:packedX), (String:packedY), (Int:numPoints)
description:
packedX and packedY are strings of points, each packed as "<i4".
------
name:JS_GDI_ReleaseDC
language:c
return:(int:)
params:(void*:deviceHDC), (void* :windowHWNDOptional)
description:
To release a window HDC, both arguments must be supplied: the HWND as
well as the HDC.  To release a screen DC, only the HDC needs to be
supplied.
For compatibility with previous versions, the HWND and HDC can be supplied in any order.
NOTE: Any GDI HDC should be released immediately after drawing, and
deferred scripts should get and release new DCs in each cycle.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_GDI_ReleaseDC":), (void*:deviceHDC), (void* :windowHWND)
description:
To release a window HDC, both arguments must be supplied: the HWND as
well as the HDC.  To release a screen DC, only the HDC needs to be
supplied.
For compatibility with previous versions, the HWND and HDC can be supplied in any order.
NOTE: Any GDI HDC should be released immediately after drawing, and
deferred scripts should get and release new DCs in each cycle.
------
name:reaper.JS_GDI_ReleaseDC
language:lua
return:(integer:)
params:(identifier:deviceHDC), (identifier :windowHWND)
description:
To release a window HDC, both arguments must be supplied: the HWND as
well as the HDC.  To release a screen DC, only the HDC needs to be
supplied.
For compatibility with previous versions, the HWND and HDC can be supplied in any order.
NOTE: Any GDI HDC should be released immediately after drawing, and
deferred scripts should get and release new DCs in each cycle.
------
name:JS_GDI_ReleaseDC
language:python
return:(Int:)
params:(void:deviceHDC), (void :windowHWNDOptional)
description:
To release a window HDC, both arguments must be supplied: the HWND as
well as the HDC.  To release a screen DC, only the HDC needs to be
supplied.
For compatibility with previous versions, the HWND and HDC can be supplied in any order.
NOTE: Any GDI HDC should be released immediately after drawing, and
deferred scripts should get and release new DCs in each cycle.
------
name:JS_GDI_SelectObject
language:c
return:(void*:)
params:(void*:deviceHDC), (void*:GDIObject)
description:
Activates a font, pen, or fill brush for subsequent drawing in the specified device context.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_GDI_SelectObject":), (void*:deviceHDC), (void*:GDIObject)
description:
Activates a font, pen, or fill brush for subsequent drawing in the specified device context.
------
name:reaper.JS_GDI_SelectObject
language:lua
return:(identifier:)
params:(identifier:deviceHDC), (identifier:GDIObject)
description:
Activates a font, pen, or fill brush for subsequent drawing in the specified device context.
------
name:JS_GDI_SelectObject
language:python
return:(void:)
params:(void:deviceHDC), (void:GDIObject)
description:
Activates a font, pen, or fill brush for subsequent drawing in the specified device context.
------
name:JS_GDI_SetPixel
language:c
return:(void:)
params:(void*:deviceHDC), (int:x), (int:y), (int:color)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_SetPixel":), (void*:deviceHDC), (int:x), (int:y), (int:color)
description:

------
name:reaper.JS_GDI_SetPixel
language:lua
return:
params:(identifier:deviceHDC), (integer:x), (integer:y), (integer:color)
description:

------
name:JS_GDI_SetPixel
language:python
return:
params:(void:deviceHDC), (Int:x), (Int:y), (Int:color)
description:

------
name:JS_GDI_SetTextBkColor
language:c
return:(void:)
params:(void*:deviceHDC), (int:color)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_SetTextBkColor":), (void*:deviceHDC), (int:color)
description:

------
name:reaper.JS_GDI_SetTextBkColor
language:lua
return:
params:(identifier:deviceHDC), (integer:color)
description:

------
name:JS_GDI_SetTextBkColor
language:python
return:
params:(void:deviceHDC), (Int:color)
description:

------
name:JS_GDI_SetTextBkMode
language:c
return:(void:)
params:(void*:deviceHDC), (int:mode)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_SetTextBkMode":), (void*:deviceHDC), (int:mode)
description:

------
name:reaper.JS_GDI_SetTextBkMode
language:lua
return:
params:(identifier:deviceHDC), (integer:mode)
description:

------
name:JS_GDI_SetTextBkMode
language:python
return:
params:(void:deviceHDC), (Int:mode)
description:

------
name:JS_GDI_SetTextColor
language:c
return:(void:)
params:(void*:deviceHDC), (int:color)
description:

------
name:extension_api
language:eel2
return:
params:("JS_GDI_SetTextColor":), (void*:deviceHDC), (int:color)
description:

------
name:reaper.JS_GDI_SetTextColor
language:lua
return:
params:(identifier:deviceHDC), (integer:color)
description:

------
name:JS_GDI_SetTextColor
language:python
return:
params:(void:deviceHDC), (Int:color)
description:

------
name:JS_GDI_StretchBlit
language:c
return:(void:)
params:(void*:destHDC), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (void*:sourceHDC), (int:srcx), (int:srxy), (int:srcw), (int:srch), (const char*:modeOptional)
description:
Blits between two device contexts, which may include LICE "system bitmaps".
modeOptional: "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:extension_api
language:eel2
return:
params:("JS_GDI_StretchBlit":), (void*:destHDC), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (void*:sourceHDC), (int:srcx), (int:srxy), (int:srcw), (int:srch), (optional:"mode")
description:
Blits between two device contexts, which may include LICE "system bitmaps".
modeOptional: "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:reaper.JS_GDI_StretchBlit
language:lua
return:
params:(identifier:destHDC), (integer:dstx), (integer:dsty), (integer:dstw), (integer:dsth), (identifier:sourceHDC), (integer:srcx), (integer:srxy), (integer:srcw), (integer:srch), (optional string:mode)
description:
Blits between two device contexts, which may include LICE "system bitmaps".
modeOptional: "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:JS_GDI_StretchBlit
language:python
return:
params:(void:destHDC), (Int:dstx), (Int:dsty), (Int:dstw), (Int:dsth), (void:sourceHDC), (Int:srcx), (Int:srxy), (Int:srcw), (Int:srch), (String:modeOptional)
description:
Blits between two device contexts, which may include LICE "system bitmaps".
modeOptional: "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of
the source bitmap. For proper color rendering, a separate
pre-multiplication step is therefore required, using either LICE_Blit or
LICE_ProcessRect.
------
name:JS_Int
language:c
return:(void:)
params:(void*:pointer), (int:offset), (int*:intOut)
description:
Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.
------
name:extension_api
language:eel2
return:
params:("JS_Int":), (void*:pointer), (int:offset), (int:&int)
description:
Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.
------
name:reaper.JS_Int
language:lua
return:(number:int)
params:(identifier:pointer), (integer:offset)
description:
Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.
------
name:JS_Int
language:python
return:(void:pointer),(Int:offset),(Int:intOut)
params:(pointer:), (offset:), (intOut:)
description:
Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.
------
name:JS_LICE_AlterBitmapHSV
language:c
return:(void:)
params:(void*:bitmap), (double:hue), (double:saturation), (double:value)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:extension_api
language:eel2
return:
params:("JS_LICE_AlterBitmapHSV":), (void*:bitmap), (hue:), (saturation:), (value:)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:reaper.JS_LICE_AlterBitmapHSV
language:lua
return:
params:(identifier:bitmap), (number:hue), (number:saturation), (number:value)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:JS_LICE_AlterBitmapHSV
language:python
return:
params:(void:bitmap), (Float:hue), (Float:saturation), (Float:value)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:JS_LICE_AlterRectHSV
language:c
return:(void:)
params:(void*:bitmap), (int:x), (int:y), (int:w), (int:h), (double:hue), (double:saturation), (double:value)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:extension_api
language:eel2
return:
params:("JS_LICE_AlterRectHSV":), (void*:bitmap), (int:x), (int:y), (int:w), (int:h), (hue:), (saturation:), (value:)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:reaper.JS_LICE_AlterRectHSV
language:lua
return:
params:(identifier:bitmap), (integer:x), (integer:y), (integer:w), (integer:h), (number:hue), (number:saturation), (number:value)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:JS_LICE_AlterRectHSV
language:python
return:
params:(void:bitmap), (Int:x), (Int:y), (Int:w), (Int:h), (Float:hue), (Float:saturation), (Float:value)
description:
Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)
------
name:JS_LICE_Arc
language:c
return:(void:)
params:(void*:bitmap), (double:cx), (double:cy), (double:r), (double:minAngle), (double:maxAngle), (int:color), (double:alpha), (const char*:mode), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_Arc":), (void*:bitmap), (cx:), (cy:), (r:), (minAngle:), (maxAngle:), (int:color), (alpha:), ("mode":), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_Arc
language:lua
return:
params:(identifier:bitmap), (number:cx), (number:cy), (number:r), (number:minAngle), (number:maxAngle), (integer:color), (number:alpha), (string:mode), (boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_Arc
language:python
return:
params:(void:bitmap), (Float:cx), (Float:cy), (Float:r), (Float:minAngle), (Float:maxAngle), (Int:color), (Float:alpha), (String:mode), (Boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_ArrayAllBitmaps
language:c
return:(int:)
params:(void*:reaperarray)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_LICE_ArrayAllBitmaps":), (void*:reaperarray)
description:

------
name:reaper.JS_LICE_ArrayAllBitmaps
language:lua
return:(integer:)
params:(identifier:reaperarray)
description:

------
name:JS_LICE_ArrayAllBitmaps
language:python
return:(Int:)
params:(void:reaperarray)
description:

------
name:JS_LICE_Bezier
language:c
return:(void:)
params:(void*:bitmap), (double:xstart), (double:ystart), (double:xctl1), (double:yctl1), (double:xctl2), (double:yctl2), (double:xend), (double:yend), (double:tol), (int:color), (double:alpha), (const char*:mode), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_Bezier":), (void*:bitmap), (xstart:), (ystart:), (xctl1:), (yctl1:), (xctl2:), (yctl2:), (xend:), (yend:), (tol:), (int:color), (alpha:), ("mode":), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_Bezier
language:lua
return:
params:(identifier:bitmap), (number:xstart), (number:ystart), (number:xctl1), (number:yctl1), (number:xctl2), (number:yctl2), (number:xend), (number:yend), (number:tol), (integer:color), (number:alpha), (string:mode), (boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_Bezier
language:python
return:
params:(void:bitmap), (Float:xstart), (Float:ystart), (Float:xctl1), (Float:yctl1), (Float:xctl2), (Float:yctl2), (Float:xend), (Float:yend), (Float:tol), (Int:color), (Float:alpha), (String:mode), (Boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_Blit
language:c
return:(void:)
params:(void*:destBitmap), (int:dstx), (int:dsty), (void*:sourceBitmap), (int:srcx), (int:srcy), (int:width), (int:height), (double:alpha), (const char*:mode)
description:
Standard LICE modes: "COPY" (default if empty string), "MASK", "ADD",
"DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with
"ALPHA" to enable per-pixel alpha blending.
In addition to the standard LICE modes, LICE_Blit also offers:
* "CHANCOPY_XTOY", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)
* "BLUR"
* "ALPHAMUL", which overwrites the destination with a per-pixel
alpha-multiplied copy of the source. (Similar to first clearing the
destination with 0x00000000 and then blitting with "COPY,ALPHA".)
------
name:extension_api
language:eel2
return:
params:("JS_LICE_Blit":), (void*:destBitmap), (int:dstx), (int:dsty), (void*:sourceBitmap), (int:srcx), (int:srcy), (int:width), (int:height), (alpha:), ("mode":)
description:
Standard LICE modes: "COPY" (default if empty string), "MASK", "ADD",
"DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with
"ALPHA" to enable per-pixel alpha blending.
In addition to the standard LICE modes, LICE_Blit also offers:
* "CHANCOPY_XTOY", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)
* "BLUR"
* "ALPHAMUL", which overwrites the destination with a per-pixel
alpha-multiplied copy of the source. (Similar to first clearing the
destination with 0x00000000 and then blitting with "COPY,ALPHA".)
------
name:reaper.JS_LICE_Blit
language:lua
return:
params:(identifier:destBitmap), (integer:dstx), (integer:dsty), (identifier:sourceBitmap), (integer:srcx), (integer:srcy), (integer:width), (integer:height), (number:alpha), (string:mode)
description:
Standard LICE modes: "COPY" (default if empty string), "MASK", "ADD",
"DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with
"ALPHA" to enable per-pixel alpha blending.
In addition to the standard LICE modes, LICE_Blit also offers:
* "CHANCOPY_XTOY", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)
* "BLUR"
* "ALPHAMUL", which overwrites the destination with a per-pixel
alpha-multiplied copy of the source. (Similar to first clearing the
destination with 0x00000000 and then blitting with "COPY,ALPHA".)
------
name:JS_LICE_Blit
language:python
return:
params:(void:destBitmap), (Int:dstx), (Int:dsty), (void:sourceBitmap), (Int:srcx), (Int:srcy), (Int:width), (Int:height), (Float:alpha), (String:mode)
description:
Standard LICE modes: "COPY" (default if empty string), "MASK", "ADD",
"DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with
"ALPHA" to enable per-pixel alpha blending.
In addition to the standard LICE modes, LICE_Blit also offers:
* "CHANCOPY_XTOY", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)
* "BLUR"
* "ALPHAMUL", which overwrites the destination with a per-pixel
alpha-multiplied copy of the source. (Similar to first clearing the
destination with 0x00000000 and then blitting with "COPY,ALPHA".)
------
name:JS_LICE_Circle
language:c
return:(void:)
params:(void*:bitmap), (double:cx), (double:cy), (double:r), (int:color), (double:alpha), (const char*:mode), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_Circle":), (void*:bitmap), (cx:), (cy:), (r:), (int:color), (alpha:), ("mode":), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_Circle
language:lua
return:
params:(identifier:bitmap), (number:cx), (number:cy), (number:r), (integer:color), (number:alpha), (string:mode), (boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_Circle
language:python
return:
params:(void:bitmap), (Float:cx), (Float:cy), (Float:r), (Int:color), (Float:alpha), (String:mode), (Boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_Clear
language:c
return:(void:)
params:(void*:bitmap), (int:color)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_Clear":), (void*:bitmap), (int:color)
description:

------
name:reaper.JS_LICE_Clear
language:lua
return:
params:(identifier:bitmap), (integer:color)
description:

------
name:JS_LICE_Clear
language:python
return:
params:(void:bitmap), (Int:color)
description:

------
name:JS_LICE_CreateBitmap
language:c
return:(void*:)
params:(bool:isSysBitmap), (int:width), (int:height)
description:

------
name:extension_api
language:eel2
return:(void*:)
params:("JS_LICE_CreateBitmap":), (bool:isSysBitmap), (int:width), (int:height)
description:

------
name:reaper.JS_LICE_CreateBitmap
language:lua
return:(identifier:)
params:(boolean:isSysBitmap), (integer:width), (integer:height)
description:

------
name:JS_LICE_CreateBitmap
language:python
return:(void:)
params:(Boolean:isSysBitmap), (Int:width), (Int:height)
description:

------
name:JS_LICE_CreateFont
language:c
return:(void*:)
params:
description:

------
name:extension_api
language:eel2
return:(void*:)
params:("JS_LICE_CreateFont":)
description:

------
name:reaper.JS_LICE_CreateFont
language:lua
return:(identifier:)
params:
description:

------
name:JS_LICE_CreateFont
language:python
return:(void:)
params:
description:

------
name:JS_LICE_DestroyBitmap
language:c
return:(void:)
params:(void*:bitmap)
description:
Deletes the bitmap, and also unlinks bitmap from any composited window.
------
name:extension_api
language:eel2
return:
params:("JS_LICE_DestroyBitmap":), (void*:bitmap)
description:
Deletes the bitmap, and also unlinks bitmap from any composited window.
------
name:reaper.JS_LICE_DestroyBitmap
language:lua
return:
params:(identifier:bitmap)
description:
Deletes the bitmap, and also unlinks bitmap from any composited window.
------
name:JS_LICE_DestroyBitmap
language:python
return:
params:(void:bitmap)
description:
Deletes the bitmap, and also unlinks bitmap from any composited window.
------
name:JS_LICE_DestroyFont
language:c
return:(void:)
params:(void*:LICEFont)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_DestroyFont":), (void*:LICEFont)
description:

------
name:reaper.JS_LICE_DestroyFont
language:lua
return:
params:(identifier:LICEFont)
description:

------
name:JS_LICE_DestroyFont
language:python
return:
params:(void:LICEFont)
description:

------
name:JS_LICE_DrawChar
language:c
return:(void:)
params:(void*:bitmap), (int:x), (int:y), (char:c), (int:color), (double:alpha), (int:mode)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_DrawChar":), (void*:bitmap), (int:x), (int:y), (char:c), (int:color), (alpha:), (int:mode)
description:

------
name:reaper.JS_LICE_DrawChar
language:lua
return:
params:(identifier:bitmap), (integer:x), (integer:y), (integer:c), (integer:color), (number:alpha), (integer:mode)
description:

------
name:JS_LICE_DrawChar
language:python
return:
params:(void:bitmap), (Int:x), (Int:y), (Int:c), (Int:color), (Float:alpha), (Int:mode)
description:

------
name:JS_LICE_DrawText
language:c
return:(int:)
params:(void*:bitmap), (void*:LICEFont), (const char*:text), (int:textLen), (int:x1), (int:y1), (int:x2), (int:y2)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_LICE_DrawText":), (void*:bitmap), (void*:LICEFont), ("text":), (int:textLen), (int:x1), (int:y1), (int:x2), (int:y2)
description:

------
name:reaper.JS_LICE_DrawText
language:lua
return:(integer:)
params:(identifier:bitmap), (identifier:LICEFont), (string:text), (integer:textLen), (integer:x1), (integer:y1), (integer:x2), (integer:y2)
description:

------
name:JS_LICE_DrawText
language:python
return:(Int:)
params:(void:bitmap), (void:LICEFont), (String:text), (Int:textLen), (Int:x1), (Int:y1), (Int:x2), (Int:y2)
description:

------
name:JS_LICE_FillCircle
language:c
return:(void:)
params:(void*:bitmap), (double:cx), (double:cy), (double:r), (int:color), (double:alpha), (const char*:mode), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_FillCircle":), (void*:bitmap), (cx:), (cy:), (r:), (int:color), (alpha:), ("mode":), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_FillCircle
language:lua
return:
params:(identifier:bitmap), (number:cx), (number:cy), (number:r), (integer:color), (number:alpha), (string:mode), (boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_FillCircle
language:python
return:
params:(void:bitmap), (Float:cx), (Float:cy), (Float:r), (Int:color), (Float:alpha), (String:mode), (Boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_FillPolygon
language:c
return:(void:)
params:(void*:bitmap), (const char*:packedX), (const char*:packedY), (int:numPoints), (int:color), (double:alpha), (const char*:mode)
description:
packedX and packedY are two strings of coordinates, each packed as "<i4".
LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_FillPolygon":), (void*:bitmap), ("packedX":), ("packedY":), (int:numPoints), (int:color), (alpha:), ("mode":)
description:
packedX and packedY are two strings of coordinates, each packed as "<i4".
LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_FillPolygon
language:lua
return:
params:(identifier:bitmap), (string:packedX), (string:packedY), (integer:numPoints), (integer:color), (number:alpha), (string:mode)
description:
packedX and packedY are two strings of coordinates, each packed as "<i4".
LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_FillPolygon
language:python
return:
params:(void:bitmap), (String:packedX), (String:packedY), (Int:numPoints), (Int:color), (Float:alpha), (String:mode)
description:
packedX and packedY are two strings of coordinates, each packed as "<i4".
LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_FillRect
language:c
return:(void:)
params:(void*:bitmap), (int:x), (int:y), (int:w), (int:h), (int:color), (double:alpha), (const char*:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_FillRect":), (void*:bitmap), (int:x), (int:y), (int:w), (int:h), (int:color), (alpha:), ("mode":)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_FillRect
language:lua
return:
params:(identifier:bitmap), (integer:x), (integer:y), (integer:w), (integer:h), (integer:color), (number:alpha), (string:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_FillRect
language:python
return:
params:(void:bitmap), (Int:x), (Int:y), (Int:w), (Int:h), (Int:color), (Float:alpha), (String:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_FillTriangle
language:c
return:(void:)
params:(void*:bitmap), (int:x1), (int:y1), (int:x2), (int:y2), (int:x3), (int:y3), (int:color), (double:alpha), (const char*:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_FillTriangle":), (void*:bitmap), (int:x1), (int:y1), (int:x2), (int:y2), (int:x3), (int:y3), (int:color), (alpha:), ("mode":)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_FillTriangle
language:lua
return:
params:(identifier:bitmap), (integer:x1), (integer:y1), (integer:x2), (integer:y2), (integer:x3), (integer:y3), (integer:color), (number:alpha), (string:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_FillTriangle
language:python
return:
params:(void:bitmap), (Int:x1), (Int:y1), (Int:x2), (Int:y2), (Int:x3), (Int:y3), (Int:color), (Float:alpha), (String:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_GetDC
language:c
return:(void*:)
params:(void*:bitmap)
description:

------
name:extension_api
language:eel2
return:(void*:)
params:("JS_LICE_GetDC":), (void*:bitmap)
description:

------
name:reaper.JS_LICE_GetDC
language:lua
return:(identifier:)
params:(identifier:bitmap)
description:

------
name:JS_LICE_GetDC
language:python
return:(void:)
params:(void:bitmap)
description:

------
name:JS_LICE_GetHeight
language:c
return:(int:)
params:(void*:bitmap)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_LICE_GetHeight":), (void*:bitmap)
description:

------
name:reaper.JS_LICE_GetHeight
language:lua
return:(integer:)
params:(identifier:bitmap)
description:

------
name:JS_LICE_GetHeight
language:python
return:(Int:)
params:(void:bitmap)
description:

------
name:JS_LICE_GetPixel
language:c
return:(void:)
params:(void*:bitmap), (int:x), (int:y), (double*:colorOut)
description:
Returns the color of the specified pixel.
------
name:extension_api
language:eel2
return:
params:("JS_LICE_GetPixel":), (void*:bitmap), (int:x), (int:y), (&color:)
description:
Returns the color of the specified pixel.
------
name:reaper.JS_LICE_GetPixel
language:lua
return:(number:color)
params:(identifier:bitmap), (integer:x), (integer:y)
description:
Returns the color of the specified pixel.
------
name:JS_LICE_GetPixel
language:python
return:(void:bitmap),(Int:x),(Int:y),(Float:colorOut)
params:(bitmap:), (x:), (y:), (colorOut:)
description:
Returns the color of the specified pixel.
------
name:JS_LICE_GetWidth
language:c
return:(int:)
params:(void*:bitmap)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_LICE_GetWidth":), (void*:bitmap)
description:

------
name:reaper.JS_LICE_GetWidth
language:lua
return:(integer:)
params:(identifier:bitmap)
description:

------
name:JS_LICE_GetWidth
language:python
return:(Int:)
params:(void:bitmap)
description:

------
name:JS_LICE_GradRect
language:c
return:(void:)
params:(void*:bitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (double:ir), (double:ig), (double:ib), (double:ia), (double:drdx), (double:dgdx), (double:dbdx), (double:dadx), (double:drdy), (double:dgdy), (double:dbdy), (double:dady), (const char*:mode)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_GradRect":), (void*:bitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (ir:), (ig:), (ib:), (ia:), (drdx:), (dgdx:), (dbdx:), (dadx:), (drdy:), (dgdy:), (dbdy:), (dady:), ("mode":)
description:

------
name:reaper.JS_LICE_GradRect
language:lua
return:
params:(identifier:bitmap), (integer:dstx), (integer:dsty), (integer:dstw), (integer:dsth), (number:ir), (number:ig), (number:ib), (number:ia), (number:drdx), (number:dgdx), (number:dbdx), (number:dadx), (number:drdy), (number:dgdy), (number:dbdy), (number:dady), (string:mode)
description:

------
name:JS_LICE_GradRect
language:python
return:
params:(void:bitmap), (Int:dstx), (Int:dsty), (Int:dstw), (Int:dsth), (Float:ir), (Float:ig), (Float:ib), (Float:ia), (Float:drdx), (Float:dgdx), (Float:dbdx), (Float:dadx), (Float:drdy), (Float:dgdy), (Float:dbdy), (Float:dady), (String:mode)
description:

------
name:JS_LICE_IsFlipped
language:c
return:(bool:)
params:(void*:bitmap)
description:

------
name:extension_api
language:eel2
return:(bool:)
params:("JS_LICE_IsFlipped":), (void*:bitmap)
description:

------
name:reaper.JS_LICE_IsFlipped
language:lua
return:(boolean:)
params:(identifier:bitmap)
description:

------
name:JS_LICE_IsFlipped
language:python
return:(Boolean:)
params:(void:bitmap)
description:

------
name:JS_LICE_Line
language:c
return:(void:)
params:(void*:bitmap), (double:x1), (double:y1), (double:x2), (double:y2), (int:color), (double:alpha), (const char*:mode), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_Line":), (void*:bitmap), (x1:), (y1:), (x2:), (y2:), (int:color), (alpha:), ("mode":), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_Line
language:lua
return:
params:(identifier:bitmap), (number:x1), (number:y1), (number:x2), (number:y2), (integer:color), (number:alpha), (string:mode), (boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_Line
language:python
return:
params:(void:bitmap), (Float:x1), (Float:y1), (Float:x2), (Float:y2), (Int:color), (Float:alpha), (String:mode), (Boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_ListAllBitmaps
language:c
return:(int:)
params:(char*:listOutNeedBig), (int:listOutNeedBig_sz)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_LICE_ListAllBitmaps":), (#list:)
description:

------
name:reaper.JS_LICE_ListAllBitmaps
language:lua
return:(integer:retval),(string:list)
params:
description:

------
name:JS_LICE_ListAllBitmaps
language:python
return:(Int:retval),(String:listOutNeedBig),(Int:listOutNeedBig_sz)
params:(listOutNeedBig:), (listOutNeedBig_sz:)
description:

------
name:JS_LICE_LoadPNG
language:c
return:(void*:)
params:(const char*:filename)
description:
Returns a system LICE bitmap containing the PNG.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_LICE_LoadPNG":), ("filename":)
description:
Returns a system LICE bitmap containing the PNG.
------
name:reaper.JS_LICE_LoadPNG
language:lua
return:(identifier:)
params:(string:filename)
description:
Returns a system LICE bitmap containing the PNG.
------
name:JS_LICE_LoadPNG
language:python
return:(void:)
params:(String:filename)
description:
Returns a system LICE bitmap containing the PNG.
------
name:JS_LICE_MeasureText
language:c
return:(void:)
params:(const char*:text), (int*:widthOut), (int*:HeightOut)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_MeasureText":), ("text":), (int:&width), (int:&Height)
description:

------
name:reaper.JS_LICE_MeasureText
language:lua
return:(number:width),(number:Height)
params:(string:text)
description:

------
name:JS_LICE_MeasureText
language:python
return:(String:text),(Int:widthOut),(Int:HeightOut)
params:(text:), (widthOut:), (HeightOut:)
description:

------
name:JS_LICE_ProcessRect
language:c
return:(bool:)
params:(void*:bitmap), (int:x), (int:y), (int:w), (int:h), (const char*:mode), (double:operand)
description:
Applies bitwise operations to each pixel in the target rectangle.
operand: a color in 0xAARRGGBB format.
modes:
* "XOR", "OR" or "AND".
* "SET_XYZ", with XYZ any combination of A, R, G, and B: copies the
specified channels from operand to the bitmap. (Useful for setting the
alpha values of a bitmap.)
* "ALPHAMUL": Performs alpha pre-multiplication on each pixel in the
rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not
perform alpha multiplication on the fly, and a separate alpha
pre-multiplication step is therefore required.)
NOTE:
LICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:
reaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, "ADD").
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_LICE_ProcessRect":), (void*:bitmap), (int:x), (int:y), (int:w), (int:h), ("mode":), (operand:)
description:
Applies bitwise operations to each pixel in the target rectangle.
operand: a color in 0xAARRGGBB format.
modes:
* "XOR", "OR" or "AND".
* "SET_XYZ", with XYZ any combination of A, R, G, and B: copies the
specified channels from operand to the bitmap. (Useful for setting the
alpha values of a bitmap.)
* "ALPHAMUL": Performs alpha pre-multiplication on each pixel in the
rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not
perform alpha multiplication on the fly, and a separate alpha
pre-multiplication step is therefore required.)
NOTE:
LICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:
reaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, "ADD").
------
name:reaper.JS_LICE_ProcessRect
language:lua
return:(boolean:)
params:(identifier:bitmap), (integer:x), (integer:y), (integer:w), (integer:h), (string:mode), (number:operand)
description:
Applies bitwise operations to each pixel in the target rectangle.
operand: a color in 0xAARRGGBB format.
modes:
* "XOR", "OR" or "AND".
* "SET_XYZ", with XYZ any combination of A, R, G, and B: copies the
specified channels from operand to the bitmap. (Useful for setting the
alpha values of a bitmap.)
* "ALPHAMUL": Performs alpha pre-multiplication on each pixel in the
rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not
perform alpha multiplication on the fly, and a separate alpha
pre-multiplication step is therefore required.)
NOTE:
LICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:
reaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, "ADD").
------
name:JS_LICE_ProcessRect
language:python
return:(Boolean:)
params:(void:bitmap), (Int:x), (Int:y), (Int:w), (Int:h), (String:mode), (Float:operand)
description:
Applies bitwise operations to each pixel in the target rectangle.
operand: a color in 0xAARRGGBB format.
modes:
* "XOR", "OR" or "AND".
* "SET_XYZ", with XYZ any combination of A, R, G, and B: copies the
specified channels from operand to the bitmap. (Useful for setting the
alpha values of a bitmap.)
* "ALPHAMUL": Performs alpha pre-multiplication on each pixel in the
rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not
perform alpha multiplication on the fly, and a separate alpha
pre-multiplication step is therefore required.)
NOTE:
LICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:
reaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, "ADD").
------
name:JS_LICE_PutPixel
language:c
return:(void:)
params:(void*:bitmap), (int:x), (int:y), (double:color), (double:alpha), (const char*:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_PutPixel":), (void*:bitmap), (int:x), (int:y), (color:), (alpha:), ("mode":)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_PutPixel
language:lua
return:
params:(identifier:bitmap), (integer:x), (integer:y), (number:color), (number:alpha), (string:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_PutPixel
language:python
return:
params:(void:bitmap), (Int:x), (Int:y), (Float:color), (Float:alpha), (String:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_Resize
language:c
return:(void:)
params:(void*:bitmap), (int:width), (int:height)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_Resize":), (void*:bitmap), (int:width), (int:height)
description:

------
name:reaper.JS_LICE_Resize
language:lua
return:
params:(identifier:bitmap), (integer:width), (integer:height)
description:

------
name:JS_LICE_Resize
language:python
return:
params:(void:bitmap), (Int:width), (Int:height)
description:

------
name:JS_LICE_RotatedBlit
language:c
return:(void:)
params:(void*:destBitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (void*:sourceBitmap), (double:srcx), (double:srcy), (double:srcw), (double:srch), (double:angle), (double:rotxcent), (double:rotycent), (bool:cliptosourcerect), (double:alpha), (const char*:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:extension_api
language:eel2
return:
params:("JS_LICE_RotatedBlit":), (void*:destBitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (void*:sourceBitmap), (srcx:), (srcy:), (srcw:), (srch:), (angle:), (rotxcent:), (rotycent:), (bool:cliptosourcerect), (alpha:), ("mode":)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:reaper.JS_LICE_RotatedBlit
language:lua
return:
params:(identifier:destBitmap), (integer:dstx), (integer:dsty), (integer:dstw), (integer:dsth), (identifier:sourceBitmap), (number:srcx), (number:srcy), (number:srcw), (number:srch), (number:angle), (number:rotxcent), (number:rotycent), (boolean:cliptosourcerect), (number:alpha), (string:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:JS_LICE_RotatedBlit
language:python
return:
params:(void:destBitmap), (Int:dstx), (Int:dsty), (Int:dstw), (Int:dsth), (void:sourceBitmap), (Float:srcx), (Float:srcy), (Float:srcw), (Float:srch), (Float:angle), (Float:rotxcent), (Float:rotycent), (Boolean:cliptosourcerect), (Float:alpha), (String:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:JS_LICE_RoundRect
language:c
return:(void:)
params:(void*:bitmap), (double:x), (double:y), (double:w), (double:h), (int:cornerradius), (int:color), (double:alpha), (const char*:mode), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:extension_api
language:eel2
return:
params:("JS_LICE_RoundRect":), (void*:bitmap), (x:), (y:), (w:), (h:), (int:cornerradius), (int:color), (alpha:), ("mode":), (bool:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:reaper.JS_LICE_RoundRect
language:lua
return:
params:(identifier:bitmap), (number:x), (number:y), (number:w), (number:h), (integer:cornerradius), (integer:color), (number:alpha), (string:mode), (boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_RoundRect
language:python
return:
params:(void:bitmap), (Float:x), (Float:y), (Float:w), (Float:h), (Int:cornerradius), (Int:color), (Float:alpha), (String:mode), (Boolean:antialias)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).
------
name:JS_LICE_ScaledBlit
language:c
return:(void:)
params:(void*:destBitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (void*:srcBitmap), (double:srcx), (double:srcy), (double:srcw), (double:srch), (double:alpha), (const char*:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:extension_api
language:eel2
return:
params:("JS_LICE_ScaledBlit":), (void*:destBitmap), (int:dstx), (int:dsty), (int:dstw), (int:dsth), (void*:srcBitmap), (srcx:), (srcy:), (srcw:), (srch:), (alpha:), ("mode":)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:reaper.JS_LICE_ScaledBlit
language:lua
return:
params:(identifier:destBitmap), (integer:dstx), (integer:dsty), (integer:dstw), (integer:dsth), (identifier:srcBitmap), (number:srcx), (number:srcy), (number:srcw), (number:srch), (number:alpha), (string:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:JS_LICE_ScaledBlit
language:python
return:
params:(void:destBitmap), (Int:dstx), (Int:dsty), (Int:dstw), (Int:dsth), (void:srcBitmap), (Float:srcx), (Float:srcy), (Float:srcw), (Float:srch), (Float:alpha), (String:mode)
description:
LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE",
"MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA"
to enable per-pixel alpha blending.
------
name:JS_LICE_SetAlphaFromColorMask
language:c
return:(void:)
params:(void*:bitmap), (int:colorRGB)
description:
Sets all pixels that match the given color's RGB values to fully
transparent, and all other pixels to fully opaque.  (All pixels' RGB
values remain unchanged.)
------
name:extension_api
language:eel2
return:
params:("JS_LICE_SetAlphaFromColorMask":), (void*:bitmap), (int:colorRGB)
description:
Sets all pixels that match the given color's RGB values to fully
transparent, and all other pixels to fully opaque.  (All pixels' RGB
values remain unchanged.)
------
name:reaper.JS_LICE_SetAlphaFromColorMask
language:lua
return:
params:(identifier:bitmap), (integer:colorRGB)
description:
Sets all pixels that match the given color's RGB values to fully
transparent, and all other pixels to fully opaque.  (All pixels' RGB
values remain unchanged.)
------
name:JS_LICE_SetAlphaFromColorMask
language:python
return:
params:(void:bitmap), (Int:colorRGB)
description:
Sets all pixels that match the given color's RGB values to fully
transparent, and all other pixels to fully opaque.  (All pixels' RGB
values remain unchanged.)
------
name:JS_LICE_SetFontBkColor
language:c
return:(void:)
params:(void*:LICEFont), (int:color)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_SetFontBkColor":), (void*:LICEFont), (int:color)
description:

------
name:reaper.JS_LICE_SetFontBkColor
language:lua
return:
params:(identifier:LICEFont), (integer:color)
description:

------
name:JS_LICE_SetFontBkColor
language:python
return:
params:(void:LICEFont), (Int:color)
description:

------
name:JS_LICE_SetFontColor
language:c
return:(void:)
params:(void*:LICEFont), (int:color)
description:

------
name:extension_api
language:eel2
return:
params:("JS_LICE_SetFontColor":), (void*:LICEFont), (int:color)
description:

------
name:reaper.JS_LICE_SetFontColor
language:lua
return:
params:(identifier:LICEFont), (integer:color)
description:

------
name:JS_LICE_SetFontColor
language:python
return:
params:(void:LICEFont), (Int:color)
description:

------
name:JS_LICE_SetFontFromGDI
language:c
return:(void:)
params:(void*:LICEFont), (void*:GDIFont), (const char*:moreFormats)
description:
Converts a GDI font into a LICE font.
The font can be modified by the following flags, in a comma-separated list:
"VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".
------
name:extension_api
language:eel2
return:
params:("JS_LICE_SetFontFromGDI":), (void*:LICEFont), (void*:GDIFont), ("moreFormats":)
description:
Converts a GDI font into a LICE font.
The font can be modified by the following flags, in a comma-separated list:
"VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".
------
name:reaper.JS_LICE_SetFontFromGDI
language:lua
return:
params:(identifier:LICEFont), (identifier:GDIFont), (string:moreFormats)
description:
Converts a GDI font into a LICE font.
The font can be modified by the following flags, in a comma-separated list:
"VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".
------
name:JS_LICE_SetFontFromGDI
language:python
return:
params:(void:LICEFont), (void:GDIFont), (String:moreFormats)
description:
Converts a GDI font into a LICE font.
The font can be modified by the following flags, in a comma-separated list:
"VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".
------
name:JS_LICE_WritePNG
language:c
return:(bool:)
params:(const char*:filename), (void*:bitmap), (bool:wantAlpha)
description:

------
name:extension_api
language:eel2
return:(bool:)
params:("JS_LICE_WritePNG":), ("filename":), (void*:bitmap), (bool:wantAlpha)
description:

------
name:reaper.JS_LICE_WritePNG
language:lua
return:(boolean:)
params:(string:filename), (identifier:bitmap), (boolean:wantAlpha)
description:

------
name:JS_LICE_WritePNG
language:python
return:(Boolean:)
params:(String:filename), (void:bitmap), (Boolean:wantAlpha)
description:

------
name:JS_ListView_EnsureVisible
language:c
return:(void:)
params:(void*:listviewHWND), (int:index), (bool:partialOK)
description:

------
name:extension_api
language:eel2
return:
params:("JS_ListView_EnsureVisible":), (void*:listviewHWND), (int:index), (bool:partialOK)
description:

------
name:reaper.JS_ListView_EnsureVisible
language:lua
return:
params:(identifier:listviewHWND), (integer:index), (boolean:partialOK)
description:

------
name:JS_ListView_EnsureVisible
language:python
return:
params:(void:listviewHWND), (Int:index), (Boolean:partialOK)
description:

------
name:JS_ListView_EnumSelItems
language:c
return:(int:)
params:(void*:listviewHWND), (int:index)
description:
Returns the index of the next selected list item with index greater that
the specified number. Returns -1 if no selected items left.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_ListView_EnumSelItems":), (void*:listviewHWND), (int:index)
description:
Returns the index of the next selected list item with index greater that
the specified number. Returns -1 if no selected items left.
------
name:reaper.JS_ListView_EnumSelItems
language:lua
return:(integer:)
params:(identifier:listviewHWND), (integer:index)
description:
Returns the index of the next selected list item with index greater that
the specified number. Returns -1 if no selected items left.
------
name:JS_ListView_EnumSelItems
language:python
return:(Int:)
params:(void:listviewHWND), (Int:index)
description:
Returns the index of the next selected list item with index greater that
the specified number. Returns -1 if no selected items left.
------
name:JS_ListView_GetFocusedItem
language:c
return:(int:)
params:(void*:listviewHWND), (char*:textOut), (int:textOut_sz)
description:
Returns the index and text of the focused item, if any.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_ListView_GetFocusedItem":), (void*:listviewHWND), (#text:)
description:
Returns the index and text of the focused item, if any.
------
name:reaper.JS_ListView_GetFocusedItem
language:lua
return:(integer:retval),(string:text)
params:(identifier:listviewHWND)
description:
Returns the index and text of the focused item, if any.
------
name:JS_ListView_GetFocusedItem
language:python
return:(Int:retval),(void:listviewHWND),(String:textOut),(Int:textOut_sz)
params:(listviewHWND:), (textOut:), (textOut_sz:)
description:
Returns the index and text of the focused item, if any.
------
name:JS_ListView_GetItem
language:c
return:(void:)
params:(void*:listviewHWND), (int:index), (int:subItem), (char*:textOut), (int:textOut_sz), (int*:stateOut)
description:
Returns the text and state of specified item.
------
name:extension_api
language:eel2
return:
params:("JS_ListView_GetItem":), (void*:listviewHWND), (int:index), (int:subItem), (#text:), (int:&state)
description:
Returns the text and state of specified item.
------
name:reaper.JS_ListView_GetItem
language:lua
return:(string:text),(number:state)
params:(identifier:listviewHWND), (integer:index), (integer:subItem)
description:
Returns the text and state of specified item.
------
name:JS_ListView_GetItem
language:python
return:(void:listviewHWND),(Int:index),(Int:subItem),(String:textOut),(Int:textOut_sz),(Int:stateOut)
params:(listviewHWND:), (index:), (subItem:), (textOut:), (textOut_sz:), (stateOut:)
description:
Returns the text and state of specified item.
------
name:JS_ListView_GetItemCount
language:c
return:(int:)
params:(void*:listviewHWND)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_ListView_GetItemCount":), (void*:listviewHWND)
description:

------
name:reaper.JS_ListView_GetItemCount
language:lua
return:(integer:)
params:(identifier:listviewHWND)
description:

------
name:JS_ListView_GetItemCount
language:python
return:(Int:)
params:(void:listviewHWND)
description:

------
name:JS_ListView_GetItemState
language:c
return:(int:)
params:(void*:listviewHWND), (int:index)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_ListView_GetItemState":), (void*:listviewHWND), (int:index)
description:

------
name:reaper.JS_ListView_GetItemState
language:lua
return:(integer:)
params:(identifier:listviewHWND), (integer:index)
description:

------
name:JS_ListView_GetItemState
language:python
return:(Int:)
params:(void:listviewHWND), (Int:index)
description:

------
name:JS_ListView_GetItemText
language:c
return:(void:)
params:(void*:listviewHWND), (int:index), (int:subItem), (char*:textOut), (int:textOut_sz)
description:

------
name:extension_api
language:eel2
return:
params:("JS_ListView_GetItemText":), (void*:listviewHWND), (int:index), (int:subItem), (#text:)
description:

------
name:reaper.JS_ListView_GetItemText
language:lua
return:(string:text)
params:(identifier:listviewHWND), (integer:index), (integer:subItem)
description:

------
name:JS_ListView_GetItemText
language:python
return:(void:listviewHWND),(Int:index),(Int:subItem),(String:textOut),(Int:textOut_sz)
params:(listviewHWND:), (index:), (subItem:), (textOut:), (textOut_sz:)
description:

------
name:JS_ListView_GetSelectedCount
language:c
return:(int:)
params:(void*:listviewHWND)
description:

------
name:extension_api
language:eel2
return:(int:)
params:("JS_ListView_GetSelectedCount":), (void*:listviewHWND)
description:

------
name:reaper.JS_ListView_GetSelectedCount
language:lua
return:(integer:)
params:(identifier:listviewHWND)
description:

------
name:JS_ListView_GetSelectedCount
language:python
return:(Int:)
params:(void:listviewHWND)
description:

------
name:JS_ListView_ListAllSelItems
language:c
return:(int:)
params:(void*:listviewHWND), (char*:itemsOutNeedBig), (int:itemsOutNeedBig_sz)
description:
Returns the indices of all selected items as a comma-separated list.
* retval: Number of selected items found; negative or zero if an error occured.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_ListView_ListAllSelItems":), (void*:listviewHWND), (#items:)
description:
Returns the indices of all selected items as a comma-separated list.
* retval: Number of selected items found; negative or zero if an error occured.
------
name:reaper.JS_ListView_ListAllSelItems
language:lua
return:(integer:retval),(string:items)
params:(identifier:listviewHWND)
description:
Returns the indices of all selected items as a comma-separated list.
* retval: Number of selected items found; negative or zero if an error occured.
------
name:JS_ListView_ListAllSelItems
language:python
return:(Int:retval),(void:listviewHWND),(String:itemsOutNeedBig),(Int:itemsOutNeedBig_sz)
params:(listviewHWND:), (itemsOutNeedBig:), (itemsOutNeedBig_sz:)
description:
Returns the indices of all selected items as a comma-separated list.
* retval: Number of selected items found; negative or zero if an error occured.
------
name:JS_Localize
language:c
return:(void:)
params:(const char*:USEnglish), (const char*:LangPackSection), (char*:translationOut), (int:translationOut_sz)
description:
Returns the translation of the given US English text, according to the currently loaded Language Pack.
Parameters:
* LangPackSection: Language Packs are divided into sections such as "common" or "DLG_102".
* In Lua, by default, text of up to 1024 chars can be returned. To
increase (or reduce) the default buffer size, a string and size can be
included as optional 3rd and 4th arguments.
Example: reaper.JS_Localize("Actions", "common", "", 20)
------
name:extension_api
language:eel2
return:
params:("JS_Localize":), ("USEnglish":), ("LangPackSection":), (#translation:)
description:
Returns the translation of the given US English text, according to the currently loaded Language Pack.
Parameters:
* LangPackSection: Language Packs are divided into sections such as "common" or "DLG_102".
* In Lua, by default, text of up to 1024 chars can be returned. To
increase (or reduce) the default buffer size, a string and size can be
included as optional 3rd and 4th arguments.
Example: reaper.JS_Localize("Actions", "common", "", 20)
------
name:reaper.JS_Localize
language:lua
return:(string:translation)
params:(string:USEnglish), (string:LangPackSection)
description:
Returns the translation of the given US English text, according to the currently loaded Language Pack.
Parameters:
* LangPackSection: Language Packs are divided into sections such as "common" or "DLG_102".
* In Lua, by default, text of up to 1024 chars can be returned. To
increase (or reduce) the default buffer size, a string and size can be
included as optional 3rd and 4th arguments.
Example: reaper.JS_Localize("Actions", "common", "", 20)
------
name:JS_Localize
language:python
return:(String:USEnglish),(String:LangPackSection),(String:translationOut),(Int:translationOut_sz)
params:(USEnglish:), (LangPackSection:), (translationOut:), (translationOut_sz:)
description:
Returns the translation of the given US English text, according to the currently loaded Language Pack.
Parameters:
* LangPackSection: Language Packs are divided into sections such as "common" or "DLG_102".
* In Lua, by default, text of up to 1024 chars can be returned. To
increase (or reduce) the default buffer size, a string and size can be
included as optional 3rd and 4th arguments.
Example: reaper.JS_Localize("Actions", "common", "", 20)
------
name:JS_MIDIEditor_ArrayAll
language:c
return:(int:)
params:(void*:reaperarray)
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* The address of each MIDI editor window is stored in the provided
reaper.array. Each address can be converted to a REAPER object (HWND) by
the function JS_Window_HandleFromAddress.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_MIDIEditor_ArrayAll":), (void*:reaperarray)
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* The address of each MIDI editor window is stored in the provided
reaper.array. Each address can be converted to a REAPER object (HWND) by
the function JS_Window_HandleFromAddress.
------
name:reaper.JS_MIDIEditor_ArrayAll
language:lua
return:(integer:)
params:(identifier:reaperarray)
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* The address of each MIDI editor window is stored in the provided
reaper.array. Each address can be converted to a REAPER object (HWND) by
the function JS_Window_HandleFromAddress.
------
name:JS_MIDIEditor_ArrayAll
language:python
return:(Int:)
params:(void:reaperarray)
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* The address of each MIDI editor window is stored in the provided
reaper.array. Each address can be converted to a REAPER object (HWND) by
the function JS_Window_HandleFromAddress.
------
name:JS_MIDIEditor_ListAll
language:c
return:(int:)
params:(char*:listOutNeedBig), (int:listOutNeedBig_sz)
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* list: Comma-separated string of hexadecimal values. Each value is an
address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_MIDIEditor_ListAll":), (#list:)
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* list: Comma-separated string of hexadecimal values. Each value is an
address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:reaper.JS_MIDIEditor_ListAll
language:lua
return:(integer:retval),(string:list)
params:
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* list: Comma-separated string of hexadecimal values. Each value is an
address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:JS_MIDIEditor_ListAll
language:python
return:(Int:retval),(String:listOutNeedBig),(Int:listOutNeedBig_sz)
params:(listOutNeedBig:), (listOutNeedBig_sz:)
description:
Finds all open MIDI windows (whether docked or not).
* retval: The number of MIDI editor windows found; negative if an error occurred.
* list: Comma-separated string of hexadecimal values. Each value is an
address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:JS_Mem_Alloc
language:c
return:(void*:)
params:(int:sizeBytes)
description:
Allocates memory for general use by functions that require memory buffers.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Mem_Alloc":), (int:sizeBytes)
description:
Allocates memory for general use by functions that require memory buffers.
------
name:reaper.JS_Mem_Alloc
language:lua
return:(identifier:)
params:(integer:sizeBytes)
description:
Allocates memory for general use by functions that require memory buffers.
------
name:JS_Mem_Alloc
language:python
return:(void:)
params:(Int:sizeBytes)
description:
Allocates memory for general use by functions that require memory buffers.
------
name:JS_Mem_Free
language:c
return:(bool:)
params:(void*:mallocPointer)
description:
Frees memory that was previously allocated by JS_Mem_Alloc.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Mem_Free":), (void*:mallocPointer)
description:
Frees memory that was previously allocated by JS_Mem_Alloc.
------
name:reaper.JS_Mem_Free
language:lua
return:(boolean:)
params:(identifier:mallocPointer)
description:
Frees memory that was previously allocated by JS_Mem_Alloc.
------
name:JS_Mem_Free
language:python
return:(Boolean:)
params:(void:mallocPointer)
description:
Frees memory that was previously allocated by JS_Mem_Alloc.
------
name:JS_Mem_FromString
language:c
return:(bool:)
params:(void*:mallocPointer), (int:offset), (const char*:packedString), (int:stringLength)
description:
Copies a packed string into a memory buffer.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Mem_FromString":), (void*:mallocPointer), (int:offset), ("packedString":), (int:stringLength)
description:
Copies a packed string into a memory buffer.
------
name:reaper.JS_Mem_FromString
language:lua
return:(boolean:)
params:(identifier:mallocPointer), (integer:offset), (string:packedString), (integer:stringLength)
description:
Copies a packed string into a memory buffer.
------
name:JS_Mem_FromString
language:python
return:(Boolean:)
params:(void:mallocPointer), (Int:offset), (String:packedString), (Int:stringLength)
description:
Copies a packed string into a memory buffer.
------
name:JS_Mouse_GetCursor
language:c
return:(void*:)
params:
description:
On Windows, retrieves a handle to the current mouse cursor.
On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Mouse_GetCursor":)
description:
On Windows, retrieves a handle to the current mouse cursor.
On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.
------
name:reaper.JS_Mouse_GetCursor
language:lua
return:(identifier:)
params:
description:
On Windows, retrieves a handle to the current mouse cursor.
On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.
------
name:JS_Mouse_GetCursor
language:python
return:(void:)
params:
description:
On Windows, retrieves a handle to the current mouse cursor.
On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.
------
name:JS_Mouse_GetState
language:c
return:(int:)
params:(int:flags)
description:
Retrieves the states of mouse buttons and modifiers keys.
Parameters:
* flags, state: The parameter and the return value both use the same
format as gfx.mouse_cap. For example, to get the states of the left
mouse button and the ctrl key, use flags = 0b00000101.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Mouse_GetState":), (int:flags)
description:
Retrieves the states of mouse buttons and modifiers keys.
Parameters:
* flags, state: The parameter and the return value both use the same
format as gfx.mouse_cap. For example, to get the states of the left
mouse button and the ctrl key, use flags = 0b00000101.
------
name:reaper.JS_Mouse_GetState
language:lua
return:(integer:)
params:(integer:flags)
description:
Retrieves the states of mouse buttons and modifiers keys.
Parameters:
* flags, state: The parameter and the return value both use the same
format as gfx.mouse_cap. For example, to get the states of the left
mouse button and the ctrl key, use flags = 0b00000101.
------
name:JS_Mouse_GetState
language:python
return:(Int:)
params:(Int:flags)
description:
Retrieves the states of mouse buttons and modifiers keys.
Parameters:
* flags, state: The parameter and the return value both use the same
format as gfx.mouse_cap. For example, to get the states of the left
mouse button and the ctrl key, use flags = 0b00000101.
------
name:JS_Mouse_LoadCursor
language:c
return:(void*:)
params:(int:cursorNumber)
description:
Loads a cursor by number.
cursorNumber: Same as used for gfx.setcursor, and includes some of
Windows' predefined cursors (with numbers > 32000; refer to
documentation for the Win32 C++ function LoadCursor), and REAPER's own
cursors (with numbers < 2000).
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Mouse_LoadCursor":), (int:cursorNumber)
description:
Loads a cursor by number.
cursorNumber: Same as used for gfx.setcursor, and includes some of
Windows' predefined cursors (with numbers > 32000; refer to
documentation for the Win32 C++ function LoadCursor), and REAPER's own
cursors (with numbers < 2000).
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:reaper.JS_Mouse_LoadCursor
language:lua
return:(identifier:)
params:(integer:cursorNumber)
description:
Loads a cursor by number.
cursorNumber: Same as used for gfx.setcursor, and includes some of
Windows' predefined cursors (with numbers > 32000; refer to
documentation for the Win32 C++ function LoadCursor), and REAPER's own
cursors (with numbers < 2000).
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:JS_Mouse_LoadCursor
language:python
return:(void:)
params:(Int:cursorNumber)
description:
Loads a cursor by number.
cursorNumber: Same as used for gfx.setcursor, and includes some of
Windows' predefined cursors (with numbers > 32000; refer to
documentation for the Win32 C++ function LoadCursor), and REAPER's own
cursors (with numbers < 2000).
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:JS_Mouse_LoadCursorFromFile
language:c
return:(void*:)
params:(const char*:pathAndFileName), (bool*:forceNewLoadOptional)
description:
Loads a cursor from a .cur file.
forceNewLoad is an optional boolean parameter:
* If omitted or false, and if the .cur file has already been loaded
previously during the REAPER session, the file will not be re-loaded,
and the previous handle will be returned, thereby (slightly) improving
speed and (slighty) lowering memory usage.
* If true, the file will be re-loaded and a new handle will be returned.
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Mouse_LoadCursorFromFile":), ("pathAndFileName":), (unsupported:forceNewLoadOptional)
description:
Loads a cursor from a .cur file.
forceNewLoad is an optional boolean parameter:
* If omitted or false, and if the .cur file has already been loaded
previously during the REAPER session, the file will not be re-loaded,
and the previous handle will be returned, thereby (slightly) improving
speed and (slighty) lowering memory usage.
* If true, the file will be re-loaded and a new handle will be returned.
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:reaper.JS_Mouse_LoadCursorFromFile
language:lua
return:(identifier:)
params:(string:pathAndFileName), (unsupported:forceNewLoad)
description:
Loads a cursor from a .cur file.
forceNewLoad is an optional boolean parameter:
* If omitted or false, and if the .cur file has already been loaded
previously during the REAPER session, the file will not be re-loaded,
and the previous handle will be returned, thereby (slightly) improving
speed and (slighty) lowering memory usage.
* If true, the file will be re-loaded and a new handle will be returned.
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:JS_Mouse_LoadCursorFromFile
language:python
return:(void:retval),(String:pathAndFileName),(Boolean:forceNewLoadOptional)
params:(pathAndFileName:), (forceNewLoadOptional:)
description:
Loads a cursor from a .cur file.
forceNewLoad is an optional boolean parameter:
* If omitted or false, and if the .cur file has already been loaded
previously during the REAPER session, the file will not be re-loaded,
and the previous handle will be returned, thereby (slightly) improving
speed and (slighty) lowering memory usage.
* If true, the file will be re-loaded and a new handle will be returned.
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.
------
name:JS_Mouse_SetCursor
language:c
return:(void:)
params:(void*:cursorHandle)
description:
Sets the mouse cursor.  (Only lasts while script is running, and for a single "defer" cycle.)
------
name:extension_api
language:eel2
return:
params:("JS_Mouse_SetCursor":), (void*:cursorHandle)
description:
Sets the mouse cursor.  (Only lasts while script is running, and for a single "defer" cycle.)
------
name:reaper.JS_Mouse_SetCursor
language:lua
return:
params:(identifier:cursorHandle)
description:
Sets the mouse cursor.  (Only lasts while script is running, and for a single "defer" cycle.)
------
name:JS_Mouse_SetCursor
language:python
return:
params:(void:cursorHandle)
description:
Sets the mouse cursor.  (Only lasts while script is running, and for a single "defer" cycle.)
------
name:JS_Mouse_SetPosition
language:c
return:(bool:)
params:(int:x), (int:y)
description:
Moves the mouse cursor to the specified screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Mouse_SetPosition":), (int:x), (int:y)
description:
Moves the mouse cursor to the specified screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:reaper.JS_Mouse_SetPosition
language:lua
return:(boolean:)
params:(integer:x), (integer:y)
description:
Moves the mouse cursor to the specified screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:JS_Mouse_SetPosition
language:python
return:(Boolean:)
params:(Int:x), (Int:y)
description:
Moves the mouse cursor to the specified screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:JS_ReaScriptAPI_Version
language:c
return:(void:)
params:(double*:versionOut)
description:
Returns the version of the js_ReaScriptAPI extension.
------
name:extension_api
language:eel2
return:
params:("JS_ReaScriptAPI_Version":), (&version:)
description:
Returns the version of the js_ReaScriptAPI extension.
------
name:reaper.JS_ReaScriptAPI_Version
language:lua
return:(number:version)
params:
description:
Returns the version of the js_ReaScriptAPI extension.
------
name:JS_ReaScriptAPI_Version
language:python
return:(Float:versionOut)
params:(versionOut:)
description:
Returns the version of the js_ReaScriptAPI extension.
------
name:JS_String
language:c
return:(bool:)
params:(void*:pointer), (int:offset), (int:lengthChars), (char*:bufOutNeedBig), (int:bufOutNeedBig_sz)
description:
Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_String":), (void*:pointer), (int:offset), (int:lengthChars), (#buf:)
description:
Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.
------
name:reaper.JS_String
language:lua
return:(boolean:retval),(string:buf)
params:(identifier:pointer), (integer:offset), (integer:lengthChars)
description:
Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.
------
name:JS_String
language:python
return:(Boolean:retval),(void:pointer),(Int:offset),(Int:lengthChars),(String:bufOutNeedBig),(Int:bufOutNeedBig_sz)
params:(pointer:), (offset:), (lengthChars:), (bufOutNeedBig:), (bufOutNeedBig_sz:)
description:
Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.
------
name:JS_VKeys_GetDown
language:c
return:(void:)
params:(double:cutoffTime), (char*:stateOutNeedBig), (int*:stateOutNeedBig_sz)
description:
Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:extension_api
language:eel2
return:
params:("JS_VKeys_GetDown":), (cutoffTime:), (#state:)
description:
Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:reaper.JS_VKeys_GetDown
language:lua
return:(string:state)
params:(number:cutoffTime)
description:
Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:JS_VKeys_GetDown
language:python
return:(Float:cutoffTime),(String:stateOutNeedBig),(Int:stateOutNeedBig_sz)
params:(cutoffTime:), (stateOutNeedBig:), (stateOutNeedBig_sz:)
description:
Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:JS_VKeys_GetState
language:c
return:(void:)
params:(double:cutoffTime), (char*:stateOutNeedBig), (int*:stateOutNeedBig_sz)
description:
Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.
cutoffTime: A key is only regarded as down if it sent a KEYDOWN message
after the cut-off time, not followed by KEYUP. (This is useful for
excluding old KEYDOWN messages that weren't properly followed by KEYUP.)
If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().
If cutoffTime is negative, it is relative to the current time.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:extension_api
language:eel2
return:
params:("JS_VKeys_GetState":), (cutoffTime:), (#state:)
description:
Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.
cutoffTime: A key is only regarded as down if it sent a KEYDOWN message
after the cut-off time, not followed by KEYUP. (This is useful for
excluding old KEYDOWN messages that weren't properly followed by KEYUP.)
If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().
If cutoffTime is negative, it is relative to the current time.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:reaper.JS_VKeys_GetState
language:lua
return:(string:state)
params:(number:cutoffTime)
description:
Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.
cutoffTime: A key is only regarded as down if it sent a KEYDOWN message
after the cut-off time, not followed by KEYUP. (This is useful for
excluding old KEYDOWN messages that weren't properly followed by KEYUP.)
If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().
If cutoffTime is negative, it is relative to the current time.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:JS_VKeys_GetState
language:python
return:(Float:cutoffTime),(String:stateOutNeedBig),(Int:stateOutNeedBig_sz)
params:(cutoffTime:), (stateOutNeedBig:), (stateOutNeedBig_sz:)
description:
Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.
cutoffTime: A key is only regarded as down if it sent a KEYDOWN message
after the cut-off time, not followed by KEYUP. (This is useful for
excluding old KEYDOWN messages that weren't properly followed by KEYUP.)
If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().
If cutoffTime is negative, it is relative to the current time.
Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.
------
name:JS_VKeys_GetUp
language:c
return:(void:)
params:(double:cutoffTime), (char*:stateOutNeedBig), (int*:stateOutNeedBig_sz)
description:
Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.
Note: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
------
name:extension_api
language:eel2
return:
params:("JS_VKeys_GetUp":), (cutoffTime:), (#state:)
description:
Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.
Note: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
------
name:reaper.JS_VKeys_GetUp
language:lua
return:(string:state)
params:(number:cutoffTime)
description:
Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.
Note: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
------
name:JS_VKeys_GetUp
language:python
return:(Float:cutoffTime),(String:stateOutNeedBig),(Int:stateOutNeedBig_sz)
params:(cutoffTime:), (stateOutNeedBig:), (stateOutNeedBig_sz:)
description:
Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.
Note: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
------
name:JS_VKeys_Intercept
language:c
return:(int:)
params:(int:keyCode), (int:intercept)
description:
Intercepting (blocking) virtual keys work similar to the native function
PreventUIRefresh:  Each key has a (non-negative) intercept state, and
the key is passed through as usual if the state equals 0, or blocked if
the state is greater than 0.
keyCode: The virtual key code of the key, or -1 to change the state of all keys.
intercept: A script can increase the intercept state by passing +1, or
lower the state by passing -1.  Multiple scripts can block the same key,
and the intercept state may reach up to 255. If zero is passed, the
intercept state is not changed, but the current state is returned.
Returns: If keyCode refers to a single key, the intercept state of that
key is returned.  If keyCode = -1, the state of the key that is most
strongly blocked (highest intercept state) is returned.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_VKeys_Intercept":), (int:keyCode), (int:intercept)
description:
Intercepting (blocking) virtual keys work similar to the native function
PreventUIRefresh:  Each key has a (non-negative) intercept state, and
the key is passed through as usual if the state equals 0, or blocked if
the state is greater than 0.
keyCode: The virtual key code of the key, or -1 to change the state of all keys.
intercept: A script can increase the intercept state by passing +1, or
lower the state by passing -1.  Multiple scripts can block the same key,
and the intercept state may reach up to 255. If zero is passed, the
intercept state is not changed, but the current state is returned.
Returns: If keyCode refers to a single key, the intercept state of that
key is returned.  If keyCode = -1, the state of the key that is most
strongly blocked (highest intercept state) is returned.
------
name:reaper.JS_VKeys_Intercept
language:lua
return:(integer:)
params:(integer:keyCode), (integer:intercept)
description:
Intercepting (blocking) virtual keys work similar to the native function
PreventUIRefresh:  Each key has a (non-negative) intercept state, and
the key is passed through as usual if the state equals 0, or blocked if
the state is greater than 0.
keyCode: The virtual key code of the key, or -1 to change the state of all keys.
intercept: A script can increase the intercept state by passing +1, or
lower the state by passing -1.  Multiple scripts can block the same key,
and the intercept state may reach up to 255. If zero is passed, the
intercept state is not changed, but the current state is returned.
Returns: If keyCode refers to a single key, the intercept state of that
key is returned.  If keyCode = -1, the state of the key that is most
strongly blocked (highest intercept state) is returned.
------
name:JS_VKeys_Intercept
language:python
return:(Int:)
params:(Int:keyCode), (Int:intercept)
description:
Intercepting (blocking) virtual keys work similar to the native function
PreventUIRefresh:  Each key has a (non-negative) intercept state, and
the key is passed through as usual if the state equals 0, or blocked if
the state is greater than 0.
keyCode: The virtual key code of the key, or -1 to change the state of all keys.
intercept: A script can increase the intercept state by passing +1, or
lower the state by passing -1.  Multiple scripts can block the same key,
and the intercept state may reach up to 255. If zero is passed, the
intercept state is not changed, but the current state is returned.
Returns: If keyCode refers to a single key, the intercept state of that
key is returned.  If keyCode = -1, the state of the key that is most
strongly blocked (highest intercept state) is returned.
------
name:JS_WindowMessage_Intercept
language:c
return:(int:)
params:(void*:windowHWND), (const char*:message), (bool:passThrough)
description:
Begins intercepting a window message type to specified window.
Parameters:
* message: a single message type to be intercepted, either in WM_ or
hexadecimal format. For example "WM_SETCURSOR" or "0x0020".
* passThrough: Whether message should be blocked (false) or passed through (true) to the window.
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -2: message string could not be parsed.
* -3: Failure getting original window process / window not valid.
* -6: Could not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
* Mouse events are typically received by the child window under the mouse, not the parent window.
Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_WindowMessage_Intercept":), (void*:windowHWND), ("message":), (bool:passThrough)
description:
Begins intercepting a window message type to specified window.
Parameters:
* message: a single message type to be intercepted, either in WM_ or
hexadecimal format. For example "WM_SETCURSOR" or "0x0020".
* passThrough: Whether message should be blocked (false) or passed through (true) to the window.
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -2: message string could not be parsed.
* -3: Failure getting original window process / window not valid.
* -6: Could not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
* Mouse events are typically received by the child window under the mouse, not the parent window.
Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.
------
name:reaper.JS_WindowMessage_Intercept
language:lua
return:(integer:)
params:(identifier:windowHWND), (string:message), (boolean:passThrough)
description:
Begins intercepting a window message type to specified window.
Parameters:
* message: a single message type to be intercepted, either in WM_ or
hexadecimal format. For example "WM_SETCURSOR" or "0x0020".
* passThrough: Whether message should be blocked (false) or passed through (true) to the window.
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -2: message string could not be parsed.
* -3: Failure getting original window process / window not valid.
* -6: Could not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
* Mouse events are typically received by the child window under the mouse, not the parent window.
Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.
------
name:JS_WindowMessage_Intercept
language:python
return:(Int:)
params:(void:windowHWND), (String:message), (Boolean:passThrough)
description:
Begins intercepting a window message type to specified window.
Parameters:
* message: a single message type to be intercepted, either in WM_ or
hexadecimal format. For example "WM_SETCURSOR" or "0x0020".
* passThrough: Whether message should be blocked (false) or passed through (true) to the window.
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -2: message string could not be parsed.
* -3: Failure getting original window process / window not valid.
* -6: Could not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
* Mouse events are typically received by the child window under the mouse, not the parent window.
Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.
------
name:JS_WindowMessage_InterceptList
language:c
return:(int:)
params:(void*:windowHWND), (const char*:messages)
description:
Begins intercepting window messages to specified window.
Parameters:
* messages: comma-separated string of message types to be intercepted
(either in WM_ or hexadecimal format), each with a "block" or
"passthrough" modifier to specify whether the message should be blocked
or passed through to the window. For example "WM_SETCURSOR:block,
0x0201:passthrough".
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -1: windowHWND is not a valid window.
* -2: message string could not be parsed.
* -3: Failure getting original window process.
* -6: COuld not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_WindowMessage_InterceptList":), (void*:windowHWND), ("messages":)
description:
Begins intercepting window messages to specified window.
Parameters:
* messages: comma-separated string of message types to be intercepted
(either in WM_ or hexadecimal format), each with a "block" or
"passthrough" modifier to specify whether the message should be blocked
or passed through to the window. For example "WM_SETCURSOR:block,
0x0201:passthrough".
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -1: windowHWND is not a valid window.
* -2: message string could not be parsed.
* -3: Failure getting original window process.
* -6: COuld not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
------
name:reaper.JS_WindowMessage_InterceptList
language:lua
return:(integer:)
params:(identifier:windowHWND), (string:messages)
description:
Begins intercepting window messages to specified window.
Parameters:
* messages: comma-separated string of message types to be intercepted
(either in WM_ or hexadecimal format), each with a "block" or
"passthrough" modifier to specify whether the message should be blocked
or passed through to the window. For example "WM_SETCURSOR:block,
0x0201:passthrough".
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -1: windowHWND is not a valid window.
* -2: message string could not be parsed.
* -3: Failure getting original window process.
* -6: COuld not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
------
name:JS_WindowMessage_InterceptList
language:python
return:(Int:)
params:(void:windowHWND), (String:messages)
description:
Begins intercepting window messages to specified window.
Parameters:
* messages: comma-separated string of message types to be intercepted
(either in WM_ or hexadecimal format), each with a "block" or
"passthrough" modifier to specify whether the message should be blocked
or passed through to the window. For example "WM_SETCURSOR:block,
0x0201:passthrough".
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be
valid cross-platform, and the function can recognize all of these by
name. Other messages can be specified by their hex code.
Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -1: windowHWND is not a valid window.
* -2: message string could not be parsed.
* -3: Failure getting original window process.
* -6: COuld not obtain the window client HDC.
Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded
to their original destination using JS_WindowMessage_Post or
JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through,
Peek the message type, or retrieve the entire List of intercepts.
------
name:JS_WindowMessage_ListIntercepts
language:c
return:(bool:)
params:(void*:windowHWND), (char*:listOutNeedBig), (int:listOutNeedBig_sz)
description:
Returns a string with a list of all message types currently being intercepted for the specified window.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_WindowMessage_ListIntercepts":), (void*:windowHWND), (#list:)
description:
Returns a string with a list of all message types currently being intercepted for the specified window.
------
name:reaper.JS_WindowMessage_ListIntercepts
language:lua
return:(boolean:retval),(string:list)
params:(identifier:windowHWND)
description:
Returns a string with a list of all message types currently being intercepted for the specified window.
------
name:JS_WindowMessage_ListIntercepts
language:python
return:(Boolean:retval),(void:windowHWND),(String:listOutNeedBig),(Int:listOutNeedBig_sz)
params:(windowHWND:), (listOutNeedBig:), (listOutNeedBig_sz:)
description:
Returns a string with a list of all message types currently being intercepted for the specified window.
------
name:JS_WindowMessage_PassThrough
language:c
return:(int:)
params:(void*:windowHWND), (const char*:message), (bool:passThrough)
description:
Changes the passthrough setting of a message type that is already being intercepted.
Returns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_WindowMessage_PassThrough":), (void*:windowHWND), ("message":), (bool:passThrough)
description:
Changes the passthrough setting of a message type that is already being intercepted.
Returns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.
------
name:reaper.JS_WindowMessage_PassThrough
language:lua
return:(integer:)
params:(identifier:windowHWND), (string:message), (boolean:passThrough)
description:
Changes the passthrough setting of a message type that is already being intercepted.
Returns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.
------
name:JS_WindowMessage_PassThrough
language:python
return:(Int:)
params:(void:windowHWND), (String:message), (Boolean:passThrough)
description:
Changes the passthrough setting of a message type that is already being intercepted.
Returns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.
------
name:JS_WindowMessage_Peek
language:c
return:(bool:)
params:(void*:windowHWND), (const char*:message), (bool*:passedThroughOut), (double*:timeOut), (int*:wParamLowOut), (int*:wParamHighOut), (int*:lParamLowOut), (int*:lParamHighOut)
description:
Polls the state of an intercepted message.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
Returns:
* A retval of false indicates that the message type is not being intercepted in the specified window.
* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.
* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.
* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.
* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_WindowMessage_Peek":), (void*:windowHWND), ("message":), (bool:&passedThrough), (&time:), (int:&wParamLow), (int:&wParamHigh), (int:&lParamLow), (int:&lParamHigh)
description:
Polls the state of an intercepted message.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
Returns:
* A retval of false indicates that the message type is not being intercepted in the specified window.
* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.
* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.
* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.
* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.
------
name:reaper.JS_WindowMessage_Peek
language:lua
return:(boolean:retval),(boolean:passedThrough),(number:time),(number:wParamLow),(number:wParamHigh),(number:lParamLow),(number:lParamHigh)
params:(identifier:windowHWND), (string:message)
description:
Polls the state of an intercepted message.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
Returns:
* A retval of false indicates that the message type is not being intercepted in the specified window.
* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.
* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.
* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.
* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.
------
name:JS_WindowMessage_Peek
language:python
return:(Boolean:retval),(void:windowHWND),(String:message),(Boolean:passedThroughOut),(Float:timeOut),(Int:wParamLowOut),(Int:wParamHighOut),(Int:lParamLowOut),(Int:lParamHighOut)
params:(windowHWND:), (message:), (passedThroughOut:), (timeOut:), (wParamLowOut:), (wParamHighOut:), (lParamLowOut:), (lParamHighOut:)
description:
Polls the state of an intercepted message.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
Returns:
* A retval of false indicates that the message type is not being intercepted in the specified window.
* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.
* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.
* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.
* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.
------
name:JS_WindowMessage_Post
language:c
return:(bool:)
params:(void*:windowHWND), (const char*:message), (double:wParam), (int:wParamHighWord), (double:lParam), (int:lParamHighWord)
description:
If the specified window and message type are not currently being
intercepted by a script, this function will post the message in the
message queue of the specified window, and return without waiting.
If the window and message type are currently being intercepted, the
message will be sent directly to the original window process, similar to
WindowMessage_Send, thereby skipping any intercepts.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_WindowMessage_Post":), (void*:windowHWND), ("message":), (wParam:), (int:wParamHighWord), (lParam:), (int:lParamHighWord)
description:
If the specified window and message type are not currently being
intercepted by a script, this function will post the message in the
message queue of the specified window, and return without waiting.
If the window and message type are currently being intercepted, the
message will be sent directly to the original window process, similar to
WindowMessage_Send, thereby skipping any intercepts.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:reaper.JS_WindowMessage_Post
language:lua
return:(boolean:)
params:(identifier:windowHWND), (string:message), (number:wParam), (integer:wParamHighWord), (number:lParam), (integer:lParamHighWord)
description:
If the specified window and message type are not currently being
intercepted by a script, this function will post the message in the
message queue of the specified window, and return without waiting.
If the window and message type are currently being intercepted, the
message will be sent directly to the original window process, similar to
WindowMessage_Send, thereby skipping any intercepts.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:JS_WindowMessage_Post
language:python
return:(Boolean:)
params:(void:windowHWND), (String:message), (Float:wParam), (Int:wParamHighWord), (Float:lParam), (Int:lParamHighWord)
description:
If the specified window and message type are not currently being
intercepted by a script, this function will post the message in the
message queue of the specified window, and return without waiting.
If the window and message type are currently being intercepted, the
message will be sent directly to the original window process, similar to
WindowMessage_Send, thereby skipping any intercepts.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:JS_WindowMessage_Release
language:c
return:(int:)
params:(void*:windowHWND), (const char*:messages)
description:
Release intercepts of specified message types.
Parameters:
* messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_WindowMessage_Release":), (void*:windowHWND), ("messages":)
description:
Release intercepts of specified message types.
Parameters:
* messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.
------
name:reaper.JS_WindowMessage_Release
language:lua
return:(integer:)
params:(identifier:windowHWND), (string:messages)
description:
Release intercepts of specified message types.
Parameters:
* messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.
------
name:JS_WindowMessage_Release
language:python
return:(Int:)
params:(void:windowHWND), (String:messages)
description:
Release intercepts of specified message types.
Parameters:
* messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.
------
name:JS_WindowMessage_ReleaseAll
language:c
return:(void:)
params:
description:
Release script intercepts of window messages for all windows.
------
name:extension_api
language:eel2
return:
params:("JS_WindowMessage_ReleaseAll":)
description:
Release script intercepts of window messages for all windows.
------
name:reaper.JS_WindowMessage_ReleaseAll
language:lua
return:
params:
description:
Release script intercepts of window messages for all windows.
------
name:JS_WindowMessage_ReleaseAll
language:python
return:
params:
description:
Release script intercepts of window messages for all windows.
------
name:JS_WindowMessage_ReleaseWindow
language:c
return:(void:)
params:(void*:windowHWND)
description:
Release script intercepts of window messages for specified window.
------
name:extension_api
language:eel2
return:
params:("JS_WindowMessage_ReleaseWindow":), (void*:windowHWND)
description:
Release script intercepts of window messages for specified window.
------
name:reaper.JS_WindowMessage_ReleaseWindow
language:lua
return:
params:(identifier:windowHWND)
description:
Release script intercepts of window messages for specified window.
------
name:JS_WindowMessage_ReleaseWindow
language:python
return:
params:(void:windowHWND)
description:
Release script intercepts of window messages for specified window.
------
name:JS_WindowMessage_Send
language:c
return:(int:)
params:(void*:windowHWND), (const char*:message), (double:wParam), (int:wParamHighWord), (double:lParam), (int:lParamHighWord)
description:
Sends a message to the specified window by calling the window process
directly, and only returns after the message has been processed. Any
intercepts of the message by scripts will be skipped, and the message
can therefore not be blocked.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_WindowMessage_Send":), (void*:windowHWND), ("message":), (wParam:), (int:wParamHighWord), (lParam:), (int:lParamHighWord)
description:
Sends a message to the specified window by calling the window process
directly, and only returns after the message has been processed. Any
intercepts of the message by scripts will be skipped, and the message
can therefore not be blocked.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:reaper.JS_WindowMessage_Send
language:lua
return:(integer:)
params:(identifier:windowHWND), (string:message), (number:wParam), (integer:wParamHighWord), (number:lParam), (integer:lParamHighWord)
description:
Sends a message to the specified window by calling the window process
directly, and only returns after the message has been processed. Any
intercepts of the message by scripts will be skipped, and the message
can therefore not be blocked.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:JS_WindowMessage_Send
language:python
return:(Int:)
params:(void:windowHWND), (String:message), (Float:wParam), (Int:wParamHighWord), (Float:lParam), (Int:lParamHighWord)
description:
Sends a message to the specified window by calling the window process
directly, and only returns after the message has been processed. Any
intercepts of the message by scripts will be skipped, and the message
can therefore not be blocked.
Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform,
refer to swell-types.h. Only these will be recognized by WM_ or CB_
name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs.
However, for those rare cases in which the entire WPARAM and LPARAM must
be used to post a large pointer, the script can store this address in
wParam or lParam, and keep wParamHigh and lParamHigh zero.)
Notes:
* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.
------
name:JS_Window_AddressFromHandle
language:c
return:(void:)
params:(void*:handle), (double*:addressOut)
description:

------
name:extension_api
language:eel2
return:
params:("JS_Window_AddressFromHandle":), (void*:handle), (&address:)
description:

------
name:reaper.JS_Window_AddressFromHandle
language:lua
return:(number:address)
params:(identifier:handle)
description:

------
name:JS_Window_AddressFromHandle
language:python
return:(void:handle),(Float:addressOut)
params:(handle:), (addressOut:)
description:

------
name:JS_Window_ArrayAllChild
language:c
return:(int:)
params:(void*:parentHWND), (void*:reaperarray)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Window_ArrayAllChild":), (void*:parentHWND), (void*:reaperarray)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:reaper.JS_Window_ArrayAllChild
language:lua
return:(integer:)
params:(identifier:parentHWND), (identifier:reaperarray)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:JS_Window_ArrayAllChild
language:python
return:(Int:)
params:(void:parentHWND), (void:reaperarray)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:JS_Window_ArrayAllTop
language:c
return:(int:)
params:(void*:reaperarray)
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Window_ArrayAllTop":), (void*:reaperarray)
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:reaper.JS_Window_ArrayAllTop
language:lua
return:(integer:)
params:(identifier:reaperarray)
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:JS_Window_ArrayAllTop
language:python
return:(Int:)
params:(void:reaperarray)
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
------
name:JS_Window_ArrayFind
language:c
return:(int:)
params:(const char*:title), (bool:exact), (void*:reaperarray)
description:
Finds all windows, whether top-level or child, whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Window_ArrayFind":), ("title":), (bool:exact), (void*:reaperarray)
description:
Finds all windows, whether top-level or child, whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:reaper.JS_Window_ArrayFind
language:lua
return:(integer:)
params:(string:title), (boolean:exact), (identifier:reaperarray)
description:
Finds all windows, whether top-level or child, whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:JS_Window_ArrayFind
language:python
return:(Int:)
params:(String:title), (Boolean:exact), (void:reaperarray)
description:
Finds all windows, whether top-level or child, whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be
converted to REAPER objects (HWNDs) by the function
JS_Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:JS_Window_AttachResizeGrip
language:c
return:(void:)
params:(void*:windowHWND)
description:

------
name:extension_api
language:eel2
return:
params:("JS_Window_AttachResizeGrip":), (void*:windowHWND)
description:

------
name:reaper.JS_Window_AttachResizeGrip
language:lua
return:
params:(identifier:windowHWND)
description:

------
name:JS_Window_AttachResizeGrip
language:python
return:
params:(void:windowHWND)
description:

------
name:JS_Window_AttachTopmostPin
language:c
return:(void:)
params:(void*:windowHWND)
description:
Attaches a "pin on top" button to the window frame. The button should remember its state when closing and re-opening the window.
WARNING: This function does not yet work on Linux.
------
name:extension_api
language:eel2
return:
params:("JS_Window_AttachTopmostPin":), (void*:windowHWND)
description:
Attaches a "pin on top" button to the window frame. The button should remember its state when closing and re-opening the window.
WARNING: This function does not yet work on Linux.
------
name:reaper.JS_Window_AttachTopmostPin
language:lua
return:
params:(identifier:windowHWND)
description:
Attaches a "pin on top" button to the window frame. The button should remember its state when closing and re-opening the window.
WARNING: This function does not yet work on Linux.
------
name:JS_Window_AttachTopmostPin
language:python
return:
params:(void:windowHWND)
description:
Attaches a "pin on top" button to the window frame. The button should remember its state when closing and re-opening the window.
WARNING: This function does not yet work on Linux.
------
name:JS_Window_ClientToScreen
language:c
return:(void:)
params:(void*:windowHWND), (int:x), (int:y), (int*:xOut), (int*:yOut)
description:
Converts the client-area coordinates of a specified point to screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:extension_api
language:eel2
return:
params:("JS_Window_ClientToScreen":), (void*:windowHWND), (int:x), (int:y), (int:&x), (int:&y)
description:
Converts the client-area coordinates of a specified point to screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:reaper.JS_Window_ClientToScreen
language:lua
return:(number:x),(number:y)
params:(identifier:windowHWND), (integer:x), (integer:y)
description:
Converts the client-area coordinates of a specified point to screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:JS_Window_ClientToScreen
language:python
return:(void:windowHWND),(Int:x),(Int:y),(Int:xOut),(Int:yOut)
params:(windowHWND:), (x:), (y:), (xOut:), (yOut:)
description:
Converts the client-area coordinates of a specified point to screen coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:JS_Window_Create
language:c
return:(void*:)
params:(const char*:title), (const char*:className), (int:x), (int:y), (int:w), (int:h), (char*:styleOptional), (void*:ownerHWNDOptional)
description:
Creates a modeless window with WS_OVERLAPPEDWINDOW style and only
rudimentary features. Scripts can paint into the window using GDI or
LICE/Composite functions (and JS_Window_InvalidateRect to trigger
re-painting).
style: An optional parameter that overrides the default style. The
string may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implemented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
className: On Windows, only standard ANSI characters are supported.
ownerHWND: Optional parameter, only available on WindowsOS.  Usually
either the REAPER main window or another script window, and useful for
ensuring that the created window automatically closes when the owner is
closed.
NOTE: On Linux and macOS, the window contents are only updated *between*
defer cycles, so the window cannot be animated by for/while loops
within a single defer cycle.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_Create":), ("title":), ("className":), (int:x), (int:y), (int:w), (int:h), (optional:#style), (void*:ownerHWND)
description:
Creates a modeless window with WS_OVERLAPPEDWINDOW style and only
rudimentary features. Scripts can paint into the window using GDI or
LICE/Composite functions (and JS_Window_InvalidateRect to trigger
re-painting).
style: An optional parameter that overrides the default style. The
string may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implemented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
className: On Windows, only standard ANSI characters are supported.
ownerHWND: Optional parameter, only available on WindowsOS.  Usually
either the REAPER main window or another script window, and useful for
ensuring that the created window automatically closes when the owner is
closed.
NOTE: On Linux and macOS, the window contents are only updated *between*
defer cycles, so the window cannot be animated by for/while loops
within a single defer cycle.
------
name:reaper.JS_Window_Create
language:lua
return:(identifier:retval),(optional string:style)
params:(string:title), (string:className), (integer:x), (integer:y), (integer:w), (integer:h), (optional string:style), (identifier:ownerHWND)
description:
Creates a modeless window with WS_OVERLAPPEDWINDOW style and only
rudimentary features. Scripts can paint into the window using GDI or
LICE/Composite functions (and JS_Window_InvalidateRect to trigger
re-painting).
style: An optional parameter that overrides the default style. The
string may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implemented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
className: On Windows, only standard ANSI characters are supported.
ownerHWND: Optional parameter, only available on WindowsOS.  Usually
either the REAPER main window or another script window, and useful for
ensuring that the created window automatically closes when the owner is
closed.
NOTE: On Linux and macOS, the window contents are only updated *between*
defer cycles, so the window cannot be animated by for/while loops
within a single defer cycle.
------
name:JS_Window_Create
language:python
return:(void:retval),(String:title),(String:className),(Int:x),(Int:y),(Int:w),(Int:h),(String:styleOptional),(void:ownerHWNDOptional)
params:(title:), (className:), (x:), (y:), (w:), (h:), (styleOptional:), (ownerHWNDOptional:)
description:
Creates a modeless window with WS_OVERLAPPEDWINDOW style and only
rudimentary features. Scripts can paint into the window using GDI or
LICE/Composite functions (and JS_Window_InvalidateRect to trigger
re-painting).
style: An optional parameter that overrides the default style. The
string may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implemented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
className: On Windows, only standard ANSI characters are supported.
ownerHWND: Optional parameter, only available on WindowsOS.  Usually
either the REAPER main window or another script window, and useful for
ensuring that the created window automatically closes when the owner is
closed.
NOTE: On Linux and macOS, the window contents are only updated *between*
defer cycles, so the window cannot be animated by for/while loops
within a single defer cycle.
------
name:JS_Window_Destroy
language:c
return:(void:)
params:(void*:windowHWND)
description:
Destroys the specified window.
------
name:extension_api
language:eel2
return:
params:("JS_Window_Destroy":), (void*:windowHWND)
description:
Destroys the specified window.
------
name:reaper.JS_Window_Destroy
language:lua
return:
params:(identifier:windowHWND)
description:
Destroys the specified window.
------
name:JS_Window_Destroy
language:python
return:
params:(void:windowHWND)
description:
Destroys the specified window.
------
name:JS_Window_Enable
language:c
return:(void:)
params:(void*:windowHWND), (bool:enable)
description:
Enables or disables mouse and keyboard input to the specified window or control.
------
name:extension_api
language:eel2
return:
params:("JS_Window_Enable":), (void*:windowHWND), (bool:enable)
description:
Enables or disables mouse and keyboard input to the specified window or control.
------
name:reaper.JS_Window_Enable
language:lua
return:
params:(identifier:windowHWND), (boolean:enable)
description:
Enables or disables mouse and keyboard input to the specified window or control.
------
name:JS_Window_Enable
language:python
return:
params:(void:windowHWND), (Boolean:enable)
description:
Enables or disables mouse and keyboard input to the specified window or control.
------
name:JS_Window_EnableMetal
language:c
return:(int:)
params:(void*:windowHWND)
description:
On macOS, returns the Metal graphics setting:
2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).
1 = Metal enabled.
0 = N/A (Windows and Linux).
-1 = non-metal async layered mode.
-2 = non-metal non-async layered mode.
WARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the
source bitmap persist. If it is resized after Blit it could cause
crashes.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Window_EnableMetal":), (void*:windowHWND)
description:
On macOS, returns the Metal graphics setting:
2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).
1 = Metal enabled.
0 = N/A (Windows and Linux).
-1 = non-metal async layered mode.
-2 = non-metal non-async layered mode.
WARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the
source bitmap persist. If it is resized after Blit it could cause
crashes.
------
name:reaper.JS_Window_EnableMetal
language:lua
return:(integer:)
params:(identifier:windowHWND)
description:
On macOS, returns the Metal graphics setting:
2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).
1 = Metal enabled.
0 = N/A (Windows and Linux).
-1 = non-metal async layered mode.
-2 = non-metal non-async layered mode.
WARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the
source bitmap persist. If it is resized after Blit it could cause
crashes.
------
name:JS_Window_EnableMetal
language:python
return:(Int:)
params:(void:windowHWND)
description:
On macOS, returns the Metal graphics setting:
2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).
1 = Metal enabled.
0 = N/A (Windows and Linux).
-1 = non-metal async layered mode.
-2 = non-metal non-async layered mode.
WARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the
source bitmap persist. If it is resized after Blit it could cause
crashes.
------
name:JS_Window_Find
language:c
return:(void*:)
params:(const char*:title), (bool:exact)
description:
Returns a HWND to a window whose title matches the specified string.
* Unlike the Win32 function FindWindow, this function searches
top-level as well as child windows, so that the target window can be
found irrespective of docked state.
* In addition, the function can optionally match substrings of the title.
* Matching is not case sensitive.
Parameters:
* exact: Match entire title, or match substring of title.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_Find":), ("title":), (bool:exact)
description:
Returns a HWND to a window whose title matches the specified string.
* Unlike the Win32 function FindWindow, this function searches
top-level as well as child windows, so that the target window can be
found irrespective of docked state.
* In addition, the function can optionally match substrings of the title.
* Matching is not case sensitive.
Parameters:
* exact: Match entire title, or match substring of title.
------
name:reaper.JS_Window_Find
language:lua
return:(identifier:)
params:(string:title), (boolean:exact)
description:
Returns a HWND to a window whose title matches the specified string.
* Unlike the Win32 function FindWindow, this function searches
top-level as well as child windows, so that the target window can be
found irrespective of docked state.
* In addition, the function can optionally match substrings of the title.
* Matching is not case sensitive.
Parameters:
* exact: Match entire title, or match substring of title.
------
name:JS_Window_Find
language:python
return:(void:)
params:(String:title), (Boolean:exact)
description:
Returns a HWND to a window whose title matches the specified string.
* Unlike the Win32 function FindWindow, this function searches
top-level as well as child windows, so that the target window can be
found irrespective of docked state.
* In addition, the function can optionally match substrings of the title.
* Matching is not case sensitive.
Parameters:
* exact: Match entire title, or match substring of title.
------
name:JS_Window_FindChild
language:c
return:(void*:)
params:(void*:parentHWND), (const char*:title), (bool:exact)
description:
Returns a HWND to a child window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_FindChild":), (void*:parentHWND), ("title":), (bool:exact)
description:
Returns a HWND to a child window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:reaper.JS_Window_FindChild
language:lua
return:(identifier:)
params:(identifier:parentHWND), (string:title), (boolean:exact)
description:
Returns a HWND to a child window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:JS_Window_FindChild
language:python
return:(void:)
params:(void:parentHWND), (String:title), (Boolean:exact)
description:
Returns a HWND to a child window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:JS_Window_FindChildByID
language:c
return:(void*:)
params:(void*:parentHWND), (int:ID)
description:
Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.
(The ID of a window may be retrieved by JS_Window_GetLongPtr.)
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_FindChildByID":), (void*:parentHWND), (int:ID)
description:
Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.
(The ID of a window may be retrieved by JS_Window_GetLongPtr.)
------
name:reaper.JS_Window_FindChildByID
language:lua
return:(identifier:)
params:(identifier:parentHWND), (integer:ID)
description:
Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.
(The ID of a window may be retrieved by JS_Window_GetLongPtr.)
------
name:JS_Window_FindChildByID
language:python
return:(void:)
params:(void:parentHWND), (Int:ID)
description:
Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.
(The ID of a window may be retrieved by JS_Window_GetLongPtr.)
------
name:JS_Window_FindEx
language:c
return:(void*:)
params:(void*:parentHWND), (void*:childHWND), (const char*:className), (const char*:title)
description:
Returns a handle to a child window whose class and title match the specified strings.
Parameters: * childWindow: The function searches child windows,
beginning with the window *after* the specified child window. If
childHWND is equal to parentHWND, the search begins with the first child
window of parentHWND.
* title: An empty string, "", will match all windows. (Search is not case sensitive.)
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_FindEx":), (void*:parentHWND), (void*:childHWND), ("className":), ("title":)
description:
Returns a handle to a child window whose class and title match the specified strings.
Parameters: * childWindow: The function searches child windows,
beginning with the window *after* the specified child window. If
childHWND is equal to parentHWND, the search begins with the first child
window of parentHWND.
* title: An empty string, "", will match all windows. (Search is not case sensitive.)
------
name:reaper.JS_Window_FindEx
language:lua
return:(identifier:)
params:(identifier:parentHWND), (identifier:childHWND), (string:className), (string:title)
description:
Returns a handle to a child window whose class and title match the specified strings.
Parameters: * childWindow: The function searches child windows,
beginning with the window *after* the specified child window. If
childHWND is equal to parentHWND, the search begins with the first child
window of parentHWND.
* title: An empty string, "", will match all windows. (Search is not case sensitive.)
------
name:JS_Window_FindEx
language:python
return:(void:)
params:(void:parentHWND), (void:childHWND), (String:className), (String:title)
description:
Returns a handle to a child window whose class and title match the specified strings.
Parameters: * childWindow: The function searches child windows,
beginning with the window *after* the specified child window. If
childHWND is equal to parentHWND, the search begins with the first child
window of parentHWND.
* title: An empty string, "", will match all windows. (Search is not case sensitive.)
------
name:JS_Window_FindTop
language:c
return:(void*:)
params:(const char*:title), (bool:exact)
description:
Returns a HWND to a top-level window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_FindTop":), ("title":), (bool:exact)
description:
Returns a HWND to a top-level window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:reaper.JS_Window_FindTop
language:lua
return:(identifier:)
params:(string:title), (boolean:exact)
description:
Returns a HWND to a top-level window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:JS_Window_FindTop
language:python
return:(void:)
params:(String:title), (Boolean:exact)
description:
Returns a HWND to a top-level window whose title matches the specified string.
Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.
------
name:JS_Window_FromPoint
language:c
return:(void*:)
params:(int:x), (int:y)
description:
Retrieves a HWND to the window that contains the specified point.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_FromPoint":), (int:x), (int:y)
description:
Retrieves a HWND to the window that contains the specified point.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:reaper.JS_Window_FromPoint
language:lua
return:(identifier:)
params:(integer:x), (integer:y)
description:
Retrieves a HWND to the window that contains the specified point.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:JS_Window_FromPoint
language:python
return:(void:)
params:(Int:x), (Int:y)
description:
Retrieves a HWND to the window that contains the specified point.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:JS_Window_GetClassName
language:c
return:(void:)
params:(void*:windowHWND), (char*:classOut), (int:classOut_sz)
description:
WARNING: May not be fully implemented on macOS and Linux.
------
name:extension_api
language:eel2
return:
params:("JS_Window_GetClassName":), (void*:windowHWND), (#class:)
description:
WARNING: May not be fully implemented on macOS and Linux.
------
name:reaper.JS_Window_GetClassName
language:lua
return:(string:class)
params:(identifier:windowHWND)
description:
WARNING: May not be fully implemented on macOS and Linux.
------
name:JS_Window_GetClassName
language:python
return:(void:windowHWND),(String:classOut),(Int:classOut_sz)
params:(windowHWND:), (classOut:), (classOut_sz:)
description:
WARNING: May not be fully implemented on macOS and Linux.
------
name:JS_Window_GetClientRect
language:c
return:(bool:)
params:(void*:windowHWND), (int*:leftOut), (int*:topOut), (int*:rightOut), (int*:bottomOut)
description:
Retrieves the screen coordinates of the client area rectangle of the specified window.
NOTES:
* Unlike the C++ function GetClientRect, this function returns the
screen coordinates, not the width and height. To get the client size,
use GetClientSize.
* The pixel at (right, bottom) lies immediately outside the rectangle.
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_GetClientRect":), (void*:windowHWND), (int:&left), (int:&top), (int:&right), (int:&bottom)
description:
Retrieves the screen coordinates of the client area rectangle of the specified window.
NOTES:
* Unlike the C++ function GetClientRect, this function returns the
screen coordinates, not the width and height. To get the client size,
use GetClientSize.
* The pixel at (right, bottom) lies immediately outside the rectangle.
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:reaper.JS_Window_GetClientRect
language:lua
return:(boolean:retval),(number:left),(number:top),(number:right),(number:bottom)
params:(identifier:windowHWND)
description:
Retrieves the screen coordinates of the client area rectangle of the specified window.
NOTES:
* Unlike the C++ function GetClientRect, this function returns the
screen coordinates, not the width and height. To get the client size,
use GetClientSize.
* The pixel at (right, bottom) lies immediately outside the rectangle.
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:JS_Window_GetClientRect
language:python
return:(Boolean:retval),(void:windowHWND),(Int:leftOut),(Int:topOut),(Int:rightOut),(Int:bottomOut)
params:(windowHWND:), (leftOut:), (topOut:), (rightOut:), (bottomOut:)
description:
Retrieves the screen coordinates of the client area rectangle of the specified window.
NOTES:
* Unlike the C++ function GetClientRect, this function returns the
screen coordinates, not the width and height. To get the client size,
use GetClientSize.
* The pixel at (right, bottom) lies immediately outside the rectangle.
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
------
name:JS_Window_GetClientSize
language:c
return:(bool:)
params:(void*:windowHWND), (int*:widthOut), (int*:heightOut)
description:

------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_GetClientSize":), (void*:windowHWND), (int:&width), (int:&height)
description:

------
name:reaper.JS_Window_GetClientSize
language:lua
return:(boolean:retval),(number:width),(number:height)
params:(identifier:windowHWND)
description:

------
name:JS_Window_GetClientSize
language:python
return:(Boolean:retval),(void:windowHWND),(Int:widthOut),(Int:heightOut)
params:(windowHWND:), (widthOut:), (heightOut:)
description:

------
name:JS_Window_GetFocus
language:c
return:(void*:)
params:
description:
Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_GetFocus":)
description:
Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.
------
name:reaper.JS_Window_GetFocus
language:lua
return:(identifier:)
params:
description:
Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.
------
name:JS_Window_GetFocus
language:python
return:(void:)
params:
description:
Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.
------
name:JS_Window_GetForeground
language:c
return:(void*:)
params:
description:
Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_GetForeground":)
description:
Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).
------
name:reaper.JS_Window_GetForeground
language:lua
return:(identifier:)
params:
description:
Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).
------
name:JS_Window_GetForeground
language:python
return:(void:)
params:
description:
Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).
------
name:JS_Window_GetLong
language:c
return:(void:)
params:(void*:windowHWND), (const char*:info), (double*:retvalOut)
description:
Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer.
In the case of "DLGPROC" and "WINPROC", the return values can be converted to pointers by JS_Window_HandleFromAddress.
If the function fails, the return value is 0.
------
name:extension_api
language:eel2
return:
params:("JS_Window_GetLong":), (void*:windowHWND), ("info":), (&retval:)
description:
Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer.
In the case of "DLGPROC" and "WINPROC", the return values can be converted to pointers by JS_Window_HandleFromAddress.
If the function fails, the return value is 0.
------
name:reaper.JS_Window_GetLong
language:lua
return:(number:retval)
params:(identifier:windowHWND), (string:info)
description:
Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer.
In the case of "DLGPROC" and "WINPROC", the return values can be converted to pointers by JS_Window_HandleFromAddress.
If the function fails, the return value is 0.
------
name:JS_Window_GetLong
language:python
return:(void:windowHWND),(String:info),(Float:retvalOut)
params:(windowHWND:), (info:), (retvalOut:)
description:
Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer.
In the case of "DLGPROC" and "WINPROC", the return values can be converted to pointers by JS_Window_HandleFromAddress.
If the function fails, the return value is 0.
------
name:JS_Window_GetLongPtr
language:c
return:(void*:)
params:(void*:windowHWND), (const char*:info)
description:
Returns information about the specified window.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".
For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.
The values returned by "DLGPROC" and "WINPROC" are typically used as-is,
as pointers, whereas the others should first be converted to integers.
If the function fails, a null pointer is returned.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_GetLongPtr":), (void*:windowHWND), ("info":)
description:
Returns information about the specified window.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".
For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.
The values returned by "DLGPROC" and "WINPROC" are typically used as-is,
as pointers, whereas the others should first be converted to integers.
If the function fails, a null pointer is returned.
------
name:reaper.JS_Window_GetLongPtr
language:lua
return:(identifier:)
params:(identifier:windowHWND), (string:info)
description:
Returns information about the specified window.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".
For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.
The values returned by "DLGPROC" and "WINPROC" are typically used as-is,
as pointers, whereas the others should first be converted to integers.
If the function fails, a null pointer is returned.
------
name:JS_Window_GetLongPtr
language:python
return:(void:)
params:(void:windowHWND), (String:info)
description:
Returns information about the specified window.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".
For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.
The values returned by "DLGPROC" and "WINPROC" are typically used as-is,
as pointers, whereas the others should first be converted to integers.
If the function fails, a null pointer is returned.
------
name:JS_Window_GetParent
language:c
return:(void*:)
params:(void*:windowHWND)
description:
Retrieves a HWND to the specified window's parent or owner.
Returns NULL if the window is unowned or if the function otherwise fails.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_GetParent":), (void*:windowHWND)
description:
Retrieves a HWND to the specified window's parent or owner.
Returns NULL if the window is unowned or if the function otherwise fails.
------
name:reaper.JS_Window_GetParent
language:lua
return:(identifier:)
params:(identifier:windowHWND)
description:
Retrieves a HWND to the specified window's parent or owner.
Returns NULL if the window is unowned or if the function otherwise fails.
------
name:JS_Window_GetParent
language:python
return:(void:)
params:(void:windowHWND)
description:
Retrieves a HWND to the specified window's parent or owner.
Returns NULL if the window is unowned or if the function otherwise fails.
------
name:JS_Window_GetRect
language:c
return:(bool:)
params:(void*:windowHWND), (int*:leftOut), (int*:topOut), (int*:rightOut), (int*:bottomOut)
description:
Retrieves the screen coordinates of the bounding rectangle of the specified window.
NOTES:
* On Windows and Linux, coordinates are relative to *upper* left corner
of the primary display, and the positive Y-axis points downward.
* On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
* The pixel at (right, bottom) lies immediately outside the rectangle.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_GetRect":), (void*:windowHWND), (int:&left), (int:&top), (int:&right), (int:&bottom)
description:
Retrieves the screen coordinates of the bounding rectangle of the specified window.
NOTES:
* On Windows and Linux, coordinates are relative to *upper* left corner
of the primary display, and the positive Y-axis points downward.
* On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
* The pixel at (right, bottom) lies immediately outside the rectangle.
------
name:reaper.JS_Window_GetRect
language:lua
return:(boolean:retval),(number:left),(number:top),(number:right),(number:bottom)
params:(identifier:windowHWND)
description:
Retrieves the screen coordinates of the bounding rectangle of the specified window.
NOTES:
* On Windows and Linux, coordinates are relative to *upper* left corner
of the primary display, and the positive Y-axis points downward.
* On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
* The pixel at (right, bottom) lies immediately outside the rectangle.
------
name:JS_Window_GetRect
language:python
return:(Boolean:retval),(void:windowHWND),(Int:leftOut),(Int:topOut),(Int:rightOut),(Int:bottomOut)
params:(windowHWND:), (leftOut:), (topOut:), (rightOut:), (bottomOut:)
description:
Retrieves the screen coordinates of the bounding rectangle of the specified window.
NOTES:
* On Windows and Linux, coordinates are relative to *upper* left corner
of the primary display, and the positive Y-axis points downward.
* On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
* The pixel at (right, bottom) lies immediately outside the rectangle.
------
name:JS_Window_GetRelated
language:c
return:(void*:)
params:(void*:windowHWND), (const char*:relation)
description:
Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".
(Refer to documentation for Win32 C++ function GetWindow.)
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_GetRelated":), (void*:windowHWND), ("relation":)
description:
Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".
(Refer to documentation for Win32 C++ function GetWindow.)
------
name:reaper.JS_Window_GetRelated
language:lua
return:(identifier:)
params:(identifier:windowHWND), (string:relation)
description:
Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".
(Refer to documentation for Win32 C++ function GetWindow.)
------
name:JS_Window_GetRelated
language:python
return:(void:)
params:(void:windowHWND), (String:relation)
description:
Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".
(Refer to documentation for Win32 C++ function GetWindow.)
------
name:JS_Window_GetScrollInfo
language:c
return:(bool:)
params:(void*:windowHWND), (const char*:scrollbar), (int*:positionOut), (int*:pageSizeOut), (int*:minOut), (int*:maxOut), (int*:trackPosOut)
description:
Retrieves the scroll information of a window.
Parameters:
* windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
Returns:
* Leftmost or topmost visible pixel position, as well as the visible
page size, the range minimum and maximum, and scroll box tracking
position.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_GetScrollInfo":), (void*:windowHWND), ("scrollbar":), (int:&position), (int:&pageSize), (int:&min), (int:&max), (int:&trackPos)
description:
Retrieves the scroll information of a window.
Parameters:
* windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
Returns:
* Leftmost or topmost visible pixel position, as well as the visible
page size, the range minimum and maximum, and scroll box tracking
position.
------
name:reaper.JS_Window_GetScrollInfo
language:lua
return:(boolean:retval),(number:position),(number:pageSize),(number:min),(number:max),(number:trackPos)
params:(identifier:windowHWND), (string:scrollbar)
description:
Retrieves the scroll information of a window.
Parameters:
* windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
Returns:
* Leftmost or topmost visible pixel position, as well as the visible
page size, the range minimum and maximum, and scroll box tracking
position.
------
name:JS_Window_GetScrollInfo
language:python
return:(Boolean:retval),(void:windowHWND),(String:scrollbar),(Int:positionOut),(Int:pageSizeOut),(Int:minOut),(Int:maxOut),(Int:trackPosOut)
params:(windowHWND:), (scrollbar:), (positionOut:), (pageSizeOut:), (minOut:), (maxOut:), (trackPosOut:)
description:
Retrieves the scroll information of a window.
Parameters:
* windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
Returns:
* Leftmost or topmost visible pixel position, as well as the visible
page size, the range minimum and maximum, and scroll box tracking
position.
------
name:JS_Window_GetTitle
language:c
return:(void:)
params:(void*:windowHWND), (char*:titleOutNeedBig), (int:titleOutNeedBig_sz)
description:
Returns the title (if any) of the specified window.
------
name:extension_api
language:eel2
return:
params:("JS_Window_GetTitle":), (void*:windowHWND), (#title:)
description:
Returns the title (if any) of the specified window.
------
name:reaper.JS_Window_GetTitle
language:lua
return:(string:title)
params:(identifier:windowHWND)
description:
Returns the title (if any) of the specified window.
------
name:JS_Window_GetTitle
language:python
return:(void:windowHWND),(String:titleOutNeedBig),(Int:titleOutNeedBig_sz)
params:(windowHWND:), (titleOutNeedBig:), (titleOutNeedBig_sz:)
description:
Returns the title (if any) of the specified window.
------
name:JS_Window_GetViewportFromRect
language:c
return:(void:)
params:(int:x1), (int:y1), (int:x2), (int:y2), (bool:wantWork), (int*:leftOut), (int*:topOut), (int*:rightOut), (int*:bottomOut)
description:
Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.
If the monitor is not the primary display, some of the rectangle's coordinates may be negative.
wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.
------
name:extension_api
language:eel2
return:
params:("JS_Window_GetViewportFromRect":), (int:x1), (int:y1), (int:x2), (int:y2), (bool:wantWork), (int:&left), (int:&top), (int:&right), (int:&bottom)
description:
Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.
If the monitor is not the primary display, some of the rectangle's coordinates may be negative.
wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.
------
name:reaper.JS_Window_GetViewportFromRect
language:lua
return:(number:left),(number:top),(number:right),(number:bottom)
params:(integer:x1), (integer:y1), (integer:x2), (integer:y2), (boolean:wantWork)
description:
Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.
If the monitor is not the primary display, some of the rectangle's coordinates may be negative.
wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.
------
name:JS_Window_GetViewportFromRect
language:python
return:(Int:x1),(Int:y1),(Int:x2),(Int:y2),(Boolean:wantWork),(Int:leftOut),(Int:topOut),(Int:rightOut),(Int:bottomOut)
params:(x1:), (y1:), (x2:), (y2:), (wantWork:), (leftOut:), (topOut:), (rightOut:), (bottomOut:)
description:
Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.
If the monitor is not the primary display, some of the rectangle's coordinates may be negative.
wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.
------
name:JS_Window_HandleFromAddress
language:c
return:(void*:)
params:(double:address)
description:
Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_HandleFromAddress":), (address:)
description:
Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.
------
name:reaper.JS_Window_HandleFromAddress
language:lua
return:(identifier:)
params:(number:address)
description:
Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.
------
name:JS_Window_HandleFromAddress
language:python
return:(void:)
params:(Float:address)
description:
Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.
------
name:JS_Window_InvalidateRect
language:c
return:(bool:)
params:(void*:windowHWND), (int:left), (int:top), (int:right), (int:bottom), (bool:eraseBackground)
description:
Similar to the Win32 function InvalidateRect.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_InvalidateRect":), (void*:windowHWND), (int:left), (int:top), (int:right), (int:bottom), (bool:eraseBackground)
description:
Similar to the Win32 function InvalidateRect.
------
name:reaper.JS_Window_InvalidateRect
language:lua
return:(boolean:)
params:(identifier:windowHWND), (integer:left), (integer:top), (integer:right), (integer:bottom), (boolean:eraseBackground)
description:
Similar to the Win32 function InvalidateRect.
------
name:JS_Window_InvalidateRect
language:python
return:(Boolean:)
params:(void:windowHWND), (Int:left), (Int:top), (Int:right), (Int:bottom), (Boolean:eraseBackground)
description:
Similar to the Win32 function InvalidateRect.
------
name:JS_Window_IsChild
language:c
return:(bool:)
params:(void*:parentHWND), (void*:childHWND)
description:
Determines whether a window is a child window or descendant window of a specified parent window.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_IsChild":), (void*:parentHWND), (void*:childHWND)
description:
Determines whether a window is a child window or descendant window of a specified parent window.
------
name:reaper.JS_Window_IsChild
language:lua
return:(boolean:)
params:(identifier:parentHWND), (identifier:childHWND)
description:
Determines whether a window is a child window or descendant window of a specified parent window.
------
name:JS_Window_IsChild
language:python
return:(Boolean:)
params:(void:parentHWND), (void:childHWND)
description:
Determines whether a window is a child window or descendant window of a specified parent window.
------
name:JS_Window_IsVisible
language:c
return:(bool:)
params:(void*:windowHWND)
description:
Determines the visibility state of the window.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_IsVisible":), (void*:windowHWND)
description:
Determines the visibility state of the window.
------
name:reaper.JS_Window_IsVisible
language:lua
return:(boolean:)
params:(identifier:windowHWND)
description:
Determines the visibility state of the window.
------
name:JS_Window_IsVisible
language:python
return:(Boolean:)
params:(void:windowHWND)
description:
Determines the visibility state of the window.
------
name:JS_Window_IsWindow
language:c
return:(bool:)
params:(void*:windowHWND)
description:
Determines whether the specified window handle identifies an existing window.
On macOS and Linux, only windows that were created by WDL/swell will be
identified (and only such windows should be acted on by scripts).
NOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, "HWND").
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_IsWindow":), (void*:windowHWND)
description:
Determines whether the specified window handle identifies an existing window.
On macOS and Linux, only windows that were created by WDL/swell will be
identified (and only such windows should be acted on by scripts).
NOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, "HWND").
------
name:reaper.JS_Window_IsWindow
language:lua
return:(boolean:)
params:(identifier:windowHWND)
description:
Determines whether the specified window handle identifies an existing window.
On macOS and Linux, only windows that were created by WDL/swell will be
identified (and only such windows should be acted on by scripts).
NOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, "HWND").
------
name:JS_Window_IsWindow
language:python
return:(Boolean:)
params:(void:windowHWND)
description:
Determines whether the specified window handle identifies an existing window.
On macOS and Linux, only windows that were created by WDL/swell will be
identified (and only such windows should be acted on by scripts).
NOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, "HWND").
------
name:JS_Window_ListAllChild
language:c
return:(int:)
params:(void*:parentHWND), (char*:listOutNeedBig), (int:listOutNeedBig_sz)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values.
Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Window_ListAllChild":), (void*:parentHWND), (#list:)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values.
Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.
------
name:reaper.JS_Window_ListAllChild
language:lua
return:(integer:retval),(string:list)
params:(identifier:parentHWND)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values.
Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.
------
name:JS_Window_ListAllChild
language:python
return:(Int:retval),(void:parentHWND),(String:listOutNeedBig),(Int:listOutNeedBig_sz)
params:(parentHWND:), (listOutNeedBig:), (listOutNeedBig_sz:)
description:
Finds all child windows of the specified parent.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values.
Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.
------
name:JS_Window_ListAllTop
language:c
return:(int:)
params:(char*:listOutNeedBig), (int:listOutNeedBig_sz)
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Window_ListAllTop":), (#list:)
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:reaper.JS_Window_ListAllTop
language:lua
return:(integer:retval),(string:list)
params:
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:JS_Window_ListAllTop
language:python
return:(Int:retval),(String:listOutNeedBig),(Int:listOutNeedBig_sz)
params:(listOutNeedBig:), (listOutNeedBig_sz:)
description:
Finds all top-level windows.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
------
name:JS_Window_ListFind
language:c
return:(int:)
params:(const char*:title), (bool:exact), (char*:listOutNeedBig), (int:listOutNeedBig_sz)
description:
Finds all windows (whether top-level or child) whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:extension_api
language:eel2
return:(int:)
params:("JS_Window_ListFind":), ("title":), (bool:exact), (#list:)
description:
Finds all windows (whether top-level or child) whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:reaper.JS_Window_ListFind
language:lua
return:(integer:retval),(string:list)
params:(string:title), (boolean:exact)
description:
Finds all windows (whether top-level or child) whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:JS_Window_ListFind
language:python
return:(Int:retval),(String:title),(Boolean:exact),(String:listOutNeedBig),(Int:listOutNeedBig_sz)
params:(title:), (exact:), (listOutNeedBig:), (listOutNeedBig_sz:)
description:
Finds all windows (whether top-level or child) whose titles match the specified string.
Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is
an address that can be converted to a HWND by the function
Window_HandleFromAddress.
Parameters:
* exact: Match entire title exactly, or match substring of title.
------
name:JS_Window_MonitorFromRect
language:c
return:(void:)
params:(int:x1), (int:y1), (int:x2), (int:y2), (bool:wantWork), (int*:leftOut), (int*:topOut), (int*:rightOut), (int*:bottomOut)
description:
Deprecated - use GetViewportFromRect instead.
------
name:extension_api
language:eel2
return:
params:("JS_Window_MonitorFromRect":), (int:x1), (int:y1), (int:x2), (int:y2), (bool:wantWork), (int:&left), (int:&top), (int:&right), (int:&bottom)
description:
Deprecated - use GetViewportFromRect instead.
------
name:reaper.JS_Window_MonitorFromRect
language:lua
return:(number:left),(number:top),(number:right),(number:bottom)
params:(integer:x1), (integer:y1), (integer:x2), (integer:y2), (boolean:wantWork)
description:
Deprecated - use GetViewportFromRect instead.
------
name:JS_Window_MonitorFromRect
language:python
return:(Int:x1),(Int:y1),(Int:x2),(Int:y2),(Boolean:wantWork),(Int:leftOut),(Int:topOut),(Int:rightOut),(Int:bottomOut)
params:(x1:), (y1:), (x2:), (y2:), (wantWork:), (leftOut:), (topOut:), (rightOut:), (bottomOut:)
description:
Deprecated - use GetViewportFromRect instead.
------
name:JS_Window_Move
language:c
return:(void:)
params:(void*:windowHWND), (int:left), (int:top)
description:
Changes the position of the specified window, keeping its size constant.
NOTES:
* For top-level windows, position is relative to the primary display.
* On Windows and Linux, position is calculated as the coordinates of
the upper left corner of the window, relative to upper left corner of
the primary display, and the positive Y-axis points downward.
* On macOS, position is calculated as the coordinates of the bottom
left corner of the window, relative to bottom left corner of the
display, and the positive Y-axis points upward.
* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.
* Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:extension_api
language:eel2
return:
params:("JS_Window_Move":), (void*:windowHWND), (int:left), (int:top)
description:
Changes the position of the specified window, keeping its size constant.
NOTES:
* For top-level windows, position is relative to the primary display.
* On Windows and Linux, position is calculated as the coordinates of
the upper left corner of the window, relative to upper left corner of
the primary display, and the positive Y-axis points downward.
* On macOS, position is calculated as the coordinates of the bottom
left corner of the window, relative to bottom left corner of the
display, and the positive Y-axis points upward.
* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.
* Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:reaper.JS_Window_Move
language:lua
return:
params:(identifier:windowHWND), (integer:left), (integer:top)
description:
Changes the position of the specified window, keeping its size constant.
NOTES:
* For top-level windows, position is relative to the primary display.
* On Windows and Linux, position is calculated as the coordinates of
the upper left corner of the window, relative to upper left corner of
the primary display, and the positive Y-axis points downward.
* On macOS, position is calculated as the coordinates of the bottom
left corner of the window, relative to bottom left corner of the
display, and the positive Y-axis points upward.
* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.
* Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:JS_Window_Move
language:python
return:
params:(void:windowHWND), (Int:left), (Int:top)
description:
Changes the position of the specified window, keeping its size constant.
NOTES:
* For top-level windows, position is relative to the primary display.
* On Windows and Linux, position is calculated as the coordinates of
the upper left corner of the window, relative to upper left corner of
the primary display, and the positive Y-axis points downward.
* On macOS, position is calculated as the coordinates of the bottom
left corner of the window, relative to bottom left corner of the
display, and the positive Y-axis points upward.
* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.
* Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:JS_Window_OnCommand
language:c
return:(bool:)
params:(void*:windowHWND), (int:commandID)
description:
Sends a "WM_COMMAND" message to the specified window, which simulates a user selecting a command in the window menu.
This function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.
In the case of windows that are listed among the Action list's contexts
(such as the Media Explorer), the commandIDs of the actions in the
Actions list may be used.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_OnCommand":), (void*:windowHWND), (int:commandID)
description:
Sends a "WM_COMMAND" message to the specified window, which simulates a user selecting a command in the window menu.
This function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.
In the case of windows that are listed among the Action list's contexts
(such as the Media Explorer), the commandIDs of the actions in the
Actions list may be used.
------
name:reaper.JS_Window_OnCommand
language:lua
return:(boolean:)
params:(identifier:windowHWND), (integer:commandID)
description:
Sends a "WM_COMMAND" message to the specified window, which simulates a user selecting a command in the window menu.
This function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.
In the case of windows that are listed among the Action list's contexts
(such as the Media Explorer), the commandIDs of the actions in the
Actions list may be used.
------
name:JS_Window_OnCommand
language:python
return:(Boolean:)
params:(void:windowHWND), (Int:commandID)
description:
Sends a "WM_COMMAND" message to the specified window, which simulates a user selecting a command in the window menu.
This function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.
In the case of windows that are listed among the Action list's contexts
(such as the Media Explorer), the commandIDs of the actions in the
Actions list may be used.
------
name:JS_Window_Resize
language:c
return:(void:)
params:(void*:windowHWND), (int:width), (int:height)
description:
Changes the dimensions of the specified window, keeping the top left corner position constant.
* If resizing script GUIs, call gfx.update() after resizing.
* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:extension_api
language:eel2
return:
params:("JS_Window_Resize":), (void*:windowHWND), (int:width), (int:height)
description:
Changes the dimensions of the specified window, keeping the top left corner position constant.
* If resizing script GUIs, call gfx.update() after resizing.
* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:reaper.JS_Window_Resize
language:lua
return:
params:(identifier:windowHWND), (integer:width), (integer:height)
description:
Changes the dimensions of the specified window, keeping the top left corner position constant.
* If resizing script GUIs, call gfx.update() after resizing.
* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:JS_Window_Resize
language:python
return:
params:(void:windowHWND), (Int:width), (Int:height)
description:
Changes the dimensions of the specified window, keeping the top left corner position constant.
* If resizing script GUIs, call gfx.update() after resizing.
* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.
------
name:JS_Window_ScreenToClient
language:c
return:(void:)
params:(void*:windowHWND), (int:x), (int:y), (int*:xOut), (int*:yOut)
description:
Converts the screen coordinates of a specified point on the screen to client-area coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:extension_api
language:eel2
return:
params:("JS_Window_ScreenToClient":), (void*:windowHWND), (int:x), (int:y), (int:&x), (int:&y)
description:
Converts the screen coordinates of a specified point on the screen to client-area coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:reaper.JS_Window_ScreenToClient
language:lua
return:(number:x),(number:y)
params:(identifier:windowHWND), (integer:x), (integer:y)
description:
Converts the screen coordinates of a specified point on the screen to client-area coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:JS_Window_ScreenToClient
language:python
return:(void:windowHWND),(Int:x),(Int:y),(Int:xOut),(Int:yOut)
params:(windowHWND:), (x:), (y:), (xOut:), (yOut:)
description:
Converts the screen coordinates of a specified point on the screen to client-area coordinates.
NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left
corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner
of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.
------
name:JS_Window_SetFocus
language:c
return:(void:)
params:(void*:windowHWND)
description:
Sets the keyboard focus to the specified window.
------
name:extension_api
language:eel2
return:
params:("JS_Window_SetFocus":), (void*:windowHWND)
description:
Sets the keyboard focus to the specified window.
------
name:reaper.JS_Window_SetFocus
language:lua
return:
params:(identifier:windowHWND)
description:
Sets the keyboard focus to the specified window.
------
name:JS_Window_SetFocus
language:python
return:
params:(void:windowHWND)
description:
Sets the keyboard focus to the specified window.
------
name:JS_Window_SetForeground
language:c
return:(void:)
params:(void*:windowHWND)
description:
Brings the specified window into the foreground, activates the window, and directs keyboard input to it.
------
name:extension_api
language:eel2
return:
params:("JS_Window_SetForeground":), (void*:windowHWND)
description:
Brings the specified window into the foreground, activates the window, and directs keyboard input to it.
------
name:reaper.JS_Window_SetForeground
language:lua
return:
params:(identifier:windowHWND)
description:
Brings the specified window into the foreground, activates the window, and directs keyboard input to it.
------
name:JS_Window_SetForeground
language:python
return:
params:(void:windowHWND)
description:
Brings the specified window into the foreground, activates the window, and directs keyboard input to it.
------
name:JS_Window_SetLong
language:c
return:(void:)
params:(void*:windowHWND), (const char*:info), (double:value), (double*:retvalOut)
description:
Similar to the Win32 function SetWindowLongPtr.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE", and only on WindowOS, "INSTANCE" and "PARENT".
------
name:extension_api
language:eel2
return:
params:("JS_Window_SetLong":), (void*:windowHWND), ("info":), (value:), (&retval:)
description:
Similar to the Win32 function SetWindowLongPtr.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE", and only on WindowOS, "INSTANCE" and "PARENT".
------
name:reaper.JS_Window_SetLong
language:lua
return:(number:retval)
params:(identifier:windowHWND), (string:info), (number:value)
description:
Similar to the Win32 function SetWindowLongPtr.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE", and only on WindowOS, "INSTANCE" and "PARENT".
------
name:JS_Window_SetLong
language:python
return:(void:windowHWND),(String:info),(Float:value),(Float:retvalOut)
params:(windowHWND:), (info:), (value:), (retvalOut:)
description:
Similar to the Win32 function SetWindowLongPtr.
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE", and only on WindowOS, "INSTANCE" and "PARENT".
------
name:JS_Window_SetOpacity
language:c
return:(bool:)
params:(void*:windowHWND), (const char*:mode), (double:value)
description:
Sets the window opacity.
Parameters:
mode: either "ALPHA" or "COLOR".
value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.
If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color
will be made transparent. (All mouse clicks over transparent pixels
will pass through, too).  WARNING:
COLOR mode is only available in Windows, not Linux or macOS.
Transparency can only be applied to top-level windows. If windowHWND
refers to a child window, the entire top-level window that contains
windowHWND will be made transparent.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_SetOpacity":), (void*:windowHWND), ("mode":), (value:)
description:
Sets the window opacity.
Parameters:
mode: either "ALPHA" or "COLOR".
value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.
If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color
will be made transparent. (All mouse clicks over transparent pixels
will pass through, too).  WARNING:
COLOR mode is only available in Windows, not Linux or macOS.
Transparency can only be applied to top-level windows. If windowHWND
refers to a child window, the entire top-level window that contains
windowHWND will be made transparent.
------
name:reaper.JS_Window_SetOpacity
language:lua
return:(boolean:)
params:(identifier:windowHWND), (string:mode), (number:value)
description:
Sets the window opacity.
Parameters:
mode: either "ALPHA" or "COLOR".
value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.
If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color
will be made transparent. (All mouse clicks over transparent pixels
will pass through, too).  WARNING:
COLOR mode is only available in Windows, not Linux or macOS.
Transparency can only be applied to top-level windows. If windowHWND
refers to a child window, the entire top-level window that contains
windowHWND will be made transparent.
------
name:JS_Window_SetOpacity
language:python
return:(Boolean:)
params:(void:windowHWND), (String:mode), (Float:value)
description:
Sets the window opacity.
Parameters:
mode: either "ALPHA" or "COLOR".
value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.
If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color
will be made transparent. (All mouse clicks over transparent pixels
will pass through, too).  WARNING:
COLOR mode is only available in Windows, not Linux or macOS.
Transparency can only be applied to top-level windows. If windowHWND
refers to a child window, the entire top-level window that contains
windowHWND will be made transparent.
------
name:JS_Window_SetParent
language:c
return:(void*:)
params:(void*:childHWND), (void*:parentHWND)
description:
If successful, returns a handle to the previous parent window.
------
name:extension_api
language:eel2
return:(void*:)
params:("JS_Window_SetParent":), (void*:childHWND), (void*:parentHWND)
description:
If successful, returns a handle to the previous parent window.
------
name:reaper.JS_Window_SetParent
language:lua
return:(identifier:)
params:(identifier:childHWND), (identifier:parentHWND)
description:
If successful, returns a handle to the previous parent window.
------
name:JS_Window_SetParent
language:python
return:(void:)
params:(void:childHWND), (void:parentHWND)
description:
If successful, returns a handle to the previous parent window.
------
name:JS_Window_SetPosition
language:c
return:(bool:)
params:(void*:windowHWND), (int:left), (int:top), (int:width), (int:height), (char*:ZOrderOptional), (char*:flagsOptional)
description:
Interface to the Win32/swell function SetWindowPos, with which window
position, size, Z-order and visibility can be set, and new frame styles
can be applied.
ZOrder and flags are optional parameters. If no arguments are supplied,
the window will simply be moved and resized, as if the NOACTIVATE,
NOZORDER, NOOWNERZORDER flags were set.
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP" or a window HWND
converted to a string, for example by the Lua function tostring.
* flags: Any combination of the standard flags, of which "NOMOVE",
"NOSIZE", "NOZORDER", "NOACTIVATE", "SHOWWINDOW", "FRAMECHANGED" and
"NOCOPYBITS" should be valid cross-platform.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_SetPosition":), (void*:windowHWND), (int:left), (int:top), (int:width), (int:height), (optional:#ZOrder), (optional:#flags)
description:
Interface to the Win32/swell function SetWindowPos, with which window
position, size, Z-order and visibility can be set, and new frame styles
can be applied.
ZOrder and flags are optional parameters. If no arguments are supplied,
the window will simply be moved and resized, as if the NOACTIVATE,
NOZORDER, NOOWNERZORDER flags were set.
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP" or a window HWND
converted to a string, for example by the Lua function tostring.
* flags: Any combination of the standard flags, of which "NOMOVE",
"NOSIZE", "NOZORDER", "NOACTIVATE", "SHOWWINDOW", "FRAMECHANGED" and
"NOCOPYBITS" should be valid cross-platform.
------
name:reaper.JS_Window_SetPosition
language:lua
return:(boolean:retval),(optional string:ZOrder),(optional string:flags)
params:(identifier:windowHWND), (integer:left), (integer:top), (integer:width), (integer:height), (optional string:ZOrder), (optional string:flags)
description:
Interface to the Win32/swell function SetWindowPos, with which window
position, size, Z-order and visibility can be set, and new frame styles
can be applied.
ZOrder and flags are optional parameters. If no arguments are supplied,
the window will simply be moved and resized, as if the NOACTIVATE,
NOZORDER, NOOWNERZORDER flags were set.
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP" or a window HWND
converted to a string, for example by the Lua function tostring.
* flags: Any combination of the standard flags, of which "NOMOVE",
"NOSIZE", "NOZORDER", "NOACTIVATE", "SHOWWINDOW", "FRAMECHANGED" and
"NOCOPYBITS" should be valid cross-platform.
------
name:JS_Window_SetPosition
language:python
return:(Boolean:retval),(void:windowHWND),(Int:left),(Int:top),(Int:width),(Int:height),(String:ZOrderOptional),(String:flagsOptional)
params:(windowHWND:), (left:), (top:), (width:), (height:), (ZOrderOptional:), (flagsOptional:)
description:
Interface to the Win32/swell function SetWindowPos, with which window
position, size, Z-order and visibility can be set, and new frame styles
can be applied.
ZOrder and flags are optional parameters. If no arguments are supplied,
the window will simply be moved and resized, as if the NOACTIVATE,
NOZORDER, NOOWNERZORDER flags were set.
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP" or a window HWND
converted to a string, for example by the Lua function tostring.
* flags: Any combination of the standard flags, of which "NOMOVE",
"NOSIZE", "NOZORDER", "NOACTIVATE", "SHOWWINDOW", "FRAMECHANGED" and
"NOCOPYBITS" should be valid cross-platform.
------
name:JS_Window_SetScrollPos
language:c
return:(bool:)
params:(void*:windowHWND), (const char*:scrollbar), (int:position)
description:
Parameters:
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
NOTE: API functions can scroll REAPER's windows, but cannot zoom them.
Instead, use actions such as "View: Zoom to one loop iteration".
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_SetScrollPos":), (void*:windowHWND), ("scrollbar":), (int:position)
description:
Parameters:
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
NOTE: API functions can scroll REAPER's windows, but cannot zoom them.
Instead, use actions such as "View: Zoom to one loop iteration".
------
name:reaper.JS_Window_SetScrollPos
language:lua
return:(boolean:)
params:(identifier:windowHWND), (string:scrollbar), (integer:position)
description:
Parameters:
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
NOTE: API functions can scroll REAPER's windows, but cannot zoom them.
Instead, use actions such as "View: Zoom to one loop iteration".
------
name:JS_Window_SetScrollPos
language:python
return:(Boolean:)
params:(void:windowHWND), (String:scrollbar), (Int:position)
description:
Parameters:
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.
NOTE: API functions can scroll REAPER's windows, but cannot zoom them.
Instead, use actions such as "View: Zoom to one loop iteration".
------
name:JS_Window_SetStyle
language:c
return:(bool:)
params:(void*:windowHWND), (char*:style)
description:
Sets and applies a window style.
style may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implmented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_SetStyle":), (void*:windowHWND), (#style:)
description:
Sets and applies a window style.
style may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implmented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
------
name:reaper.JS_Window_SetStyle
language:lua
return:(boolean:retval),(string:style)
params:(identifier:windowHWND), (string:style)
description:
Sets and applies a window style.
style may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implmented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
------
name:JS_Window_SetStyle
language:python
return:(Boolean:retval),(void:windowHWND),(String:style)
params:(windowHWND:), (style:)
description:
Sets and applies a window style.
style may include any combination of standard window styles, such as
"POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a
standard framed window.
On Linux and macOS, "MAXIMIZE" has not yet been implmented, and the
remaining styles may appear slightly different from their WindowsOS
counterparts.
------
name:JS_Window_SetTitle
language:c
return:(bool:)
params:(void*:windowHWND), (const char*:title)
description:
Changes the title of the specified window. Returns true if successful.
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_SetTitle":), (void*:windowHWND), ("title":)
description:
Changes the title of the specified window. Returns true if successful.
------
name:reaper.JS_Window_SetTitle
language:lua
return:(boolean:)
params:(identifier:windowHWND), (string:title)
description:
Changes the title of the specified window. Returns true if successful.
------
name:JS_Window_SetTitle
language:python
return:(Boolean:)
params:(void:windowHWND), (String:title)
description:
Changes the title of the specified window. Returns true if successful.
------
name:JS_Window_SetZOrder
language:c
return:(bool:)
params:(void*:windowHWND), (const char*:ZOrder), (void*:insertAfterHWNDOptional)
description:
Sets the window Z order.
* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.
* Not all the Z orders have been implemented in Linux yet.
Parameters:
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP", or a window HWND
converted to a string, for example by the Lua function tostring.
* InsertAfterHWND: For compatibility with older versions, this parameter
is still available, and is optional. If ZOrder is "INSERTAFTER",
insertAfterHWND must be a handle to the window behind which windowHWND
will be placed in the Z order, equivalent to setting ZOrder to this
HWND; otherwise, insertAfterHWND is ignored and can be left out (or it
can simply be set to the same value as windowHWND).
------
name:extension_api
language:eel2
return:(bool:)
params:("JS_Window_SetZOrder":), (void*:windowHWND), ("ZOrder":), (void*:insertAfterHWND)
description:
Sets the window Z order.
* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.
* Not all the Z orders have been implemented in Linux yet.
Parameters:
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP", or a window HWND
converted to a string, for example by the Lua function tostring.
* InsertAfterHWND: For compatibility with older versions, this parameter
is still available, and is optional. If ZOrder is "INSERTAFTER",
insertAfterHWND must be a handle to the window behind which windowHWND
will be placed in the Z order, equivalent to setting ZOrder to this
HWND; otherwise, insertAfterHWND is ignored and can be left out (or it
can simply be set to the same value as windowHWND).
------
name:reaper.JS_Window_SetZOrder
language:lua
return:(boolean:)
params:(identifier:windowHWND), (string:ZOrder), (identifier:insertAfterHWND)
description:
Sets the window Z order.
* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.
* Not all the Z orders have been implemented in Linux yet.
Parameters:
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP", or a window HWND
converted to a string, for example by the Lua function tostring.
* InsertAfterHWND: For compatibility with older versions, this parameter
is still available, and is optional. If ZOrder is "INSERTAFTER",
insertAfterHWND must be a handle to the window behind which windowHWND
will be placed in the Z order, equivalent to setting ZOrder to this
HWND; otherwise, insertAfterHWND is ignored and can be left out (or it
can simply be set to the same value as windowHWND).
------
name:JS_Window_SetZOrder
language:python
return:(Boolean:)
params:(void:windowHWND), (String:ZOrder), (void:insertAfterHWNDOptional)
description:
Sets the window Z order.
* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.
* Not all the Z orders have been implemented in Linux yet.
Parameters:
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP", or a window HWND
converted to a string, for example by the Lua function tostring.
* InsertAfterHWND: For compatibility with older versions, this parameter
is still available, and is optional. If ZOrder is "INSERTAFTER",
insertAfterHWND must be a handle to the window behind which windowHWND
will be placed in the Z order, equivalent to setting ZOrder to this
HWND; otherwise, insertAfterHWND is ignored and can be left out (or it
can simply be set to the same value as windowHWND).
------
name:JS_Window_Show
language:c
return:(void:)
params:(void*:windowHWND), (const char*:state)
description:
Sets the specified window's show state.
Parameters:
* state: One of the following options: "SHOW", "SHOWNA" (or
"SHOWNOACTIVATE"), "SHOWMINIMIZED", "HIDE", "NORMAL", "SHOWNORMAL",
"SHOWMAXIMIZED", "SHOWDEFAULT" or "RESTORE". On Linux and macOS, only
the first four options are fully implemented.
------
name:extension_api
language:eel2
return:
params:("JS_Window_Show":), (void*:windowHWND), ("state":)
description:
Sets the specified window's show state.
Parameters:
* state: One of the following options: "SHOW", "SHOWNA" (or
"SHOWNOACTIVATE"), "SHOWMINIMIZED", "HIDE", "NORMAL", "SHOWNORMAL",
"SHOWMAXIMIZED", "SHOWDEFAULT" or "RESTORE". On Linux and macOS, only
the first four options are fully implemented.
------
name:reaper.JS_Window_Show
language:lua
return:
params:(identifier:windowHWND), (string:state)
description:
Sets the specified window's show state.
Parameters:
* state: One of the following options: "SHOW", "SHOWNA" (or
"SHOWNOACTIVATE"), "SHOWMINIMIZED", "HIDE", "NORMAL", "SHOWNORMAL",
"SHOWMAXIMIZED", "SHOWDEFAULT" or "RESTORE". On Linux and macOS, only
the first four options are fully implemented.
------
name:JS_Window_Show
language:python
return:
params:(void:windowHWND), (String:state)
description:
Sets the specified window's show state.
Parameters:
* state: One of the following options: "SHOW", "SHOWNA" (or
"SHOWNOACTIVATE"), "SHOWMINIMIZED", "HIDE", "NORMAL", "SHOWNORMAL",
"SHOWMAXIMIZED", "SHOWDEFAULT" or "RESTORE". On Linux and macOS, only
the first four options are fully implemented.
------
name:JS_Window_Update
language:c
return:(void:)
params:(void*:windowHWND)
description:
Similar to the Win32 function UpdateWindow.
------
name:extension_api
language:eel2
return:
params:("JS_Window_Update":), (void*:windowHWND)
description:
Similar to the Win32 function UpdateWindow.
------
name:reaper.JS_Window_Update
language:lua
return:
params:(identifier:windowHWND)
description:
Similar to the Win32 function UpdateWindow.
------
name:JS_Window_Update
language:python
return:
params:(void:windowHWND)
description:
Similar to the Win32 function UpdateWindow.
------
name:NF_AnalyzeMediaItemPeakAndRMS
language:c
return:(bool:)
params:(MediaItem*:item), (double:windowSize), (void*:reaper_array_peaks), (void*:reaper_array_peakpositions), (void*:reaper_array_RMSs), (void*:reaper_array_RMSpositions)
description:
This function combines all other NF_Peak/RMS functions in a single one
and additionally returns peak RMS positions. Lua example code here.
Note: It's recommended to use this function with ReaScript/Lua as it
provides reaper.array objects. If using this function with other
scripting languages, you must provide arrays in the reaper.array format.
------
name:extension_api
language:eel2
return:(bool:)
params:("NF_AnalyzeMediaItemPeakAndRMS":), (MediaItem:item), (windowSize:), (void*:reaper_array_peaks), (void*:reaper_array_peakpositions), (void*:reaper_array_RMSs), (void*:reaper_array_RMSpositions)
description:
This function combines all other NF_Peak/RMS functions in a single one
and additionally returns peak RMS positions. Lua example code here.
Note: It's recommended to use this function with ReaScript/Lua as it
provides reaper.array objects. If using this function with other
scripting languages, you must provide arrays in the reaper.array format.
------
name:reaper.NF_AnalyzeMediaItemPeakAndRMS
language:lua
return:(boolean:)
params:(MediaItem:item), (number:windowSize), (identifier:reaper_array_peaks), (identifier:reaper_array_peakpositions), (identifier:reaper_array_RMSs), (identifier:reaper_array_RMSpositions)
description:
This function combines all other NF_Peak/RMS functions in a single one
and additionally returns peak RMS positions. Lua example code here.
Note: It's recommended to use this function with ReaScript/Lua as it
provides reaper.array objects. If using this function with other
scripting languages, you must provide arrays in the reaper.array format.
------
name:NF_AnalyzeMediaItemPeakAndRMS
language:python
return:(Boolean:)
params:(MediaItem:item), (Float:windowSize), (void:reaper_array_peaks), (void:reaper_array_peakpositions), (void:reaper_array_RMSs), (void:reaper_array_RMSpositions)
description:
This function combines all other NF_Peak/RMS functions in a single one
and additionally returns peak RMS positions. Lua example code here.
Note: It's recommended to use this function with ReaScript/Lua as it
provides reaper.array objects. If using this function with other
scripting languages, you must provide arrays in the reaper.array format.
------
name:NF_AnalyzeTakeLoudness
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:analyzeTruePeak), (double*:lufsIntegratedOut), (double*:rangeOut), (double* :truePeakOut), (double*:truePeakPosOut), (double*:shortTermMaxOut), (double*:momentaryMaxOut)
description:
Full loudness analysis. retval: returns true on successful analysis,
false on MIDI take or when analysis failed for some reason.
analyzeTruePeak=true: Also do true peak analysis. Returns true peak
value and true peak position (relative to item position). Considerably
slower than without true peak analysis (since it uses oversampling).
Note: Short term uses a time window of 3 sec. for calculation. So for
items shorter than this shortTermMaxOut can't be calculated correctly.
Momentary uses a time window of 0.4 sec.
------
name:extension_api
language:eel2
return:(bool:)
params:("NF_AnalyzeTakeLoudness":), (MediaItem_Take:take), (bool:analyzeTruePeak), (&lufsIntegrated:), (&range:), (&:truePeak), (&truePeakPos:), (&shortTermMax:), (&momentaryMax:)
description:
Full loudness analysis. retval: returns true on successful analysis,
false on MIDI take or when analysis failed for some reason.
analyzeTruePeak=true: Also do true peak analysis. Returns true peak
value and true peak position (relative to item position). Considerably
slower than without true peak analysis (since it uses oversampling).
Note: Short term uses a time window of 3 sec. for calculation. So for
items shorter than this shortTermMaxOut can't be calculated correctly.
Momentary uses a time window of 0.4 sec.
------
name:reaper.NF_AnalyzeTakeLoudness
language:lua
return:(boolean:retval),(number:lufsIntegrated),(number:range),(number :truePeak),(number:truePeakPos),(number:shortTermMax),(number:momentaryMax)
params:(MediaItem_Take:take), (boolean:analyzeTruePeak)
description:
Full loudness analysis. retval: returns true on successful analysis,
false on MIDI take or when analysis failed for some reason.
analyzeTruePeak=true: Also do true peak analysis. Returns true peak
value and true peak position (relative to item position). Considerably
slower than without true peak analysis (since it uses oversampling).
Note: Short term uses a time window of 3 sec. for calculation. So for
items shorter than this shortTermMaxOut can't be calculated correctly.
Momentary uses a time window of 0.4 sec.
------
name:NF_AnalyzeTakeLoudness
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Boolean:analyzeTruePeak),(Float:lufsIntegratedOut),(Float:rangeOut),(Float :truePeakOut),(Float:truePeakPosOut),(Float:shortTermMaxOut),(Float:momentaryMaxOut)
params:(take:), (analyzeTruePeak:), (lufsIntegratedOut:), (rangeOut:), (:truePeakOut), (truePeakPosOut:), (shortTermMaxOut:), (momentaryMaxOut:)
description:
Full loudness analysis. retval: returns true on successful analysis,
false on MIDI take or when analysis failed for some reason.
analyzeTruePeak=true: Also do true peak analysis. Returns true peak
value and true peak position (relative to item position). Considerably
slower than without true peak analysis (since it uses oversampling).
Note: Short term uses a time window of 3 sec. for calculation. So for
items shorter than this shortTermMaxOut can't be calculated correctly.
Momentary uses a time window of 0.4 sec.
------
name:NF_AnalyzeTakeLoudness2
language:c
return:(bool:)
params:(MediaItem_Take*:take), (bool:analyzeTruePeak), (double*:lufsIntegratedOut), (double*:rangeOut), (double* :truePeakOut), (double*:truePeakPosOut), (double*:shortTermMaxOut), (double*:momentaryMaxOut), (double*:shortTermMaxPosOut), (double*:momentaryMaxPosOut)
description:
Same as NF_AnalyzeTakeLoudness but
additionally returns shortTermMaxPos and momentaryMaxPos (in absolute
project time). Note: shortTermMaxPos and momentaryMaxPos actaully
indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.).
------
name:extension_api
language:eel2
return:(bool:)
params:("NF_AnalyzeTakeLoudness2":), (MediaItem_Take:take), (bool:analyzeTruePeak), (&lufsIntegrated:), (&range:), (&:truePeak), (&truePeakPos:), (&shortTermMax:), (&momentaryMax:), (&shortTermMaxPos:), (&momentaryMaxPos:)
description:
Same as NF_AnalyzeTakeLoudness but
additionally returns shortTermMaxPos and momentaryMaxPos (in absolute
project time). Note: shortTermMaxPos and momentaryMaxPos actaully
indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.).
------
name:reaper.NF_AnalyzeTakeLoudness2
language:lua
return:(boolean:retval),(number:lufsIntegrated),(number:range),(number :truePeak),(number:truePeakPos),(number:shortTermMax),(number:momentaryMax),(number:shortTermMaxPos),(number:momentaryMaxPos)
params:(MediaItem_Take:take), (boolean:analyzeTruePeak)
description:
Same as NF_AnalyzeTakeLoudness but
additionally returns shortTermMaxPos and momentaryMaxPos (in absolute
project time). Note: shortTermMaxPos and momentaryMaxPos actaully
indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.).
------
name:NF_AnalyzeTakeLoudness2
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Boolean:analyzeTruePeak),(Float:lufsIntegratedOut),(Float:rangeOut),(Float :truePeakOut),(Float:truePeakPosOut),(Float:shortTermMaxOut),(Float:momentaryMaxOut),(Float:shortTermMaxPosOut),(Float:momentaryMaxPosOut)
params:(take:), (analyzeTruePeak:), (lufsIntegratedOut:), (rangeOut:), (:truePeakOut), (truePeakPosOut:), (shortTermMaxOut:), (momentaryMaxOut:), (shortTermMaxPosOut:), (momentaryMaxPosOut:)
description:
Same as NF_AnalyzeTakeLoudness but
additionally returns shortTermMaxPos and momentaryMaxPos (in absolute
project time). Note: shortTermMaxPos and momentaryMaxPos actaully
indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.).
------
name:NF_AnalyzeTakeLoudness_IntegratedOnly
language:c
return:(bool:)
params:(MediaItem_Take*:take), (double*:lufsIntegratedOut)
description:
Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow
------
name:extension_api
language:eel2
return:(bool:)
params:("NF_AnalyzeTakeLoudness_IntegratedOnly":), (MediaItem_Take:take), (&lufsIntegrated:)
description:
Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow
------
name:reaper.NF_AnalyzeTakeLoudness_IntegratedOnly
language:lua
return:(boolean:retval),(number:lufsIntegrated)
params:(MediaItem_Take:take)
description:
Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow
------
name:NF_AnalyzeTakeLoudness_IntegratedOnly
language:python
return:(Boolean:retval),(MediaItem_Take:take),(Float:lufsIntegratedOut)
params:(take:), (lufsIntegratedOut:)
description:
Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow
------
name:NF_GetMediaItemAverageRMS
language:c
return:(double:)
params:(MediaItem*:item)
description:
Returns the average overall (non-windowed) RMS level of active channels
of an audio item active take, post item gain, post take volume envelope,
post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:extension_api
language:eel2
return:(double:)
params:("NF_GetMediaItemAverageRMS":), (MediaItem:item)
description:
Returns the average overall (non-windowed) RMS level of active channels
of an audio item active take, post item gain, post take volume envelope,
post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:reaper.NF_GetMediaItemAverageRMS
language:lua
return:(number:)
params:(MediaItem:item)
description:
Returns the average overall (non-windowed) RMS level of active channels
of an audio item active take, post item gain, post take volume envelope,
post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:NF_GetMediaItemAverageRMS
language:python
return:(Float:)
params:(MediaItem:item)
description:
Returns the average overall (non-windowed) RMS level of active channels
of an audio item active take, post item gain, post take volume envelope,
post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:NF_GetMediaItemMaxPeak
language:c
return:(double:)
params:(MediaItem*:item)
description:
Returns the greatest max. peak value of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:extension_api
language:eel2
return:(double:)
params:("NF_GetMediaItemMaxPeak":), (MediaItem:item)
description:
Returns the greatest max. peak value of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:reaper.NF_GetMediaItemMaxPeak
language:lua
return:(number:)
params:(MediaItem:item)
description:
Returns the greatest max. peak value of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:NF_GetMediaItemMaxPeak
language:python
return:(Float:)
params:(MediaItem:item)
description:
Returns the greatest max. peak value of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:NF_GetMediaItemMaxPeakAndMaxPeakPos
language:c
return:(double:)
params:(MediaItem*:item), (double*:maxPeakPosOut)
description:
See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).
------
name:extension_api
language:eel2
return:(double:)
params:("NF_GetMediaItemMaxPeakAndMaxPeakPos":), (MediaItem:item), (&maxPeakPos:)
description:
See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).
------
name:reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos
language:lua
return:(number:retval),(number:maxPeakPos)
params:(MediaItem:item)
description:
See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).
------
name:NF_GetMediaItemMaxPeakAndMaxPeakPos
language:python
return:(Float:retval),(MediaItem:item),(Float:maxPeakPosOut)
params:(item:), (maxPeakPosOut:)
description:
See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).
------
name:NF_GetMediaItemPeakRMS_NonWindowed
language:c
return:(double:)
params:(MediaItem*:item)
description:
Returns the greatest overall (non-windowed) RMS peak level of all active
channels of an audio item active take, post item gain, post take volume
envelope, post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:extension_api
language:eel2
return:(double:)
params:("NF_GetMediaItemPeakRMS_NonWindowed":), (MediaItem:item)
description:
Returns the greatest overall (non-windowed) RMS peak level of all active
channels of an audio item active take, post item gain, post take volume
envelope, post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:reaper.NF_GetMediaItemPeakRMS_NonWindowed
language:lua
return:(number:)
params:(MediaItem:item)
description:
Returns the greatest overall (non-windowed) RMS peak level of all active
channels of an audio item active take, post item gain, post take volume
envelope, post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:NF_GetMediaItemPeakRMS_NonWindowed
language:python
return:(Float:)
params:(MediaItem:item)
description:
Returns the greatest overall (non-windowed) RMS peak level of all active
channels of an audio item active take, post item gain, post take volume
envelope, post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.
------
name:NF_GetMediaItemPeakRMS_Windowed
language:c
return:(double:)
params:(MediaItem*:item)
description:
Returns the average RMS peak level of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS
analysis/normalize options' for calculation. Returns -150.0 if MIDI take
or empty item.
------
name:extension_api
language:eel2
return:(double:)
params:("NF_GetMediaItemPeakRMS_Windowed":), (MediaItem:item)
description:
Returns the average RMS peak level of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS
analysis/normalize options' for calculation. Returns -150.0 if MIDI take
or empty item.
------
name:reaper.NF_GetMediaItemPeakRMS_Windowed
language:lua
return:(number:)
params:(MediaItem:item)
description:
Returns the average RMS peak level of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS
analysis/normalize options' for calculation. Returns -150.0 if MIDI take
or empty item.
------
name:NF_GetMediaItemPeakRMS_Windowed
language:python
return:(Float:)
params:(MediaItem:item)
description:
Returns the average RMS peak level of all active channels of an audio
item active take, post item gain, post take volume envelope, post-fade,
pre fader, pre item FX.
Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS
analysis/normalize options' for calculation. Returns -150.0 if MIDI take
or empty item.
------
name:NF_GetSWSMarkerRegionSub
language:c
return:(const:char*)
params:(int:markerRegionIdx)
description:
Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns empty string if
marker/region with specified index not found or marker/region subtitle
not set. Lua code example here.
------
name:extension_api
language:eel2
return:(bool:)
params:("NF_GetSWSMarkerRegionSub":), (#retval:), (int:markerRegionIdx)
description:
Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns empty string if
marker/region with specified index not found or marker/region subtitle
not set. Lua code example here.
------
name:reaper.NF_GetSWSMarkerRegionSub
language:lua
return:(string:)
params:(integer:markerRegionIdx)
description:
Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns empty string if
marker/region with specified index not found or marker/region subtitle
not set. Lua code example here.
------
name:NF_GetSWSMarkerRegionSub
language:python
return:(String:)
params:(Int:markerRegionIdx)
description:
Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns empty string if
marker/region with specified index not found or marker/region subtitle
not set. Lua code example here.
------
name:NF_GetSWSTrackNotes
language:c
return:(const:char*)
params:(MediaTrack*:track)
description:

------
name:extension_api
language:eel2
return:(bool:)
params:("NF_GetSWSTrackNotes":), (#retval:), (MediaTrack:track)
description:

------
name:reaper.NF_GetSWSTrackNotes
language:lua
return:(string:)
params:(MediaTrack:track)
description:

------
name:NF_GetSWSTrackNotes
language:python
return:(String:)
params:(MediaTrack:track)
description:

------
name:NF_SetSWSMarkerRegionSub
language:c
return:(bool:)
params:(const char*:markerRegionSub), (int:markerRegionIdx)
description:
Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns true if subtitle is set
successfully (i.e. marker/region with specified index is present in
project). Lua code example here.
------
name:extension_api
language:eel2
return:(bool:)
params:("NF_SetSWSMarkerRegionSub":), ("markerRegionSub":), (int:markerRegionIdx)
description:
Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns true if subtitle is set
successfully (i.e. marker/region with specified index is present in
project). Lua code example here.
------
name:reaper.NF_SetSWSMarkerRegionSub
language:lua
return:(boolean:)
params:(string:markerRegionSub), (integer:markerRegionIdx)
description:
Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns true if subtitle is set
successfully (i.e. marker/region with specified index is present in
project). Lua code example here.
------
name:NF_SetSWSMarkerRegionSub
language:python
return:(Boolean:)
params:(String:markerRegionSub), (Int:markerRegionIdx)
description:
Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers
(not displayed marker/region index). Returns true if subtitle is set
successfully (i.e. marker/region with specified index is present in
project). Lua code example here.
------
name:NF_SetSWSTrackNotes
language:c
return:(void:)
params:(MediaTrack*:track), (const char*:str)
description:

------
name:extension_api
language:eel2
return:
params:("NF_SetSWSTrackNotes":), (MediaTrack:track), ("str":)
description:

------
name:reaper.NF_SetSWSTrackNotes
language:lua
return:
params:(MediaTrack:track), (string:str)
description:

------
name:NF_SetSWSTrackNotes
language:python
return:
params:(MediaTrack:track), (String:str)
description:

------
name:NF_UpdateSWSMarkerRegionSubWindow
language:c
return:(void:)
params:
description:
Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)
------
name:extension_api
language:eel2
return:
params:("NF_UpdateSWSMarkerRegionSubWindow":)
description:
Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)
------
name:reaper.NF_UpdateSWSMarkerRegionSubWindow
language:lua
return:
params:
description:
Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)
------
name:NF_UpdateSWSMarkerRegionSubWindow
language:python
return:
params:
description:
Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)
------
name:ReaPack_AboutInstalledPackage
language:c
return:(bool:)
params:(PackageEntry*:entry)
description:
Show the about dialog of the given package entry.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:extension_api
language:eel2
return:(bool:)
params:("ReaPack_AboutInstalledPackage":), (PackageEntry:entry)
description:
Show the about dialog of the given package entry.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:reaper.ReaPack_AboutInstalledPackage
language:lua
return:(boolean:)
params:(PackageEntry:entry)
description:
Show the about dialog of the given package entry.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:ReaPack_AboutInstalledPackage
language:python
return:(Boolean:)
params:(PackageEntry:entry)
description:
Show the about dialog of the given package entry.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:ReaPack_AboutRepository
language:c
return:(bool:)
params:(const char*:repoName)
description:
Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:extension_api
language:eel2
return:(bool:)
params:("ReaPack_AboutRepository":), ("repoName":)
description:
Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:reaper.ReaPack_AboutRepository
language:lua
return:(boolean:)
params:(string:repoName)
description:
Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:ReaPack_AboutRepository
language:python
return:(Boolean:)
params:(String:repoName)
description:
Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.
------
name:ReaPack_AddSetRepository
language:c
return:(bool:)
params:(const char*:name), (const char*:url), (bool:enable), (int:autoInstall), (char*:errorOut), (int:errorOut_sz)
description:
Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.
autoInstall: usually set to 2 (obey user setting).
------
name:extension_api
language:eel2
return:(bool:)
params:("ReaPack_AddSetRepository":), ("name":), ("url":), (bool:enable), (int:autoInstall), (#error:)
description:
Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.
autoInstall: usually set to 2 (obey user setting).
------
name:reaper.ReaPack_AddSetRepository
language:lua
return:(boolean:retval),(string:error)
params:(string:name), (string:url), (boolean:enable), (integer:autoInstall)
description:
Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.
autoInstall: usually set to 2 (obey user setting).
------
name:ReaPack_AddSetRepository
language:python
return:(Boolean:retval),(String:name),(String:url),(Boolean:enable),(Int:autoInstall),(String:errorOut),(Int:errorOut_sz)
params:(name:), (url:), (enable:), (autoInstall:), (errorOut:), (errorOut_sz:)
description:
Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.
autoInstall: usually set to 2 (obey user setting).
------
name:ReaPack_BrowsePackages
language:c
return:(void:)
params:(const char*:filter)
description:
Opens the package browser with the given filter string.
------
name:extension_api
language:eel2
return:
params:("ReaPack_BrowsePackages":), ("filter":)
description:
Opens the package browser with the given filter string.
------
name:reaper.ReaPack_BrowsePackages
language:lua
return:
params:(string:filter)
description:
Opens the package browser with the given filter string.
------
name:ReaPack_BrowsePackages
language:python
return:
params:(String:filter)
description:
Opens the package browser with the given filter string.
------
name:ReaPack_CompareVersions
language:c
return:(int:)
params:(const char*:ver1), (const char*:ver2), (char*:errorOut), (int:errorOut_sz)
description:
Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.
------
name:extension_api
language:eel2
return:(int:)
params:("ReaPack_CompareVersions":), ("ver1":), ("ver2":), (#error:)
description:
Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.
------
name:reaper.ReaPack_CompareVersions
language:lua
return:(integer:retval),(string:error)
params:(string:ver1), (string:ver2)
description:
Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.
------
name:ReaPack_CompareVersions
language:python
return:(Int:retval),(String:ver1),(String:ver2),(String:errorOut),(Int:errorOut_sz)
params:(ver1:), (ver2:), (errorOut:), (errorOut_sz:)
description:
Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.
------
name:ReaPack_EnumOwnedFiles
language:c
return:(bool:)
params:(PackageEntry*:entry), (int:index), (char*:pathOut), (int:pathOut_sz), (int*:sectionsOut), (int*:typeOut)
description:
Enumerate the files owned by the given package. Returns false when there is no more data.
sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor
type: see ReaPack_GetEntryInfo.
------
name:extension_api
language:eel2
return:(bool:)
params:("ReaPack_EnumOwnedFiles":), (PackageEntry:entry), (int:index), (#path:), (int:&sections), (int:&type)
description:
Enumerate the files owned by the given package. Returns false when there is no more data.
sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor
type: see ReaPack_GetEntryInfo.
------
name:reaper.ReaPack_EnumOwnedFiles
language:lua
return:(boolean:retval),(string:path),(number:sections),(number:type)
params:(PackageEntry:entry), (integer:index)
description:
Enumerate the files owned by the given package. Returns false when there is no more data.
sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor
type: see ReaPack_GetEntryInfo.
------
name:ReaPack_EnumOwnedFiles
language:python
return:(Boolean:retval),(PackageEntry:entry),(Int:index),(String:pathOut),(Int:pathOut_sz),(Int:sectionsOut),(Int:typeOut)
params:(entry:), (index:), (pathOut:), (pathOut_sz:), (sectionsOut:), (typeOut:)
description:
Enumerate the files owned by the given package. Returns false when there is no more data.
sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor
type: see ReaPack_GetEntryInfo.
------
name:ReaPack_FreeEntry
language:c
return:(bool:)
params:(PackageEntry*:entry)
description:
Free resources allocated for the given package entry.
------
name:extension_api
language:eel2
return:(bool:)
params:("ReaPack_FreeEntry":), (PackageEntry:entry)
description:
Free resources allocated for the given package entry.
------
name:reaper.ReaPack_FreeEntry
language:lua
return:(boolean:)
params:(PackageEntry:entry)
description:
Free resources allocated for the given package entry.
------
name:ReaPack_FreeEntry
language:python
return:(Boolean:)
params:(PackageEntry:entry)
description:
Free resources allocated for the given package entry.
------
name:ReaPack_GetEntryInfo
language:c
return:(bool:)
params:(PackageEntry*:entry), (char*:repoOut), (int:repoOut_sz), (char*:catOut), (int:catOut_sz), (char*:pkgOut), (int:pkgOut_sz), (char*:descOut), (int:descOut_sz), (int*:typeOut), (char*:verOut), (int:verOut_sz), (char*:authorOut), (int:authorOut_sz), (bool*:pinnedOut), (int*:fileCountOut)
description:
Get the repository name, category, package name, package description,
package type, the currently installed version, author name, pinned
status and how many files are owned by the given package entry.
type: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface
------
name:extension_api
language:eel2
return:(bool:)
params:("ReaPack_GetEntryInfo":), (PackageEntry:entry), (#repo:), (#cat:), (#pkg:), (#desc:), (int:&type), (#ver:), (#author:), (bool:&pinned), (int:&fileCount)
description:
Get the repository name, category, package name, package description,
package type, the currently installed version, author name, pinned
status and how many files are owned by the given package entry.
type: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface
------
name:reaper.ReaPack_GetEntryInfo
language:lua
return:(boolean:retval),(string:repo),(string:cat),(string:pkg),(string:desc),(number:type),(string:ver),(string:author),(boolean:pinned),(number:fileCount)
params:(PackageEntry:entry)
description:
Get the repository name, category, package name, package description,
package type, the currently installed version, author name, pinned
status and how many files are owned by the given package entry.
type: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface
------
name:ReaPack_GetEntryInfo
language:python
return:(Boolean:retval),(PackageEntry:entry),(String:repoOut),(Int:repoOut_sz),(String:catOut),(Int:catOut_sz),(String:pkgOut),(Int:pkgOut_sz),(String:descOut),(Int:descOut_sz),(Int:typeOut),(String:verOut),(Int:verOut_sz),(String:authorOut),(Int:authorOut_sz),(Boolean:pinnedOut),(Int:fileCountOut)
params:(entry:), (repoOut:), (repoOut_sz:), (catOut:), (catOut_sz:), (pkgOut:), (pkgOut_sz:), (descOut:), (descOut_sz:), (typeOut:), (verOut:), (verOut_sz:), (authorOut:), (authorOut_sz:), (pinnedOut:), (fileCountOut:)
description:
Get the repository name, category, package name, package description,
package type, the currently installed version, author name, pinned
status and how many files are owned by the given package entry.
type: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface
------
name:ReaPack_GetOwner
language:c
return:(PackageEntry*:)
params:(const char*:fn), (char*:errorOut), (int:errorOut_sz)
description:
Returns the package entry owning the given file.
Delete the returned object from memory after use with ReaPack_FreeEntry.
------
name:extension_api
language:eel2
return:(PackageEntry:)
params:("ReaPack_GetOwner":), ("fn":), (#error:)
description:
Returns the package entry owning the given file.
Delete the returned object from memory after use with ReaPack_FreeEntry.
------
name:reaper.ReaPack_GetOwner
language:lua
return:(PackageEntry:retval),(string:error)
params:(string:fn)
description:
Returns the package entry owning the given file.
Delete the returned object from memory after use with ReaPack_FreeEntry.
------
name:ReaPack_GetOwner
language:python
return:(PackageEntry:retval),(String:fn),(String:errorOut),(Int:errorOut_sz)
params:(fn:), (errorOut:), (errorOut_sz:)
description:
Returns the package entry owning the given file.
Delete the returned object from memory after use with ReaPack_FreeEntry.
------
name:ReaPack_GetRepositoryInfo
language:c
return:(bool:)
params:(const char*:name), (char*:urlOut), (int:urlOut_sz), (bool*:enabledOut), (int*:autoInstallOut)
description:
Get the infos of the given repository.
autoInstall: 0=manual, 1=when sychronizing, 2=obey user setting
------
name:extension_api
language:eel2
return:(bool:)
params:("ReaPack_GetRepositoryInfo":), ("name":), (#url:), (bool:&enabled), (int:&autoInstall)
description:
Get the infos of the given repository.
autoInstall: 0=manual, 1=when sychronizing, 2=obey user setting
------
name:reaper.ReaPack_GetRepositoryInfo
language:lua
return:(boolean:retval),(string:url),(boolean:enabled),(number:autoInstall)
params:(string:name)
description:
Get the infos of the given repository.
autoInstall: 0=manual, 1=when sychronizing, 2=obey user setting
------
name:ReaPack_GetRepositoryInfo
language:python
return:(Boolean:retval),(String:name),(String:urlOut),(Int:urlOut_sz),(Boolean:enabledOut),(Int:autoInstallOut)
params:(name:), (urlOut:), (urlOut_sz:), (enabledOut:), (autoInstallOut:)
description:
Get the infos of the given repository.
autoInstall: 0=manual, 1=when sychronizing, 2=obey user setting
------
name:ReaPack_ProcessQueue
language:c
return:(void:)
params:(bool:refreshUI)
description:
Run pending operations and save the configuration file. If refreshUI is
true the browser and manager windows are guaranteed to be refreshed
(otherwise it depends on which operations are in the queue).
------
name:extension_api
language:eel2
return:
params:("ReaPack_ProcessQueue":), (bool:refreshUI)
description:
Run pending operations and save the configuration file. If refreshUI is
true the browser and manager windows are guaranteed to be refreshed
(otherwise it depends on which operations are in the queue).
------
name:reaper.ReaPack_ProcessQueue
language:lua
return:
params:(boolean:refreshUI)
description:
Run pending operations and save the configuration file. If refreshUI is
true the browser and manager windows are guaranteed to be refreshed
(otherwise it depends on which operations are in the queue).
------
name:ReaPack_ProcessQueue
language:python
return:
params:(Boolean:refreshUI)
description:
Run pending operations and save the configuration file. If refreshUI is
true the browser and manager windows are guaranteed to be refreshed
(otherwise it depends on which operations are in the queue).
------
name:SNM_AddReceive
language:c
return:(bool:)
params:(MediaTrack*:src), (MediaTrack*:dest), (int:type)
description:
[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.
type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).
Note: obeys default sends preferences, supports frozen tracks, etc..
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_AddReceive":), (MediaTrack:src), (MediaTrack:dest), (int:type)
description:
[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.
type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).
Note: obeys default sends preferences, supports frozen tracks, etc..
------
name:reaper.SNM_AddReceive
language:lua
return:(boolean:)
params:(MediaTrack:src), (MediaTrack:dest), (integer:type)
description:
[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.
type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).
Note: obeys default sends preferences, supports frozen tracks, etc..
------
name:SNM_AddReceive
language:python
return:(Boolean:)
params:(MediaTrack:src), (MediaTrack:dest), (Int:type)
description:
[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.
type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).
Note: obeys default sends preferences, supports frozen tracks, etc..
------
name:SNM_AddTCPFXParm
language:c
return:(bool:)
params:(MediaTrack*:tr), (int:fxId), (int:prmId)
description:
[S&M] Add an FX parameter knob in the TCP. Returns false if nothing
updated (invalid parameters, knob already present, etc..)
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_AddTCPFXParm":), (MediaTrack:tr), (int:fxId), (int:prmId)
description:
[S&M] Add an FX parameter knob in the TCP. Returns false if nothing
updated (invalid parameters, knob already present, etc..)
------
name:reaper.SNM_AddTCPFXParm
language:lua
return:(boolean:)
params:(MediaTrack:tr), (integer:fxId), (integer:prmId)
description:
[S&M] Add an FX parameter knob in the TCP. Returns false if nothing
updated (invalid parameters, knob already present, etc..)
------
name:SNM_AddTCPFXParm
language:python
return:(Boolean:)
params:(MediaTrack:tr), (Int:fxId), (Int:prmId)
description:
[S&M] Add an FX parameter knob in the TCP. Returns false if nothing
updated (invalid parameters, knob already present, etc..)
------
name:SNM_CreateFastString
language:c
return:(WDL_FastString*:)
params:(const char*:str)
description:
[S&M] Instantiates a new "fast string". You must delete this string, see SNM_DeleteFastString.
------
name:extension_api
language:eel2
return:(WDL_FastString:)
params:("SNM_CreateFastString":), ("str":)
description:
[S&M] Instantiates a new "fast string". You must delete this string, see SNM_DeleteFastString.
------
name:reaper.SNM_CreateFastString
language:lua
return:(WDL_FastString:)
params:(string:str)
description:
[S&M] Instantiates a new "fast string". You must delete this string, see SNM_DeleteFastString.
------
name:SNM_CreateFastString
language:python
return:(WDL_FastString:)
params:(String:str)
description:
[S&M] Instantiates a new "fast string". You must delete this string, see SNM_DeleteFastString.
------
name:SNM_DeleteFastString
language:c
return:(void:)
params:(WDL_FastString*:str)
description:
[S&M] Deletes a "fast string" instance.
------
name:extension_api
language:eel2
return:
params:("SNM_DeleteFastString":), (WDL_FastString:str)
description:
[S&M] Deletes a "fast string" instance.
------
name:reaper.SNM_DeleteFastString
language:lua
return:
params:(WDL_FastString:str)
description:
[S&M] Deletes a "fast string" instance.
------
name:SNM_DeleteFastString
language:python
return:
params:(WDL_FastString:str)
description:
[S&M] Deletes a "fast string" instance.
------
name:SNM_GetDoubleConfigVar
language:c
return:(double:)
params:(const char*:varname), (double:errvalue)
description:
[S&M] Returns a double preference (look in project prefs first, then
in general prefs). Returns errvalue if failed (e.g. varname not found).
------
name:extension_api
language:eel2
return:(double:)
params:("SNM_GetDoubleConfigVar":), ("varname":), (errvalue:)
description:
[S&M] Returns a double preference (look in project prefs first, then
in general prefs). Returns errvalue if failed (e.g. varname not found).
------
name:reaper.SNM_GetDoubleConfigVar
language:lua
return:(number:)
params:(string:varname), (number:errvalue)
description:
[S&M] Returns a double preference (look in project prefs first, then
in general prefs). Returns errvalue if failed (e.g. varname not found).
------
name:SNM_GetDoubleConfigVar
language:python
return:(Float:)
params:(String:varname), (Float:errvalue)
description:
[S&M] Returns a double preference (look in project prefs first, then
in general prefs). Returns errvalue if failed (e.g. varname not found).
------
name:SNM_GetFastString
language:c
return:(const:char*)
params:(WDL_FastString*:str)
description:
[S&M] Gets the "fast string" content.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_GetFastString":), (#retval:), (WDL_FastString:str)
description:
[S&M] Gets the "fast string" content.
------
name:reaper.SNM_GetFastString
language:lua
return:(string:)
params:(WDL_FastString:str)
description:
[S&M] Gets the "fast string" content.
------
name:SNM_GetFastString
language:python
return:(String:)
params:(WDL_FastString:str)
description:
[S&M] Gets the "fast string" content.
------
name:SNM_GetFastStringLength
language:c
return:(int:)
params:(WDL_FastString*:str)
description:
[S&M] Gets the "fast string" length.
------
name:extension_api
language:eel2
return:(int:)
params:("SNM_GetFastStringLength":), (WDL_FastString:str)
description:
[S&M] Gets the "fast string" length.
------
name:reaper.SNM_GetFastStringLength
language:lua
return:(integer:)
params:(WDL_FastString:str)
description:
[S&M] Gets the "fast string" length.
------
name:SNM_GetFastStringLength
language:python
return:(Int:)
params:(WDL_FastString:str)
description:
[S&M] Gets the "fast string" length.
------
name:SNM_GetIntConfigVar
language:c
return:(int:)
params:(const char*:varname), (int:errvalue)
description:
[S&M] Returns an integer preference (look in project prefs first,
then in general prefs). Returns errvalue if failed (e.g. varname not
found).
------
name:extension_api
language:eel2
return:(int:)
params:("SNM_GetIntConfigVar":), ("varname":), (int:errvalue)
description:
[S&M] Returns an integer preference (look in project prefs first,
then in general prefs). Returns errvalue if failed (e.g. varname not
found).
------
name:reaper.SNM_GetIntConfigVar
language:lua
return:(integer:)
params:(string:varname), (integer:errvalue)
description:
[S&M] Returns an integer preference (look in project prefs first,
then in general prefs). Returns errvalue if failed (e.g. varname not
found).
------
name:SNM_GetIntConfigVar
language:python
return:(Int:)
params:(String:varname), (Int:errvalue)
description:
[S&M] Returns an integer preference (look in project prefs first,
then in general prefs). Returns errvalue if failed (e.g. varname not
found).
------
name:SNM_GetMediaItemTakeByGUID
language:c
return:(MediaItem_Take*:)
params:(ReaProject*:project), (const char*:guid)
description:
[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID
------
name:extension_api
language:eel2
return:(MediaItem_Take:)
params:("SNM_GetMediaItemTakeByGUID":), (ReaProject:project), ("guid":)
description:
[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID
------
name:reaper.SNM_GetMediaItemTakeByGUID
language:lua
return:(MediaItem_Take:)
params:(ReaProject:project), (string:guid)
description:
[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID
------
name:SNM_GetMediaItemTakeByGUID
language:python
return:(MediaItem_Take:)
params:(ReaProject:project), (String:guid)
description:
[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID
------
name:SNM_GetProjectMarkerName
language:c
return:(bool:)
params:(ReaProject*:proj), (int:num), (bool:isrgn), (WDL_FastString*:name)
description:
[S&M] Gets a marker/region name. Returns true if marker/region found.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_GetProjectMarkerName":), (ReaProject:proj), (int:num), (bool:isrgn), (WDL_FastString:name)
description:
[S&M] Gets a marker/region name. Returns true if marker/region found.
------
name:reaper.SNM_GetProjectMarkerName
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:num), (boolean isrgnWDL_FastString:name)
description:
[S&M] Gets a marker/region name. Returns true if marker/region found.
------
name:SNM_GetProjectMarkerName
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:num), (Boolean:isrgn), (WDL_FastString:name)
description:
[S&M] Gets a marker/region name. Returns true if marker/region found.
------
name:SNM_GetSetObjectState
language:c
return:(bool:)
params:(void*:obj), (WDL_FastString*:state), (bool:setnewvalue), (bool:wantminimalstate)
description:
[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.
When getting a track state (and when you are not interested in FX data),
you can use wantminimalstate=true to radically reduce the length of the
state. Do not set such minimal states back though, this is for
read-only applications!
Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_GetSetObjectState":), (void*:obj), (WDL_FastString:state), (bool:setnewvalue), (bool:wantminimalstate)
description:
[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.
When getting a track state (and when you are not interested in FX data),
you can use wantminimalstate=true to radically reduce the length of the
state. Do not set such minimal states back though, this is for
read-only applications!
Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.
------
name:reaper.SNM_GetSetObjectState
language:lua
return:(boolean:)
params:(identifier objWDL_FastString:state), (boolean:setnewvalue), (boolean:wantminimalstate)
description:
[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.
When getting a track state (and when you are not interested in FX data),
you can use wantminimalstate=true to radically reduce the length of the
state. Do not set such minimal states back though, this is for
read-only applications!
Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.
------
name:SNM_GetSetObjectState
language:python
return:(Boolean:)
params:(void:obj), (WDL_FastString:state), (Boolean:setnewvalue), (Boolean:wantminimalstate)
description:
[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.
When getting a track state (and when you are not interested in FX data),
you can use wantminimalstate=true to radically reduce the length of the
state. Do not set such minimal states back though, this is for
read-only applications!
Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.
------
name:SNM_GetSetSourceState
language:c
return:(bool:)
params:(MediaItem*:item), (int:takeidx), (WDL_FastString*:state), (bool:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.
Note: this function does not use a MediaItem_Take* param in order to
manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_GetSetSourceState":), (MediaItem:item), (int:takeidx), (WDL_FastString:state), (bool:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.
Note: this function does not use a MediaItem_Take* param in order to
manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.
------
name:reaper.SNM_GetSetSourceState
language:lua
return:(boolean:)
params:(MediaItem:item), (integer takeidxWDL_FastString:state), (boolean:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.
Note: this function does not use a MediaItem_Take* param in order to
manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.
------
name:SNM_GetSetSourceState
language:python
return:(Boolean:)
params:(MediaItem:item), (Int:takeidx), (WDL_FastString:state), (Boolean:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.
Note: this function does not use a MediaItem_Take* param in order to
manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.
------
name:SNM_GetSetSourceState2
language:c
return:(bool:)
params:(MediaItem_Take*:take), (WDL_FastString*:state), (bool:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed.
Note: this function cannot deal with empty takes, see SNM_GetSetSourceState.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_GetSetSourceState2":), (MediaItem_Take:take), (WDL_FastString:state), (bool:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed.
Note: this function cannot deal with empty takes, see SNM_GetSetSourceState.
------
name:reaper.SNM_GetSetSourceState2
language:lua
return:(boolean:)
params:(MediaItem_Take takeWDL_FastString:state), (boolean:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed.
Note: this function cannot deal with empty takes, see SNM_GetSetSourceState.
------
name:SNM_GetSetSourceState2
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (WDL_FastString:state), (Boolean:setnewvalue)
description:
[S&M] Gets or sets a take source state. Returns false if failed.
Note: this function cannot deal with empty takes, see SNM_GetSetSourceState.
------
name:SNM_GetSourceType
language:c
return:(bool:)
params:(MediaItem_Take*:take), (WDL_FastString*:type)
description:
[S&M] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_GetSourceType":), (MediaItem_Take:take), (WDL_FastString:type)
description:
[S&M] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)
------
name:reaper.SNM_GetSourceType
language:lua
return:(boolean:)
params:(MediaItem_Take takeWDL_FastString:type)
description:
[S&M] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)
------
name:SNM_GetSourceType
language:python
return:(Boolean:)
params:(MediaItem_Take:take), (WDL_FastString:type)
description:
[S&M] Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)
------
name:SNM_MoveOrRemoveTrackFX
language:c
return:(bool:)
params:(MediaTrack*:tr), (int:fxId), (int:what)
description:
[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take,
TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns
true if tr has been updated.
fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_MoveOrRemoveTrackFX":), (MediaTrack:tr), (int:fxId), (int:what)
description:
[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take,
TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns
true if tr has been updated.
fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.
------
name:reaper.SNM_MoveOrRemoveTrackFX
language:lua
return:(boolean:)
params:(MediaTrack:tr), (integer:fxId), (integer:what)
description:
[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take,
TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns
true if tr has been updated.
fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.
------
name:SNM_MoveOrRemoveTrackFX
language:python
return:(Boolean:)
params:(MediaTrack:tr), (Int:fxId), (Int:what)
description:
[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take,
TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns
true if tr has been updated.
fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.
------
name:SNM_ReadMediaFileTag
language:c
return:(bool:)
params:(const char*:fn), (const char*:tag), (char*:tagval), (int:tagval_sz)
description:
[S&M] Reads a media file tag. Supported tags: "artist", "album",
"genre", "comment", "title", or "year". Returns false if tag was not
found. See SNM_TagMediaFile.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_ReadMediaFileTag":), ("fn":), ("tag":), (#tagval:)
description:
[S&M] Reads a media file tag. Supported tags: "artist", "album",
"genre", "comment", "title", or "year". Returns false if tag was not
found. See SNM_TagMediaFile.
------
name:reaper.SNM_ReadMediaFileTag
language:lua
return:(boolean:retval),(string:tagval)
params:(string:fn), (string:tag), (string:tagval)
description:
[S&M] Reads a media file tag. Supported tags: "artist", "album",
"genre", "comment", "title", or "year". Returns false if tag was not
found. See SNM_TagMediaFile.
------
name:SNM_ReadMediaFileTag
language:python
return:(Boolean:retval),(String:fn),(String:tag),(String:tagval),(Int:tagval_sz)
params:(fn:), (tag:), (tagval:), (tagval_sz:)
description:
[S&M] Reads a media file tag. Supported tags: "artist", "album",
"genre", "comment", "title", or "year". Returns false if tag was not
found. See SNM_TagMediaFile.
------
name:SNM_RemoveReceive
language:c
return:(bool:)
params:(MediaTrack*:tr), (int:rcvidx)
description:
[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_RemoveReceive":), (MediaTrack:tr), (int:rcvidx)
description:
[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.
------
name:reaper.SNM_RemoveReceive
language:lua
return:(boolean:)
params:(MediaTrack:tr), (integer:rcvidx)
description:
[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.
------
name:SNM_RemoveReceive
language:python
return:(Boolean:)
params:(MediaTrack:tr), (Int:rcvidx)
description:
[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.
------
name:SNM_RemoveReceivesFrom
language:c
return:(bool:)
params:(MediaTrack*:tr), (MediaTrack*:srctr)
description:
[S&M] Removes all receives from srctr. Returns false if nothing updated.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_RemoveReceivesFrom":), (MediaTrack:tr), (MediaTrack:srctr)
description:
[S&M] Removes all receives from srctr. Returns false if nothing updated.
------
name:reaper.SNM_RemoveReceivesFrom
language:lua
return:(boolean:)
params:(MediaTrack:tr), (MediaTrack:srctr)
description:
[S&M] Removes all receives from srctr. Returns false if nothing updated.
------
name:SNM_RemoveReceivesFrom
language:python
return:(Boolean:)
params:(MediaTrack:tr), (MediaTrack:srctr)
description:
[S&M] Removes all receives from srctr. Returns false if nothing updated.
------
name:SNM_SelectResourceBookmark
language:c
return:(int:)
params:(const char*:name)
description:
[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).
------
name:extension_api
language:eel2
return:(int:)
params:("SNM_SelectResourceBookmark":), ("name":)
description:
[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).
------
name:reaper.SNM_SelectResourceBookmark
language:lua
return:(integer:)
params:(string:name)
description:
[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).
------
name:SNM_SelectResourceBookmark
language:python
return:(Int:)
params:(String:name)
description:
[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).
------
name:SNM_SetDoubleConfigVar
language:c
return:(bool:)
params:(const char*:varname), (double:newvalue)
description:
[S&M] Sets a double preference (look in project prefs first, then in
general prefs). Returns false if failed (e.g. varname not found).
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_SetDoubleConfigVar":), ("varname":), (newvalue:)
description:
[S&M] Sets a double preference (look in project prefs first, then in
general prefs). Returns false if failed (e.g. varname not found).
------
name:reaper.SNM_SetDoubleConfigVar
language:lua
return:(boolean:)
params:(string:varname), (number:newvalue)
description:
[S&M] Sets a double preference (look in project prefs first, then in
general prefs). Returns false if failed (e.g. varname not found).
------
name:SNM_SetDoubleConfigVar
language:python
return:(Boolean:)
params:(String:varname), (Float:newvalue)
description:
[S&M] Sets a double preference (look in project prefs first, then in
general prefs). Returns false if failed (e.g. varname not found).
------
name:SNM_SetFastString
language:c
return:(WDL_FastString*:)
params:(WDL_FastString*:str), (const char*:newstr)
description:
[S&M] Sets the "fast string" content. Returns str for facility.
------
name:extension_api
language:eel2
return:(WDL_FastString:)
params:("SNM_SetFastString":), (WDL_FastString:str), ("newstr":)
description:
[S&M] Sets the "fast string" content. Returns str for facility.
------
name:reaper.SNM_SetFastString
language:lua
return:(WDL_FastString:)
params:(WDL_FastString:str), (string:newstr)
description:
[S&M] Sets the "fast string" content. Returns str for facility.
------
name:SNM_SetFastString
language:python
return:(WDL_FastString:)
params:(WDL_FastString:str), (String:newstr)
description:
[S&M] Sets the "fast string" content. Returns str for facility.
------
name:SNM_SetIntConfigVar
language:c
return:(bool:)
params:(const char*:varname), (int:newvalue)
description:
[S&M] Sets an integer preference (look in project prefs first, then
in general prefs). Returns false if failed (e.g. varname not found).
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_SetIntConfigVar":), ("varname":), (int:newvalue)
description:
[S&M] Sets an integer preference (look in project prefs first, then
in general prefs). Returns false if failed (e.g. varname not found).
------
name:reaper.SNM_SetIntConfigVar
language:lua
return:(boolean:)
params:(string:varname), (integer:newvalue)
description:
[S&M] Sets an integer preference (look in project prefs first, then
in general prefs). Returns false if failed (e.g. varname not found).
------
name:SNM_SetIntConfigVar
language:python
return:(Boolean:)
params:(String:varname), (Int:newvalue)
description:
[S&M] Sets an integer preference (look in project prefs first, then
in general prefs). Returns false if failed (e.g. varname not found).
------
name:SNM_SetProjectMarker
language:c
return:(bool:)
params:(ReaProject*:proj), (int:num), (bool:isrgn), (double:pos), (double:rgnend), (const char*:name), (int:color)
description:
[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names "".
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_SetProjectMarker":), (ReaProject:proj), (int:num), (bool:isrgn), (pos:), (rgnend:), ("name":), (int:color)
description:
[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names "".
------
name:reaper.SNM_SetProjectMarker
language:lua
return:(boolean:)
params:(ReaProject:proj), (integer:num), (boolean:isrgn), (number:pos), (number:rgnend), (string:name), (integer:color)
description:
[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names "".
------
name:SNM_SetProjectMarker
language:python
return:(Boolean:)
params:(ReaProject:proj), (Int:num), (Boolean:isrgn), (Float:pos), (Float:rgnend), (String:name), (Int:color)
description:
[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names "".
------
name:SNM_TagMediaFile
language:c
return:(bool:)
params:(const char*:fn), (const char*:tag), (const char*:tagval)
description:
[S&M] Tags a media file thanks to TagLib.
Supported tags: "artist", "album", "genre", "comment", "title", or
"year". Use an empty tagval to clear a tag. When a file is opened in
REAPER, turn it offline before using this function. Returns false if
nothing updated. See SNM_ReadMediaFileTag.
------
name:extension_api
language:eel2
return:(bool:)
params:("SNM_TagMediaFile":), ("fn":), ("tag":), ("tagval":)
description:
[S&M] Tags a media file thanks to TagLib.
Supported tags: "artist", "album", "genre", "comment", "title", or
"year". Use an empty tagval to clear a tag. When a file is opened in
REAPER, turn it offline before using this function. Returns false if
nothing updated. See SNM_ReadMediaFileTag.
------
name:reaper.SNM_TagMediaFile
language:lua
return:(boolean:)
params:(string:fn), (string:tag), (string:tagval)
description:
[S&M] Tags a media file thanks to TagLib.
Supported tags: "artist", "album", "genre", "comment", "title", or
"year". Use an empty tagval to clear a tag. When a file is opened in
REAPER, turn it offline before using this function. Returns false if
nothing updated. See SNM_ReadMediaFileTag.
------
name:SNM_TagMediaFile
language:python
return:(Boolean:)
params:(String:fn), (String:tag), (String:tagval)
description:
[S&M] Tags a media file thanks to TagLib.
Supported tags: "artist", "album", "genre", "comment", "title", or
"year". Use an empty tagval to clear a tag. When a file is opened in
REAPER, turn it offline before using this function. Returns false if
nothing updated. See SNM_ReadMediaFileTag.
------
name:SNM_TieResourceSlotActions
language:c
return:(void:)
params:(int:bookmarkId)
description:
[S&M] Attach Resources slot actions to a given bookmark.
------
name:extension_api
language:eel2
return:
params:("SNM_TieResourceSlotActions":), (int:bookmarkId)
description:
[S&M] Attach Resources slot actions to a given bookmark.
------
name:reaper.SNM_TieResourceSlotActions
language:lua
return:
params:(integer:bookmarkId)
description:
[S&M] Attach Resources slot actions to a given bookmark.
------
name:SNM_TieResourceSlotActions
language:python
return:
params:(Int:bookmarkId)
description:
[S&M] Attach Resources slot actions to a given bookmark.
------
name:SN_FocusMIDIEditor
language:c
return:(void:)
params:
description:
Focuses the active/open MIDI editor.
------
name:extension_api
language:eel2
return:
params:("SN_FocusMIDIEditor":)
description:
Focuses the active/open MIDI editor.
------
name:reaper.SN_FocusMIDIEditor
language:lua
return:
params:
description:
Focuses the active/open MIDI editor.
------
name:SN_FocusMIDIEditor
language:python
return:
params:
description:
Focuses the active/open MIDI editor.
------
name:ULT_GetMediaItemNote
language:c
return:(const:char*)
params:(MediaItem*:item)
description:
[ULT] Get item notes.
------
name:extension_api
language:eel2
return:(bool:)
params:("ULT_GetMediaItemNote":), (#retval:), (MediaItem:item)
description:
[ULT] Get item notes.
------
name:reaper.ULT_GetMediaItemNote
language:lua
return:(string:)
params:(MediaItem:item)
description:
[ULT] Get item notes.
------
name:ULT_GetMediaItemNote
language:python
return:(String:)
params:(MediaItem:item)
description:
[ULT] Get item notes.
------
name:ULT_SetMediaItemNote
language:c
return:(void:)
params:(MediaItem*:item), (const char*:note)
description:
[ULT] Set item notes.
------
name:extension_api
language:eel2
return:
params:("ULT_SetMediaItemNote":), (MediaItem:item), ("note":)
description:
[ULT] Set item notes.
------
name:reaper.ULT_SetMediaItemNote
language:lua
return:
params:(MediaItem:item), (string:note)
description:
[ULT] Set item notes.
------
name:ULT_SetMediaItemNote
language:python
return:
params:(MediaItem:item), (String:note)
description:
[ULT] Set item notes.
------
name:Xen_AudioWriter_Create
language:c
return:(AudioWriter*:)
params:(const char*:filename), (int:numchans), (int:samplerate)
description:
Creates writer for 32 bit floating point WAV
------
name:extension_api
language:eel2
return:(AudioWriter:)
params:("Xen_AudioWriter_Create":), ("filename":), (int:numchans), (int:samplerate)
description:
Creates writer for 32 bit floating point WAV
------
name:reaper.Xen_AudioWriter_Create
language:lua
return:(AudioWriter:)
params:(string:filename), (integer:numchans), (integer:samplerate)
description:
Creates writer for 32 bit floating point WAV
------
name:Xen_AudioWriter_Create
language:python
return:(AudioWriter:)
params:(String:filename), (Int:numchans), (Int:samplerate)
description:
Creates writer for 32 bit floating point WAV
------
name:Xen_AudioWriter_Destroy
language:c
return:(void:)
params:(AudioWriter*:writer)
description:
Destroys writer
------
name:extension_api
language:eel2
return:
params:("Xen_AudioWriter_Destroy":), (AudioWriter:writer)
description:
Destroys writer
------
name:reaper.Xen_AudioWriter_Destroy
language:lua
return:
params:(AudioWriter:writer)
description:
Destroys writer
------
name:Xen_AudioWriter_Destroy
language:python
return:
params:(AudioWriter:writer)
description:
Destroys writer
------
name:Xen_AudioWriter_Write
language:c
return:(int:)
params:(AudioWriter*:writer), (int:numframes), (void*:data), (int:offset)
description:
Write interleaved audio data to disk
------
name:extension_api
language:eel2
return:(int:)
params:("Xen_AudioWriter_Write":), (AudioWriter:writer), (int:numframes), (void*:data), (int:offset)
description:
Write interleaved audio data to disk
------
name:reaper.Xen_AudioWriter_Write
language:lua
return:(integer:)
params:(AudioWriter:writer), (integer:numframes), (identifier:data), (integer:offset)
description:
Write interleaved audio data to disk
------
name:Xen_AudioWriter_Write
language:python
return:(Int:)
params:(AudioWriter:writer), (Int:numframes), (void:data), (Int:offset)
description:
Write interleaved audio data to disk
------
name:Xen_GetMediaSourceSamples
language:c
return:(int:)
params:(PCM_source*:src), (void*:destbuf), (int:destbufoffset), (int:numframes), (int:numchans), (double:samplerate), (double:sourceposition)
description:
Get interleaved audio data from media source
------
name:extension_api
language:eel2
return:(int:)
params:("Xen_GetMediaSourceSamples":), (PCM_source:src), (void*:destbuf), (int:destbufoffset), (int:numframes), (int:numchans), (samplerate:), (sourceposition:)
description:
Get interleaved audio data from media source
------
name:reaper.Xen_GetMediaSourceSamples
language:lua
return:(integer:)
params:(PCM_source:src), (identifier:destbuf), (integer:destbufoffset), (integer:numframes), (integer:numchans), (number:samplerate), (number:sourceposition)
description:
Get interleaved audio data from media source
------
name:Xen_GetMediaSourceSamples
language:python
return:(Int:)
params:(PCM_source:src), (void:destbuf), (Int:destbufoffset), (Int:numframes), (Int:numchans), (Float:samplerate), (Float:sourceposition)
description:
Get interleaved audio data from media source
------
name:Xen_StartSourcePreview
language:c
return:(int:)
params:(PCM_source*:source), (double:gain), (bool:loop), (int*:outputchanindexInOptional)
description:
Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.
If the given PCM_source does not belong to an existing MediaItem/Take,
it will be deleted by the preview system when the preview is stopped.
------
name:extension_api
language:eel2
return:(int:)
params:("Xen_StartSourcePreview":), (PCM_source:source), (gain:), (bool:loop), (optional int:outputchanindexIn)
description:
Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.
If the given PCM_source does not belong to an existing MediaItem/Take,
it will be deleted by the preview system when the preview is stopped.
------
name:reaper.Xen_StartSourcePreview
language:lua
return:(integer:)
params:(PCM_source:source), (number:gain), (boolean:loop), (optional number:outputchanindexIn)
description:
Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.
If the given PCM_source does not belong to an existing MediaItem/Take,
it will be deleted by the preview system when the preview is stopped.
------
name:Xen_StartSourcePreview
language:python
return:(Int:retval),(PCM_source:source),(Float:gain),(Boolean:loop),(Int:outputchanindexInOptional)
params:(source:), (gain:), (loop:), (outputchanindexInOptional:)
description:
Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.
If the given PCM_source does not belong to an existing MediaItem/Take,
it will be deleted by the preview system when the preview is stopped.
------
name:Xen_StopSourcePreview
language:c
return:(int:)
params:(int:preview_id)
description:
Stop audio preview. id -1 stops all.
------
name:extension_api
language:eel2
return:(int:)
params:("Xen_StopSourcePreview":), (int:preview_id)
description:
Stop audio preview. id -1 stops all.
------
name:reaper.Xen_StopSourcePreview
language:lua
return:(integer:)
params:(integer:preview_id)
description:
Stop audio preview. id -1 stops all.
------
name:Xen_StopSourcePreview
language:python
return:(Int:)
params:(Int:preview_id)
description:
Stop audio preview. id -1 stops all.
------
name:abs
language:eel2
return:
params:(value:)
description:
Returns the absolute value of the parameter.
------
name:acos
language:eel2
return:
params:(value:)
description:
Returns the arc cosine of the value
specified (return value is in radians). If the parameter is not between
-1.0 and 1.0 inclusive, the return value is undefined.
------
name:asin
language:eel2
return:
params:(value:)
description:
Returns the arc sine of the value
specified (return value is in radians). If the parameter is not between
-1.0 and 1.0 inclusive, the return value is undefined.
------
name:atan
language:eel2
return:
params:(value:)
description:
Returns the arc tangent of the
value specified (return value is in radians). If the parameter is not
between -1.0 and 1.0 inclusive, the return value is undefined.
------
name:atan2
language:eel2
return:
params:(numerator:), (denominator:)
description:
Returns the arc
tangent of the numerator divided by the denominator, allowing the
denominator to be 0, and using their signs to produce a more meaningful
result.
------
name:atexit
language:eel2
return:
params:("code":)
description:
Adds code to be executed when
the script finishes or is ended by the user. Typically used to clean up
after the user terminates defer() or runloop() code.
------
name:ceil
language:eel2
return:
params:(value:)
description:
Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).
------
name:convolve_c
language:eel2
return:
params:(dest:), (src:), (size:)
description:
Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.
------
name:cos
language:eel2
return:
params:(angle:)
description:
Returns the cosine of the angle specified (specified in radians).
------
name:defer
language:eel2
return:
params:("code":)
description:
Adds code to be called back by
REAPER. Used to create persistent ReaScripts that continue to run and
respond to input, while the user does other tasks. Identical to
runloop().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
------
name:eval
language:eel2
return:
params:("code":)
description:
Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.
------
name:exp
language:eel2
return:
params:(exponent:)
description:
Returns the number e ($e,
approximately 2.718) raised to the parameter-th power. This function is
significantly faster than pow() or the ^ operator.
------
name:extension_api
language:eel2
return:
params:("function_name":), (...:)
description:
Used to
call functions exported by extension plugins. The first parameter must
be the exported function name, then its own parameters (as if the
function was called directly).
------
name:fclose
language:eel2
return:
params:(fp:)
description:
Closes a file previously opened with fopen().
------
name:feof
language:eel2
return:
params:(fp:)
description:
Returns nonzero if the file fp is at the end of file.
------
name:fflush
language:eel2
return:
params:(fp:)
description:
If file fp is open for writing, flushes out any buffered data to disk.
------
name:fft
language:eel2
return:
params:(buffer:), (size:)
description:
Performs a FFT on the data in
the local memory buffer at the offset specified by the first parameter.
The size of the FFT is specified by the second parameter, which must be
16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The
outputs are permuted, so if you plan to use them in-order, call
fft_permute(buffer, size) before and fft_ipermute(buffer,size) after
your in-order use. Your inputs or outputs will need to be scaled down by
1/size, if used.
Note that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.
Note that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.
------
name:fft_ipermute
language:eel2
return:
params:(buffer:), (size:)
description:
Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See fft() for more information.
------
name:fft_permute
language:eel2
return:
params:(buffer:), (size:)
description:
Permute the output of fft() to have bands in-order. See fft() for more information.
------
name:fft_real
language:eel2
return:
params:(buffer:), (size:)
description:
Performs an FFT, but
takes size input samples and produces size/2 complex output pairs.
Usually used along with fft_permute(size/2). Inputs/outputs will need to
be scaled by 0.5/size.
------
name:fgetc
language:eel2
return:
params:(fp:)
description:
Reads a character from file fp, returns -1 if EOF.
------
name:fgets
language:eel2
return:
params:(fp:), (#str:)
description:
Reads a line from file fp into #str. Returns length of #str read.
------
name:floor
language:eel2
return:
params:(value:)
description:
Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).
------
name:fopen
language:eel2
return:
params:("fn":), ("mode":)
description:
Opens a file "fn" with mode "mode". For read, use "r" or "rb", write "w" or "wb". Returns a positive integer on success.
------
name:fprintf
language:eel2
return:
params:(fp:), ("format":), (...:)
description:
Formats a string and writes it to file fp. For more information on format specifiers, see sprintf(). Returns bytes written to file.
------
name:fread
language:eel2
return:
params:(fp:), (#str:), (length:)
description:
Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.
------
name:freembuf
language:eel2
return:
params:(address:)
description:
Hints the runtime that memory
above the address specified may no longer be used. The runtime may, at
its leisure, choose to lose the contents of memory above the address
specified.
------
name:fseek
language:eel2
return:
params:(fp:), (offset:), (whence:)
description:
Seeks file fp, offset
bytes from whence reference. Whence negative specifies start of file,
positive whence specifies end of file, and zero whence specifies current
file position.
------
name:ftell
language:eel2
return:
params:(fp:)
description:
Retunrs the current file position.
------
name:fwrite
language:eel2
return:
params:(fp:), (#str:), (len:)
description:
Writes up to len characters
of #str to file fp. If len is less than 1, the full contents of #str
will be written. Returns the number of bytes written to file.
------
name:get_action_context
language:eel2
return:
params:(#filename:), (sectionID:), (cmdID:), (mode:), (resolution:), (val:)
description:
Queries contextual information about the script, typically MIDI/OSC input values.
Returns true if a new value has been updated.
val
will be set to a relative or absolute value depending on mode (=0:
absolute mode, >0: relative modes). resolution=127 for 7-bit
resolution, =16383 for 14-bit resolution.
Notes: sectionID, and cmdID
will be set to -1 if the script is not part of the action list. mode,
resolution and val will be set to -1 if the script was not triggered via
MIDI/OSC.
------
name:gfx_arc
language:eel2
return:
params:(x:), (y:), (r:), (ang1:), (ang2:), (antialias:)
description:
Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
------
name:gfx_blit
language:eel2
return:
params:(source:), (scale:), (rotation:), (srcx:), (srcy:), (srcw:), (srch:), (destx:), (desty:), (destw:), (desth:), (rotxoffs:), (rotyoffs:)
description:
srcx/srcy/srcw/srch
specify the source rectangle (if omitted srcw/srch default to image
size), destx/desty/destw/desth specify dest rectangle (if not specified,
these will default to reasonable defaults -- destw/desth default to
srcw/srch * scale).
------
name:gfx_blit
language:eel2
return:
params:(source:), (scale:), (rotation:)
description:
If three
parameters are specified, copies the entirity of the source bitmap to
gfx_x,gfx_y using current opacity and copy mode (set with gfx_a,
gfx_mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is
not rotated, angles are in radians).
For the "source" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx_loadimg()).
------
name:gfx_blitext
language:eel2
return:
params:(source:), (coordinatelist:), (rotation:)
description:
Deprecated, use gfx_blit instead.
------
name:gfx_blurto
language:eel2
return:
params:(x:), (y:)
description:
Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.
------
name:gfx_circle
language:eel2
return:
params:(x:), (y:), (r:), (fill:), (antialias:)
description:
Draws a circle, optionally filling/antialiasing.
------
name:gfx_clienttoscreen
language:eel2
return:
params:(x:), (y:)
description:
Converts client coordinates x,y to screen coordinates.
------
name:gfx_deltablit
language:eel2
return:
params:(srcimg:), (srcs:), (srct:), (srcw:), (srch:), (destx:), (desty:), (destw:), (desth:), (dsdx:), (dtdx:), (dsdy:), (dtdy:), (dsdxdy:), (dtdxdy:), (usecliprect=1:)
description:
Blits
from srcimg(srcx,srcy,srcw,srch) to destination
(destx,desty,destw,desth). Source texture coordinates are s/t, dsdx
represents the change in s coordinate for each x pixel, dtdy represents
the change in t coordinate for each y pixel, etc. dsdxdy represents the
change in dsdx for each line. If usecliprect is specified and 0, then
srcw/srch are ignored.
------
name:gfx_dock
language:eel2
return:
params:(v:), (wx:), (wy:), (ww:), (wh:)
description:
Call with v=-1 to
query docked state, otherwise v>=0 to set docked state. State is
&1 if docked, second byte is docker index (or last docker index if
undocked). If wx-wh are specified, they will be filled with the undocked
window position/size
------
name:gfx_drawchar
language:eel2
return:
params:(char:)
description:
Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.
------
name:gfx_drawnumber
language:eel2
return:
params:(n:), (ndigits:)
description:
Draws the number n
with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the
right side of the drawing. The text height is gfx_texth.
------
name:gfx_drawstr
language:eel2
return:
params:("str":), (flags:), (right:), (bottom:)
description:
Draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y so that subsequent draws will occur in a similar place.
If flags, right ,bottom passed in:
flags&1: center horizontallyflags&2: right justifyflags&4: center verticallyflags&8: bottom justifyflags&256: ignore right/bottom, otherwise text is clipped to (gfx_x, gfx_y, right, bottom)
EEL: gfx_getchar([char])If char is 0 or omitted,
returns a character from the keyboard queue, or 0 if no character is
available, or -1 if the graphics window is not open. If char is
specified and nonzero, that character's status will be checked, and the
function will return greater than 0 if it is pressed.Common
values are standard ASCII, such as 'a', 'A', '=' and '1', but for many
keys multi-byte values are used, including 'home', 'up', 'down', 'left',
'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. Modified and special keys can also be returned, including:Ctrl/Cmd+A..Ctrl+Z as 1..26Ctrl/Cmd+Alt+A..Z as 257..282Alt+A..Z as 'A'+256..'Z'+25627 for ESC13 for Enter' ' for space65536 for query of special flags, returns: &1 (supported), &2=window has focus, &4=window is visible
EEL: gfx_getdropfile(idx[,#str])Enumerates any
drag/dropped files. call gfx_dropfile(-1) to clear the list when
finished. Returns 1 if idx is valid, 0 if idx is out of range.
EEL: gfx_getfont([#str])Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.
EEL: gfx_getimgdim(image,w,h)Retreives the
dimensions of image (representing a filename: index number) into w and
h. Sets these values to 0 if an image failed loading (or if the filename
index is invalid).
EEL: gfx_getpixel(r,g,b)Gets the value of the pixel at gfx_x,gfx_y into r,g,b.
EEL: gfx_gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])Fills
a gradient rectangle with the color and alpha specified. drdx-dadx
reflect the adjustment (per-pixel) applied for each pixel moved to the
right, drdy-dady are the adjustment applied for each pixel moved toward
the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
EEL: gfx_init("name"[,width,height,dockstate,xpos,ypos])Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx_update() should be called periodically.
EEL: gfx_line(x,y,x2,y2[,aa])Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.
EEL: gfx_lineto(x,y[,aa])Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.
EEL: gfx_loadimg(image,"filename")Load image from
filename into slot 0..1024-1 specified by image. Returns the image index
if success, otherwise -1 if failure. The image will be resized to the
dimensions of the image file.
EEL: gfx_measurechar(character,&w,&h)Measures the drawing dimensions of a character with the current font (as set by gfx_setfont).
EEL: gfx_measurestr("str",&w,&h)Measures the drawing dimensions of a string with the current font (as set by gfx_setfont).
EEL: gfx_muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.
EEL: gfx_printf("format"[, ...])Formats and draws a
string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter
only if the formatted string contains newline). For more information on
format strings, see sprintf()
EEL: gfx_quit()Closes the graphics window.
EEL: gfx_rect(x,y,w,h[,filled])Fills a rectangle at x,y, w,h pixels in dimension, filled by default.
EEL: gfx_rectto(x,y)Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y.
EEL: gfx_roundrect(x,y,w,h,radius[,antialias])Draws a rectangle with rounded corners.
EEL: gfx_screentoclient(x,y)Converts screen coordinates x,y to client coordinates.
EEL: gfx_set(r[,g,b,a,mode,dest,a2])Sets gfx_r/gfx_g/gfx_b/gfx_a/gfx_mode/gfx_a2, sets gfx_dest if final parameter specified
EEL: gfx_setcursor(resource_id,custom_cursor_name)Sets
the mouse cursor. resource_id is a value like 32512 (for an arrow
cursor), custom_cursor_name is a string like "arrow" (for the REAPER
custom arrow cursor). resource_id must be nonzero, but
custom_cursor_name is optional.
EEL: gfx_setfont(idx[,"fontface", sz, flags])Can
select a font and optionally configure it. idx=0 for default bitmapped
font, no configuration is possible for this font. idx=1..16 for a
configurable font, specify fontface such as "Arial", sz of 8-100, and
optionally specify flags, which is a multibyte character, which can
include 'i' for italics, 'u' for underline, or 'b' for bold. These flags
may or may not be supported depending on the font and OS. After calling
gfx_setfont(), gfx_texth may be updated to reflect the new average line
height.
EEL: gfx_setimgdim(image,w,h)Resize image
referenced by index 0..1024-1, width and height must be 0-2048. The
contents of the image will be undefined after the resize.
EEL: gfx_setpixel(r,g,b)Writes a pixel of r,g,b to gfx_x,gfx_y.
EEL: gfx_showmenu("str")Shows a popup menu at gfx_x,gfx_y. str is a list of fields separated by | characters. Each field represents a menu item.Fields can start with special characters:# : grayed out! : checked> : this menu item shows a submenu< : last item in the current submenuAn
empty field will appear as a separator in the menu. gfx_showmenu
returns 0 if the user selected nothing from the menu, 1 if the first
field is selected, etc.Example:gfx_showmenu("first item,
followed by separator||!second item, checked|>third item which spawns
a submenu|#first item in submenu, grayed out|<second and last item
in submenu|fourth item in top menu")
EEL: gfx_transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)Blits
to destination at (destx,desty), size (destw,desth). div_w and div_h
should be 2..64, and table should point to a table of 2*div_w*div_h
values (this table must not cross a 65536 item boundary). Each pair in
the table represents a S,T coordinate in the source image, and the table
is treated as a left-right, top-bottom list of texture coordinates,
which will then be rendered to the destination.
EEL: gfx_triangle(x1,y1,x2,y2,x3,y3[x4,y4...])Draws a filled triangle, or any convex polygon.
EEL: gfx_update()Updates the graphics display, if opened
EEL: ifft(buffer,size)Perform an inverse FFT. For more information see fft().
EEL: ifft_real(buffer,size)Performs an inverse FFT,
but takes size/2 complex input pairs and produces size real output
values. Usually used along with fft_ipermute(size/2).
EEL: invsqrt(value)Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.
EEL: log(value)Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.
EEL: log10(value)Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.
EEL: loop(count,expression)Evaluates count once, and then executes expression count, but not more than 1048576, times.
EEL: match("needle","haystack"[, ...])Searches for the first parameter in the second parameter, using a simplified regular expression syntax.* = match 0 or more characters*? = match 0 or more characters, lazy+ = match 1 or more characters+? = match 1 or more characters, lazy? = match one characterYou can also use format specifiers to match certain types of data, and optionally put that into a variable:%s means 1 or more chars%0s means 0 or more chars%5s means exactly 5 chars%5-s means 5 or more chars%-10s means 1-10 chars%3-5s means 3-5 chars%0-5s means 0-5 chars%x, %d, %u, and %f are available for use similarly%c can be used, but can't take any length modifiersUse uppercase (%S, %D, etc) for lazy matchingSee also sprintf() for other notes, including specifying direct variable references via {}.
EEL: matchi("needle","haystack"[, ...])Case-insensitive version of match().
EEL: max(&value,&value)Returns (by
reference) the maximum value of the two parameters. Since max() returns
by reference, expressions such as max(x,y) = 5 are possible.
EEL: mem_get_values(offset, ...)Reads values from
memory starting at offset into variables specified. Slower than regular
memory reads for less than a few variables, faster for more than a few.
Undefined behavior if used with more than 32767 variables.
EEL: mem_set_values(offset, ...)Writes values to
memory starting at offset from variables specified. Slower than regular
memory writes for less than a few variables, faster for more than a few.
Undefined behavior if used with more than 32767 variables.
EEL: memcpy(dest,src,length)Copies length items of memory from src to dest. Regions are permitted to overlap.
EEL: memset(offset,value,length)Sets length items of memory at offset to value.
EEL: min(&value,&value)Returns (by
reference) the minimum value of the two parameters. Since min() returns
by reference, expressions such as min(x,y) = 5 are possible.
EEL: printf("format"[, ...])Output formatted string to system-specific destination, see sprintf() for more information
EEL: rand([max])Returns a psuedorandom real number
between 0 and the parameter, inclusive. If the parameter is omitted or
less than 1.0, 1.0 is used as a maximum instead.
EEL: runloop("code")Adds code to be called back by
REAPER. Used to create persistent ReaScripts that continue to run and
respond to input, while the user does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
EEL: sign(value)Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.
EEL: sin(angle)Returns the sine of the angle
specified (specified in radians -- to convert from degrees to radians,
multiply by $pi/180, or 0.017453).
EEL: sleep(ms)Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.
EEL: sprintf(#dest,"format"[, ...])Formats a string and stores it in #dest. Format specifiers begin with %, and may include: %% = % %s = string from parameter %d = parameter as integer %i = parameter as integer %u = parameter as unsigned integer %x = parameter as hex (lowercase) integer %X = parameter as hex (uppercase) integer %c = parameter as character %f = parameter as floating point %e = parameter as floating point (scientific notation, lowercase) %E = parameter as floating point (scientific notation, uppercase) %g = parameter as floating point (shortest representation, lowercase) %G = parameter as floating point (shortest representation, uppercase)Many standard C printf() modifiers can be used, including: %.10s = string, but only print up to 10 characters %-10s = string, left justified to 10 characters %10s = string, right justified to 10 characters %+f = floating point, always show sign %.4f = floating point, minimum of 4 digits after decimal point %10d = integer, minimum of 10 digits (space padded) %010f = integer, minimum of 10 digits (zero padded)Values
for format specifiers can be specified as additional parameters to
sprintf, or within {} in the format specifier (such as %{varname}d, in
that case a global variable is always used).
EEL: sqr(value)Returns the square of the parameter (similar to value*value, but only evaluating value once).
EEL: sqrt(value)Returns the square root of the parameter. If the parameter is negative, the return value is undefined.
EEL: stack_exch(&value)Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).
EEL: stack_peek(index)Returns a reference to the
item on the top of the stack (if index is 0), or to the Nth item on the
stack if index is greater than 0.
EEL: stack_pop(&value)Pops a value from the
user stack into value, or into a temporary buffer if value is not
specified, and returns a reference to where the stack was popped. Note
that no checking is done to determine if the stack is empty, and as such
stack_pop() will never fail.
EEL: stack_push(&value)Pushes value onto the user stack, returns a reference to the parameter.
EEL: str_delsub(#str,pos,len)Deletes len characters at offset pos from #str, and returns #str.
EEL: str_getchar("str",offset[,type])Returns the
data at byte-offset offset of str. If offset is negative, position is
relative to end of string.type defaults to signed char, but can be
specified to read raw binary data in other formats (note the single
quotes, these are single/multi-byte characters):'c' - signed char'cu' - unsigned char's' - signed short'S' - signed short, big endian'su' - unsigned short'Su' - unsigned short, big endian'i' - signed int'I' - signed int, big endian'iu' - unsigned int'Iu' - unsigned int, big endian'f' - float'F' - float, big endian'd' - double'D' - double, big endian
EEL: str_insert(#str,"srcstr",pos)Inserts srcstr into #str at offset pos. Returns #str
EEL: str_setchar(#str,offset,val[,type]))Sets value
at offset offset, type optional. offset may be negative to refer to
offset relative to end of string, or between 0 and length, inclusive,
and if set to length it will lengthen string. See str_getchar() for more information on types.
EEL: str_setlen(#str,len)Sets length of #str (if increasing, will be space-padded), and returns #str.
EEL: strcat(#str,"srcstr")Appends srcstr to #str, and returns #str
EEL: strcmp("str","str2")Compares strings, returning 0 if equal
EEL: strcpy(#str,"srcstr")Copies the contents of srcstr to #str, and returns #str
EEL: strcpy_from(#str,"srcstr",offset)Copies srcstr to #str, but starts reading srcstr at offset offset
EEL: strcpy_substr(#str,"srcstr",offs,ml))PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)
EEL: stricmp("str","str2")Compares strings ignoring case, returning 0 if equal
EEL: strlen("str")Returns the length of the string passed as a parameter
EEL: strncat(#str,"srcstr",maxlen)Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.
EEL: strncmp("str","str2",maxlen)Compares strings giving up after maxlen characters, returning 0 if equal
EEL: strncpy(#str,"srcstr",maxlen)Copies srcstr to #str, stopping after maxlen characters. Returns #str.
EEL: strnicmp("str","str2",maxlen)Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal
EEL: tan(angle)Returns the tangent of the angle specified (specified in radians).
EEL: tcp_close(connection)Closes a TCP connection created by tcp_listen() or tcp_connect().
EEL: tcp_connect("address",port[,block])Create a
new TCP connection to address:port. If block is specified and 0,
connection will be made nonblocking. Returns TCP connection ID greater
than 0 on success.
EEL: tcp_listen(port[,"interface",#ip_out])Listens
on port specified. Returns less than 0 if could not listen, 0 if no new
connection available, or greater than 0 (as a TCP connection ID) if a
new connection was made. If a connection made and #ip_out specified, it
will be set to the remote IP. interface can be empty for all interfaces,
otherwise an interface IP as a string.
EEL: tcp_listen_end(port)Ends listening on port specified.
EEL: tcp_recv(connection,#str[,maxlen])Receives
data from a connection to #str. If maxlen is specified, no more than
maxlen bytes will be received. If non-blocking, 0 will be returned if
would block. Returns less than 0 if error.
EEL: tcp_send(connection,"str"[,len])Sends a string
to connection. Returns -1 on error, 0 if connection is non-blocking and
would block, otherwise returns length sent. If len is specified and not
less than 1, only the first len bytes of the string parameter will be
sent.
EEL: tcp_set_block(connection,block)Sets whether a connection blocks.
EEL: time([&val])Sets the parameter (or a
temporary buffer if omitted) to the number of seconds since January 1,
1970, and returns a reference to that value. The granularity of the
value returned is 1 second.
EEL: time_precise([&val])Sets the parameter (or
a temporary buffer if omitted) to a system-local timestamp in seconds,
and returns a reference to that value. The granularity of the value
returned is system defined (but generally significantly smaller than one
second).
EEL: while(expression)Executes expression until
expression evaluates to zero, or until 1048576iterations occur. An
alternate and more useful syntax is while (expression) ( statements ),
which evaluates statements after every non-zero evaluation of
expression.
------
name:gfx_getchar
language:eel2
return:
params:(char:)
description:
If char is 0 or omitted,
returns a character from the keyboard queue, or 0 if no character is
available, or -1 if the graphics window is not open. If char is
specified and nonzero, that character's status will be checked, and the
function will return greater than 0 if it is pressed.
Common
values are standard ASCII, such as 'a', 'A', '=' and '1', but for many
keys multi-byte values are used, including 'home', 'up', 'down', 'left',
'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'.
Modified and special keys can also be returned, including:
>>
>> Ctrl/Cmd+A..Ctrl+Z as 1..26
>> Ctrl/Cmd+Alt+A..Z as 257..282
>> Alt+A..Z as 'A'+256..'Z'+256
>> 27 for ESC
>> 13 for Enter
>> ' ' for space
>> 65536 for query of special flags, returns: &1 (supported), &2=window has focus, &4=window is visible
------
name:gfx_getdropfile
language:eel2
return:
params:(idx:), (#str:)
description:
Enumerates any
drag/dropped files. call gfx_dropfile(-1) to clear the list when
finished. Returns 1 if idx is valid, 0 if idx is out of range.
------
name:gfx_getfont
language:eel2
return:
params:(#str:)
description:
Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.
------
name:gfx_getimgdim
language:eel2
return:
params:(image:), (w:), (h:)
description:
Retreives the
dimensions of image (representing a filename: index number) into w and
h. Sets these values to 0 if an image failed loading (or if the filename
index is invalid).
------
name:gfx_getpixel
language:eel2
return:
params:(r:), (g:), (b:)
description:
Gets the value of the pixel at gfx_x,gfx_y into r,g,b.
------
name:gfx_gradrect
language:eel2
return:
params:(x:), (y:), (w:), (h:), (r:), (g:), (b:), (a:), (drdx:), (dgdx:), (dbdx:), (dadx:), (drdy:), (dgdy:), (dbdy:), (dady:)
description:
Fills
a gradient rectangle with the color and alpha specified. drdx-dadx
reflect the adjustment (per-pixel) applied for each pixel moved to the
right, drdy-dady are the adjustment applied for each pixel moved toward
the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
------
name:gfx_init
language:eel2
return:
params:("name":), (width:), (height:), (dockstate:), (xpos:), (ypos:)
description:
Initializes the graphics window with title name. Suggested width and height can be specified.
Once the graphics window is open, gfx_update() should be called periodically.
------
name:gfx_line
language:eel2
return:
params:(x:), (y:), (x2:), (y2:), (aa:)
description:
Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.
------
name:gfx_lineto
language:eel2
return:
params:(x:), (y:), (aa:)
description:
Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.
------
name:gfx_loadimg
language:eel2
return:
params:(image:), ("filename":)
description:
Load image from
filename into slot 0..1024-1 specified by image. Returns the image index
if success, otherwise -1 if failure. The image will be resized to the
dimensions of the image file.
------
name:gfx_measurechar
language:eel2
return:
params:(character:), (&w:), (&h:)
description:
Measures the drawing dimensions of a character with the current font (as set by gfx_setfont).
------
name:gfx_measurestr
language:eel2
return:
params:("str":), (&w:), (&h:)
description:
Measures the drawing dimensions of a string with the current font (as set by gfx_setfont).
------
name:gfx_muladdrect
language:eel2
return:
params:(x:), (y:), (w:), (h:), (mul_r:), (mul_g:), (mul_b:), (mul_a:), (add_r:), (add_g:), (add_b:), (add_a:)
description:
Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.
------
name:gfx_printf
language:eel2
return:
params:("format":), (...:)
description:
Formats and draws a
string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter
only if the formatted string contains newline). For more information on
format strings, see sprintf()
------
name:gfx_quit
language:eel2
return:
params:
description:
Closes the graphics window.
------
name:gfx_rect
language:eel2
return:
params:(x:), (y:), (w:), (h:), (filled:)
description:
Fills a rectangle at x,y, w,h pixels in dimension, filled by default.
------
name:gfx_rectto
language:eel2
return:
params:(x:), (y:)
description:
Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y.
------
name:gfx_roundrect
language:eel2
return:
params:(x:), (y:), (w:), (h:), (radius:), (antialias:)
description:
Draws a rectangle with rounded corners.
------
name:gfx_screentoclient
language:eel2
return:
params:(x:), (y:)
description:
Converts screen coordinates x,y to client coordinates.
------
name:gfx_set
language:eel2
return:
params:(r:), (g:), (b:), (a:), (mode:), (dest:), (a2:)
description:
Sets gfx_r/gfx_g/gfx_b/gfx_a/gfx_mode/gfx_a2, sets gfx_dest if final parameter specified
------
name:gfx_setcursor
language:eel2
return:
params:(resource_id:), (custom_cursor_name:)
description:
Sets
the mouse cursor. resource_id is a value like 32512 (for an arrow
cursor), custom_cursor_name is a string like "arrow" (for the REAPER
custom arrow cursor). resource_id must be nonzero, but
custom_cursor_name is optional.
------
name:gfx_setfont
language:eel2
return:
params:(idx:), ("fontface":), (sz:), (flags:)
description:
Can
select a font and optionally configure it. idx=0 for default bitmapped
font, no configuration is possible for this font. idx=1..16 for a
configurable font, specify fontface such as "Arial", sz of 8-100, and
optionally specify flags, which is a multibyte character, which can
include 'i' for italics, 'u' for underline, or 'b' for bold. These flags
may or may not be supported depending on the font and OS. After calling
gfx_setfont(), gfx_texth may be updated to reflect the new average line
height.
------
name:gfx_setimgdim
language:eel2
return:
params:(image:), (w:), (h:)
description:
Resize image
referenced by index 0..1024-1, width and height must be 0-2048. The
contents of the image will be undefined after the resize.
------
name:gfx_setpixel
language:eel2
return:
params:(r:), (g:), (b:)
description:
Writes a pixel of r,g,b to gfx_x,gfx_y.
------
name:gfx_showmenu
language:eel2
return:
params:("str":)
description:
Shows a popup menu at gfx_x,gfx_y. str is a list of fields separated by | characters. Each field represents a menu item.
Fields can start with special characters:
# : grayed out
! : checked
> : this menu item shows a submenu
< : last item in the current submenu
An
empty field will appear as a separator in the menu. gfx_showmenu
returns 0 if the user selected nothing from the menu, 1 if the first
field is selected, etc.
Example:
gfx_showmenu("first item,
followed by separator||!second item, checked|>third item which spawns
a submenu|#first item in submenu, grayed out|<second and last item
in submenu|fourth item in top menu")
------
name:gfx_transformblit
language:eel2
return:
params:(srcimg:), (destx:), (desty:), (destw:), (desth:), (div_w:), (div_h:), (table:)
description:
Blits
to destination at (destx,desty), size (destw,desth). div_w and div_h
should be 2..64, and table should point to a table of 2*div_w*div_h
values (this table must not cross a 65536 item boundary). Each pair in
the table represents a S,T coordinate in the source image, and the table
is treated as a left-right, top-bottom list of texture coordinates,
which will then be rendered to the destination.
------
name:gfx_triangle
language:eel2
return:
params:(x1:), (y1:), (x2:), (y2:), (x3:), (y3x4:), (y4...:)
description:
Draws a filled triangle, or any convex polygon.
------
name:gfx_update
language:eel2
return:
params:
description:
Updates the graphics display, if opened
------
name:ifft
language:eel2
return:
params:(buffer:), (size:)
description:
Perform an inverse FFT. For more information see fft().
------
name:ifft_real
language:eel2
return:
params:(buffer:), (size:)
description:
Performs an inverse FFT,
but takes size/2 complex input pairs and produces size real output
values. Usually used along with fft_ipermute(size/2).
------
name:invsqrt
language:eel2
return:
params:(value:)
description:
Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.
------
name:log
language:eel2
return:
params:(value:)
description:
Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.
------
name:log10
language:eel2
return:
params:(value:)
description:
Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.
------
name:loop
language:eel2
return:
params:(count:), (expression:)
description:
Evaluates count once, and then executes expression count, but not more than 1048576, times.
------
name:match
language:eel2
return:
params:("needle":), ("haystack":), (...:)
description:
Searches for the first parameter in the second parameter, using a simplified regular expression syntax.
>>
>> * = match 0 or more characters
>> *? = match 0 or more characters, lazy
>> + = match 1 or more characters
>> +? = match 1 or more characters, lazy
>> ? = match one character
You can also use format specifiers to match certain types of data, and optionally put that into a variable:
>>
>> %s means 1 or more chars
>> %0s means 0 or more chars
>> %5s means exactly 5 chars
>> %5-s means 5 or more chars
>> %-10s means 1-10 chars
>> %3-5s means 3-5 chars
>> %0-5s means 0-5 chars
>> %x, %d, %u, and %f are available for use similarly
>> %c can be used, but can't take any length modifiers
>> Use uppercase (%S, %D, etc) for lazy matching
See also sprintf() for other notes, including specifying direct variable references via {}.
------
name:matchi
language:eel2
return:
params:("needle":), ("haystack":), (...:)
description:
Case-insensitive version of match().
------
name:max
language:eel2
return:
params:(&value:), (&value:)
description:
Returns (by
reference) the maximum value of the two parameters. Since max() returns
by reference, expressions such as max(x,y) = 5 are possible.
------
name:mem_get_values
language:eel2
return:
params:(offset:), (...:)
description:
Reads values from
memory starting at offset into variables specified. Slower than regular
memory reads for less than a few variables, faster for more than a few.
Undefined behavior if used with more than 32767 variables.
------
name:mem_set_values
language:eel2
return:
params:(offset:), (...:)
description:
Writes values to
memory starting at offset from variables specified. Slower than regular
memory writes for less than a few variables, faster for more than a few.
Undefined behavior if used with more than 32767 variables.
------
name:memcpy
language:eel2
return:
params:(dest:), (src:), (length:)
description:
Copies length items of memory from src to dest. Regions are permitted to overlap.
------
name:memset
language:eel2
return:
params:(offset:), (value:), (length:)
description:
Sets length items of memory at offset to value.
------
name:min
language:eel2
return:
params:(&value:), (&value:)
description:
Returns (by
reference) the minimum value of the two parameters. Since min() returns
by reference, expressions such as min(x,y) = 5 are possible.
------
name:printf
language:eel2
return:
params:("format":), (...:)
description:
Output formatted string to system-specific destination, see sprintf() for more information
------
name:rand
language:eel2
return:
params:(max:)
description:
Returns a psuedorandom real number
between 0 and the parameter, inclusive. If the parameter is omitted or
less than 1.0, 1.0 is used as a maximum instead.
------
name:runloop
language:eel2
return:
params:("code":)
description:
Adds code to be called back by
REAPER. Used to create persistent ReaScripts that continue to run and
respond to input, while the user does other tasks. Identical to defer().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
------
name:sign
language:eel2
return:
params:(value:)
description:
Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.
------
name:sin
language:eel2
return:
params:(angle:)
description:
Returns the sine of the angle
specified (specified in radians -- to convert from degrees to radians,
multiply by $pi/180, or 0.017453).
------
name:sleep
language:eel2
return:
params:(ms:)
description:
Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.
------
name:sprintf
language:eel2
return:
params:(#dest:), ("format":), (...:)
description:
Formats a string and stores it in #dest. Format specifiers begin with %, and may include:
>>
>>  %% = %
>>  %s = string from parameter
>>  %d = parameter as integer
>>  %i = parameter as integer
>>  %u = parameter as unsigned integer
>>  %x = parameter as hex (lowercase) integer
>>  %X = parameter as hex (uppercase) integer
>>  %c = parameter as character
>>  %f = parameter as floating point
>>  %e = parameter as floating point (scientific notation, lowercase)
>>  %E = parameter as floating point (scientific notation, uppercase)
>>  %g = parameter as floating point (shortest representation, lowercase)
>>  %G = parameter as floating point (shortest representation, uppercase)
Many standard C printf() modifiers can be used, including:
>>
>>  %.10s = string, but only print up to 10 characters
>>  %-10s = string, left justified to 10 characters
>>  %10s = string, right justified to 10 characters
>>  %+f = floating point, always show sign
>>  %.4f = floating point, minimum of 4 digits after decimal point
>>  %10d = integer, minimum of 10 digits (space padded)
>>  %010f = integer, minimum of 10 digits (zero padded)
Values
for format specifiers can be specified as additional parameters to
sprintf, or within {} in the format specifier (such as %{varname}d, in
that case a global variable is always used).
------
name:sqr
language:eel2
return:
params:(value:)
description:
Returns the square of the parameter (similar to value*value, but only evaluating value once).
------
name:sqrt
language:eel2
return:
params:(value:)
description:
Returns the square root of the parameter. If the parameter is negative, the return value is undefined.
------
name:stack_exch
language:eel2
return:
params:(&value:)
description:
Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).
------
name:stack_peek
language:eel2
return:
params:(index:)
description:
Returns a reference to the
item on the top of the stack (if index is 0), or to the Nth item on the
stack if index is greater than 0.
------
name:stack_pop
language:eel2
return:
params:(&value:)
description:
Pops a value from the
user stack into value, or into a temporary buffer if value is not
specified, and returns a reference to where the stack was popped. Note
that no checking is done to determine if the stack is empty, and as such
stack_pop() will never fail.
------
name:stack_push
language:eel2
return:
params:(&value:)
description:
Pushes value onto the user stack, returns a reference to the parameter.
------
name:str_delsub
language:eel2
return:
params:(#str:), (pos:), (len:)
description:
Deletes len characters at offset pos from #str, and returns #str.
------
name:str_getchar
language:eel2
return:
params:("str":), (offset:), (type:)
description:
Returns the
data at byte-offset offset of str. If offset is negative, position is
relative to end of string.type defaults to signed char, but can be
specified to read raw binary data in other formats (note the single
quotes, these are single/multi-byte characters):
>>
>> 'c' - signed char
>> 'cu' - unsigned char
>> 's' - signed short
>> 'S' - signed short, big endian
>> 'su' - unsigned short
>> 'Su' - unsigned short, big endian
>> 'i' - signed int
>> 'I' - signed int, big endian
>> 'iu' - unsigned int
>> 'Iu' - unsigned int, big endian
>> 'f' - float
>> 'F' - float, big endian
>> 'd' - double
>> 'D' - double, big endian
------
name:str_insert
language:eel2
return:
params:(#str:), ("srcstr":), (pos:)
description:
Inserts srcstr into #str at offset pos. Returns #str
------
name:str_setchar
language:eel2
return:
params:(#str:), (offset:), (val:), (type:)
description:
Sets value
at offset offset, type optional. offset may be negative to refer to
offset relative to end of string, or between 0 and length, inclusive,
and if set to length it will lengthen string. See str_getchar() for more information on types.
------
name:str_setlen
language:eel2
return:
params:(#str:), (len:)
description:
Sets length of #str (if increasing, will be space-padded), and returns #str.
------
name:strcat
language:eel2
return:
params:(#str:), ("srcstr":)
description:
Appends srcstr to #str, and returns #str
------
name:strcmp
language:eel2
return:
params:("str":), ("str2":)
description:
Compares strings, returning 0 if equal
------
name:strcpy
language:eel2
return:
params:(#str:), ("srcstr":)
description:
Copies the contents of srcstr to #str, and returns #str
------
name:strcpy_from
language:eel2
return:
params:(#str:), ("srcstr":), (offset:)
description:
Copies srcstr to #str, but starts reading srcstr at offset offset
------
name:strcpy_substr
language:eel2
return:
params:(#str:), ("srcstr":), (offs:), (ml:)
description:
PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)
------
name:stricmp
language:eel2
return:
params:("str":), ("str2":)
description:
Compares strings ignoring case, returning 0 if equal
------
name:strlen
language:eel2
return:
params:("str":)
description:
Returns the length of the string passed as a parameter
------
name:strncat
language:eel2
return:
params:(#str:), ("srcstr":), (maxlen:)
description:
Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.
------
name:strncmp
language:eel2
return:
params:("str":), ("str2":), (maxlen:)
description:
Compares strings giving up after maxlen characters, returning 0 if equal
------
name:strncpy
language:eel2
return:
params:(#str:), ("srcstr":), (maxlen:)
description:
Copies srcstr to #str, stopping after maxlen characters. Returns #str.
------
name:strnicmp
language:eel2
return:
params:("str":), ("str2":), (maxlen:)
description:
Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal
------
name:tan
language:eel2
return:
params:(angle:)
description:
Returns the tangent of the angle specified (specified in radians).
------
name:tcp_close
language:eel2
return:
params:(connection:)
description:
Closes a TCP connection created by tcp_listen() or tcp_connect().
------
name:tcp_connect
language:eel2
return:
params:("address":), (port:), (block:)
description:
Create a
new TCP connection to address:port. If block is specified and 0,
connection will be made nonblocking. Returns TCP connection ID greater
than 0 on success.
------
name:tcp_listen
language:eel2
return:
params:(port:), ("interface":), (#ip_out:)
description:
Listens
on port specified. Returns less than 0 if could not listen, 0 if no new
connection available, or greater than 0 (as a TCP connection ID) if a
new connection was made. If a connection made and #ip_out specified, it
will be set to the remote IP. interface can be empty for all interfaces,
otherwise an interface IP as a string.
------
name:tcp_listen_end
language:eel2
return:
params:(port:)
description:
Ends listening on port specified.
------
name:tcp_recv
language:eel2
return:
params:(connection:), (#str:), (maxlen:)
description:
Receives
data from a connection to #str. If maxlen is specified, no more than
maxlen bytes will be received. If non-blocking, 0 will be returned if
would block. Returns less than 0 if error.
------
name:tcp_send
language:eel2
return:
params:(connection:), ("str":), (len:)
description:
Sends a string
to connection. Returns -1 on error, 0 if connection is non-blocking and
would block, otherwise returns length sent. If len is specified and not
less than 1, only the first len bytes of the string parameter will be
sent.
------
name:tcp_set_block
language:eel2
return:
params:(connection:), (block:)
description:
Sets whether a connection blocks.
------
name:time
language:eel2
return:
params:(&val:)
description:
Sets the parameter (or a
temporary buffer if omitted) to the number of seconds since January 1,
1970, and returns a reference to that value. The granularity of the
value returned is 1 second.
------
name:time_precise
language:eel2
return:
params:(&val:)
description:
Sets the parameter (or
a temporary buffer if omitted) to a system-local timestamp in seconds,
and returns a reference to that value. The granularity of the value
returned is system defined (but generally significantly smaller than one
second).
------
name:while
language:eel2
return:
params:(expression:)
description:
Executes expression until
expression evaluates to zero, or until 1048576iterations occur. An
alternate and more useful syntax is while (expression) ( statements ),
which evaluates statements after every non-zero evaluation of
expression.
------
name:reaper.atexit
language:lua
return:
params:(function:)
description:
Adds code to be executed when the script finishes or is ended by the
user. Typically used to clean up after the user terminates defer() or
runloop() code.
------
name:reaper.defer
language:lua
return:
params:(function:)
description:
Adds code to be called back by REAPER. Used to create persistent
ReaScripts that continue to run and respond to input, while the user
does other tasks. Identical to runloop().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
------
name:reaper.get_action_context
language:lua
return:(is_new_value:),(filename:),(sectionID:),(cmdID:),(mode:),(resolution:),(val:)
params:
description:
is_new_value,filename,sectionID,cmdID,mode,resolution,val = reaper.get_action_context()
Returns contextual information about the script, typically MIDI/OSC input values.
val
will be set to a relative or absolute value depending on mode (=0:
absolute mode, >0: relative modes). resolution=127 for 7-bit
resolution, =16383 for 14-bit resolution.
Notes: sectionID, and cmdID
will be set to -1 if the script is not part of the action list. mode,
resolution and val will be set to -1 if the script was not triggered via
MIDI/OSC.
------
name:gfx.arc
language:lua
return:
params:(x:), (y:), (r:), (ang1:), (ang2:), (antialias:)
description:
Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.
------
name:gfx.blit
language:lua
return:
params:(source:), (scale:), (rotation:), (srcx:), (srcy:), (srcw:), (srch:), (destx:), (desty:), (destw:), (desth:), (rotxoffs:), (rotyoffs:)
description:
srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch
default to image size), destx/desty/destw/desth specify dest rectangle
(if not specified, these will default to reasonable defaults --
destw/desth default to srcw/srch * scale).
------
name:gfx.blit
language:lua
return:
params:(source:), (scale:), (rotation:)
description:
If three parameters are specified, copies the entirity of the source
bitmap to gfx.x,gfx.y using current opacity and copy mode (set with
gfx.a, gfx.mode). You can specify scale (1.0 is unscaled) and rotation
(0.0 is not rotated, angles are in radians).
For the "source" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx.loadimg()).
------
name:gfx.blitext
language:lua
return:
params:(source:), (coordinatelist:), (rotation:)
description:
Deprecated, use gfx.blit instead.
------
name:gfx.blurto
language:lua
return:
params:(x:), (y:)
description:
Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.
------
name:gfx.circle
language:lua
return:
params:(x:), (y:), (r:), (fill:), (antialias:)
description:
Draws a circle, optionally filling/antialiasing.
------
name:gfx.clienttoscreen
language:lua
return:
params:(x:), (y:)
description:
Converts the coordinates x,y to screen coordinates, returns those values.
------
name:gfx.deltablit
language:lua
return:
params:(srcimg:), (srcs:), (srct:), (srcw:), (srch:), (destx:), (desty:), (destw:), (desth:), (dsdx:), (dtdx:), (dsdy:), (dtdy:), (dsdxdy:), (dtdxdy:), (usecliprect=1:)
description:
Blits from srcimg(srcx,srcy,srcw,srch) to destination
(destx,desty,destw,desth). Source texture coordinates are s/t, dsdx
represents the change in s coordinate for each x pixel, dtdy represents
the change in t coordinate for each y pixel, etc. dsdxdy represents the
change in dsdx for each line. If usecliprect is specified and 0, then
srcw/srch are ignored.
------
name:gfx.dock
language:lua
return:
params:(v:), (wx:), (wy:), (ww:), (wh:)
description:
Call with v=-1 to query docked state, otherwise v>=0 to set docked
state. State is &1 if docked, second byte is docker index (or last
docker index if undocked). If wx-wh specified, additional values will be
returned with the undocked window position/size
------
name:gfx.drawchar
language:lua
return:
params:(char:)
description:
Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.
------
name:gfx.drawnumber
language:lua
return:
params:(n:), (ndigits:)
description:
Draws the number n with ndigits of precision to gfx.x, gfx.y, and
updates gfx.x to the right side of the drawing. The text height is
gfx.texth.
------
name:gfx.drawstr
language:lua
return:
params:("str":), (flags:), (right:), (bottom:)
description:
Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.
If flags, right ,bottom passed in:
flags&1: center horizontallyflags&2: right justifyflags&4: center verticallyflags&8: bottom justifyflags&256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)
Lua: gfx.getchar([char])
If char is 0 or omitted, returns a character from the keyboard queue, or
0 if no character is available, or -1 if the graphics window is not
open. If char is specified and nonzero, that character's status will be
checked, and the function will return greater than 0 if it is pressed.Common
values are standard ASCII, such as 'a', 'A', '=' and '1', but for many
keys multi-byte values are used, including 'home', 'up', 'down', 'left',
'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. Modified and special keys can also be returned, including:Ctrl/Cmd+A..Ctrl+Z as 1..26Ctrl/Cmd+Alt+A..Z as 257..282Alt+A..Z as 'A'+256..'Z'+25627 for ESC13 for Enter' ' for space65536 for query of special flags, returns: &1 (supported), &2=window has focus, &4=window is visible
Lua: gfx.getdropfile(idx)
Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished.
Lua: gfx.getfont()
Returns current font index, and the actual font face used by this font (if available).
Lua: gfx.getimgdim(handle)
Retreives the dimensions of an image specified by handle, returns w, h pair.
Lua: gfx.getpixel()
Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)
Lua: gfx.gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])
Fills a gradient rectangle with the color and alpha specified. drdx-dadx
reflect the adjustment (per-pixel) applied for each pixel moved to the
right, drdy-dady are the adjustment applied for each pixel moved toward
the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
Lua: gfx.init("name"[,width,height,dockstate,xpos,ypos])
Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx.update() should be called periodically.
Lua: gfx.line(x,y,x2,y2[,aa])
Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.
Lua: gfx.lineto(x,y[,aa])
Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.
Lua: gfx.loadimg(image,"filename")
Load image from filename into slot 0..1024-1 specified by image. Returns
the image index if success, otherwise -1 if failure. The image will be
resized to the dimensions of the image file.
Lua: gfx.measurechar(char)
Measures the drawing dimensions of a character with the current font (as
set by gfx.setfont). Returns width and height of character.
Lua: gfx.measurestr("str")
Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string.
Lua: gfx.muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])
Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.
Lua: gfx.printf("format"[, ...])
Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y
accordingly (the latter only if the formatted string contains newline).
For more information on format strings, see sprintf()
Lua: gfx.quit()
Closes the graphics window.
Lua: gfx.rect(x,y,w,h[,filled])
Fills a rectangle at x,y, w,h pixels in dimension, filled by default.
Lua: gfx.rectto(x,y)
Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y.
Lua: gfx.roundrect(x,y,w,h,radius[,antialias])
Draws a rectangle with rounded corners.
Lua: gfx.screentoclient(x,y)
Converts the screen coordinates x,y to client coordinates, returns those values.
Lua: gfx.set(r[,g,b,a,mode,dest,a2])
Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter specified
Lua: gfx.setcursor(resource_id,custom_cursor_name)
Sets the mouse cursor. resource_id is a value like 32512 (for an arrow
cursor), custom_cursor_name is a string like "arrow" (for the REAPER
custom arrow cursor). resource_id must be nonzero, but
custom_cursor_name is optional.
Lua: gfx.setfont(idx[,"fontface", sz, flags])
Can select a font and optionally configure it. idx=0 for default
bitmapped font, no configuration is possible for this font. idx=1..16
for a configurable font, specify fontface such as "Arial", sz of 8-100,
and optionally specify flags, which is a multibyte character, which can
include 'i' for italics, 'u' for underline, or 'b' for bold. These flags
may or may not be supported depending on the font and OS. After calling
gfx.setfont(), gfx.texth may be updated to reflect the new average line
height.
Lua: gfx.setimgdim(image,w,h)
Resize image referenced by index 0..1024-1, width and height must be
0-2048. The contents of the image will be undefined after the resize.
Lua: gfx.setpixel(r,g,b)
Writes a pixel of r,g,b to gfx.x,gfx.y.
Lua: gfx.showmenu("str")
Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.Fields can start with special characters:# : grayed out! : checked> : this menu item shows a submenu< : last item in the current submenuAn
empty field will appear as a separator in the menu. gfx.showmenu
returns 0 if the user selected nothing from the menu, 1 if the first
field is selected, etc.Example:gfx.showmenu("first item,
followed by separator||!second item, checked|>third item which spawns
a submenu|#first item in submenu, grayed out|<second and last item
in submenu|fourth item in top menu")
Lua: gfx.transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)
Blits to destination at (destx,desty), size (destw,desth). div_w and
div_h should be 2..64, and table should point to a table of
2*div_w*div_h values (table can be a regular table or (for less
overhead) a reaper.array). Each pair in the table represents a S,T
coordinate in the source image, and the table is treated as a
left-right, top-bottom list of texture coordinates, which will then be
rendered to the destination.
Lua: gfx.triangle(x1,y1,x2,y2,x3,y3[x4,y4...])
Draws a filled triangle, or any convex polygon.
Lua: gfx.update()
Updates the graphics display, if opened
Lua: reaper.gmem_attach(sharedMemoryName)
Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach.
Lua: reaper.gmem_read(index)
Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25).
Lua: reaper.gmem_write(index,value)
Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25).
Lua: reaper.new_array([table|array][size])
Creates a new reaper.array object of maximum and initial size size, if
specified, or from the size/values of a table/array. Both size and
table/array can be specified, the size parameter will override the
table/array size.
Lua: reaper.runloop(function)
Adds code to be called back by REAPER. Used to create persistent
ReaScripts that continue to run and respond to input, while the user
does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
Lua: {reaper.array}.clear([value, offset, size])
Sets the value of zero or more items in the array. If value not
specified, 0.0 is used. offset is 1-based, if size omitted then the
maximum amount available will be set.
Lua: {reaper.array}.convolve([src, srcoffs, size, destoffs])
Convolves complex value pairs from reaper.array, starting at 1-based
srcoffs, reading/writing to 1-based destoffs. size is in normal items
(so it must be even)
Lua: {reaper.array}.copy([src, srcoffs, size, destoffs])
Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.
Lua: {reaper.array}.fft(size[, permute, offset])
Performs a forward FFT of size. size must be a power of two between 4
and 32768 inclusive. If permute is specified and true, the values will
be shuffled following the FFT to be in normal order.
Lua: {reaper.array}.fft_real(size[, permute, offset])
Performs a forward real->complex FFT of size. size must be a power of
two between 4 and 32768 inclusive. If permute is specified and true,
the values will be shuffled following the FFT to be in normal order.
Lua: {reaper.array}.get_alloc()
Returns the maximum (allocated) size of the array.
Lua: {reaper.array}.ifft(size[, permute, offset])
Performs a backwards FFT of size. size must be a power of two between 4
and 32768 inclusive. If permute is specified and true, the values will
be shuffled before the IFFT to be in fft-order.
Lua: {reaper.array}.ifft_real(size[, permute, offset])
Performs a backwards complex->real FFT of size. size must be a power
of two between 4 and 32768 inclusive. If permute is specified and true,
the values will be shuffled before the IFFT to be in fft-order.
Lua: {reaper.array}.multiply([src, srcoffs, size, destoffs])
Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.
Lua: {reaper.array}.resize(size)
Resizes an array object to size. size must be [0..max_size].
Lua: {reaper.array}.table([offset, size])
Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.
------
name:gfx.getchar
language:lua
return:
params:(char:)
description:
If char is 0 or omitted, returns a character from the keyboard queue, or
0 if no character is available, or -1 if the graphics window is not
open. If char is specified and nonzero, that character's status will be
checked, and the function will return greater than 0 if it is pressed.
Common
values are standard ASCII, such as 'a', 'A', '=' and '1', but for many
keys multi-byte values are used, including 'home', 'up', 'down', 'left',
'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'.
Modified and special keys can also be returned, including:
>>
>> Ctrl/Cmd+A..Ctrl+Z as 1..26
>> Ctrl/Cmd+Alt+A..Z as 257..282
>> Alt+A..Z as 'A'+256..'Z'+256
>> 27 for ESC
>> 13 for Enter
>> ' ' for space
>> 65536 for query of special flags, returns: &1 (supported), &2=window has focus, &4=window is visible
------
name:gfx.getdropfile
language:lua
return:
params:(idx:)
description:
Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished.
------
name:gfx.getfont
language:lua
return:
params:
description:
Returns current font index, and the actual font face used by this font (if available).
------
name:gfx.getimgdim
language:lua
return:
params:(handle:)
description:
Retreives the dimensions of an image specified by handle, returns w, h pair.
------
name:gfx.getpixel
language:lua
return:
params:
description:
Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)
------
name:gfx.gradrect
language:lua
return:
params:(x:), (y:), (w:), (h:), (r:), (g:), (b:), (a:), (drdx:), (dgdx:), (dbdx:), (dadx:), (drdy:), (dgdy:), (dbdy:), (dady:)
description:
Fills a gradient rectangle with the color and alpha specified. drdx-dadx
reflect the adjustment (per-pixel) applied for each pixel moved to the
right, drdy-dady are the adjustment applied for each pixel moved toward
the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.
------
name:gfx.init
language:lua
return:
params:("name":), (width:), (height:), (dockstate:), (xpos:), (ypos:)
description:
Initializes the graphics window with title name. Suggested width and height can be specified.
Once the graphics window is open, gfx.update() should be called periodically.
------
name:gfx.line
language:lua
return:
params:(x:), (y:), (x2:), (y2:), (aa:)
description:
Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.
------
name:gfx.lineto
language:lua
return:
params:(x:), (y:), (aa:)
description:
Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.
------
name:gfx.loadimg
language:lua
return:
params:(image:), ("filename":)
description:
Load image from filename into slot 0..1024-1 specified by image. Returns
the image index if success, otherwise -1 if failure. The image will be
resized to the dimensions of the image file.
------
name:gfx.measurechar
language:lua
return:
params:(char:)
description:
Measures the drawing dimensions of a character with the current font (as
set by gfx.setfont). Returns width and height of character.
------
name:gfx.measurestr
language:lua
return:
params:("str":)
description:
Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string.
------
name:gfx.muladdrect
language:lua
return:
params:(x:), (y:), (w:), (h:), (mul_r:), (mul_g:), (mul_b:), (mul_a:), (add_r:), (add_g:), (add_b:), (add_a:)
description:
Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.
------
name:gfx.printf
language:lua
return:
params:("format":), (...:)
description:
Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y
accordingly (the latter only if the formatted string contains newline).
For more information on format strings, see sprintf()
------
name:gfx.quit
language:lua
return:
params:
description:
Closes the graphics window.
------
name:gfx.rect
language:lua
return:
params:(x:), (y:), (w:), (h:), (filled:)
description:
Fills a rectangle at x,y, w,h pixels in dimension, filled by default.
------
name:gfx.rectto
language:lua
return:
params:(x:), (y:)
description:
Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y.
------
name:gfx.roundrect
language:lua
return:
params:(x:), (y:), (w:), (h:), (radius:), (antialias:)
description:
Draws a rectangle with rounded corners.
------
name:gfx.screentoclient
language:lua
return:
params:(x:), (y:)
description:
Converts the screen coordinates x,y to client coordinates, returns those values.
------
name:gfx.set
language:lua
return:
params:(r:), (g:), (b:), (a:), (mode:), (dest:), (a2:)
description:
Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter specified
------
name:gfx.setcursor
language:lua
return:
params:(resource_id:), (custom_cursor_name:)
description:
Sets the mouse cursor. resource_id is a value like 32512 (for an arrow
cursor), custom_cursor_name is a string like "arrow" (for the REAPER
custom arrow cursor). resource_id must be nonzero, but
custom_cursor_name is optional.
------
name:gfx.setfont
language:lua
return:
params:(idx:), ("fontface":), (sz:), (flags:)
description:
Can select a font and optionally configure it. idx=0 for default
bitmapped font, no configuration is possible for this font. idx=1..16
for a configurable font, specify fontface such as "Arial", sz of 8-100,
and optionally specify flags, which is a multibyte character, which can
include 'i' for italics, 'u' for underline, or 'b' for bold. These flags
may or may not be supported depending on the font and OS. After calling
gfx.setfont(), gfx.texth may be updated to reflect the new average line
height.
------
name:gfx.setimgdim
language:lua
return:
params:(image:), (w:), (h:)
description:
Resize image referenced by index 0..1024-1, width and height must be
0-2048. The contents of the image will be undefined after the resize.
------
name:gfx.setpixel
language:lua
return:
params:(r:), (g:), (b:)
description:
Writes a pixel of r,g,b to gfx.x,gfx.y.
------
name:gfx.showmenu
language:lua
return:
params:("str":)
description:
Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.
Fields can start with special characters:
# : grayed out
! : checked
> : this menu item shows a submenu
< : last item in the current submenu
An
empty field will appear as a separator in the menu. gfx.showmenu
returns 0 if the user selected nothing from the menu, 1 if the first
field is selected, etc.
Example:
gfx.showmenu("first item,
followed by separator||!second item, checked|>third item which spawns
a submenu|#first item in submenu, grayed out|<second and last item
in submenu|fourth item in top menu")
------
name:gfx.transformblit
language:lua
return:
params:(srcimg:), (destx:), (desty:), (destw:), (desth:), (div_w:), (div_h:), (table:)
description:
Blits to destination at (destx,desty), size (destw,desth). div_w and
div_h should be 2..64, and table should point to a table of
2*div_w*div_h values (table can be a regular table or (for less
overhead) a reaper.array). Each pair in the table represents a S,T
coordinate in the source image, and the table is treated as a
left-right, top-bottom list of texture coordinates, which will then be
rendered to the destination.
------
name:gfx.triangle
language:lua
return:
params:(x1:), (y1:), (x2:), (y2:), (x3:), (y3x4:), (y4...:)
description:
Draws a filled triangle, or any convex polygon.
------
name:gfx.update
language:lua
return:
params:
description:
Updates the graphics display, if opened
------
name:reaper.gmem_attach
language:lua
return:
params:(sharedMemoryName:)
description:
Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach.
------
name:reaper.gmem_read
language:lua
return:
params:(index:)
description:
Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25).
------
name:reaper.gmem_write
language:lua
return:
params:(index:), (value:)
description:
Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25).
------
name:reaper.new_array
language:lua
return:
params:(table|arraysize:)
description:
Creates a new reaper.array object of maximum and initial size size, if
specified, or from the size/values of a table/array. Both size and
table/array can be specified, the size parameter will override the
table/array size.
------
name:reaper.runloop
language:lua
return:
params:(function:)
description:
Adds code to be called back by REAPER. Used to create persistent
ReaScripts that continue to run and respond to input, while the user
does other tasks. Identical to defer().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
------
name:reaper_array.clear
language:lua
return:
params:(value:), (offset:), (size:)
description:
Sets the value of zero or more items in the array. If value not
specified, 0.0 is used. offset is 1-based, if size omitted then the
maximum amount available will be set.
------
name:reaper_array.convolve
language:lua
return:
params:(src:), (srcoffs:), (size:), (destoffs:)
description:
Convolves complex value pairs from reaper.array, starting at 1-based
srcoffs, reading/writing to 1-based destoffs. size is in normal items
(so it must be even)
------
name:reaper_array.copy
language:lua
return:
params:(src:), (srcoffs:), (size:), (destoffs:)
description:
Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.
------
name:reaper_array.fft
language:lua
return:
params:(size:), (permute:), (offset:)
description:
Performs a forward FFT of size. size must be a power of two between 4
and 32768 inclusive. If permute is specified and true, the values will
be shuffled following the FFT to be in normal order.
------
name:reaper_array.fft_real
language:lua
return:
params:(size:), (permute:), (offset:)
description:
Performs a forward real->complex FFT of size. size must be a power of
two between 4 and 32768 inclusive. If permute is specified and true,
the values will be shuffled following the FFT to be in normal order.
------
name:reaper_array.get_alloc
language:lua
return:
params:
description:
Returns the maximum (allocated) size of the array.
------
name:reaper_array.ifft
language:lua
return:
params:(size:), (permute:), (offset:)
description:
Performs a backwards FFT of size. size must be a power of two between 4
and 32768 inclusive. If permute is specified and true, the values will
be shuffled before the IFFT to be in fft-order.
------
name:reaper_array.ifft_real
language:lua
return:
params:(size:), (permute:), (offset:)
description:
Performs a backwards complex->real FFT of size. size must be a power
of two between 4 and 32768 inclusive. If permute is specified and true,
the values will be shuffled before the IFFT to be in fft-order.
------
name:reaper_array.multiply
language:lua
return:
params:(src:), (srcoffs:), (size:), (destoffs:)
description:
Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.
------
name:reaper_array.resize
language:lua
return:
params:(size:)
description:
Resizes an array object to size. size must be [0..max_size].
------
name:reaper_array.table
language:lua
return:
params:(offset:), (size:)
description:
Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.
------
name:RPR_atexit
language:python
return:
params:(String:)
description:
Adds code to be executed when the script finishes or is ended by the
user. Typically used to clean up after the user terminates defer() or
runloop() code.
------
name:RPR_defer
language:python
return:
params:(String:code)
description:
Adds code to be called back by REAPER. Used to create persistent
ReaScripts that continue to run and respond to input, while the user
does other tasks. Identical to runloop().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
------
name:RPR_runloop
language:python
return:
params:(String:code)
description:
Adds code to be called back by REAPER. Used to create persistent
ReaScripts that continue to run and respond to input, while the user
does other tasks. Identical to defer().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.
------
KEYWORDS:
I_TCPY:int *, Y offset of envelope relative to parent track (may be  separate lane or overlap with track contents) / int * : current TCP window Y-position in pixels relative to top of arrange view (read-only) / languages:c,eel2,lua,python
I_TCPH:int *, visible  height of envelope / int * : current TCP window height in pixels not including envelopes (read-only) / languages:c,eel2,lua,python
I_TCPY_USED:int *, Y offset of envelope relative to  parent track, exclusive of padding / languages:c,eel2,lua,python
I_TCPH_USED:int *, visible height of  envelope, exclusive of padding / languages:c,eel2,lua,python
P_TRACK:MediaTrack *, parent track  pointer (if any) / MediaTrack * (read-only) / pointer to MediaTrack (read-only) / languages:c,eel2,lua,python
P_ITEM:MediaItem *, parent item pointer (if any) / pointer to MediaItem (read-only) / languages:c,eel2,lua,python
P_TAKE:MediaItem_Take *, parent take pointer (if any) / languages:c,eel2,lua,python
B_MUTE:bool * : muted / send mute state (1.0 if muted, otherwise 0.0) / languages:c,eel2,lua,python
B_LOOPSRC:bool * : loop source / languages:c,eel2,lua,python
B_ALLTAKESPLAY:bool * : all takes play / languages:c,eel2,lua,python
B_UISEL:bool * : selected in arrange view / languages:c,eel2,lua,python
C_BEATATTACHMODE:char * : item timebase, -1=track or project default,  1=beats (position, length, rate), 2=beats (position only). for  auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1 / char * : track timebase, -1=project default, 0=time,  1=beats (position, length, rate), 2=beats (position only) / languages:c,eel2,lua,python
C_AUTOSTRETCH:: char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1 / languages:c,eel2,lua,python
C_LOCK:char * : locked, &1=locked / languages:c,eel2,lua,python
D_VOL:double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc / double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped / double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc / double *, 1.0 = +0dB etc / send volume (1.0=+0dB etc...) / languages:c,eel2,lua,python
D_POSITION:double * : item position in seconds / double * : automation item timeline position in seconds / languages:c,eel2,lua,python
D_LENGTH:double * : item length in seconds / double * : automation item length in seconds / languages:c,eel2,lua,python
D_SNAPOFFSET:double * : item snap offset in seconds / languages:c,eel2,lua,python
D_FADEINLEN:double * : item manual fadein length in seconds / languages:c,eel2,lua,python
D_FADEOUTLEN:double * : item manual fadeout length in seconds / languages:c,eel2,lua,python
D_FADEINDIR:double * : item fadein curvature, -1..1 / languages:c,eel2,lua,python
D_FADEOUTDIR:double * : item fadeout curvature, -1..1 / languages:c,eel2,lua,python
D_FADEINLEN_AUTO:double * : item auto-fadein length in seconds, -1=no auto-fadein / languages:c,eel2,lua,python
D_FADEOUTLEN_AUTO:double * : item auto-fadeout length in seconds, -1=no auto-fadeout / languages:c,eel2,lua,python
C_FADEINSHAPE:int * : fadein shape, 0..6, 0=linear / languages:c,eel2,lua,python
C_FADEOUTSHAPE:int * : fadeout shape, 0..6, 0=linear / languages:c,eel2,lua,python
I_GROUPID:int * : group ID, 0=no group / languages:c,eel2,lua,python
I_LASTY:int * : Y-position of track in pixels (read-only) / languages:c,eel2,lua,python
I_LASTH:int * : height in track in pixels (read-only) / languages:c,eel2,lua,python
I_CUSTOMCOLOR:int * : custom color, OS dependent color|0x100000 (i.e.  ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will  not be used, but will store the color anyway) / languages:c,eel2,lua,python
I_CURTAKE:int * : active take number / languages:c,eel2,lua,python
IP_ITEMNUMBER:int, item number on this track (read-only, returns the item number directly) / languages:c,eel2,lua,python
F_FREEMODE_Y:float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1) / languages:c,eel2,lua,python
F_FREEMODE_H:float * : free item positioning height, 0=no height, 1=full height of track (will never be 0) / languages:c,eel2,lua,python
D_STARTOFFS:double * : start offset in source media, in seconds / double * : automation item start offset in seconds / languages:c,eel2,lua,python
D_PAN:double * : take pan, -1..1 / double * : trim pan of track, -1..1 / double *, -1..+1 / send pan (-1.0=100%L, 0=center, 1.0=100%R) / languages:c,eel2,lua,python
D_PANLAW:double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc / double * : pan law of track, <0=project default, 1=+0dB, etc / double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc / send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...) / languages:c,eel2,lua,python
D_PLAYRATE:double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc / double * : automation item playback rate / languages:c,eel2,lua,python
D_PITCH:double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc / languages:c,eel2,lua,python
B_PPITCH:bool * : preserve pitch when changing playback rate / languages:c,eel2,lua,python
I_CHANMODE:int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right / languages:c,eel2,lua,python
I_PITCHMODE:int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter / languages:c,eel2,lua,python
IP_TAKENUMBER:int : take number (read-only, returns the take number directly) / languages:c,eel2,lua,python
P_SOURCE:PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old. / languages:c,eel2,lua,python
B_PHASE:bool * : track phase inverted / bool *, true to flip phase / send phase state (1.0 if phase is inverted, otherwise 0.0) / languages:c,eel2,lua,python
IP_TRACKNUMBER:int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly) / languages:c,eel2,lua,python
I_SOLO:int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place / languages:c,eel2,lua,python
I_FXEN:int * : fx enabled, 0=bypassed, !0=fx active / languages:c,eel2,lua,python
I_RECARM:int * : record armed, 0=not record armed, 1=record armed / languages:c,eel2,lua,python
I_RECINPUT:int * : record input, <0=no input, 0..n=mono hardware  input, 512+n=rearoute input, &1024=stereo input pair. &4096=MIDI  input, if set then low 5 bits represent channel (0=all, 1-16=only  chan), next 6 bits represent physical input (63=all, 62=VKB) / languages:c,eel2,lua,python
I_RECMODE:int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo  out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/  latency compensation, 7=midi overdub, 8=midi replace / languages:c,eel2,lua,python
I_RECMON:int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style) / languages:c,eel2,lua,python
I_RECMONITEMS:int * : monitor items while recording, 0=off, 1=on / languages:c,eel2,lua,python
I_AUTOMODE:int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch / int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch) / languages:c,eel2,lua,python
I_NCHAN:int * : number of track channels, 2-64, even numbers only / languages:c,eel2,lua,python
I_SELECTED:int * : track selected, 0=unselected, 1=selected / languages:c,eel2,lua,python
I_WNDH:int * : current TCP window height in pixels including envelopes (read-only) / languages:c,eel2,lua,python
I_MCPX:int * : current MCP X-position in pixels relative to mixer container / languages:c,eel2,lua,python
I_MCPY:int * : current MCP Y-position in pixels relative to mixer container / languages:c,eel2,lua,python
I_MCPW:int * : current MCP width in pixels / languages:c,eel2,lua,python
I_MCPH:int * : current MCP height in pixels / languages:c,eel2,lua,python
I_FOLDERDEPTH:int * : folder depth change, 0=normal, 1=track is a  folder parent, -1=track is the last in the innermost folder, -2=track is  the last in the innermost and next-innermost folders, etc / languages:c,eel2,lua,python
I_FOLDERCOMPACT:int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children / languages:c,eel2,lua,python
I_MIDIHWOUT:int * : track midi hardware output index, <0=disabled,  low 5 bits are which channels (0=all, 1-16), next 5 bits are output  device index (0-31) / languages:c,eel2,lua,python
I_PERFFLAGS:int * : track performance flags, &1=no media buffering, &2=no anticipative FX / languages:c,eel2,lua,python
I_HEIGHTOVERRIDE:int * : custom height override for TCP window, 0 for none, otherwise size in pixels / languages:c,eel2,lua,python
B_HEIGHTLOCK:bool * : track height lock (must set I_HEIGHTOVERRIDE before locking) / languages:c,eel2,lua,python
D_WIDTH:double * : width of track, -1..1 / languages:c,eel2,lua,python
D_DUALPANL:double * : dualpan position 1, -1..1, only if I_PANMODE==6 / languages:c,eel2,lua,python
D_DUALPANR:double * : dualpan position 2, -1..1, only if I_PANMODE==6 / languages:c,eel2,lua,python
I_PANMODE:int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan / languages:c,eel2,lua,python
P_ENV:<envchunkname:TrackEnvelope*, read only. Call with :<VOLENV, :<PANENV, etc appended. / read only, returns TrackEnvelope *. Call with :<VOLENV, :<PANENV, etc appended. / languages:c,eel2,lua,python
B_SHOWINMIXER:bool * : track control panel visible in mixer (do not use on master track) / languages:c,eel2,lua,python
B_SHOWINTCP:bool * : track control panel visible in arrange view (do not use on master track) / languages:c,eel2,lua,python
B_MAINSEND:bool * : track sends audio to parent / languages:c,eel2,lua,python
C_MAINSEND_OFFS:char * : channel offset of track send to parent / languages:c,eel2,lua,python
B_FREEMODE:bool * : track free item positioning enabled (call UpdateTimeline() after changing) / languages:c,eel2,lua,python
F_MCP_FXSEND_SCALE:float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed) / languages:c,eel2,lua,python
F_MCP_SENDRGN_SCALE:float * : scale of send area as proportion of the  fx+send total area (0=minimum allowed, 1=maximum allowed) / languages:c,eel2,lua,python
I_PLAY_OFFSET_FLAG:int * : track playback offset state,  &1=bypassed, &2=offset value is measured in samples (otherwise  measured in seconds) / languages:c,eel2,lua,python
D_PLAY_OFFSET:double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG / languages:c,eel2,lua,python
P_PARTRACK:MediaTrack * : parent track (read-only) / languages:c,eel2,lua,python
P_PROJECT:ReaProject * : parent project (read-only) / languages:c,eel2,lua,python
D_POOL_ID:double * : automation item pool ID (as an integer); edits  are propagated to all other automation items that share a pool ID / languages:c,eel2,lua,python
D_BASELINE:double * : automation item baseline value in the range [0,1] / languages:c,eel2,lua,python
D_AMPLITUDE:double * : automation item amplitude in the range [-1,1] / languages:c,eel2,lua,python
D_LOOPSRC:double * : nonzero if the automation item contents are looped / languages:c,eel2,lua,python
D_UISEL:double * : nonzero if the automation item is selected in the arrange view / languages:c,eel2,lua,python
D_POOL_QNLEN:double * : automation item pooled source length in quarter notes (setting will affect all pooled instances) / languages:c,eel2,lua,python
P_POOL_NAME:char *, name of the underlying automation item pool / languages:c,eel2,lua,python
P_POOL_EXT:xyz:char *, extension-specific persistent data / languages:c,eel2,lua,python
P_EXT:xyz:char * : extension-specific persistent data / languages:c,eel2,lua,python
P_NOTES:char * : item note text (do not write to returned pointer, use setNewValue to update) / languages:c,eel2,lua,python
GUID:GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}. / languages:c,eel2,lua,python
P_NAME:char * to take name / char * : track name (on master returns NULL) / languages:c,eel2,lua,python
P_ICON:const char * : track icon (full filename, or relative to resource_path/data/track_icons) / languages:c,eel2,lua,python
P_MCP_LAYOUT:const char * : layout name / languages:c,eel2,lua,python
P_TCP_LAYOUT:const char * : layout name / languages:c,eel2,lua,python
RENDER_SETTINGS:&(1|2)=0:master mix, &1=stems+master mix,  &2=stems only, &4=multichannel tracks to multichannel files,  &8=use render matrix, &16=tracks with only mono media to mono  files, &32=selected media items, &64=selected media items via  master / languages:c,eel2,lua,python
RENDER_BOUNDSFLAG:0=custom time bounds, 1=entire project, 2=time  selection, 3=all project regions, 4=selected media items, 5=selected  project regions / languages:c,eel2,lua,python
RENDER_CHANNELS:number of channels in rendered file / languages:c,eel2,lua,python
RENDER_SRATE:sample rate of rendered file (or 0 for project sample rate) / languages:c,eel2,lua,python
RENDER_STARTPOS:render start time when RENDER_BOUNDSFLAG=0 / languages:c,eel2,lua,python
RENDER_ENDPOS:render end time when RENDER_BOUNDSFLAG=0 / languages:c,eel2,lua,python
RENDER_TAILFLAG:apply render tail setting when rendering:  &1=custom time bounds, &2=entire project, &4=time selection,  &8=all project regions, &16=selected media items,  &32=selected project regions / languages:c,eel2,lua,python
RENDER_TAILMS:tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set) / languages:c,eel2,lua,python
RENDER_ADDTOPROJ:1=add rendered files to project / languages:c,eel2,lua,python
RENDER_DITHER:&1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems / languages:c,eel2,lua,python
PROJECT_SRATE:samplerate (ignored unless PROJECT_SRATE_USE set) / languages:c,eel2,lua,python
PROJECT_SRATE_USE:set to 1 if project samplerate is used / languages:c,eel2,lua,python
MARKER_GUID:X:get the GUID (unique ID) of the marker or region with  index X, where X is the index passed to EnumProjectMarkers, not  necessarily the displayed number / languages:c,eel2,lua,python
RECORD_PATH:recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx() / languages:c,eel2,lua,python
RENDER_FILE:render directory / languages:c,eel2,lua,python
RENDER_PATTERN:render file name (may contain wildcards) / languages:c,eel2,lua,python
RENDER_FORMAT:base64-encoded sink configuration (see project files,  etc). Callers can also pass a simple 4-byte string (non-base64-encoded),  e.g. "evaw" or "l3pm", to use default settings for that sink type. / languages:c,eel2,lua,python
RENDER_FORMAT2:base64-encoded secondary sink configuration. Callers  can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw"  or "l3pm", to use default settings for that sink type, or "" to disable  secondary render. / languages:c,eel2,lua,python
B_MONO:bool * / send mono state (1.0 if send is set to mono, otherwise 0.0) / languages:c,eel2,lua,python
I_SENDMODE:int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx / send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx) / languages:c,eel2,lua,python
I_SRCCHAN:int *, index,&1024=mono, -1 for none / audio source starting channel index or -1 if audio send is  disabled (&1024=mono...note that in that case, when reading index,  you should do (index XOR 1024) to get starting channel index) / languages:c,eel2,lua,python
I_DSTCHAN:int *, index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute / audio destination starting channel index (&1024=mono  (and in case of hardware output &512=rearoute)...note that in that  case, when reading index, you should do (index XOR (1024 OR 512)) to get  starting channel index) / languages:c,eel2,lua,python
I_MIDIFLAGS:int *, low 5 bits=source channel 0=all, 1-16, next 5  bits=dest channel, 0=orig, 1-16=chan / int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends. / languages:c,eel2,lua,python
P_DESTTRACK:read only, returns  MediaTrack *, destination track, only applies for sends/recvs / languages:c,eel2,lua,python
P_SRCTRACK:read only, returns MediaTrack *, source track, only applies for sends/recvs / languages:c,eel2,lua,python
I_MIDI_SRCCHAN:source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16) / languages:c,eel2,lua,python
I_MIDI_DSTCHAN:destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16) / languages:c,eel2,lua,python
I_MIDI_SRCBUS:source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index) / languages:c,eel2,lua,python
I_MIDI_DSTBUS:receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index) / languages:c,eel2,lua,python
I_MIDI_LINK_VOLPAN:link volume/pan controls to MIDI / languages:c,eel2,lua,python
gfx_r:These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)
 / languages:eel2
gfx_g:These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)
 / languages:eel2
gfx_b:These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)
 / languages:eel2
gfx_a2:Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit(). 
 / languages:eel2
gfx_a:These are set to the current width and height of the UI framebuffer. 
 / languages:eel2
gfx_mode:These are set to the current width and height of the UI framebuffer. 
 / languages:eel2
gfx_blit:These are set to the current width and height of the UI framebuffer. 
 / languages:eel2
gfx_w:mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window.
 / languages:eel2
gfx_h:mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window.
 / languages:eel2
gfx_x:These set the "current" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. 
 / languages:eel2
gfx_y:These set the "current" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. 
 / languages:eel2
gfx_clear:If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). 
 / languages:eel2
gfx_dest:Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).
 / languages:eel2
gfx_texth:Set to the height of a line of text in the current font. Do not modify this variable.
 / languages:eel2
gfx_ext_retina:If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx_w/gfx_h/etc will be doubled.
 / languages:eel2
gfx.r:These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)
 / languages:lua
gfx.g:These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)
 / languages:lua
gfx.b:These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)
 / languages:lua
gfx.a2:Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit(). 
 / languages:lua
gfx.a:These are set to the current width and height of the UI framebuffer. 
 / languages:lua
gfx.mode:These are set to the current width and height of the UI framebuffer. 
 / languages:lua
gfx.blit:These are set to the current width and height of the UI framebuffer. 
 / languages:lua
gfx.w:gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window.
 / languages:lua
gfx.h:gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window.
 / languages:lua
gfx.x:These set the "current" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. 
 / languages:lua
gfx.y:These set the "current" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. 
 / languages:lua
gfx.clear:If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). 
 / languages:lua
gfx.dest:Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).
 / languages:lua
gfx.texth:Set to the height of a line of text in the current font. Do not modify this variable.
 / languages:lua
gfx.ext_retina:If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx.w/gfx.h/etc will be doubled.
 / languages:lua
gfx.mouse_x:mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
 / languages:lua
gfx.mouse_y:mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
 / languages:lua
gfx.mouse_wheel:mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
 / languages:lua
gfx.mouse_hwheel:mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
 / languages:lua
gfx.mouse_cap: is a bitfield of mouse and keyboard modifier state.1: left mouse button2: right mouse button4: Control key8: Shift key16: Alt key32: Windows key64: middle mouse button

 / languages:lua
