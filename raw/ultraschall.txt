FUNCTIONS:
name:ultraschall.Docs_ConvertPlainTextToHTML
language:lua
return:(string:html_text)
params:(string:String)
description:
Converts a plaintext into HTML.
Converts newlines to , Double Spaces to    and Tabs to
returns nil in case of an error
RETURNS:
html_text:the html-version of the text
------
name:ultraschall.Docs_RemoveIndent
language:lua
return:(string:unindented_text)
params:(string:String), (string:indenttype)
description:
unindents an indented text from a US_DocBloc.
There are different styles of unindentation:
as_typed - keeps the text, as it is
minus_starts_line - will throw away everything from start of the line until(and including) the firt - in it
preceding_spaces - will remove all spaces/tabs in the beginning of each line
default - will take the indentation of the first line and apply it to each of the following lines
that means, indentation relative to the first line is kept
returns nil in case of an error
PARAMETERS:
String:the string, which shall be unindented
indenttype:the type of indentation you want to remove
RETURNS:
unindented_text:the string, from which the indentation was removed
------
name:ultraschall.Docs_GetAllUSDocBlocsFromString
language:lua
return:(integer:found_usdocblocs),(array:all_found_usdocblocs)
params:(string:String)
description:
returns all US_DocBloc-elements from a string.
returns nil in case of an error
PARAMETERS:
String:a string, from which to retrieve the US_DocBlocs
RETURNS:
found_usdocblocs:the individual US_DocBlocs found in the string
all_found_usdocblocs:the individual US_DocBlocs found in the string
------
name:ultraschall.Docs_GetUSDocBloc_Slug
language:lua
return:(string:slug)
params:(string:String)
description:
returns the slug from an US_DocBloc-element
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the slug from
RETURNS:
slug:the slug, as stored in the USDocBloc
------
name:ultraschall.Docs_GetUSDocBloc_Title
language:lua
return:(string:title),(string:spok_lang)
params:(string:String), (integer:index)
description:
returns the title from an US_DocBloc-element.
There can be multiple titles, e.g. in multiple languages
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the title from
index:the index of the title to get, starting with 1 for the first title
RETURNS:
title:the title, as stored in the USDocBloc
spok_lang:the language, in which the title is stored
------
name:ultraschall.Docs_GetUSDocBloc_Description
language:lua
return:(string:description),(string:markup_type),(string:markup_version),(string:indent),(optional string:language),(optional string:prog_lang)
params:(string:String), (boolean:unindent_description), (integer:index)
description:
returns the description-text from an US_DocBloc-element.
There can be multiple descriptions, e.g. in multiple languages
It will remove automatically indentation(as requested by the description-tag of the US_DocBloc), if unindent_description==true.
If no indentation is requested by the description-tag, it will assume default(the indentation of the first line will be applied to all other lines).
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the description from
unindent_description:true, will remove indentation as given in the description-tag; false, return the text as it is
index:the index of the description to get, starting with 1 for the first description
RETURNS:
description:the description-text found in the USDocBloc in the string
markup_type:the markup-type the description is written in
markup_version:the version of the markup-language, in which the description is written in
indent:the indentation of the text; can be either
language:the language, in which the description is written in; "", if not set
prog_lang:the programming-language, in which the description is written in; ", if not set
------
name:ultraschall.Docs_GetUSDocBloc_TargetDocument
language:lua
return:(string:target_document)
params:(string:String)
description:
returns the target-document from an US_DocBloc-element.
The target-document is the document, into which the converted DocBloc shall be stored into.
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the target-document-entry from
RETURNS:
target_document:the target-document, into which the converted US_DocBloc shall be stored into
------
name:ultraschall.Docs_GetUSDocBloc_SourceDocument
language:lua
return:(string:source_document)
params:(string:String)
description:
returns the source-document from an US_DocBloc-element.
The source-document is the document, into which the converted DocBloc shall be stored into.
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the source-document-entry from
RETURNS:
source_document:the source-document, into which the converted US_DocBloc shall be stored into
------
name:ultraschall.Docs_GetUSDocBloc_ChapterContext
language:lua
return:(integer:count),(array:chapters),(string:spok_lang)
params:(string:String), (integer:index)
description:
returns the chapters and subchapters, in which the US_DocBloc shall be stored into
A US_DocBloc can have multiple chapter-entries, e.g. for multiple languages.
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the source-document-entry from
index:the index of the chapter-entries, starting with 1 for the first
RETURNS:
count:the number of chapters found
chapters:the chapternams as an array
spok_lang:the language of the chapters; "", if no language is given
------
name:ultraschall.Docs_GetUSDocBloc_Tags
language:lua
return:(integer:count),(array:tags),(string:spok_lang)
params:(string:String), (integer:index)
description:
returns the tags of an US_DocBloc-entry
A US_DocBloc can have multiple tag-entries, e.g. for multiple languages.
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the tags-entry from
index:the index of the tags-entries, starting with 1 for the first
RETURNS:
count:the number of tags found
tags:the tags as an array
spok_lang:the language of the tags; "" if no language is given
------
name:ultraschall.Docs_GetUSDocBloc_Params
language:lua
return:(integer:parmcount),(table:Params),(string:markuptype),(string:markupversion),(string:prog_lang),(string:spok_lang),(string:indent)
params:(string:String), (boolean:unindent_description), (integer:index)
description:
returns the parameters of an US_DocBloc-entry
A US_DocBloc can have multiple parameter-entries, e.g. for multiple languages.
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the parameter-entry from
unindent_description:true, will remove indentation as given in the parameter-tag; false, return the text as it is
index:the index of the parameter-entries, starting with 1 for the first
RETURNS:
parmcount:the number of parameters found
Params:all parameters found, as an array
markuptype:the markuptype found; if no markuptype is given, it returns "plaintext"
markupversion:the version of the markuptype found; "", if not given
prog_lang:the programming-language used in these parameters; "", if not given
spok_lang:the spoken-language used in these parameters; "", if not given
indent:the type of indentation you want to remove
------
name:ultraschall.Docs_GetUSDocBloc_Retvals
language:lua
return:(integer:retvalscount),(table:retvals),(string:markuptype),(string:markupversion),(string:prog_lang),(string:spok_lang),(string:indent)
params:(string:String), (boolean:unindent_description), (integer:index)
description:
returns the retvals of an US_DocBloc-entry
A US_DocBloc can have multiple retvals-entries, e.g. for multiple languages.
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the retvals-entry from
unindent_description:true, will remove indentation as given in the retvals-tag; false, return the text as it is
index:the index of the retvals-entries, starting with 1 for the first
RETURNS:
retvalscount:the number of retvals found
retvals:all retvals found, as an array
markuptype:the markuptype found; if no markuptype is given, it returns "plaintext"
markupversion:the version of the markuptype found; "", if not given
prog_lang:the programming-language used in these retvals; "", if not given
spok_lang:the spoken-language used in these retvals; "", if not given
indent:the type of indentation you want to remove
------
name:ultraschall.Docs_GetUSDocBloc_Functioncall
language:lua
return:(string:functioncall),(string:prog_lang)
params:(string:String), (integer:index)
description:
returns the functioncall-entries from an US_DocBloc-element
There can be multiple functioncall-entries, e.g. for multiple programming-languages
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the functioncall-entry from
index:the index of the functioncall, if there are multiple ones; beginning with 1
RETURNS:
functioncall:the functioncall, as stored in the USDocBloc
prog_lang:the used programming language
------
name:ultraschall.Docs_GetUSDocBloc_Requires
language:lua
return:(integer:count),(array:requires),(array:requires_alt)
params:(string:String)
description:
returns the requires-entries from an US_DocBloc-element
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the requires-entry from
RETURNS:
count:the number of required elements found in the require-tag
requires:like requires, but the index is the required element, while the value is the versionnumber, e.g requires_alt["Reaper"]="5.978"
requires_alt:like requires, but the index is the required element, while the value is the versionnumber, e.g requires_alt["Reaper"]="5.978"
------
name:ultraschall.Docs_GetUSDocBloc_PreviousChapter
language:lua
return:(string:previous_chapter)
params:(string:String)
description:
returns the slug of the previous chapter of an US_DocBloc-element
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the slug of the previous chapter from
RETURNS:
previous_chapter:the slug of the previous-chapter, as stored in the USDocBloc
------
name:ultraschall.Docs_GetUSDocBloc_NextChapter
language:lua
return:(string:next_chapter)
params:(string:String)
description:
returns the slug of the next chapter of an US_DocBloc-element
returns nil in case of an error
PARAMETERS:
String:a string which hold a US_DocBloc to retrieve the slug of the next chapter from
RETURNS:
next_chapter:the slug of the next-chapter, as stored in the USDocBloc
------
name:ultraschall.CountProjectTabs
language:lua
return:(integer:number_of_projecttabs)
params:
description:
Counts the number of opened project tabs.
RETURNS:
number_of_projecttabs:the number of projecttabs currently opened
------
name:ultraschall.GetProject_Tabs
language:lua
return:(integer:number_of_projecttabs),(array:projecttablist)
params:
description:
Returns the ReaProject-objects, as well as the filenames of all opened project-tabs.
RETURNS:
number_of_projecttabs:the number of projecttabs currently opened
projecttablist:an array, that holds all ReaProjects as well as the projectfilenames
------
name:ultraschall.GetApiVersion
language:lua
return:(number:versionnumber),(string:version),(string:date),(string:beta),(string:tagline),(string:buildnumber)
params:
description:
returns the version, release-date and if it's a beta-version plus the currently installed hotfix
RETURNS:
versionnumber:a number, that you can use for comparisons like, "if requestedversion>versionnumber then"
version:the current Api-version
date:the release-date of the currently installed hotfix ($ResourceFolder/ultraschall_api/ultraschall_hotfixes.lua)
beta:if it's a beta version, this is the beta-version-number
tagline:the tagline of the current release
buildnumber:the build-number of the current release
------
name:ultraschall.SuppressErrorMessages
language:lua
return:(boolean:retval)
params:(boolean:flag)
description:
Allows you to suppress error-messages.
If you pass true, all error messages will be suppressed, until you run the function again passing false.
Note: You should supress error-messages only temprarily and "unsuppress" them again, after your critical stuff is finished.
Otherwise, someone using your functions will have no error-messages to debug with.
Returns false, if parameter isn't boolean. Unlike most other function, this will never create an error-message!
PARAMETERS:
flag:true, suppress error-messages; false, don't suppress error-messages
RETURNS:
retval:true, setting was successful; false, you didn't pass a boolean as parameter
------
name:ultraschall.AddErrorMessage
language:lua
return:(boolean:retval),(integer:errorcount)
params:(string:functionname), (string:parametername), (string:errormessage), (integer:errorcode)
description:
Adds a new errormessage to the Ultraschall-Api-Error-messagesystem. Returns the number of the errormessage.
Intended for your own 3rd party-functions for the API, to give the user more feedback about errors than just a cryptic errorcode.
returns false in case of failure
PARAMETERS:
functionname:the function, where the error happened
parametername:the parameter, that caused the problem
errormessage:a longer description of what cause the problem and a hint to a possible solution
errorcode:a number, that represents the error-message. Will be -1 by default, if not given.
RETURNS:
retval:true, if it worked; false if it didn't
errorcount:the number of the errormessage within the Ultraschall-Api-Error-messagesystem; nil, if errormessages are suppressed currently
------
name:ultraschall.ToggleIDE_Errormessages
language:lua
return:(boolean:retval)
params:(optional boolean:togglevalue)
description:
Toggles or sets, if the error-messaging system shall output it's errors to Reaper's IDE(true) or not(false).
When set true, it will show the errormessages at the bottom of the IDE, as you are used by Reaper's own functions.
PARAMETERS:
togglevalue:true, if errormessages shall be shown at the bottom of the IDE, false if not. If omitted, it toggles what was set before.
RETURNS:
retval:true, if errors will be shown at the bottom of the IDE; false, if not
------
name:ultraschall.ReadErrorMessage
language:lua
return:(boolean:retval),(integer:errcode),(string:functionname),(string:parmname),(string:errormessage),(string:lastreadtime),(string:err_creation_date),(string:err_creation_timestamp)
params:(integer:errornumber)
description:
Reads an error-message within the Ultraschall-ErrorMessagesystem.
Returns a boolean value, the functionname, the errormessage, the "you've already read this message"-status, the date and a timestamp of the creation of the errormessage.
returns false in case of failure
PARAMETERS:
errornumber:the number of the error, beginning with 1. Use CountErrorMessages to get the current number of error-messages.
RETURNS:
retval:true, if it worked; false if it didn't
errcode:the errorcode of this message, as set by the function that created this errormessage; -1 is default value
functionname:the name of the function, where the problem happened
parmname:the parameter, that was used wrong by the programmer; "" if no parameter was involved in this error
errormessage:the message of the problem with a possible hint to a solution
err_creation_date:the date_time of when the error-message was created
err_creation_timestamp:the timestamp of when the error-message was created. Usually seconds, since system got started
------
name:ultraschall.DeleteErrorMessage
language:lua
return:(boolean:retval)
params:(integer:errornumber)
description:
Deletes an error-message within the Ultraschall-ErrorMessagesystem.
returns false in case of failure
PARAMETERS:
errornumber:the number of the error to delete, beginning with 1. Use CountErrorMessages to get the current number of error-messages.
RETURNS:
retval:true, if such an error exists; false if it didn't
------
name:ultraschall.GetLastErrorMessage
language:lua
return:(boolean:retval),(integer:errcode),(string:functionname),(string:parmname),(string:errormessage),(string:lastreadtime),(string:err_creation_date),(string:err_creation_timestamp),(integer:errorcounter)
params:
description:
Reads the last error-message stored in the Ultraschall-ErrorMessagesystem.
Returns a boolean value, the functionname, the errormessage, the date and a timestamp of the creation of the errormessage, the unread-status as well as the error-message-number.
returns false in case of failure
RETURNS:
retval:true, if it worked; false if it didn't
errcode:the errorcode of this message, as set by the function that created this errormessage; -1 is default value
functionname:the name of the function, where the problem happened
parmname:the parameter, that was used wrong by the programmer; "" if no parameter was involved in this error
errormessage:the message of the problem with a possible hint to a solution
err_creation_date:the date_time of when the error-message was created
err_creation_timestamp:the timestamp of when the error-message was created. Usually seconds, since system got started
errorcounter:the error-message-number within the Ultraschall-Error-Message-System
------
name:ultraschall.DeleteLastErrorMessage
language:lua
return:(boolean:retval)
params:
description:
Deletes the last error-message and returns a boolean value.
returns false in case of failure
RETURNS:
retval:true, if it worked; false if it didn't
------
name:ultraschall.DeleteAllErrorMessages
language:lua
return:(boolean:retval)
params:
description:
Deletes all error-messages and returns a boolean value.
returns false in case of failure
RETURNS:
retval:true, if it worked; false if it didn't
------
name:ultraschall.GetLastErrorMessage2
language:lua
return:(boolean:retval),(array:ErrorMessages)
params:(integer:count), (boolean:setread)
description:
Returns an array with the last "count" errormessages. 1 for the last, 2 for the last 2, etc.
Set setread to false, if you want to retain the unread status of the error-messages.
returns false in case of failure
PARAMETERS:
count:the number of the last few errors, you want to get returned. Use CountErrorMessages to get the current number of error-messages.
RETURNS:
retval:true, if it worked; false if it didn't
ErrorMessages:an array, that contains all values for the chosen number of errormessages.
------
name:ultraschall.CountErrorMessages
language:lua
return:(integer:errorcounter)
params:
description:
Returns the current count of errormessages in the system available.
RETURNS:
errorcounter:the number of errormessages currently available in the error-message-system. Includes read and unread ones.
------
name:ultraschall.ShowLastErrorMessage
language:lua
return:
params:
description:
Displays the last error message in a messagebox, if existing and unread.
------
name:ultraschall.GetLastErrorMessage_Funcname
language:lua
return:(integer:errorindex),(string:parametername),(string:errormessage),(integer:errorcode)
params:(string:functionname)
description:
Returns the last errormessage, a certain function added to the Error-Messaging-System.
Sets read-state of the error-message to the date-time of accessing it.
returns -1 in case of error
PARAMETERS:
functionname:the name of the function, whose last error message you want to retrieve
RETURNS:
errorindex:the index of the error within the Error-Messaging-System
parametername:the parameter that produced the problem, or "" if no parameter was involved
errormessage:the errormessage
errorcode:the errorcode the error has
------
name:ultraschall.CountErrorMessage_Funcname
language:lua
return:(integer:number_of_errormessages)
params:(string:functionname)
description:
Returns the number of available errormessages for functionname, existing in the Error-Messaging-System.
returns -1 in case of error
PARAMETERS:
functionname:the name of the function, whose error messages you want to count
RETURNS:
number_of_errormessages:the number of errormessages functionname has left in the Error-Messaging-System
------
name:ultraschall.GetErrorMessage_Funcname
language:lua
return:(integer:errorindex),(string:parametername),(string:errormessage),(integer:errorcode)
params:(string:functionname), (integer:index)
description:
Returns a specific errormessage specified by index, functionname added to the Error-Messaging-System.
Sets read-state of the error-message to the date-time of accessing it.
returns -1 in case of error
PARAMETERS:
functionname:the name of the function, whose last error message you want to retrieve
index:the index of the error-message for functionname
RETURNS:
errorindex:the index of the error within the Error-Messaging-System
parametername:the parameter that produced the problem, or "" if no parameter was involved
errormessage:the errormessage
errorcode:the errorcode the error has
------
name:ultraschall.ShowErrorMessagesInReascriptConsole
language:lua
return:
params:(boolean:state)
description:
Sets, if errormessages shall be shown in the ReaScript-Console immediately, when they happen.
Will show functionname, parametername, errorcode plus errormessage and the time the error has happened.
PARAMETERS:
state:true, show error-messages in the ReaScript-Console when they happen; false, don't show errormessages
------
name:ultraschall.WinterlySnowflakes
language:lua
return:(integer:retval)
params:(boolean:toggle), (number:falling_speed), (integer:number_snowflakes)
description:
Exchanges the gfx.update()-function with a variant, that displays falling snowflakes everytime it is called.
returns -1 in case of error
PARAMETERS:
toggle:true, toggles falling snow on; false, toggles falling snow off
falling_speed:the falling speed of the snowflakes, 1.3 is recommended
number_snowflakes:the number of falling snowflakes at the same time on screen; 2000 is recommended
RETURNS:
retval:returns -1 in case of a'JS_Window_ListFind' n error; 1, in case of success
------
name:ultraschall.CheckActionCommandIDFormat
language:lua
return:(boolean:retval)
params:(action_command_id:)
description:
Checks, whether an action command id is a valid commandid(which is a number) or a valid _action_command_id (which is a string with an _underscore in the beginning).
Does not check, whether this action_command_id is a useable one, only if it's "syntax" is correct!
returns falsein case of an error
PARAMETERS:
:the ActionCommandID you want to check; either a number or an action_command_id with an underscore at the beginning
RETURNS:
retval:true, valid action_command_id; false, not a valid action_command_id
------
name:ultraschall.RunCommand
language:lua
return:(integer:retval)
params:(string:actioncommand_id)
description:
runs a command by its ActionCommandID(instead of the CommandID-number)
returns -1 in case of error
PARAMETERS:
actioncommand_id:the ActionCommandID of the Command/Script/Action you want to run; must be either a number or the ActionCommandID beginning with an underscore _
RETURNS:
retval:-1, in case of error
------
name:ultraschall.ConvertStringToBits
language:lua
return:(integer:number_of_bits),(array:bitarray)
params:(string:message)
description:
converts a string into its bit-representation and returns that as a handy table
returns -1 in case of an error
PARAMETERS:
message:the string, which you want to convert into its bit representation
RETURNS:
number_of_bits:the number of bits in the string, -1, in case of an error
bitarray:the individual bits as a handy table
------
name:ultraschall.ConvertBitsToString
language:lua
return:(string:message)
params:(array:bitarray)
description:
converts a table of bit-representation into a string
Every entry in the table must be either 0 or 1. If there are too few bits to fill up a byte, the missing bits will be seen as trailing 0-bits.
returns nil in case of an error
PARAMETERS:
bitarray:the individual bits in a table, which will be converted into a string-representation
RETURNS:
message:the converted bits as string-representation
------
name:ultraschall.deprecated
language:lua
return:
params:(string:functionname)
description:
If you have a 3rd-party function added to Ultraschall-API, which you want to deprecate, use this
function to show a warning message, if that function is used.
It will be shown once when running the script, after (re-)start of Reaper.
That way, you can tell scripters, whether they need to update their scripts using newer/better functions.
This is probably shown first to the user, who knows that way a potential problem and can tell the scripter about that.
If there is a line "Author: authorname" in the file(as usual for ReaPack-compatible scripts), it will show the scripter's name in the dialog.
------
name:ultraschall.FloatCompare
language:lua
return:(boolean:retval),(number:diff)
params:(number:a), (number:b), (number:precision)
description:
Compares two floatvalues and allows to set the precision to copmare against.
So, if you want to compare 5.1 and 5.2, using precision=0.2 returns true(is equal), precision=0.1 returns false(isn't equal).
Returns nil in case of failure.
PARAMETERS:
a:the first float-number to compare
b:the precision of the fraction, like 0.1 or 0.0063
precision:the precision of the fraction, like 0.1 or 0.0063
RETURNS:
retval:true, numbers are equal; false, numbers aren't equal
diff:the difference between numbers a and b
------
name:ultraschall.GetProject_RenderOutputPath
language:lua
return:(string:render_output_directory)
params:(string:projectfilename_with_path)
description:
returns the output-directory for rendered files of a project.
Doesn't return the correct output-directory for queued-projects!
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfilename with path, whose renderoutput-directories you want to know
RETURNS:
render_output_directory:the output-directory for projects
------
name:ultraschall.ResolveRenderPattern
language:lua
return:(string:resolved_renderpattern)
params:(string:render_pattern)
description:
resolves a render-pattern into its render-filename(without extension).
returns nil in case of an error
PARAMETERS:
render_pattern:the render-pattern, that you want to resolve into its render-filename
RETURNS:
resolved_renderpattern:the resolved renderpattern, that is used for a render-filename.
------
name:ultraschall.SetReaScriptConsole_FontStyle
language:lua
return:(boolean:retval)
params:(integer:style)
description:
If the ReaScript-console is opened, you can change the font-style of it.
You can choose between 19 different styles, with 3 being of fixed character length. It will change the next time you output text to the ReaScriptConsole.
If you close and reopen the Console, you need to set the font-style again!
You can only have one style active in the console!
Returns false in case of an error
RETURNS:
retval:true, displaying was successful; false, displaying wasn't successful
------
name:ultraschall.ReadSubtitles_VTT
language:lua
return:(string:Kind),(string:Language),(integer:Captions_Counter),(table:Captions)
params:(string:filename_with_path)
description:
parses a webvtt-subtitle-file and returns its contents as table
returns nil in case of an error
PARAMETERS:
filename_with_path:the filename with path of the webvtt-file
RETURNS:
Kind:the type of the webvtt-file, like: captions
Language:the language of the webvtt-file
Captions_Counter:the number of captions in the file
Captions:the Captions as a table of the format:
------
name:ultraschall.WebInterface_GetInstalledInterfaces
language:lua
return:(integer:reapers_count_of_webinterface),(array:reapers_webinterface_filenames_with_path),(array:reapers_webinterface_titles),(integer:users_count_of_webinterface),(array:users_webinterface_filenames_with_path),(array:users_webinterface_titles)
params:
description:
Returns the currently installed web-interface-pages.
Will return Reaper's default ones(resources-folder/Plugins/reaper_www_root/) as well as your customized ones(resources-folder/reaper_www_root/)
RETURNS:
reapers_count_of_webinterface:the number of factory-default webinterfaces, installed by Reaper
reapers_webinterface_filenames_with_path:the filenames with path of the webinterfaces(can be .htm or .html)
reapers_webinterface_titles:the titles of the webinterfaces, as shown in the titlebar of the browser
users_count_of_webinterface:the number of user-customized webinterfaces
users_webinterface_filenames_with_path:the filenames with path of the webinterfaces(can be .htm or .html)
users_webinterface_titles:the titles of the webinterfaces, as shown in the titlebar of the browser
------
name:ultraschall.GFX_DrawThickRoundRect
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (integer:w), (integer:h), (number:thickness), (number:roundness), (boolean:antialias)
description:
draws a round-rectangle with a custom thickness.
You shouldn't redraw with it too often, as it eats many ressources
returns false in case of an error
PARAMETERS:
x:the x position of the rectangle
y:the y position of the rectangle
w:the width of the rectangle
h:the thickness of the rectangle's edges
thickness:the thickness of the rectangle's edges
roundness:the angle of the rectangle's corners
antialias:true, draw antialiased; false, simply draw aliased
RETURNS:
retval:true, drawing was successful; false, drawing wasn't successful
------
name:ultraschall.GFX_BlitFramebuffer
language:lua
return:(boolean:retval)
params:(integer:framebufferidx), (optional boolean:showidx)
description:
blits a framebuffer at position 0,0. If the gfx-window is smaller than the contents of the framebuffer, it will resize it before blitting to window size, retaining the correct aspect-ratio.
Mostly intended for debugging-purposes, when you want to track, if a certain framebuffer contains, what you expect it to contain.
returns false in case of an error
PARAMETERS:
framebufferidx:the indexnumber of the framebuffer to blit; 0 to 1023; -1 is the displaying framebuffer
showidx:true, displays the id-number of the framebuffer in the top-left corner; false, does not display framebuffer-idx
RETURNS:
retval:true, drawing was successful; false, drawing wasn't successful
------
name:ultraschall.GFX_Init
language:lua
return:(integer:retval),(HWND:hwnd)
params:(string:"name"), (optional integer:width), (optional integer:height), (optional integer:dockstate), (optional integer:xpos), (optional integer:ypos)
description:
Opens a new graphics window and returns its HWND-windowhandler object.
PARAMETERS:
"name":the name of the window, which will be shown in the title of the window
width: the width of the window; minmum is 50
height: the height of the window; minimum is 16
dockstate:&1=0, undocked; &1=1, docked
xpos:x-position of the window in pixels; minimum is -80; nil, to center it horizontally
ypos:y-position of the window in pixels; minimum is -15; nil, to center it vertically
RETURNS:
retval: 1.0, if window is opened
hwnd:the window-handler of the newly created window; can be used with JS_Window_xxx-functions of the JS-extension-plugin
------
name:ultraschall.GFX_GetWindowHWND
language:lua
return:(HWND:hwnd)
params:
description:
Returns the HWND of the currently opened gfx-window. You need to use ultraschall.GFX_Init(), otherwise
it will contain the message "Please, use ultraschall.GFX_Init() for window-creation, not gfx.init(!), to retrieve the HWND of the gfx-window."
RETURNS:
hwnd:the window-handler of the opened gfx-window; will contain a helpermessage, if you didn't use ultraschall.GFX_Init() for window creation.
------
name:ultraschall.GFX_GetMouseCap
language:lua
return:(string:clickstate),(string:specific_clickstate),(integer:mouse_cap),(integer:click_x),(integer:click_y),(integer:drag_x),(integer:drag_y),(integer:mouse_wheel),(integer:mouse_hwheel)
params:(optional integer:doubleclick_wait), (optional integer:drag_wait)
description:
Checks mouseclick/wheel-behavior, since last time calling this function and returns it's state.
Allows you to get click, doubleclick, dragging, including the appropriate coordinates and mousewheel-states.
Much more convenient, than fiddling around with gfx.mouse_cap
Note: After doubleclicked, this will not return mouse-clicked-states, until the mouse-button is released. So any mouse-clicks during that can be only gotten from the retval mouse_cap.
This is to prevent automatic mouse-dragging after double-clicks.
PARAMETERS:
doubleclick_wait:the timeframe, in which a second click is recognized as double-click, in defer-cycles. 30 is approximately 1 second; nil, will use 15(default)
drag_wait:the timeframe, after which a mouseclick without moving the mouse is recognized as dragging, in defer-cycles. 30 is approximately 1 second; nil, will use 5(default)
RETURNS:
clickstate:either "" for not clicked, "CLK" for clicked, "DBLCLK" for doubleclick or "DRAG" for dragging
specific_clickstate:either "" for not clicked, "CLK" for clicked, "DBLCLK" for doubleclick or "DRAG" for dragging
mouse_cap:the mouse_cap, a bitfield of mouse and keyboard modifier states
click_x:the x position, when the mouse has been clicked the last time
click_y:the y position, when the mouse has been clicked the last time
drag_x:the x-position of the mouse-dragging-coordinate; is like click_x for non-dragging mousestates
drag_y:the y-position of the mouse-dragging-coordinate; is like click_y for non-dragging mousestates
mouse_wheel:the mouse_wheel-delta, since the last time calling this function
mouse_hwheel:the mouse_horizontal-wheel-delta, since the last time calling this function
------
name:ultraschall.GFX_SetFont
language:lua
return:
params:(integer:fontindex), (string:font), (integer:size), (string:flagStr)
description:
Sets the font of the gfx-window.
As Mac and Windows have different visible font-sizes for the same font-size, this function adapts the font-size correctly(unlike Reaper's own native gfx.setfont-function).
returns false in case of an error
PARAMETERS:
fontindex:the font-id; idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font
font:the name of the font
size:the size of the font
flagStr:a string, which holds the desired font-styles. You can combine multiple ones, up to 4.
------
name:ultraschall.GFX_BlitImageCentered
language:lua
return:(boolean:retval)
params:(integer:image), (integer:x), (integer:y), (number:scale), (number:rotate), (optional number:srcx), (optional number:srcy), (optional number:srcw), (optional number:srch), (optional integer:destx), (optional integer:desty), (optional integer:destw), (optional integer:desth), (optional integer:rotxoffs), (optional integer:rotyoffs)
description:
Blits a centered image at the position given by parameter x and y. That means, the center of the image will be at x and y.
All the rest basically works like the regular gfx.blit-function.
returns false in case of an error
PARAMETERS:
x:influences rotation
y:influences rotation
scale:the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger
srcx:the x-coordinate-offset in the source-image
srcy:the y-coordinate-offset in the source-image
srcw:the width-offset in the source-image
srch:the height-offset in the source-image
destx:the x-coordinate of the blitting destination
desty:the y-coordinate of the blitting destination
destw:the width of the blitting destination; may lead to stretched images
desth:the height of the blitting destination; may lead to stretched images
rotxoffs:influences rotation
rotyoffs:influences rotation
RETURNS:
retval:true, blitting was successful; false, blitting was unsuccessful
------
name:ultraschall.ApplyRenderTable_Project
language:lua
return:(boolean:retval)
params:(RenderTable:RenderTable), (optional boolean:apply_rendercfg_string)
description:
Sets all stored render-settings from a RenderTable as the current project-settings.
Expected table is of the following structure:
RenderTable["AddToProj"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked
RenderTable["Bounds"] - 0, Custom time range; 1, Entire project; 2, Time selection; 3, Project regions; 4, Selected Media Items(in combination with Source 32); 5, Selected regions
RenderTable["Channels"] - the number of channels in the rendered file; 1, mono; 2, stereo; higher, the number of channels
RenderTable["CloseAfterRender"] - true, close rendering to file-dialog after render; false, don't close it
RenderTable["Dither"] - &1, dither master mix; &2, noise shaping master mix; &4, dither stems; &8, dither noise shaping stems
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides; true, checked; false, unchecked
RenderTable["Endposition"] - the endposition of the rendering selection in seconds
RenderTable["MultiChannelFiles"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked
RenderTable["OfflineOnlineRendering"] - Offline/Online rendering-dropdownlist; 0, Full-speed Offline; 1, 1x Offline; 2, Online Render; 3, Online Render(Idle); 4, Offline Render(Idle)
RenderTable["OnlyMonoMedia"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked
RenderTable["RenderFile"] - the contents of the Directory-inputbox of the Render to File-dialog
RenderTable["RenderPattern"] - the render pattern as input into the File name-inputbox of the Render to File-dialog
RenderTable["RenderQueueDelay"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked
RenderTable["RenderQueueDelaySeconds"] - the amount of seconds for the render-queue-delay
RenderTable["RenderResample"] - Resample mode-dropdownlist; 0, Medium (64pt Sinc); 1, Low (Linear Interpolation); 2, Lowest (Point Sampling); 3, Good (192pt Sinc); 4, Better (348 pt Sinc); 5, Fast (IIR + Linear Interpolation); 6, Fast (IIRx2 + Linear Interpolation); 7, Fast (16pt Sinc); 8, HQ (512 pt); 9, Extreme HQ(768pt HQ Sinc)
RenderTable["RenderString"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string
RenderTable["RenderString2"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string
RenderTable["RenderTable"]=true - signals, this is a valid render-table
RenderTable["SampleRate"] - the samplerate of the rendered file(s)
RenderTable["SaveCopyOfProject"] - the "Save copy of project to outfile.wav.RPP"-checkbox; true, checked; false, unchecked
RenderTable["SilentlyIncrementFilename"] - Silently increment filenames to avoid overwriting-checkbox; true, checked; false, unchecked
RenderTable["Source"] - 0, Master mix; 1, Master mix + stems; 3, Stems (selected tracks); 8, Region render matrix; 16, Tracks with only Mono-Media to Mono Files; 32, Selected media items; 64, selected media items via master; 128, selected tracks via master
RenderTable["Startposition"] - the startposition of the rendering selection in seconds
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked? &1, custom time bounds; &2, entire project; &4, time selection; &8, all project regions; &16, selected media items; &32, selected project regions
RenderTable["TailMS"] - the amount of milliseconds of the tail
Returns false in case of an error
PARAMETERS:
RenderTable:a RenderTable, that contains all render-dialog-settings
apply_rendercfg_string:true or nil, apply it as well; false, don't apply it
RETURNS:
retval:true, setting the render-settings was successful; false, it wasn't successful
------
name:ultraschall.IsValidMediaItemStateChunkArray
language:lua
return:(boolean:retval),(integer:count),(array:retMediaItemStateChunkArray)
params:(array:MediaItemStateChunkArray)
description:
Checks, whether MediaItemStateChunkArray is valid.
It throws out all entries, that are not MediaItemStateChunks and returns the altered array as result.
returns false in case of an error or if it is not a valid MediaItemStateChunkArray
PARAMETERS:
MediaItemStateChunkArray:a MediaItemStateChunkArray that shall be checked for validity
RETURNS:
retval:returns true if MediaItemStateChunkArray is valid, false if not
count:the number of entries in the returned retMediaItemStateChunkArray
retMediaItemStateChunkArray:the, possibly, altered MediaItemStateChunkArray
------
name:ultraschall.IsTrackSoundboard
language:lua
return:(boolean:retval)
params:(integer:tracknumber)
description:
Returns, if this track is a soundboard-track, means, contains an Ultraschall-Soundboard-plugin.
Only relevant in Ultraschall-installations
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n
RETURNS:
retval:true, it is an Ultraschall-Soundboard-track; false, it is not
------
name:ultraschall.IsTrackStudioLink
language:lua
return:(boolean:retval)
params:(integer:tracknumber)
description:
Returns, if this track is a StudioLink-track, means, contains a StudioLink-Plugin
Only relevant in Ultraschall-installations
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n
RETURNS:
retval:true, it is a StudioLink-track; false, it is not
------
name:ultraschall.IsTrackStudioLinkOnAir
language:lua
return:(boolean:retval)
params:(integer:tracknumber)
description:
Returns, if this track is a StudioLinkOnAir-track, means, contains a StudioLinkOnAir-Plugin
Only relevant in Ultraschall-installations
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n
RETURNS:
retval:true, it is a StudioLinkOnAir-track; false, it is not
------
name:ultraschall.VID_VideoUIStateCoords2Pixels
language:lua
return:(integer:x_coordinate),(integer:y_coordinate)
params:(number:uistate_x), (number:uistate_y), (integer:videowindow_width), (integer:videowindow_height)
description:
converts the ui_state-coordinates of the Video-Processor into pixel-coordinates within the Video Window
You should add x and y-position of the Video-Processor-window, to get the actual screen-coordinates.
returns nil in case of an error
PARAMETERS:
uistate_x:the x-coordinate, that the function ui_get_state within the videoprocessor returns
uistate_y:the y-coordinate, that the function ui_get_state within the videoprocessor returns
videowindow_width:the current width of the Video Window
videowindow_height:the current height of the Video Window
RETURNS:
x_coordinate:the converted x-coordinate
y_coordinate:the converted y-coordinate
------
name:ultraschall.VID_Pixels2VideoUIStateCoords
language:lua
return:(number:uistate_x),(number:uistate_y)
params:(integer:x), (integer:y), (integer:videowindow_width), (integer:videowindow_height)
description:
converts the ui_state-coordinates of the Video-Processor into pixel-coordinates within the Video Window
You should add x and y-position of the Video-Processor-window, to get the actual screen-coordinates.
returns nil in case of an error
PARAMETERS:
x:the x-coordinate within the Video-Window
y:the y-coordinate within the Video-Window
videowindow_width:the current width of the Video Window
videowindow_height:the current height of the Video Window
------
name:ultraschall.GetHWInputs_Aliasnames
language:lua
return:(integer:number_of_aliases),(table:aliases)
params:
description:
Returns the aliasnames and their associated channels of the currently selected audio-device.
The returned table is of the format
table[index][1] - the name of the alias
table[index][2] - the hardware-input-channel, associated to this aliasname
RETURNS:
number_of_aliases:the number of aliases available
aliases:a table, that contains all alias-names and their associated Hardware-Input-channels
------
name:ultraschall.GetHWOutputs_Aliasnames
language:lua
return:(integer:number_of_aliases),(table:aliases)
params:
description:
Returns the aliasnames and their associated channels of the currently selected audio-device.
The returned table is of the format
table[index][1] - the name of the alias
table[index][2] - the hardware-output-channel, associated to this aliasname
RETURNS:
number_of_aliases:the number of aliases available
aliases:a table, that contains all alias-names and their associated Hardware-Output-channels
------
name:ultraschall.GetProject_AutomationItemStateChunk
language:lua
return:(string:AutomationItemStateChunk)
params:(string:projectfilename_with_path), (integer:idx), (optional string:ProjectStateChunk)
description:
returns the idx'th automation-item from a ProjectStateChunk.
It's the entry <POOLEDENV
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the automation-item-statechunk; nil to use ProjectStateChunk
idx:the number of the requested automation-item from the ProjectStateChunk with 1 for the first AutomItem.
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
AutomationItemStateChunk:the statechunk of the idx'th automation-item
------
name:ultraschall.GetProject_CountAutomationItems
language:lua
return:(integer:automation_items_count)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the number of automation-items available in a ProjectStateChunk.
It's the entry <POOLEDENV
returns -1 in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the automation-item-count; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file; only used, when projectfilename_with_path=nil
RETURNS:
automation_items_count:the number of automation-items
------
name:ultraschall.GetMediaItemsFromClipboard
language:lua
return:(integer:count),(array:MediaItemStateChunkArray)
params:
description:
Returns the number of mediaitems and a MediaItemStateChunkArray of the mediaitems, as stored in the clipboard.
It does it by pasting the items at the end of the project, getting them and deleting them again.
Use sparsely and with care, as it uses a lot of resources!
RETURNS:
count:the number of items in the clipboard
------
name:ultraschall.GetStringFromClipboard_SWS
language:lua
return:(string:clipboard_string)
params:
description:
Returns the content of the clipboard as a string. Uses the SWS-function reaper.CF_GetClipboard, but does everything for you, that is needed for proper use of this function.
RETURNS:
clipboard_string:the content of the clipboard as a string
------
name:ultraschall.PutMediaItemsToClipboard_MediaItemArray
language:lua
return:(boolean:retval)
params:(MediaItemArray:MediaItemArray)
description:
Puts the items in MediaItemArray into the clipboard.
Returns false in case of an error
PARAMETERS:
MediaItemArray:an array with all MediaItems, that shall be put into the clipboard
RETURNS:
retval:true, if successful; false, if not
------
name:ultraschall.ConvertColor
language:lua
return:(integer:colorvalue),(boolean:retval)
params:(integer:r), (integer:g), (integer:b)
description:
converts r, g, b-values to native-system-color. Works like reaper's ColorToNative, but doesn't need |0x1000000 added.
returns color-value 0, and retval=false in case of an error
PARAMETERS:
r:the blue colorvalue
g:the blue colorvalue
b:the blue colorvalue
RETURNS:
colorvalue:the native-system-color; 0 to 33554431
------
name:ultraschall.ConvertColorReverse
language:lua
return:(integer:r),(integer:g),(integer:b),(boolean:retval)
params:(integer:colorvalue)
description:
converts a native-system-color to r, g, b-values.
returns 0,0,0,false in case of an error
PARAMETERS:
colorvalue:the native-system-color; 0 to 33554431
RETURNS:
r:true, color-conversion was successful; false, color-conversion was unsuccessful
g:the blue colorvalue
b:true, color-conversion was successful; false, color-conversion was unsuccessful
retval:true, color-conversion was successful; false, color-conversion was unsuccessful
------
name:ultraschall.RGB2Grayscale
language:lua
return:(integer:graycolor)
params:(integer:red), (integer:green), (integer:blue)
description:
converts rgb to a grayscale value. Works native on Mac as well on Windows, no color conversion needed.
returns nil in case of an error
PARAMETERS:
red:red-value between 0 and 255.
green:red-value between 0 and 255.
blue:red-value between 0 and 255.
RETURNS:
graycolor:the gray color-value, generated from red,blue and green.
------
name:ultraschall.ConvertColorToGFX
language:lua
return:(number:r),(number:g),(number:b),(number:a)
params:(integer:r), (integer:g), (integer:b), (integer:a)
description:
converts red,green,blue,alpha-values from 0-255 range to 0-1 range, so these values can be used by Reaper-Lua's gfx.functions().
supports negative-values up from -255 to +255, so you can use the function as well for subtraction of colorvalues.
returns nil in case of error
PARAMETERS:
r:the alpha-color-value between -255 and +255
g:the alpha-color-value between -255 and +255
b:the blue-color-value between -255 and +255
a:the alpha-color-value between -255 and +255
RETURNS:
r:the converted alpha-value between -1 and +1
g:the converted green-value between -1 and +1
b:the converted alpha-value between -1 and +1
a:the converted alpha-value between -1 and +1
------
name:ultraschall.ConvertGFXToColor
language:lua
return:(integer:r),(integer:g),(integer:b),(integer:a)
params:(number:r), (number:g), (number:b), (number:a)
description:
converts red,green,blue,alpha-values from 0-1 range to 0-255 range, so these values can be used by Reaper's normal color-value-functions.
supports negative-values up from -1 to +1, so you can use the function as well for subtraction of colorvalues.
returns nil in case of error
PARAMETERS:
r:the converted alpha-value between -1 and +1
g:the converted green-value between -1 and +1
b:the converted alpha-value between -1 and +1
a:the converted alpha-value between -1 and +1
RETURNS:
r:the alpha-color-value between -255 and +255
g:the alpha-color-value between -255 and +255
b:the blue-color-value between -255 and +255
a:the alpha-color-value between -255 and +255
------
name:ultraschall.CreateColorTable
language:lua
return:(array:ColorTable)
params:(integer:startr), (integer:startg), (integer:startb), (integer:endr), (integer:endg), (integer:endb), (integer:number_of_steps)
description:
Returns a colortable to be used by color-graphics-functions.
The colorvalue for start and end can be 0 to 255 or the other way round 255 to 0
Can be used by ApplyColorTableToTrackColors
returns nil in case of an error
PARAMETERS:
startr:start redvalue, between 0 and 255
startg:start greenvalue, between 0 and 255 
startb:start bluevalue, between 0 and 255
endr:end redvalue, between 0 and 255
endg:end greenvalue, between 0 and 255
endb:end bluevalue, between 0 and 255
number_of_steps:the number of steps from the lowest to the highest r,g,b-color start/end-values
RETURNS:
ColorTable:a colortable for the colors with the number of steps of your choice; 
------
name:ultraschall.CreateSonicRainboomColorTable
language:lua
return:(array:ColorTable)
params:
description:
Returns a colortable in Ultraschall's standard-trackcolor-setting "Sonic Rainboom"-style.
Can be used by ApplyColorTableToTrackColors
RETURNS:
ColorTable:a colortable with all values for Ultraschall's track-color "Sonic Rainboom"
------
name:ultraschall.IsValidColorTable
language:lua
return:(boolean:retval)
params:(array:ColorTable)
description:
Checks for valid color-tables.
returns false in case of an error
PARAMETERS:
ColorTable:a table to check for being a valid ColorTable
RETURNS:
retval:true, if it's a valid ColorTable; false, if it's not a valid ColorTable
------
name:ultraschall.ApplyColorTableToTrackColors
language:lua
return:(boolean:retval)
params:(array:ColorTable), (integer:Spread), (integer:StartTrack), (integer:EndTrack)
description:
Apply a ColorTable to Tracks, to colorize MediaTracks
ColorTables can be created by CreateColorTable
returns false in case of an error
PARAMETERS:
ColorTable:the ColorTable to apply to the MediaTrackColors
Spread:0, apply ColorTable once; will return false, if fewer colors are in ColorTable available than tracks in the project
StartTrack:the first track to colorize; nil, to use the first track in project
EndTrack:the last track to colorize; nil, to use the last track in project
RETURNS:
retval:true, adjusting track-colors was successful; false, adjusting track-colors was unsuccessful
------
name:ultraschall.ApplyColorTableToItemColors
language:lua
return:(boolean:retval)
params:(array:ColorTable), (integer:Spread), (MediaItemArray:MediaItemArray)
description:
Apply a ColorTable to MediaItems in a MediaItemArray, to colorize MediaItems
ColorTables can be created by CreateColorTable
returns false in case of an error
PARAMETERS:
ColorTable:the ColorTable to apply to the MediaItemColors
Spread:0, apply ColorTable once; will return false, if fewer colors are in ColorTable available than items in the MediaItemArray
MediaItemArray:an array with all the MediaItems to colorize
RETURNS:
retval:true, adjusting item-colors was successful; false, adjusting item-colors was unsuccessful
------
name:ultraschall.ChangeColorBrightness
language:lua
return:(integer:red),(integer:green),(integer:blue),(boolean:retval)
params:(integer:r), (integer:g), (integer:b), (integer:bright_r), (optional integer:bright_g), (optional integer:bright_b)
description:
Changes brightness of a colorvalue. If you only set bright_r without setting bright_g and bright_b, then the value for bright_r will affect g and b as well.
If a color-value becomes >255 or <0, it will be set to 255 or 0 respectively.
returns color-value 0,0,0 and retval=false in case of an error
PARAMETERS:
r:the change in brightness for the blue-color; positive, brighter; negative, darker; if nil, value in bright_r will be used
g:the change in brightness for the blue-color; positive, brighter; negative, darker; if nil, value in bright_r will be used
b:the change in brightness for the blue-color; positive, brighter; negative, darker; if nil, value in bright_r will be used
bright_r:the change in brightness for the red-color; positive, brighter; negative, darker
bright_g:the change in brightness for the green-color; positive, brighter; negative, darker; if nil, value in bright_r will be used
bright_b:the change in brightness for the blue-color; positive, brighter; negative, darker; if nil, value in bright_r will be used
RETURNS:
red:the new red-value
green:the new green-value
blue:the new blue-value
retval:true, color-calculation was successful; false, color-calculation was unsuccessful
------
name:ultraschall.ChangeColorContrast
language:lua
return:(integer:red),(integer:green),(integer:blue),(boolean:retval)
params:(integer:r), (integer:g), (integer:b), (integer:Minimum_r), (optional integer:Maximum_r), (optional integer:Minimum_g), (optional integer:Maximum_g), (optional integer:Minimum_b), (optional integer:Maximum_b)
description:
Changes contrast of a colorvalue.
Minimum will set the new minimal, Maximum will set the new maximum-brightness-level.
If you set Minimum to 0 and Maximum to 255, contrast will not change.
The lower you set Minimum/Maximum, the darker it becomes; the higher, the brighter it becomes.
The farther away Minimum is from Maximum, the stronger the contrast becomes; the closer Minimum is to Maximum, the weaker the contrast becomes.
If you only set Minimum\_r and Maximum\_r, then these values will be applied to g and b too.
If you omit/set to nil a Maximum-value; it's default value will be 255.
If a color-value becomes >255 or <0, it will be set to 255 or 0 respectively.
returns color-value 0,0,0 and retval=false in case of an error
PARAMETERS:
r:the new maximum brightness of the contrast-range of the blue-color; if nil, it will be seen as 255
g:the new maximum brightness of the contrast-range of the blue-color; if nil, it will be seen as 255
b:the new maximum brightness of the contrast-range of the blue-color; if nil, it will be seen as 255
Minimum_r:the new minimum brightness of the contrast-range of the red-color
Maximum_r:the new maximum brightness of the contrast-range of the red-color; if nil, it will be seen as 255
Minimum_g:the new minimum brightness of the contrast-range of the green-color; if nil, it will use the value of Minimum_r
Maximum_g:the new maximum brightness of the contrast-range of the green-color; if nil, it will be seen as 255
Minimum_b:the new minimum brightness of the contrast-range of the blue-color; if nil, it will use the value of Minimum_r
Maximum_b:the new maximum brightness of the contrast-range of the blue-color; if nil, it will be seen as 255
RETURNS:
red:the new red-value
green:the new green-value
blue:the new blue-value
retval:true, color-calculation was successful; false, color-calculation was unsuccessful
------
name:ultraschall.ChangeColorSaturation
language:lua
return:(integer:red),(integer:green),(integer:blue),(number:median),(boolean:retval)
params:(integer:r), (integer:g), (integer:b), (integer:delta)
description:
Changes saturation of a colorvalue by delta.
If a color-value becomes >255 or <0, it will be set to 255 or 0 respectively.
returns color-value 0,0,0 and retval=false in case of an error
PARAMETERS:
r:the saturation/desaturation-value; negative, desaturates color; positive, saturates color
g:the saturation/desaturation-value; negative, desaturates color; positive, saturates color
b:the blue-value to be changed
delta:the saturation/desaturation-value; negative, desaturates color; positive, saturates color
RETURNS:
red:the new red-value
green:the new green-value
blue:the new blue-value
median:the median-value, calculated from the the old red, green and blue, values (red+green+blue)/3, which is the basis for the brightness of the unsaturated value
retval:true, color-calculation was successful; false, color-calculation was unsuccessful
------
name:ultraschall.ConvertColorToMac
language:lua
return:(integer:mac_colorvalue),(boolean:retval)
params:(integer:red), (integer:green), (integer:blue)
description:
Converts a colorvalue to the correct-native-colorvalue for Mac, no matter if you're using Mac, Windows or Linux.
returns 0, false in case of an error
PARAMETERS:
red:the red-value of the color
green:the green-value of the color
blue:the blue-value of the color
RETURNS:
mac_colorvalue:the Mac-native-colorvalue
retval:true, if conversion succeeded; false, if conversion failed
------
name:ultraschall.ConvertColorToWin
language:lua
return:(integer:win_linux_colorvalue),(boolean:retval)
params:(integer:red), (integer:green), (integer:blue)
description:
Converts a colorvalue to the correct-native-colorvalue for Windows/Linux, no matter if you're using Mac, Windows or Linux.
returns 0, false in case of an error
PARAMETERS:
red:the red-value of the color
green:the green-value of the color
blue:the blue-value of the color
RETURNS:
win_linux_colorvalue:the Windows/Linux-native-colorvalue
retval:true, if conversion succeeded; false, if conversion failed
------
name:ultraschall.ConvertColorFromMac
language:lua
return:(integer:red),(integer:green),(integer:blue),(boolean:retval)
params:(integer:mac_colorvalue)
description:
Converts a native-colorvalue to the correct rgb-color-values for Mac, no matter if you're using Mac, Windows or Linux.
returns 0, 0, 0, false in case of an error
PARAMETERS:
mac_colorvalue:the Mac-native-colorvalue
RETURNS:
red:the red-value of the color
green:the green-value of the color
blue:the blue-value of the color
retval:true, if conversion succeeded; false, if conversion failed
------
name:ultraschall.ConvertColorFromWin
language:lua
return:(integer:red),(integer:green),(integer:blue),(boolean:retval)
params:(integer:win_colorvalue)
description:
Converts a native-colorvalue to the correct rgb-color-values for Windows/Linux, no matter if you're using Mac, Windows or Linux.
returns 0, 0, 0, false in case of an error
PARAMETERS:
win_colorvalue:the Windows/Linux-native-colorvalue
RETURNS:
red:the red-value of the color
green:the green-value of the color
blue:the blue-value of the color
retval:true, if conversion succeeded; false, if conversion failed
------
name:ultraschall.SetIniFileExternalState
language:lua
return:(boolean:retval)
params:(string:section), (string:key), (string:value), (string:ini_filename_with_path)
description:
Sets an external state into ini_filename_with_path. Returns false, if it doesn't work.
PARAMETERS:
section:section of the external state. No = allowed!
key:key of the external state. No = allowed!
value:value for the key
RETURNS:
retval:true, if setting the state was successful; false, if setting was unsuccessful
------
name:ultraschall.GetIniFileExternalState
language:lua
return:(string:value)
params:(string:section), (string:key), (string:ini_filename_with_path)
description:
Gets an external state from ini_filename_with_path. Returns -1, if the file does not exist or parameters are invalid.
PARAMETERS:
section:section of the external state
key:key of the external state. No = allowed!
RETURNS:
value:the value stored in a section->key in a configuration-file
------
name:ultraschall.CountIniFileExternalState_sec
language:lua
return:(integer:sectioncount)
params:(string:ini_filename_with_path)
description:
Count external-state-[sections] from an ini-configurationsfile.
Returns -1, if the file does not exist.
PARAMETERS:
ini_filename_with_path:filename of the ini-file
RETURNS:
sectioncount:number of sections within an ini-configuration-file
------
name:ultraschall.CountIniFileExternalState_key
language:lua
return:(integer:keyscount)
params:(string:section), (string:ini_filename_with_path)
description:
Count external-state-keys within a specific section, in a ini_filename_with_path.
Returns -1, if file does not exist.
PARAMETERS:
section:the section within the ini-filename
ini_filename_with_path:filename of the ini-file
RETURNS:
keyscount:number of keys with section within an ini-configuration-file
------
name:ultraschall.EnumerateIniFileExternalState_sec
language:lua
return:(string:sectionname)
params:(integer:number_of_section), (string:ini_filename_with_path)
description:
Returns the numberth section in an ini_filename_with_path.
Returns nil, in case of an error.
PARAMETERS:
number_of_section:the section within the ini-filename; 1, for the first section
ini_filename_with_path:filename of the ini-file
RETURNS:
sectionname:the name of the numberth section in the ini-file
------
name:ultraschall.EnumerateIniFileExternalState_key
language:lua
return:(string:keyname)
params:(string:section), (integer:number), (string:ini_filename_with_path)
description:
Returns the numberth key within a section in an ini_filename_with_path.
Returns nil, in case of an error.
PARAMETERS:
section:the name of the section
number:the number of the key within a section within the ini-filename, with 1 for the first key in the section
ini_filename_with_path:filename of the ini-file
RETURNS:
keyname:the name of the numberth key within section in the ini-file
------
name:ultraschall.CountSectionsByPattern
language:lua
return:(integer:number_of_sections),(string:sectionnames)
params:(string:pattern), (string:ini_filename_with_path)
description:
Counts the number of sections within an ini-file, that fit a specific pattern.
Uses "pattern"-string to determine, how often a section with a certain pattern exists. Good for sections, that have a number in them, like [section1], [section2], [section3].
Returns the number of sections, that include that pattern as well as a string, that includes the names of all such sections, separated by a comma.
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
Returns -1, in case of an error.
PARAMETERS:
pattern:the pattern itself. Case sensitive.
ini_filename_with_path:filename of the ini-file
RETURNS:
number_of_sections:the number of sections, that fit the pattern
sectionnames:a string, like: [section1],[section8],[section99]
------
name:ultraschall.CountKeysByPattern
language:lua
return:(integer:number_of_keys),(string:sections_and_keys)
params:(string:pattern), (string:ini_filename_with_path)
description:
Counts the number of keys within an ini-file, that fit a specific pattern.
Uses "pattern"-string to determine, how often a key with a certain pattern exists. Good for keys, that have a number in them, like key1, key2, key3.
Returns the number of keys, that include the pattern, as well as a string with all [sections] that contain keys= with a pattern, separated by a , i.e. [section1],key1=,key2=,key3=,[section2],key1=,key4=
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
Returns -1, in case of an error.
PARAMETERS:
pattern:the pattern itself. Case sensitive.
ini_filename_with_path:filename of the ini-file
RETURNS:
number_of_keys:the number of keys, that fit the pattern
sections_and_keys:a string, like: [section1],Key1=,Key2=,Key3=[section2],Key7=
------
name:ultraschall.CountValuesByPattern
language:lua
return:(integer:number_of_values),(string:sections_and_keys)
params:(string:pattern), (string:ini_filename_with_path)
description:
Counts the number of values within an ini-file, that fit a specific pattern.
Uses "pattern"-string to determine, how often a value with a certain pattern exists. Good for values, that have a number in them, like value1, value2, value3
Returns the number of values, that include that pattern as well as a string, that contains the [sections] and the keys= and values , the latter that contain the pattern, separated by a comma
e.g. [section1], key1=, value, key4=, value, [section4], key2=, value
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
Returns -1, in case of an error.
PARAMETERS:
pattern:the pattern itself. Case sensitive.
ini_filename_with_path:filename of the ini-file
RETURNS:
number_of_values:the number of values, that fit the pattern
------
name:ultraschall.EnumerateSectionsByPattern
language:lua
return:(string:sectionname)
params:(string:pattern), (integer:id), (string:ini_filename_with_path)
description:
Returns the numberth section within an ini-file, that fits the pattern, e.g. the third section containing "hawaii" in it.
Uses "pattern"-string to determine if a section contains a certain pattern. Good for sections, that have a number in them, like section1, section2, section3
Returns the section that includes that pattern as a string, numbered by id.
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
Returns nil, in case of an error.
PARAMETERS:
pattern:the pattern itself. Case sensitive.
id:the number of section, that contains pattern
ini_filename_with_path:filename of the ini-file
RETURNS:
sectionname:a string, that contains the sectionname
------
name:ultraschall.EnumerateKeysByPattern
language:lua
return:(string:keyname)
params:(string:pattern), (string:section), (integer:id), (string:ini_filename_with_path)
description:
Returns the numberth key within a section in an ini-file, that fits the pattern, e.g. the third key containing "hawaii" in it.
Uses "pattern"-string to determine if a key contains a certain pattern. Good for keys, that have a number in them, like key1=, key2=, key3=
Returns the key that includes that pattern as a string, numbered by id.
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
Returns nil, in case of an error.
PARAMETERS:
pattern:the pattern itself. Case sensitive.
section:the section, in which to look for the key
id:the number of key, that contains pattern
ini_filename_with_path:filename of the ini-file
RETURNS:
keyname:a string, that contains the keyname
------
name:ultraschall.EnumerateValuesByPattern
language:lua
return:(string:value),(string:keyname)
params:(string:pattern), (string:section), (string:id), (string:ini_filename_with_path)
description:
Returns the numberth value(and it's accompanying key) within a section in an ini-file, that fits the pattern, e.g. the third value containing "hawaii" in it.
Uses "pattern"-string to determine if a value contains a certain pattern. Good for values, that have a number in them, like value1, value2, value3
Returns the value that includes that pattern as a string, numbered by id, as well as it's accompanying key.
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
Returns nil, in case of an error.
PARAMETERS:
pattern:the pattern itself. Case sensitive.
section:the section, in which to look for the key
id:the number of key, that contains pattern
ini_filename_with_path:filename of the ini-file
RETURNS:
value:the value that contains the pattern
keyname:a string, that contains the keyname
------
name:ultraschall.CountKBIniActions
language:lua
return:(integer:actions)
params:(string:filename_with_path)
description:
Count the number of "ACT"-Actions of the Reaper-kb.ini-file.
Returns -1, if no such file exists.
RETURNS:
actions:number of actions in the reaper-kb.ini
------
name:ultraschall.CountKBIniScripts
language:lua
return:(integer:scripts)
params:(string:filename_with_path)
description:
Count the number of "SCR"-Scripts of the Reaper-kb.ini-file.
Returns -1, if no such file exists.
RETURNS:
scripts:number of scripts in the reaper-kb.ini
------
name:ultraschall.CountKBIniKeys
language:lua
return:(integer:keys)
params:(string:filename_with_path)
description:
Count the number of "KEY"-Keybindings of the Reaper-kb.ini-file.
Returns -1, if no such file exists.
RETURNS:
keys:number of keys in the reaper-kb.ini
------
name:ultraschall.GetKBIniActions
language:lua
return:(integer:consolidate),(integer:section),(string:ActionCommandID),(string:description),(string:ActionsToBeExecuted)
params:(string:filename_with_path), (integer:idx)
description:
Get the states of "ACT"-Action number idx. Returns consolidate, section, ActionCommandID, description, ActionsToBeExecuted.
Returns -1, if no such entry or file exists.
PARAMETERS:
filename_with_path:path and filename of the reaper-kb.ini
idx:the number of the action to get, beginning with 1 for the first one
RETURNS:
consolidate:consolidate-state
section:the section, in which this action is executed
ActionCommandID:the ActionCommandID given to this Action
description:the description of this action
ActionsToBeExecuted:the actions that are run, the ActionCommandIDs beginning with _, multiple ActionCommandIDs are separated by whitespaces
------
name:ultraschall.GetKBIniScripts
language:lua
return:(integer:terminateinstance),(integer:section),(string:ActionCommandID),(string:description),(string:scriptfile)
params:(string:filename_with_path), (integer:idx)
description:
Get the states of "SCR"-Scripts number idx. Returns terminateinstance, section, ActionCommandID, description, scriptfile.
Returns -1, if no such entry or file exists.
PARAMETERS:
filename_with_path:path and filename of the reaper-kb.ini
idx:the number of the action to get, beginning with 1 for the first one
RETURNS:
terminateinstance:the state of terminating instances
section:the section, in which this action is executed
ActionCommandID:the ActionCommandID given to this Action
description:the description of this action
scriptfile:the filename of the script that shall be run
------
name:ultraschall.GetKBIniKeys
language:lua
return:(integer:keytype_modifier_midichan),(integer:key_midinote),(string:ActionCommandID),(integer:section)
params:(string:filename_with_path), (integer:idx)
description:
Get the states of "KEY"-Keybinding-number idx, for MIDI/Key-bindings. Returns keytype_modifier_midichan, key_midinote, ActionCommandID, section.
For a detailed description in how KEY-entries work, refer to Reaper-Filetype-Descriptions.html#Reaper-kb.ini.
Returns -1, if no such entry or file exists.
Does not return OSC-keybindings, as they are stored in OSC/reaper-osc-actions.ini !
returns -1 in case of an error
PARAMETERS:
filename_with_path:path and filename of the reaper-kb.ini
idx:the number of the action to get, beginning with 1 for the first one
RETURNS:
keytype_modifier_midichan:Type of Keytype, modifier or midichannel
key_midinote:the key(like ASCII-Codes) or midinote. 
ActionCommandID:the ActionCommandID associated with this shortcut.
section:the section, in which this shortcut is used
------
name:ultraschall.GetKBIniActionsID_ByActionCommandID
language:lua
return:(string:retval)
params:(filename_with_path:), (ActionCommandID:)
description:
Returns the indexnumber(s) of actions by ActionCommandIDs within a reaper-kb.ini.
Returns -1, if no such entry or file exists.
PARAMETERS:
:the ActionCommandID
:the ActionCommandID
RETURNS:
retval:the ids of actions with ActionCommandID, separated by a ,
------
name:ultraschall.GetKBIniScripts_ByActionCommandID
language:lua
return:(string:retval)
params:(filename_with_path:), (ActionCommandID:)
description:
Returns the indexnumber(s) of scripts by ActionCommandIDs within a reaper-kb.ini.
Returns nil, if no such entry or file exists.
PARAMETERS:
:the ActionCommandID
:the ActionCommandID
RETURNS:
retval:the ids of scripts with ActionCommandID, separated by a ,
------
name:ultraschall.GetKBIniKeys_ByActionCommandID
language:lua
return:(string:retval)
params:(filename_with_path:), (ActionCommandID:)
description:
Returns the indexnumber(s) of keys by ActionCommandIDs within a reaper-kb.ini.
Returns nil, if no such entry or file exists.
PARAMETERS:
:the ActionCommandID
:the ActionCommandID
RETURNS:
retval:the ids of keys with ActionCommandID, separated by a ,
------
name:ultraschall.SetKBIniActions
language:lua
return:(boolean:retval),(integer:actionnumber)
params:(string:filename_with_path), (integer:consolidate), (integer:section), (string:ActionCommandID), (string:Description), (string:ActionCommandIDs), (boolean:replace)
description:
Adds or sets(if it already exists) an "ACT"-action of a reaper-kb.ini.
Returns true/false when adding or setting worked/didn't work, as well as the action-number within the reaper-kb.ini
Needs a restart of Reaper for this change to take effect!
PARAMETERS:
filename_with_path:filename with path for the reaper-kb.ini
consolidate:consolidation state of this action
section:section, in which this action is started
ActionCommandID:the ActionCommandIDs for the actions, that are triggered by this action; unlike CommandID-numbers, every ActionCommandID must begin with _ ; will not be checked vor valid ones!
Description:a description for this action
ActionCommandIDs:the ActionCommandIDs for the actions, that are triggered by this action; unlike CommandID-numbers, every ActionCommandID must begin with _ ; will not be checked vor valid ones!
replace:true if an already existing entry shall be replaced, false if not
RETURNS:
retval:true, if adding/setting worked, false if it didn't
actionnumber:the entrynumber within the reaper-kb.ini of this action
------
name:ultraschall.SetKBIniScripts
language:lua
return:(boolean:retval),(integer:scriptnumber)
params:(string:filename_with_path), (integer:terminate), (integer:section), (string:ActionCommandID), (string:Description), (string:Scriptname), (boolean:replace)
description:
Adds or sets(if it already exists) an "SCR"-script of a reaper-kb.ini.
Returns true/false when adding or setting worked/didn't work, as well as the script-number within the reaper-kb.ini
Needs a restart of Reaper for this change to take effect!
PARAMETERS:
filename_with_path:filename with path for the reaper-kb.ini
terminate:state of handling mulitple running scripts
section:section, in which this script is started
ActionCommandID:the ActionCommandID of this action
Description:a description for this script
Scriptname:the name of the ReaScript, like .lua or .eel or .py
replace:true if an already existing entry shall be replaced, false if not
RETURNS:
retval:true, if adding/setting worked, false if it didn't
scriptnumber:the entrynumber within the reaper-kb.ini of this script
------
name:ultraschall.SetKBIniKeys
language:lua
return:(boolean:retval),(integer:keynumber)
params:(string:filename_with_path), (integer:keytype_modifier_midichan), (integer:key_midinote), (string:ActionCommandID), (integer:section), (boolean:replace)
description:
Adds or sets(if it already exists) a "KEY"-key of a reaper-kb.ini.
Returns true/false when adding or setting worked/didn't work, as well as the keybinding-number within the reaper-kb.ini.
Additional keybindings cannot share the same keytype_modifier_midichan, key_midinote and section at the same time, as every such keybind must be unique.
For a detailed description in how KEY-entries work, refer to Reaper-Filetype-Descriptions.html#Reaper-kb.ini.
Does not support OSC-keybindings, as they are stored in OSC/reaper-osc-actions.ini !
Needs a restart of Reaper for this change to take effect!
returns false in case of an error
PARAMETERS:
filename_with_path:filename with path for the reaper-kb.ini
keytype_modifier_midichan:Type of Keytype, modifier or midichannel
key_midinote:the key(like ASCII-Codes) or midinote. 
ActionCommandID:the ActionCommandID associated with this shortcut.
section:the section, in which this shortcut is used
replace:true if an already existing entry shall be replaced, false if not
RETURNS:
retval:true, if adding/setting worked, false if it didn't
------
name:ultraschall.DeleteKBIniActions
language:lua
return:(boolean:retval)
params:(string:filename_with_path), (integer:idx)
description:
Deletes an "ACT"-action of a reaper-kb.ini.
Returns true/false when deleting worked/didn't work.
Needs a restart of Reaper for this change to take effect!
PARAMETERS:
filename_with_path:filename with path for the reaper-kb.ini
idx:indexnumber of the action within the reaper-kb.ini
RETURNS:
retval:true, if deleting worked, false if it didn't
------
name:ultraschall.DeleteKBIniScripts
language:lua
return:(boolean:retval)
params:(string:filename_with_path), (integer:idx)
description:
Deletes an "SCR"-script of a reaper-kb.ini.
Returns true/false when deleting worked/didn't work.
Needs a restart of Reaper for this change to take effect!
PARAMETERS:
filename_with_path:filename with path for the reaper-kb.ini
idx:indexnumber of the script within the reaper-kb.ini
RETURNS:
retval:true, if deleting worked, false if it didn't
------
name:ultraschall.DeleteKBIniKeys
language:lua
return:(boolean:retval)
params:(string:filename_with_path), (integer:idx)
description:
Deletes a "KEY"-keybinding of a reaper-kb.ini.
Returns true/false when deleting worked/didn't work.
Needs a restart of Reaper for this change to take effect!
PARAMETERS:
filename_with_path:filename with path for the reaper-kb.ini
idx:indexnumber of the keybinding within the reaper-kb.ini
RETURNS:
retval:true, if deleting worked, false if it didn't
------
name:ultraschall.SetIniFileValue
language:lua
return:(integer:retval)
params:(string:section), (string:key), (string:value), (string:inifile)
description:
Sets a value of a key in an ini-file
returns -1 in case of an error
PARAMETERS:
section:the section, in which the key-value-pair is located
key:the key whose value you want to change
value:the new value for this key-value-pair
inifile:the ini-file, in which you want to set the key-value-store
RETURNS:
retval:-1, in case of an error; 1, in case of success
------
name:ultraschall.QueryKeyboardShortcutByKeyID
language:lua
return:(string:Shortcutname)
params:(integer:modifier), (integer:key)
description:
Returns the name of the shortcut of the modifier-key-values, as stored in the KEY-entries within the reaper-kb.ini
That way, you can take a KEY-entry from the reaper-kb.ini, like
KEY 1 65 _Ultraschall_Play_From_Editcursor_Position 0
Extract the modifier and key-values(1 and 65 in the example) and pass them to this function.
You will get returned "A" as 1 and 65 is the keyboard-shortcut-code for the A-key.
Only necessary for those, who try to read keyboard-shortcuts directly from the reaper-kb.ini to display them in some way.
returns nil in case of an error
PARAMETERS:
modifier:the modifier value, which is the first one after KEY in a KEY-entry in the reaper-kb.ini-file
key:the key value, which is the second one after KEY in a KEY-entry in the reaper-kb.ini-file
RETURNS:
Shortcutname:the actual name of the shortcut, like "A" or "F1" or "Ctrl+Alt+Shift+Win+PgUp".
------
name:ultraschall.GetSetConfigAcidImport
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "When importing media"-dropdownlist, as set in the Media with embedded tempo information-section in Preferences -> Video/REX/Misc
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "acidimport", as well as the reaper.ini-entry "REAPER -> acidimport"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigActionMenu
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Show recent actions"-entry, as set in the Actions-menu.
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "actionmenu", as well as the reaper.ini-entry "REAPER -> actionmenu"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAdjRecLat
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Use audio driver reported latency"-checkbox, as set in Preferences -> Recording
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "adjreclat", as well as the reaper.ini-entry "REAPER -> adjreclat"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAdjRecManLat
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Output manual offset-samples"-inputbox, as set in Preferences -> Recording
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "adjrecmanlat", as well as the reaper.ini-entry "REAPER -> adjrecmanlat"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value; 0 to 2147483647; in samples
setting:the current/new setting-value; 0 to 2147483647; in samples
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value; 0 to 2147483647; in samples
------
name:ultraschall.GetSetConfigAfxCfg
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of the audioformat for "Apply FX, Glue, Freeze, etc", as set in the Project Settings->Media-dialog
Only sets the format, not the individual format-settings(like bitrate, etc)!
To keep the setting for new projects as standard-setting after restart of Reaper, set persist=true
This alters the configuration-variable "afxcfg", as well as the reaper.ini-entry "REAPER -> afxcfg"
returns -1 in case of an error
PARAMETERS:
set:the new set audioformat
setting:the new set audioformat
persist:true, this setting will be standard-setting for new projects after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/newly set audioformat 
------
name:ultraschall.GetSetConfigAllStereoPairs
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Show non-standard stereo channel pairs(i.e Input2/Input3 etc)"-checkbox in the Channel naming/mapping-section, as set in Preferences -> Audio
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "allstereopairs", as well as the reaper.ini-entry "REAPER -> allstereopairs"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAlwaysAllowKB
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Allow keyboard commands even when mouse-editing"-checkbox, as set in Preferences -> General ->Advanced UI/system tweaks
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "alwaysallowkb", as well as the reaper.ini-entry "REAPER -> alwaysallowkb"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value; 0 to 1
setting:the current/new setting-value; 0 to 1
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value; 0(don't allow) to 1(allow)
------
name:ultraschall.GetSetConfigApplyFXTail
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Tail length when using Apply FX to items"-inputbox in milliseconds, as set in Preferences -> Media
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "applyfxtail", as well as the reaper.ini-entry "REAPER -> applyfxtail"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value; 0 to 2147483647
setting:the current/new setting-value; 0 to 2147483647
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value; 0 to 2147483647
------
name:ultraschall.GetSetConfigAdjRecManLatIn
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Input manual offset-samples"-inputbox, as set in Preferences -> Recording
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "adjrecmanlatin", as well as the reaper.ini-entry "REAPER -> adjrecmanlatin"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAudioPrShift
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Preserve pitch in audio items when changing master playrate", as set in the contextmenu of the master-playrate in the transport-area as well as toggled by action 40671(all sections)
This is a project-setting. That means, setting persist to true will have an effect on new projects create, but only after you restarted Reaper!
This alters the configuration-variable "audioprshift", as well as the reaper.ini-entry "REAPER -> audioprshift"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept for new projects, but only after restart of Reaper; false, old standard-project-setting will be kept
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAudioCloseStop
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Close audio device when stopped and active(less responsive)"-checkbox, as set in Preferences -> Audio
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "audioclosestop", as well as the reaper.ini-entry "REAPER -> audioclosestop"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAudioThreadPr
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Audio thread priority"-dropdownlist, as set in Preferences -> Device
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "audiothreadpr", as well as the reaper.ini-entry "REAPER -> audiothreadpr"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAudioCloseTrackWnds
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Allow snap grid/track envelope/routing windows to stay open"-checkbox in Preferences -> General -> Advanced UI/system tweaks.
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "autoclosetrackwnds", as well as the reaper.ini-entry "REAPER -> autoclosetrackwnds"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAutoMute
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Gets/Sets the value of "Automute-dropdownlist in the section Mute"-settings, as set in Preferences -> Mute/Solo
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "automute", as well as the reaper.ini-entry "REAPER -> automute"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAutoMuteFlags
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Sets the "Reset on playback start"-checkbox in section Mute-settings, as set in Preferences -> Mute/Solo
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "automuteflags", as well as the reaper.ini-entry "REAPER -> automuteflags"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAutoSaveInt
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Sets the "Every x minutes"-inputbox from the Project saving-section, as set in Preferences -> Project.
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "autosaveint", as well as the reaper.ini-entry "REAPER -> autosaveint"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.GetSetConfigAutoSaveMode
language:lua
return:(integer:retval)
params:(boolean:set), (integer:setting), (boolean:persist)
description:
Sets the "Every x minutes"-dropdownlist from the Project saving-section, as set in Preferences -> Project.
To keep the setting after restart of Reaper, set persist=true
This alters the configuration-variable "autosavemode", as well as the reaper.ini-entry "REAPER -> autosavemode"
returns -1 in case of an error
PARAMETERS:
set:the current/new setting-value
setting:the current/new setting-value
persist:true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper
RETURNS:
retval:the current/new setting-value
------
name:ultraschall.SetRender_OfflineOnlineMode
language:lua
return:(boolean:retval)
params:(integer:mode)
description:
sets the current mode of the offline/online-render-dropdownlist from the Render to File-dialog
Returns false in case of an error
PARAMETERS:
mode:the mode, that you want to set
RETURNS:
retval:true, setting it was successful; false, setting it was unsuccessful
------
name:ultraschall.GetRender_OfflineOnlineMode
language:lua
return:(integer:mode)
params:
description:
gets the current mode of the offline/online-render-dropdownlist from the Render to File-dialog
RETURNS:
mode:the mode, that is set
------
name:ultraschall.GetRender_ResampleMode
language:lua
return:(integer:mode)
params:
description:
gets the current mode of the "Resample mode (if needed)"-dropdownlist from the Render to File-dialog
RETURNS:
mode:the mode, that is set
------
name:ultraschall.SetRender_ResampleMode
language:lua
return:(boolean:retval)
params:(integer:mode)
description:
sets the current mode of the "Resample mode (if needed)"-dropdownlist from the Render to File-dialog
Returns false in case of an error
PARAMETERS:
mode:the mode, that is set
RETURNS:
retval:true, setting it was successful; false, setting it was unsuccessful
------
name:ultraschall.GetStartNewFileRecSizeState
language:lua
return:(boolean:start_new_files),(boolean:offset_file_switches),(integer:max_rec_size)
params:
description:
Returns, if Reaper shall start a file after a specified amount of MegaBytes as well, if the fileswitches shall be offset when multitrack-recording and the maximum filesize before starting a new file.
see SetStartNewFileRecSizeState for setting the current settings.
RETURNS:
start_new_files:true, Reaper starts a new file, when a recorded file reaches max_rec_size; false, files are as long until recording stops
offset_file_switches:true, When recording multiple tracks, offset file switches for better performance; false, don't offset file-switches
max_rec_size:the maximum length of a recorded file in MegaBytes, before Reaper shall start a new file; only applied when When recording multiple tracks, offset file switches for better performance=true
------
name:ultraschall.SetStartNewFileRecSizeState
language:lua
return:(boolean:retval)
params:(boolean:start_new_files), (boolean:offset_file_switches), (integer:maxrecsize), (boolean:persist)
description:
Sets, if Reaper shall start a file after a specified amount of MegaBytes as well, if the fileswitches shall be offset when multitrack-recording and the maximum filesize before starting a new file.
see GetStartNewFileRecSizeState for getting the current settings.
Returns false in case of an error
PARAMETERS:
start_new_files:true, Reaper starts a new file, when a recorded file reaches max_rec_size; false, files are as long until recording stops
offset_file_switches:true, When recording multiple tracks, offset file switches for better performance; false, don't offset file-switches
persist:true, set the setting to reaper.ini so it persists after restarting Reaper; false, set it only for the time, until Reaper is restarted
RETURNS:
retval:true, setting was successful; false, setting was unsuccessful
------
name:ultraschall.GetDeferRunState
language:lua
return:(boolean:retval)
params:(integer:deferinstance), (optional string:scriptidentifier)
description:
returns the run-state of a Ultraschall-defer-loop in a specific scriptinstance
You can either request the runstate of a Defer.
returns nil in case of an error.
PARAMETERS:
deferinstance:0, to use the parameter identifier
RETURNS:
retval:true, defer-instance is running; false, defer-instance isn't running
------
name:ultraschall.StopDeferCycle
language:lua
return:(boolean:retval)
params:(string:defer_identifier)
description:
Stops a running ultraschall.Defer-instance of a script-instance.
returns false in case of an error
PARAMETERS:
defer_identifier:the identifier of the defer-cycle of a script-instance
RETURNS:
retval:true, stopping this defer-cycle was successful; false, it wasn't successful
------
name:ultraschall.Defer
language:lua
return:(boolean:retval),(optional string:defer_identifier)
params:(function:func), (string:deferidentifier), (optional integer:mode), (optional number:timer_counter), (optional boolean:protected)
description:
runs a custom-defer-cycle, which can be individualized.
You can set, how often this defer-cycle shall be run(every x defer-cycle or every x seconds) and even stop the defer-cycle from in- and outside of the script, using the defer\_identifier you have given.
To stop such a defer-cycle, use StopDeferCycle, as long as parameter protected is not set to true!
**Important:** make the deferidentifier as unique as possible(using guids or similar stuff) to avoid naming conflicts with other defer-cycles using the same identifier.
Otherwise, you risk stopping multiple such defer-loops, when using StopDeferCycle!
For the old Defer1 to Defer20-behavior, try ultraschall.ScriptIdentifier..".defer_scriptXX" as defer-identifier, where XX is a number.
returns false in case of an error (e.g. already 1024 defer-cycles are running in the current script-instance)
PARAMETERS:
func:the function, you would love to defer to
deferidentifier:an identifier, under which you can access this defer-cycle; make it unique using guids in the name, to avoid name-conflicts!
mode:0 or nil, just run as regular defer-cycle
timer_counter:the timer for the defer-cycle
protected:true, this defer-cycle is protected from being stopped by StopDeferCycle(); false or nil, you can stop this defer-cycle using StopDeferCycle()
RETURNS:
retval:true, running this defer-cycle was successful; false, it wasn't successful
defer_identifier:if running this defer-cycle was successful, this holds the defer-identifier you've chosen
------
name:ultraschall.SetDeferCycleSettings
language:lua
return:(boolean:retval)
params:(string:deferidentifier), (optional integer:mode), (optional number:timer_counter)
description:
Sets the mode and timing settings of a running ultraschall.Defer-instance. You can set its mode and the timer/counter-values, even from a script, which does not run the defer-instance!
Returns false in case of failure.
PARAMETERS:
deferidentifier:an identifier, under which you can access this defer-cycle; make it unique using guids in the name, to avoid name-conflicts! 
mode:the timing mode, in which the defer-cycle runs
timer_counter:the timer for the defer-cycle
RETURNS:
retval:true, setting was successful; false, setting was unsuccessful
------
name:ultraschall.GetDeferCycleSettings
language:lua
return:(integer:mode),(integer:timer_counter)
params:(string:deferidentifier)
description:
Gets a the mode and timing-settings of a currently running ultraschall.Defer()-cycle
Returns nil in case of failure.
PARAMETERS:
deferidentifier:an identifier, under which you can access this defer-cycle; make it unique using guids in the name, to avoid name-conflicts! 
RETURNS:
mode:the timing mode, in which the defer-cycle runs
timer_counter:the timer for the defer-cycle
------
name:ultraschall.IsValidEnvStateChunk
language:lua
return:(boolean:valid)
params:(string:EnvelopeStateChunk)
description:
returns, if a EnvelopeStateChunk is a valid statechunk
returns false, in case of an error
PARAMETERS:
EnvelopeStateChunk:a string to check, if it's a valid EnvelopeStateChunk
RETURNS:
valid:true, if the string is a valid statechunk; false, if not a valid statechunk
------
name:ultraschall.MoveTrackEnvelopePointsBy
language:lua
return:(integer:retval)
params:(number:startposition), (number:endposition), (number:moveby), (MediaTrack:MediaTrack), (boolean:cut_at_border)
description:
Moves the envelopepoints between startposition and endposition by moveby in MediaTrack.
It moves all trackenvelope-points for all track-envelopes available.
Does NOT move item-envelopepoints!
Returns -1 in case of failure.
PARAMETERS:
startposition:the startposition in seconds
endposition:the endposition in seconds
moveby:in seconds, negative values: move toward beginning of project, positive values: move toward the end of project
MediaTrack:the MediaTrack object of the track, where the EnvelopsPoints shall be moved
cut_at_border:true, cut envelope-points, that would move outside section between startposition and endposition
RETURNS:
retval:-1 in case of failure
------
name:ultraschall.GetEnvelopePoint
language:lua
return:(number:time),(number:value),(integer:shape),(number:tension),(boolean:selected),(number:dBVal),(array:EnvelopePointObject)
params:(integer:Tracknumber), (string:EnvelopeName), (integer:idx)
description:
Returns the values for the idxth envelope point in Tracknumber->EnvelopeName.
returns -1 in case of error
PARAMETERS:
Tracknumber:the number of the track, beginning with 1. Use 0 for Master Track.
EnvelopeName:the name of the envelope-lane
idx:the number of the envelope-point, beginning with 0
RETURNS:
time:the time of the envelope point
value:the raw-value of the envelope point
shape:the shape of this envelope
tension:the intensity of the tension of the shape
selected:true, if this point is selected; false if not
dBVal:the envelopevalue converted to dB
EnvelopePointObject:an array with all elements of an envelopepoint
------
name:ultraschall.GetClosestEnvelopePointIDX_ByTime
language:lua
return:(integer:idxpre),(array:EnvelopePointObjectPre),(integer:idxpost),(array:EnvelopePointObjectPost)
params:(integer:Tracknumber), (string:EnvelopeName), (number:CheckTime)
description:
Returns the idxs and EnvelopePointObject of the envelope-points closest to timeposition CheckTime
returns -1 in case of error
PARAMETERS:
Tracknumber:the number of the track, beginning with 1. Use 0 for Master Track.
EnvelopeName:the name of the envelope-lane
CheckTime:the time in seconds to check for the closest envelope-points
RETURNS:
idxpre:the idx of the closest envelopepoint at or before CheckTime
EnvelopePointObjectPre:an EnvelopePointObject of idxpre
idxpost:the idx of the closest envelopepoint after CheckTime
EnvelopePointObjectPost:an EnvelopePointObject of idxpost
------
name:ultraschall.GetEnvelopePointIDX_Between
language:lua
return:(string:EnvelopeString),(array:EnvelopePointArray)
params:(integer:Tracknumber), (string:EnvelopeName), (number:startposition), (number:endposition)
description:
Returns a string and an EnvelopePointArray with all idx/EnvelopePointObjects of all envelopepoints between startposition and endposition in the EnvelopeName-lane.
returns -1 in case of error
PARAMETERS:
Tracknumber:the number of the track. 1 for track 1, 2 for track 2, etc. 0 for Master-track.
EnvelopeName:the name of the envelope-lane, where you want to have the envelope-points of.
startposition:the startposition of the selection in seconds. Must be bigger than or equal 0.
endposition:the endposition of the selection in seconds. Must be bigger than startposition.
RETURNS:
EnvelopeString:a string with all envelope-point-idx in the selection, separated by commas.
EnvelopePointArray:an array with all EnvelopePointObjects of all envelope-points in selection.
------
name:ultraschall.CheckEnvelopePointObject
language:lua
return:(boolean:retval)
params:(array:EnvelopePointObject)
description:
Checks, if EnvelopePointObject is valid or not.
returns false in case of an error
PARAMETERS:
EnvelopePointObject:an array with all information of an envelope point
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.IsValidEnvelopePointObject
language:lua
return:(boolean:retval)
params:(array:EnvelopePointObject)
description:
Checks, if EnvelopePointObject is valid or not.
returns false in case of an error
PARAMETERS:
EnvelopePointObject:an array with all information of an envelope point
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.SetEnvelopePoints_EnvelopePointObject
language:lua
return:(boolean:retval)
params:(array:EnvelopePointObject), (boolean:sort_in)
description:
Sets an envelope-point, as defined in EnvelopePointObject.
returns true in case of success, false in case of failure.
PARAMETERS:
EnvelopePointObject:an array with all information of an envelope point
sort_in:set true, if setting multiple points at once and call Envelope_SortPoints when done.
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.SetEnvelopePoints_EnvelopePointArray
language:lua
return:(boolean:retval)
params:(array:EnvelopePointArray), (boolean:sort_in)
description:
Sets envelope-points, as defined in the EnvelopePointObjects, in the EnvelopePointArray.
returns true in case of success, false in case of failure.
PARAMETERS:
EnvelopePointArray:an array with all EnvelopePointObjects you want to insert
sort_in:set true, if setting multiple points at once and call Envelope_SortPoints when done.
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.DeleteEnvelopePoints_EnvelopePointObject
language:lua
return:(boolean:retval)
params:(array:EnvelopePointObject)
description:
Deletes an envelope-point, as defined in EnvelopePointObject.
returns true in case of success, false in case of failure.
PARAMETERS:
EnvelopePointObject:an array with all information of an envelope point
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.DeleteEnvelopePoints_EnvelopePointArray
language:lua
return:(boolean:retval)
params:(array:EnvelopePointArray)
description:
Deletes the envelope-points, as defined in the EnvelopePointObjects, in the EnvelopePointArray.
returns true in case of success, false in case of failure.
PARAMETERS:
EnvelopePointArray:an array with all EnvelopePointObjects you want to insert
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.AddEnvelopePoints_EnvelopePointObject
language:lua
return:(boolean:retval)
params:(array:EnvelopePointObject), (boolean:sort_in)
description:
Adds an envelope-point, as defined in EnvelopePointObject.
returns true in case of success, false in case of failure.
PARAMETERS:
EnvelopePointObject:an array with all information of an envelope point
sort_in:set true, if setting multiple points at once and call Envelope_SortPoints when done.
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.AddEnvelopePoints_EnvelopePointArray
language:lua
return:(boolean:retval)
params:(array:EnvelopePointArray), (boolean:sort_in)
description:
Adds the envelope-points, as defined in the EnvelopePointObjects, in the EnvelopePointArray.
returns true in case of success, false in case of failure.
PARAMETERS:
EnvelopePointArray:an array with all EnvelopePointObjects you want to insert
sort_in:set true, if setting multiple points at once and call Envelope_SortPoints when done.
RETURNS:
retval:true, if it's a valid EnvelopePointObject; false if not
------
name:ultraschall.CreateEnvelopePointObject
language:lua
return:(boolean:retval),(array:EnvelopePointObject)
params:(TrackEnvelope:TrackEnvelope), (integer:idx), (number:time), (number:value), (integer:shape), (number:tension), (boolean:selected)
description:
Creates a new EnvelopePointObject, that can be used by other ultraschall-api-envelope-functions
returns false in case of error
PARAMETERS:
TrackEnvelope:the track-envelope, in which this EnvelopePointObject shall be
idx:the number of the envelope-point, beginning with 0
time:the time of the envelope point in seconds
value:the raw-value of the envelope point
shape:the shape of this envelope
tension:the intensity of the tension of the shape
selected:true, if this point is selected; false if not
RETURNS:
retval:false in case of error, true in case of success.
EnvelopePointObject:an array with all elements of the envelopepoint
------
name:ultraschall.CountEnvelopePoints
language:lua
return:(integer:envpoint_count)
params:(integer:Tracknumber), (string:EnvelopeName)
description:
Counts and returns the number of envelope-points in track Tracknumber, envelopelane EnvelopeName.
returns -1 in case of error
PARAMETERS:
Tracknumber:the number of the track, beginning with 1. Use 0 for Master Track.
EnvelopeName:the name of the envelope-lane
RETURNS:
envpoint_count:the number of envelope-points in requested track+envelope-lane
------
name:ultraschall.SetEnvelopeHeight
language:lua
return:(boolean:retval),(string:TrackEnvelopeStateChunk)
params:(integer:Height), (boolean:Compacted), (TrackEnvelope:TrackEnvelope), (string:TrackEnvelopeStateChunk)
description:
Changes the Envelope-lane-height and compactible state of TrackEnvelope or TrackEnvelopeStateChunk.
returns false in case of an error
PARAMETERS:
Height:the height of the envelopelane in pixels when not compacted. Reaper accepts 24-443 currently. Nil keeps old value.
Compacted:shall the envelopelane be compacted(true) or not(false). Nil keeps old value.
TrackEnvelope:the TrackEnvelopeStateChunk you want to alter. Will be used only, if TrackEnvelope is set to nil
TrackEnvelopeStateChunk:the TrackEnvelopeStateChunk you want to alter. Will be used only, if TrackEnvelope is set to nil
RETURNS:
retval:true in case of success; false in case of error
TrackEnvelopeStateChunk:the altered TrackEnvelopeStateChunk
------
name:ultraschall.GetAllTrackEnvelopes
language:lua
return:(array:TrackEnvelopeArray),(integer:number_of_tracks),(integer:FirstEnvelopeTrackNumber),(integer:FirstEnvelopeMaster)
params:
description:
returns all TrackEnvelopes of the current project as a table, number of tracks, the first track that has an envelope, if the master track has an envelope(0) or not (-1)
RETURNS:
TrackEnvelopeArray:the envelope Envelopenumber of track Tracknumber
number_of_tracks:the number of tracks, covered in the TrackEnvelopeArray
FirstEnvelopeTrackNumber:the number of the first track to have an envelope; -1 if theres none
FirstEnvelopeMaster:0, if the master-track has an envelope, -1 if not.
------
name:ultraschall.IsValidEnvelopePointArray
language:lua
return:(boolean:retval)
params:(EnvelopePointArray:EnvelopePointArray)
description:
Checks, if an EnvelopePointArray is a valid one.
Returns false in case of an error
PARAMETERS:
EnvelopePointArray:the EnvelopePointArray to check for it's validity
RETURNS:
retval:true, EnvelopePointArray is a valid one; false, EnvelopePointArray isn't valid
------
name:ultraschall.GetLastEnvelopePoint_TrackEnvelope
language:lua
return:(boolean:retval),(optional integer:envpointidx),(optional number:time),(optional number:value),(optional integer:shape),(optional number:tension),(optional boolean selected:)
params:(TrackEnvelope:Envelope)
description:
Gets the values of the last envelope-point in TrackEnvelope/MediaItemEnvelope.
Note: there's a "hidden" last envelopepoint in every Envelope, which will be ignored by this function. It will return the last visible envelope-point instead!
Returns false in case of an error
PARAMETERS:
Envelope:the Trackenvelope/MediaItemenvelope, whose last point you want
RETURNS:
retval:true, getting the envelopepoint was successful; false, in case of an error
envpointidx:the idx of the found envelope-point; with 0 for the first one on the Envelope
time:the time of the envelope-point in seconds
value:the value of the envelope-point
shape:the shape of the envelope-point
tension:the intensity of the tension of the shape
optional boolean selected:true, envelope-point is selected; false, it is not selected
------
name:ultraschall.GetArmState_Envelope
language:lua
return:(integer:retval)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current armed-state of a TrackEnvelope-object.
It is the entry ARM
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose armed-state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
retval:0, unarmed; 1, armed
------
name:ultraschall.SetArmState_Envelope
language:lua
return:(boolean:retval),(optional string:EnvelopeStateChunk)
params:(TrackEnvelope:TrackEnvelope), (integer:state), (optional string:EnvelopeStateChunk)
description:
Sets the new armed-state of a TrackEnvelope-object.
returns false in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose armed-state you want to change
state:0, unarmed; 1, armed
EnvelopeStateChunk:if parameter TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameters and change its arm-state
RETURNS:
retval:true, setting was successful; false, setting was unsuccessful
EnvelopeStateChunk:the altered EnvelopeStateChunk, when parameter TrackEnvelope is set to nil
------
name:ultraschall.GetTrackEnvelope_ClickState
language:lua
return:(boolean:clickstate),(number:position),(MediaTrack:track),(TrackEnvelope:envelope),(integer:EnvelopePointIDX)
params:
description:
Returns the currently clicked Envelopepoint and TrackEnvelope, as well as the current timeposition.
Works only, if the mouse is above the EnvelopePoint while having it clicked!
Returns false, if no envelope is clicked at
RETURNS:
clickstate:true, an envelopepoint has been clicked; false, no envelopepoint has been clicked
position:the position, at which the mouse has clicked
track:the track, from which the envelope and it's corresponding point is taken from
envelope:the TrackEnvelope, in which the clicked envelope-point lies
EnvelopePointIDX:the id of the clicked EnvelopePoint
------
name:ultraschall.GetEnvelopeState_NumbersOnly
language:lua
return:(table:values)
params:(string:state), (optional string:EnvelopeStateChunk), (optional string:functionname), (optional boolean:numbertoggle)
description:
returns a state from an EnvelopeStateChunk.
It only supports single-entry-states with numbers/integers, separated by spaces!
All other values will be set to nil and strings with spaces will produce weird results!
returns nil in case of an error
PARAMETERS:
state:the state, whose attributes you want to retrieve
functionname:if this function is used within specific gettrackstate-functions, pass here the "host"-functionname, so error-messages will reflect that
numbertoggle:true or nil; converts all values to numbers; false, keep them as string versions
RETURNS:
values:all values found as numerical indexed array
------
name:ultraschall.GetEnvelopeState_Act
language:lua
return:(integer:act),(integer:automation_settings)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current act-state of a TrackEnvelope-object or EnvelopeStateChunk.
It is the state entry ACT
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
act:0, bypass on
automation_settings:automation item-options for this envelope
------
name:ultraschall.GetEnvelopeState_Vis
language:lua
return:(integer:visible),(integer:lane),(integer:unknown)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current visibility-state of a TrackEnvelope-object or EnvelopeStateChunk.
It is the state entry VIS
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
visible:1, envelope is visible
lane:1, envelope is in it's own lane 
unknown:unknown; default=1
------
name:ultraschall.GetEnvelopeState_LaneHeight
language:lua
return:(integer:height),(integer:compacted)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current laneheight-state of a TrackEnvelope-object or EnvelopeStateChunk.
It is the state entry LANEHEIGHT
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
height:the height of this envelope in pixels; 24 - 263 pixels
compacted:1, envelope-lane is compacted("normal" height is not shown but still stored in height); 
------
name:ultraschall.GetEnvelopeState_DefShape
language:lua
return:(integer:shape),(integer:b),(integer:c)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current default-shape-state of a TrackEnvelope-object or EnvelopeStateChunk.
It is the state entry DEFSHAPE
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
shape:0, linear
b:unknown; default value is -1; probably pitch/snap
c:unknown; default value is -1; probably pitch/snap
------
name:ultraschall.GetEnvelopeState_Voltype
language:lua
return:(integer:voltype)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current voltype-state of a TrackEnvelope-object or EnvelopeStateChunk.
It is the state entry VOLTYPE
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
voltype:1, default volume-type is fader-scaling; if VOLTYPE-entry is not existing, default volume-type is amplitude-scaling
------
name:ultraschall.GetEnvelopeState_PooledEnvInstance
language:lua
return:(integer:id),(number:position),(number:length),(number:start_offset),(number:playrate),(integer:selected),(number:baseline),(integer:loopsource),(integer:i),(number:j),(integer:pool_id),(integer:mute)
params:(integer:index), (TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current state of a certain automation-item within a TrackEnvelope-object or EnvelopeStateChunk.
It is the state entry POOLEDENVINST
returns nil in case of error
PARAMETERS:
index:the index-number of the automation-item, whose states you want to have
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
id:counts the automation-item-instances in this project, including deleted ones; 1-based
position:position in seconds
length:length in seconds
start_offset:offset in seconds
playrate:playrate; minimum value is 0.001; default is 1.000
selected:1, automation item is selected; 0, automation item isn't selected
baseline:0(-100) to 1(+100); default 0.5(0)
loopsource:Loop Source; 0 and 1 are allowed settings; 1 is default
i:1, mute automation-item; 0, unmute automation-item
j:unknown; 0 is default
pool_id:counts the automation-item-instances in this project, including deleted ones; 1-based
mute:1, mute automation-item; 0, unmute automation-item
------
name:ultraschall.GetEnvelopeState_PT
language:lua
return:(number:position),(integer:volume),(integer:point_shape_1),(integer:point_shape_2),(integer:selected),(number:bezier_tens1),(number:bezier_tens2)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current state of a certain envelope-point within a TrackEnvelope-object or EnvelopeStateChunk.
It is the state entry PT
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
position:position of the point in seconds
volume:volume as fader-value
selected:1, selected; disappearing, unselected
bezier_tens2:disappears, if no bezier is set; -1 to 1 
------
name:ultraschall.GetEnvelopeState_EnvName
language:lua
return:(string:envelopename),(optional integer:fx_env_id),(optional string:wet_byp),(optional number:minimum_range),(optional number:maximum_range),(optional number:unknown)
params:(TrackEnvelope:TrackEnvelope), (optional string:EnvelopeStateChunk)
description:
Returns the current envelope-name-state of a TrackEnvelope-object or EnvelopeStateChunk.
It is the opening <-tag of the EnvelopeStateChunk
returns nil in case of error
PARAMETERS:
TrackEnvelope:the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead
EnvelopeStateChunk:if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state
RETURNS:
envelopename:the name of the envelope, usually:
fx_env_id:fx_env is the id of the envelope, as provided by this fx; beginning with 1 for the first
wet_byp:wet_byp is either "" if not existing, wet or bypass
minimum_range:the minimum value, accepted by this envelope; 6 digits-precision
maximum_range:the maximum-value, accepted by this envelope; 6 digits-precision
unknown:unknown
------
name:ultraschall.EventManager_EnumerateStartupEvents
language:lua
return:(string:EventIdentifier),(string:Eventname),(string:CallerScriptIdentifier),(number:CheckAllXSeconds),(number:CheckForXSeconds),(boolean:StartActionsOnceDuringTrue),(boolean:Paused),(function:CheckFunction),(number:NumberOfActions),(table:Actions)
params:(integer:index)
description:
Enumerates already existing startupevents, that shall be automatically run at startup of the Ultraschall Event Manager.
That means, if you start the EventManager, it will be started automatically to the EventManager-checking-queue, without the need of registering it by hand.
returns nil in case of an error
PARAMETERS:
index:the index of the StartUp-event, whose attributes you want to get; 1 for the first, etc
RETURNS:
EventIdentifier:the EventIdentifier of the startup-event
CallerScriptIdentifier:the ScriptIdentifier of the script, which added this event to the StartUpEvents
CheckAllXSeconds:only check all x seconds; 0, for constant checking
CheckForXSeconds:only check for x seconds; 0, check until the event is removed
StartActionsOnceDuringTrue:if the event occurred: 
Paused:true, the event shall be started as paused; false, the event shall be run immediately
CheckFunction:the function, which shall check if the event occurred
NumberOfActions:the number of actions currently registered with this event
Actions:a table which holds all actions and their accompanying sections, who are run when the event occurred
------
name:ultraschall.EventManager_EnumerateStartupEvents2
language:lua
return:(integer:index),(string:EventIdentifier),(string:Eventname),(string:CallerScriptIdentifier),(number:CheckAllXSeconds),(number:CheckForXSeconds),(boolean:StartActionsOnceDuringTrue),(boolean:Paused),(function:CheckFunction),(number:NumberOfActions),(table:Actions)
params:(string:EventIdentifier)
description:
Enumerates already existing startupevents by an EventIdentifier.
StartupEvents are events, that shall be automatically run at startup of the Ultraschall Event Manager.
That means, if you start the EventManager, it will be started automatically to the EventManager-checking-queue, without the need of registering it by hand.
returns nil in case of an error
PARAMETERS:
EventIdentifier:the identifier of the StartupEvent, that you want to enumerate
RETURNS:
index:the index of the StartupEvent within all StartUpEvents
EventIdentifier:the EventIdentifier of the startup-event
CallerScriptIdentifier:the ScriptIdentifier of the script, which added this event to the StartUpEvents
CheckAllXSeconds:only check all x seconds; 0, for constant checking
CheckForXSeconds:only check for x seconds; 0, check until the event is removed
StartActionsOnceDuringTrue:if the event occurred: 
Paused:true, the event shall be started as paused; false, the event shall be run immediately
CheckFunction:the function, which shall check if the event occurred
NumberOfActions:the number of actions currently registered with this event
Actions:a table which holds all actions and their accompanying sections, who are run when the event occurred
------
name:ultraschall.EventManager_AddEvent
language:lua
return:(string:event_identifier)
params:(string:EventName), (integer:CheckAllXSeconds), (integer:CheckForXSeconds), (boolean:StartActionsOnceDuringTrue), (boolean:EventPaused), (function:CheckFunction), (table:Actions)
description:
Adds a new event to the Ultraschall Event Manager-checking-queue.
returns nil in case of an error
PARAMETERS:
EventName:a name for the event, which you can choose freely; duplicated eventnames are allowed
CheckAllXSeconds:only check all x seconds; 0, for constant checking
CheckForXSeconds:only check for x seconds; 0, check until the event is removed
StartActionsOnceDuringTrue:if the event occurred: 
EventPaused:false, register the event and check for it immediately; true, register the event but don't check for it yet
CheckFunction:the function, which shall check if the event occurred
Actions:a table which holds all actions and their accompanying sections, who shall be run when the event occurred
RETURNS:
event_identifier:the unique identifier for this registered event, which can be used later for setting, deleting, etc
------
name:ultraschall.EventManager_IsValidEventIdentifier
language:lua
return:(boolean:valid),(boolean:valid_inuse)
params:(string:event_identifier)
description:
Checks, if a string is a valid EventIdentifier (valid) and currently registered with an event(valid_inuse) in the Ultraschall-EventManager-checking-queue.
returns false in case of an error
PARAMETERS:
event_identifier:the unique identifier of the registered event, that you want to check
RETURNS:
valid:true, valid EventIdentifier, which is currently registered and in use by the EventManager; false, no currently registered EventIdentifier
valid_inuse:true, valid EventIdentifier, which is currently registered and in use by the EventManager; false, no currently registered EventIdentifier
------
name:ultraschall.EventManager_RemoveEvent
language:lua
return:(boolean:retval)
params:(string:event_identifier)
description:
Removes a new event to the Ultraschall Event Manager-checking-queue.
returns false in case of an error
PARAMETERS:
event_identifier:the unique identifier of the registered event, which you want to remove from the EventManager
RETURNS:
retval:true, removing was successful; false, removing was unsuccessful
------
name:ultraschall.EventManager_RemoveAllEvents_Script
language:lua
return:(boolean:retval)
params:(string:ScriptIdentifier)
description:
Removes all registered events from a script with a certain ScriptIdentifier in the Ultraschall Event Manager-checking-queue.
returns false in case of an error
PARAMETERS:
ScriptIdentifier:the unique identifier of the registered event, which you want to remove from the EventManager
RETURNS:
retval:true, removing was successful; false, removing was unsuccessful
------
name:ultraschall.EventManager_SetEvent
language:lua
return:(boolean:retval)
params:(string:EventIdentifier), (optional string:EventName), (optional integer:CheckAllXSeconds), (optional integer:CheckForXSeconds), (optional boolean:StartActionsOnceDuringTrue), (optional boolean:EventPaused), (optional function:CheckFunction), (optional table:Actions)
description:
Sets the attributes of an already added event in the Ultraschall Event Manager-checking-queue.
returns nil in case of an error
PARAMETERS:
EventIdentifier:the EventIdentifier of the registered event, which you want to set
EventName:a name for the event, which you can choose freely; duplicated eventnames are allowed; nil, keep the old name
CheckAllXSeconds:only check all x seconds; 0, for constant checking; nil, keep the old value
CheckForXSeconds:only check for x seconds; 0, check until the event is removed; nil, keep the old value
StartActionsOnceDuringTrue:if the event occurred: 
EventPaused:false, register the event and check for it immediately; true, register the event but don't check for it yet; nil, keep the old value
CheckFunction:the function, which shall check if the event occurred; nil, keep the old function
Actions:a table which holds all actions and their accompanying sections, who shall be run when the event occurred; nil, keep the old actionlist
RETURNS:
retval:true, setting was successful; false, setting wasn't successful
------
name:ultraschall.EventManager_EnumerateEvents
language:lua
return:(string:EventIdentifier),(string:EventName),(string:CallerScriptIdentifier),(integer:CheckAllXSeconds),(integer:CheckForXSeconds),(boolean:StartActionsOnceDuringTrue),(boolean:EventPaused),(function:CheckFunction),(integer:NumberOfActions),(table:Actions)
params:(integer:id)
description:
Gets the attributes of an already added event in the Ultraschall Event Manager-checking-queue.
returns nil in case of an error
PARAMETERS:
id:the id of the currently registered event, of which you want to have the attributes; starting with 1 for the first
RETURNS:
EventIdentifier:the EventIdentifier of the registered event
EventName:the name of the event
CallerScriptIdentifier:the ScriptIdentifier of the script, who registered the event
CheckAllXSeconds:only check all x seconds; 0, for constant checking
CheckForXSeconds:only check for x seconds; 0, check until the event is removed
StartActionsOnceDuringTrue:if the event occurred: 
EventPaused:true, eventcheck is currently paused; false, eventcheck is currently running
CheckFunction:the function, which shall check if the event occurred
NumberOfActions:the number of actions currently registered with this event
Actions:a table which holds all actions and their accompanying sections, who are run when the event occurred
------
name:ultraschall.EventManager_EnumerateEvents2
language:lua
return:(string:EventIdentifier),(string:EventName),(string:CallerScriptIdentifier),(integer:CheckAllXSeconds),(integer:CheckForXSeconds),(boolean:StartActionsOnceDuringTrue),(boolean:EventPaused),(function:CheckFunction),(integer:NumberOfActions),(table:Actions)
params:(string:EventIdentifier)
description:
Gets the attributes of an already added event in the Ultraschall Event Manager-checking-queue.
returns nil in case of an error
RETURNS:
EventIdentifier:the EventIdentifier of the registered event
EventName:the name of the event
CallerScriptIdentifier:the ScriptIdentifier of the script, who registered the event
CheckAllXSeconds:only check all x seconds; 0, for constant checking
CheckForXSeconds:only check for x seconds; 0, check until the event is removed
StartActionsOnceDuringTrue:if the event occurred: 
EventPaused:true, eventcheck is currently paused; false, eventcheck is currently running
CheckFunction:the function, which shall check if the event occurred
NumberOfActions:the number of actions currently registered with this event
Actions:a table which holds all actions and their accompanying sections, who are run when the event occurred
------
name:ultraschall.EventManager_CountRegisteredEvents
language:lua
return:(integer:count_of_registered_events)
params:
description:
Returns the number of currently registered events in the EventManager-checking-queue
RETURNS:
count_of_registered_events:the number of currently registered events
------
name:ultraschall.EventManager_GetLastUpdateTime
language:lua
return:(string:datetime),(number:precise_time)
params:
description:
Returns the last time, the eventlist in the EventManager had been updated in any way.
RETURNS:
datetime:the date and time of the last update, as returned by os.date()
precise_time:the last update time as number, as returned by reaper.time_precise()
------
name:ultraschall.EventManager_PauseEvent
language:lua
return:(boolean:retval)
params:(string:event_identifier)
description:
Pauses a registered event in the Ultraschall Event Manager-checking-queue.
returns false in case of an error
PARAMETERS:
event_identifier:the unique identifier of the registered event, which you want to pause in the EventManager
RETURNS:
retval:true, pausing was successful; false, pausing was unsuccessful
------
name:ultraschall.EventManager_ResumeEvent
language:lua
return:(boolean:retval)
params:(string:event_identifier)
description:
Resumes a registered and paused event in the Ultraschall Event Manager-checking-queue.
returns false in case of an error
PARAMETERS:
event_identifier:the unique identifier of the registered event, which you want to resume in the EventManager
RETURNS:
retval:true, resuming was successful; false, resuming was unsuccessful
------
name:ultraschall.EventManager_Start
language:lua
return:(boolean:retval)
params:
description:
Starts the Ultraschall-EventManager, if it has not been started yet.
RETURNS:
retval:true, EventManager has been started successfully; false, EventManager couldn't be started
------
name:ultraschall.EventManager_Stop
language:lua
return:
params:(optional boolean:force), (optional string:ScriptIdentifier)
description:
Unregisters the current script; will stop the EventManager if no scripts are registered anymore to the EventManager.
You can use the parameter force to force stopping of the EventManager immediately.
PARAMETERS:
force:true, stops the EventManager, even if other scripts have registered events to it; false or nil, don't force stop
ScriptIdentifier:if you want to unregister events from a different script, pass here the ScriptIdentifier of this script; nil, use the ScriptIdentifier of the current script
------
name:ultraschall.EventManager_AddStartupEvent
language:lua
return:(string:event_identifier)
params:(string:EventName), (integer:CheckAllXSeconds), (integer:CheckForXSeconds), (boolean:StartActionsOnceDuringTrue), (boolean:EventPaused), (function:CheckFunction), (table:Actions)
description:
Adds a new event, that shall be automatically registered at startup of the Ultraschall Event Manager.
That means, if you start the EventManager, it will be added automatically to the EventManager-checking-queue, without the need of registering it by hand.
returns nil in case of an error
PARAMETERS:
EventName:a name for the event, which you can choose freely; duplicated eventnames are allowed
CheckAllXSeconds:only check all x seconds; 0, for constant checking
CheckForXSeconds:only check for x seconds; 0, check until the event is removed
StartActionsOnceDuringTrue:if the event occurred: 
EventPaused:false, register the event and check for it immediately; true, register the event but don't check for it yet
CheckFunction:the function, which shall check if the event occurred
Actions:a table which holds all actions and their accompanying sections, who shall be run when the event occurred
RETURNS:
event_identifier:the unique identifier for this registered event, which can be used later for setting, deleting, etc
------
name:ultraschall.EventManager_RemoveStartupEvent2
language:lua
return:(boolean:retval)
params:(integer:id)
description:
Removes a startup-event from the config-file of the Ultraschall Event Manager.
returns false in case of an error
PARAMETERS:
id:the unique identifier of the startup event, which you want to remove from the EventManager-startup-procedure
RETURNS:
retval:true, removing was successful; false, removing was unsuccessful
------
name:ultraschall.EventManager_RemoveStartupEvent
language:lua
return:(boolean:retval)
params:(string:event_identifier)
description:
Removes a startup-event from the config-file of the Ultraschall Event Manager.
returns false in case of an error
PARAMETERS:
event_identifier:the unique identifier of the startup event, which you want to remove from the EventManager-startup-procedure
RETURNS:
retval:true, removing was successful; false, removing was unsuccessful
------
name:ultraschall.EventManager_CountStartupEvents
language:lua
return:(integer:count_startup_events)
params:
description:
Counts the currently available startup-events
RETURNS:
count_startup_events:the number of currently available start-up-events for the EventManager
------
name:ultraschall.EventManager_SetStartupEvent
language:lua
return:(string:event_identifier)
params:(string:EventIdentifier), (optional string:EventName), (optional integer:CheckAllXSeconds), (optional integer:CheckForXSeconds), (optional boolean:StartActionsOnceDuringTrue), (optional boolean:EventPaused), (optional function:CheckFunction), (optional table:Actions)
description:
Sets an already existing startupevent, that shall be automatically run at startup of the Ultraschall Event Manager.
That means, if you start the EventManager, it will be started automatically to the EventManager-checking-queue, without the need of registering it by hand.
returns nil in case of an error
PARAMETERS:
EventIdentifier:the EventIdentifier of the startup-event, which you want to set
EventName:a name for the event, which you can choose freely; duplicated eventnames are allowed; nil, to keep current name
CheckAllXSeconds:only check all x seconds; 0, for constant checking; nil, to keep current value
CheckForXSeconds:only check for x seconds; 0, check until the event is removed; nil, to keep current value
StartActionsOnceDuringTrue:if the event occurred: 
EventPaused:false, register the event and check for it immediately; true, register the event but don't check for it yet; nil, to keep current value
CheckFunction:the function, which shall check if the event occurred; nil, to keep current function
Actions:a table which holds all actions and their accompanying sections, who shall be run when the event occurred; nil, to keep current actionlist
RETURNS:
event_identifier:the unique identifier for this registered event, which can be used later for setting, deleting, etc
------
name:ultraschall.EventManager_GetPausedState2
language:lua
return:(boolean:paused_state)
params:(string:EventIdentifier)
description:
returns, if a certain event, currently registered in the EventManager, is paused(true) or not(false).
State is requested by EventIdentifier.
returns nil in case of an error
PARAMETERS:
EventIdentifier:the identifier of the registered event, whose pause state you want to retrieve
------
name:ultraschall.EventManager_GetPausedState
language:lua
return:(boolean:paused_state)
params:(integer:id)
description:
returns, if a certain event, currently registered in the EventManager, is paused(true) or not(false)
State is requested by number-id, with 1 for the first event, 2 for the second, etc.
returns nil in case of an error
PARAMETERS:
id:the id of the event, whose paused-state you want to retrieve; 1, the first event; 2, the second event, etc
------
name:ultraschall.EventManager_GetEventIdentifier
language:lua
return:(string:event_identifier)
params:(integer:id)
description:
returns the EventIdentifier of a registered event, by id
event is requested by number-id, with 1 for the first event, 2 for the second, etc.
returns nil in case of an error
PARAMETERS:
id:the id of the event, whose EventIdenrifier you want to retrieve; 1, the first event; 2, the second event, etc
------
name:ultraschall.EventManager_GetLastCheckfunctionState
language:lua
return:(boolean:check_state),(number:last_statechange_precise_time)
params:(integer:id)
description:
returns the last state the eventcheck-function returned the last time it was called; of a certain registered event in the EventManager.
State is requested by number-id, with 1 for the first event, 2 for the second, etc.
returns nil in case of an error; nil and time, if the EventCheck-function didn't return a boolean
PARAMETERS:
id:the id of the event, whose eventcheckfunction-retval you want to retrieve; 1, the first event; 2, the second event, etc
------
name:ultraschall.EventManager_GetRegisteredEventID
language:lua
return:(integer:id)
params:(string:EventIdentifier)
description:
returns the id of a registered event, meaning 1, if it's the first event, 2 if it's the second, etc
It is the position within all events currently registered within the EventManager.
returns nil in case of an error
PARAMETERS:
EventIdentifier:the EventIdentifier of the event, whose id you want to retrieve
------
name:ultraschall.EventManager_GetLastCheckfunctionState2
language:lua
return:(boolean:check_state),(number:last_statechange_precise_time)
params:(string:EventIdentifier)
description:
returns the last state the eventcheck-function returned the last time it was called; of a certain registered event in the EventManager.
State is requested by EventIdentifier
returns nil in case of an error; nil and time, if the EventCheck-function didn't return a boolean
PARAMETERS:
EventIdentifier:the EventIdentifier of the event, whose last checkfunction-state you want to retrieve
------
name:ultraschall.EventManager_DebugMode
language:lua
return:
params:(boolean:toggle)
description:
Starts Debugmode of the EventManager, which returns additional internal states.
Allows you to get the contents of the UserSpace of a certain checkfunction of a registered event, see EventManager_DebugMode_UserSpace.
Note: Debugmode is not for productive usecases, as it costs resources. Please turn it off again, after you've finished debugging.
PARAMETERS:
toggle:true, turn debugmode on; false, turn debugmode off
------
name:ultraschall.EventManager_DebugMode_UserSpace
language:lua
return:(integer:userspace_count),(table:userspace)
params:(integer:index)
description:
Returns the current contents of the UserSpace, as stored by the checkfunction of a registered event in the EventManager.
The table is of the format:
userspace[index]["index"]    - the name of the index
userspace[index]["datatype"] - the datatype of the value in this userspace-index
userspace[index]["value"]    - the value in this userspace-index
Note: Debugmode is not for productive usecases, as it costs resources. Please turn it off again, after you've finished debugging.
See EventManager\_DebugMode for more details on stopping DebugMode.
returns nil in case of an error
PARAMETERS:
index:the index of the event, whose UserSpace you want to retrieve
RETURNS:
userspace_count:the number of values within the userspace
userspace:the contents of the userspace as a handy table
------
name:ultraschall.ReadFullFile
language:lua
return:(string:contents),(integer:length_of_file),(integer:number_of_lines)
params:(string:filename_with_path), (boolean:binary)
description:
Return contents of filename_with_path.
Returns nil in case of an error.
PARAMETERS:
filename_with_path:filename of the file to be read
binary:true if the file shall be read as a binary file; false if read as ASCII. Default is ASCII.
RETURNS:
contents:the contents of the whole file.
length_of_file:the number of bytes of the file
number_of_lines:number of lines in file (-1 if parameter binary is set to true)
------
name:ultraschall.ReadValueFromFile
language:lua
return:(string:contents),(string:linenumbers),(integer:numberoflines),(integer:number_of_foundlines)
params:(string:filename_with_path), (string:value)
description:
Return contents of filename_with_path.
If "value" is given, it will return all lines, containing the value in the file "filename_with_path".
The second line-numbers return-value is very valuable when giving a "value". "Value" is not case-sensitive.
The value can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
PARAMETERS:
filename_with_path:filename of the file to be read
value:the value to look in the file for. Not case-sensitive.
RETURNS:
contents:the contents of the file, or the lines that contain parameter value in it, separated by a newline
linenumbers:a string, that contains the linenumbers returned as a , separated csv-string
numberoflines:the total number of lines in the file
number_of_foundlines:the number of found lines
------
name:ultraschall.ReadLinerangeFromFile
language:lua
return:(string:contents),(boolean:correctnumberoflines),(integer:number_of_lines)
params:(string:filename_with_path), (integer:firstlinenumber), (integer:lastlinenumber)
description:
Return contents of filename_with_path, from firstlinenumber to lastlinenumber. Counting of linenumbers starts with 1 for the first line.
The returned string contains all requested lines, separated by a newline.
Returns nil, if the linenumbers are invalid.
PARAMETERS:
filename_with_path:filename of the file to be read
firstlinenumber:the first linenumber to be returned. First line in the file begins with 1!
lastlinenumber:the last linenumber to be returned; -1, for the whole file
RETURNS:
contents:the contents the lines of the file, that you requested
correctnumberoflines:true, if the number of lines are returned, as requested; false if fewer lines are returned
number_of_lines:the number of read lines
------
name:ultraschall.MakeCopyOfFile
language:lua
return:(boolean:retval)
params:(string:input_filename_with_path), (string:output_filename_with_path)
description:
Copies input_filename_with_path to output_filename_with_path.
Only textfiles! For binary-files use MakeCopyOfFile_Binary() instead!
Returns true, if it worked, false if it didn't.
PARAMETERS:
input_filename_with_path:filename of the file to copy
output_filename_with_path:filename of the copied file to be created.
RETURNS:
retval:true, if copy worked, false if it didn't.
------
name:ultraschall.MakeCopyOfFile_Binary
language:lua
return:(boolean:retval)
params:(string:input_filename_with_path), (string:output_filename_with_path)
description:
Copies input_filename_with_path to output_filename_with_path as binary-file.
returns false in case of an error
PARAMETERS:
input_filename_with_path:filename of the file to copy
output_filename_with_path:filename of the copied file, that shall be created
RETURNS:
retval:returns true, if copy worked; false if it didn't
------
name:ultraschall.ReadBinaryFileUntilPattern
language:lua
return:(integer:length),(string:content)
params:(string:input_filename_with_path), (string:pattern)
description:
Returns a binary file, up until a pattern. The pattern is not case-sensitive.
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
returns false in case of an error
PARAMETERS:
pattern:a pattern to search for. Case-sensitive.
RETURNS:
length:the length of the returned data
content:the content of the file, that has been read until pattern
------
name:ultraschall.ReadBinaryFileFromPattern
language:lua
return:(integer:length),(string:content)
params:(string:input_filename_with_path), (string:pattern)
description:
Returns a binary file, from pattern onwards. The pattern is not case-sensitive.
The pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc
returns false in case of an error
PARAMETERS:
pattern:a pattern to search for. Case-sensitive.
RETURNS:
length:the length of the returned data
content:the content of the file, that has been read from pattern to the end
------
name:ultraschall.CountLinesInFile
language:lua
return:(integer:linesinfile)
params:(string:filename_with_path)
description:
Counts lines in a textfile. In binary files, the number of lines may be weird and unexpected!
Returns -1, if no such file exists.
PARAMETERS:
filename_with_path:filename of the file to be read
RETURNS:
linesinfile:number of lines in a textfile; -1 in case of error
------
name:ultraschall.ReadFileAsLines_Array
language:lua
return:(array:contents),(boolean:correctnumberoflines),(integer:number_of_lines)
params:(string:filename_with_path), (integer:firstlinenumber), (integer:lastlinenumber)
description:
Return contents of filename_with_path, from firstlinenumber to lastlinenumber as an array. Counting of linenumbers starts with 1 for the first line.
The returned array contains all requested lines, which each entry holding one returned line.
Returns nil, if the linenumbers are invalid.
PARAMETERS:
filename_with_path:filename of the file to be read
firstlinenumber:the first linenumber to be returned. First line in the file begins with 1!
lastlinenumber:the last linenumber to be returned; -1, read all lines in the file
RETURNS:
contents:the contents the lines of the file, that you requested as an array, in which each entry hold one line of the file
correctnumberoflines:true, if the number of lines are returned, as you requested; false if fewer lines are returned
number_of_lines:the number of lines returned
------
name:ultraschall.ReadBinaryFile_Offset
language:lua
return:(integer:length),(string:content)
params:(string:input_filename_with_path), (integer:startoffset), (integer:numberofbytes)
description:
Returns the contents of a binary file from startoffset until startoffset+numberofbytes.
When setting startoffset to a negative value, it will read from the end of the file, means:
-100 will start -100 characters before the end of the file and numberofbytes will read from that point on
Returns false, if file can not be opened.
PARAMETERS:
input_filename_with_path:filename of the file to be read
startoffset:the offset, at where to begin the fileread. 0 for the beginning of the file; negative values set offset from the end of the file
numberofbytes:the number of bytes to read. -1 for until the end of the file. If there are fewer bytes than requested, the returned string will be shorter.
RETURNS:
length:the length of the returned part of the file, might be shorter than requested, if file ends before
content:the content of the file, that has been read
------
name:ultraschall.GetLengthOfFile
language:lua
return:(integer:lengthoffile)
params:(string:filename_with_path)
description:
Returns the length of the file filename_with_path in bytes.
Will return -1, if no such file exists.
PARAMETERS:
filename_with_path:filename to write the value to
RETURNS:
lengthoffile:the length of the file in bytes. -1 in case of error
------
name:ultraschall.CountDirectoriesAndFilesInPath
language:lua
return:(integer:filecount),(integer:dircount)
params:(string:path)
description:
returns the number of files and directories in path
returns -1, in case of error
PARAMETERS:
path:the path to count the files and directories from
RETURNS:
filecount:the number of files found in path
dircount:the number of directories found in path
------
name:ultraschall.GetAllFilenamesInPath
language:lua
return:(integer:filecount),(array:files)
params:(string:path)
description:
returns the number of files and the filenames in path
returns -1, in case of error
PARAMETERS:
path:the path to get the filenames from
RETURNS:
filecount:the number of files found in path
files:the filenames found in path
------
name:ultraschall.GetAllDirectoriesInPath
language:lua
return:(integer:filecount),(array:directories)
params:(string:path)
description:
returns the number of directories and the directorynames in path
returns -1, in case of error
PARAMETERS:
path:the path to get the directories from
RETURNS:
filecount:the number of directories found in path
------
name:ultraschall.CheckForValidFileFormats
language:lua
return:(string:fileformat),(boolean:supported_by_reaper),(string:mediatype)
params:(string:filename_with_path)
description:
Returns the fileformat of a Reaper-supported-file, images, audios(opus and m4a missing, though!), and video(mp4-video missing, though!).
Note: Checks the file itself and does not check for correct file-extension. Reaper needs the correct file-extension or it can't read an otherwise valid imagefile.
For example: if you want to import a GIF, renamed to filename.JPG, Reaper will not be able to read it. Only when the extension is the same as the file itself(filename.GIF).
Returns nil in case of an error
PARAMETERS:
filename_with_path:the file to check for it's image-fileformat
RETURNS:
fileformat:the format of the file; JPG, PNG, GIF, LCF, ICO, WAV, AIFF, ASF/WMA/WMV, MP3, MP3 -ID3TAG, FLAC, MKV/MKA/MKS/MK3D/WEBM, AVI, RPP_PROJECT, unknown
supported_by_reaper:true, if importing of the fileformat is supported by Reaper; false, if not
mediatype:the type of the media; Image, Audio, Audio/Video, Video, Reaper
------
name:ultraschall.DirectoryExists
language:lua
return:(boolean:retval)
params:(string:path), (string:directory)
description:
Checks, if a directory exists in path.
On Linux: path and directory are case-sensitive!
Returns false in case of error.
PARAMETERS:
path:the path, in which to look for the existence of parameter directory
directory:the name of the directory to check for in path
RETURNS:
retval:true, directory exists; false, directory does not exist
------
name:ultraschall.OnlyFilesOfCertainType
language:lua
return:(integer:foundfilecount),(array:foundfilearray)
params:(array:filearray), (string:filetype)
description:
Returns the filenames_with_path from a filearray, that are of a certain filetype
returns -1 in case of an error
PARAMETERS:
filearray:an array with files to check for; index is 1-based
RETURNS:
foundfilecount:the number of files that contain the right filetype
foundfilearray:an array with all the files that contain the right filetype
------
name:ultraschall.GetReaperWorkDir
language:lua
return:(string:current_workdir)
params:
description:
returns the current workdir, which is the directory. If you create a file without giving a path, this file will be created in this work-dir.
RETURNS:
current_workdir:the current workdir of Reaper
------
name:ultraschall.DirectoryExists2
language:lua
return:(boolean:retval)
params:(string:Path)
description:
returns, if Path is an existing path.
returns false in case of an error
PARAMETERS:
Path:the path to check for
RETURNS:
retval:true, if path exists; false, if not
------
name:ultraschall.SetReaperWorkDir
language:lua
return:(boolean:retval)
params:(string:Path)
description:
sets a new current working directory for Reaper. This requires a restart of Reaper to take effect, due API-limitations!
returns false in case of an error
PARAMETERS:
Path:the path to set as new current working directory
RETURNS:
retval:true, if path could be set; false, if not
------
name:ultraschall.CreateValidTempFile
language:lua
return:(string:tempfilename)
params:(string:filename_with_path), (boolean:create), (string:suffix), (boolean:retainextension)
description:
Tries to determine a valid temporary filename. Will check filename_with_path with an included number between 0 and 16384 to create such a filename.
You can also add your own suffix to the filename.
The pattern is: filename_with_path$Suffix~$number.ext (when retainextension is set to true!)
If you wish, you can also create this temporary-file as an empty file.
The path of the tempfile is always the same as the original file.
Returns nil in case of failure.
PARAMETERS:
filename_with_path:the original filename
create:true, if you want to create that temporary file as an empty file; false, just return the filename
suffix:if you want to alter the temporary filename with an additional suffix, use this parameter
retainextension:true, keep the extension(if existing) at the end of the tempfile; false, just add the suffix~number at the end.
RETURNS:
tempfilename:the valid temporary filename found
------
name:ultraschall.WriteValueToFile_Insert
language:lua
return:(integer:retval)
params:(string:filename_with_path), (integer:linenumber), (string:value)
description:
Inserts value into a file at linenumber. All lines, up to linenumber-1 come before value, all lines at linenumber to the end of the file will come after value.
Will return -1, if no such line exists.
Note: non-binary-files only!
PARAMETERS:
filename_with_path:filename to write the value to
linenumber:the linenumber, at where to insert the value into the file
value:the value to be inserted into the file
RETURNS:
retval:1, in case of success, -1 in case of error
------
name:ultraschall.WriteValueToFile_Replace
language:lua
return:(integer:retval)
params:(string:filename_with_path), (integer:startlinenumber), (integer:endlinenumber), (string:value)
description:
Replaces the linenumbers startlinenumber to endlinenumber in a file with value. All lines, up to startlinenumber-1 come before value, all lines at endlinenumber+1 to the end of the file will come after value.
Will return -1, if no such lines exists.
Note: non-binary-files only!
PARAMETERS:
filename_with_path:filename to write the value to
startlinenumber:the first linenumber, to be replaced with value in the file
endlinenumber:the last linenumber, to be replaced with value in the file
value:the value to be inserted into the file
RETURNS:
retval:1, in case of success, -1 in case of error
------
name:ultraschall.WriteValueToFile_InsertBinary
language:lua
return:(integer:retval)
params:(string:filename_with_path), (integer:byteposition), (string:value)
description:
Inserts value into a file at byteposition. All bytes, up to byteposition-1 come before value, all bytes at byteposition to the end of the file will come after value.
Will return -1, if no such line exists.
Note: good for binary files
PARAMETERS:
filename_with_path:filename to write the value to
byteposition:the byteposition, at where to insert the value into the file
value:the value to be inserted into the file
RETURNS:
retval:1, in case of success, -1 in case of error
------
name:ultraschall.WriteValueToFile_ReplaceBinary
language:lua
return:(integer:retval)
params:(string:filename_with_path), (integer:startbyteposition), (integer:endbyteposition), (string:value)
description:
Replaces content in the file from startbyteposition to endbyteposition-1 with value. All bytes, up to startbyteposition-1 come before value, all bytes from (and including)endbyteposition to the end of the file will come after value.
Will return -1, if no such line exists.
Note: good for binary files
PARAMETERS:
filename_with_path:filename to write the value to
startbyteposition:the first byte in the file to be replaced, starting with 1, if you want to replace at the beginning of the file. Everything before startposition will be kept.
endbyteposition:the first byte after the replacement. Everything from endbyteposition to the end of the file will be kept.
value:the value to be inserted into the file
RETURNS:
retval:1, in case of success, -1 in case of error
------
name:ultraschall.GetAllRecursiveFilesAndSubdirectories
language:lua
return:(integer:found_dirs),(array:dirs_array),(integer:found_files),(array:files_array)
params:(string:path)
description:
Returns all subdirectories and files within a given path.
Might take some time with many folders/files.
Returns -1 in case of an error.
PARAMETERS:
path:the path from where to retrieve the files and subdirectories
RETURNS:
found_dirs:the number of directories found; -1, in case of an error
dirs_array:the full path to the found directories as an array
found_files:the number of files found
files_array:the full path to the found files as an array
------
name:ultraschall.SaveSubtitles_SRT
language:lua
return:(integer:retval)
params:(string:subtitle_filename_with_path), (table:subtitle_table)
description:
saves the subtitles from the subtitle-table.
The subtitles-table is expected to be of the following format:
subtitle_table[subtitle_index]["start"]   = starttime in seconds
subtitle_table[subtitle_index]["end"]     = endtime in seconds
subtitle_table[subtitle_index]["caption"] = the caption, which shall be shown from start to end-time
returns -1 in case of an error
PARAMETERS:
subtitle_filename_with_path:the filename of the subtitle-file, into which you want to store the subtitles
------
name:ultraschall.ReadSubtitles_SRT
language:lua
return:(integer:Captions_Counter),(table:Captions)
params:(string:filename_with_path)
description:
parses an srt-subtitle-file and returns its contents as table
returns nil in case of an error
PARAMETERS:
filename_with_path:the filename with path of the subrip srt-file
RETURNS:
Captions_Counter:the number of captions in the file
Captions:the Captions as a table of the format:
------
name:ultraschall.MoveFileOrFolder
language:lua
return:(boolean:retval)
params:(string:file_foldername), (string:oldpath), (string:newpath)
description:
Moves a file or folder from oldpath to newpath.
returns false in case of an error
PARAMETERS:
file_foldername:the folder- or filename, which you want to move
oldpath:the old path, in which the file or folder is located
newpath:the new path, into which the file or folder shall be moved
RETURNS:
retval:true, moving was successful; false, moving was unsuccessful
------
name:ultraschall.IsValidFXStateChunk
language:lua
return:(boolean:retval)
params:(string:StateChunk)
description:
Returns, if a StateChunk is a valid FXStateChunk.
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
Returns false in case of an error
PARAMETERS:
StateChunk:the StateChunk, which you want to check, whether it's a valid FXStateChunk
RETURNS:
retval:true, it is a valid FXStateChunk; false, it is not
------
name:ultraschall.GetFXFromFXStateChunk
language:lua
return:(string:fx)
params:(string:FXStateChunk), (integer:id)
description:
Returns all lines of a specific TrackFX/ItemFX from a StateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
Returns nil in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the FX-entries
id:the id of the FX-entries you want to have, starting with 1 for the first
RETURNS:
fx:all lines of an fx from a statechunk
------
name:ultraschall.GetParmLearn_FXStateChunk
language:lua
return:(integer:parm_idx),(string:parmname),(integer:midi_note),(integer:checkboxflags),(optional string:osc_message)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Returns a parameter-learn-setting from an FXStateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
It is the PARMLEARN-entry
Returns nil in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the ParmLearn-settings
fxid:the fx, of which you want to get the parameter-learn-settings
id:the id of the ParmLearn-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parmname:the name of the parameter, though usually only wet or bypass
midi_note:an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLearn
------
name:ultraschall.GetParmLearn_MediaItem
language:lua
return:(integer:parm_idx),(string:parmname),(integer:midi_note),(integer:checkboxflags),(optional string:osc_message)
params:(MediaItem:MediaItem), (integer:fxid), (integer:id)
description:
Returns a parameter-learn-setting from a MediaItem
It is the PARMLEARN-entry
Returns nil in case of an error
PARAMETERS:
MediaItem:the MediaItem, whose ParmLearn-setting you want to get
fxid:the fx, of which you want to get the parameter-learn-settings
id:the id of the ParmLearn-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parmname:the name of the parameter, though usually only wet or bypass
midi_note:an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLearn
------
name:ultraschall.GetParmLearn_MediaTrack
language:lua
return:(integer:parm_idx),(string:parmname),(integer:midi_note),(integer:checkboxflags),(optional string:osc_message)
params:(MediaTrack:MediaTrack), (integer:fxid), (integer:id)
description:
Returns a parameter-learn-setting from a MediaTrack
It is the PARMLEARN-entry
Returns nil in case of an error
PARAMETERS:
MediaTrack:the MediaTrack, whose ParmLearn-setting you want to get
fxid:the fx, of which you want to get the parameter-learn-settings
id:the id of the ParmLearn-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parmname:the name of the parameter, though usually only wet or bypass
midi_note:an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-messages
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLearn
------
name:ultraschall.GetParmAlias_FXStateChunk
language:lua
return:(integer:parm_idx),(string:parm_aliasname)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Returns a parameter-alias-setting from an FXStateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
Parameter-aliases are only stored for MediaTracks.
It is the PARMALIAS-entry
Returns nil in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the ParmAlias-settings
fxid:the fx, of which you want to get the parameter-alias-settings
id:the id of the ParmAlias-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parm_aliasname:the alias-name of the parameter
------
name:ultraschall.GetParmAlias_MediaTrack
language:lua
return:(integer:parm_idx),(string:parm_aliasname)
params:(MediaTrack:MediaTrack), (integer:fxid), (integer:id)
description:
Returns a parameter-aliasname-setting from a MediaTrack
It is the PARMALIAS-entry
Returns nil in case of an error
PARAMETERS:
MediaTrack:the MediaTrack, whose ParmAlias-setting you want to get
fxid:the fx, of which you want to get the parameter-alias-settings
id:the id of the ParmAlias-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parm_aliasname:the alias-name of the parameter
------
name:ultraschall.GetParmModulationChunk_FXStateChunk
language:lua
return:(string:parm_modulation_chunk)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Returns a parameter-modulation-chunk from an FXStateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
It's the
string parm_modulation_chunk - a chunk of the parameter-modulation settings
string FXStateChunk - the FXStateChunk, from which you want to retrieve the Parameter-modulation-settings
integer fxid - the fx, of which you want to get the parameter-modulation-chunk-settings
integer id - the id of the Parameter-modulation you want to have, starting with 1 for the first
FX-Management
Parameter Mapping
US_Api_Functions
Modules/ultraschall_functions_FXManagement_Module.lua
fxmanagement, get, parameter, modulation, fxstatechunk
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the Parameter-modulation-settings
fxid:the fx, of which you want to get the parameter-modulation-chunk-settings
id:the id of the Parameter-modulation you want to have, starting with 1 for the first
RETURNS:
parm_modulation_chunk:a chunk of the parameter-modulation settings
------
name:ultraschall.GetParmLFOLearn_FXStateChunk
language:lua
return:(integer:parm_idx),(string:parmname),(integer:midi_note),(integer:checkboxflags),(optional string:osc_message)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Returns a parameter-lfo-learn-setting from an FXStateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
It is the LFOLEARN-entry
Returns nil in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the ParmLFOLearn-settings
fxid:the fx, of which you want to get the parameter-lfo-learn-settings
id:the id of the ParmLFOLearn-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parmname:the name of the parameter, though usually only wet or bypass
midi_note:an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLFOLearn
------
name:ultraschall.GetParmLFOLearn_MediaItem
language:lua
return:(integer:parm_idx),(string:parmname),(integer:midi_note),(integer:checkboxflags),(optional string:osc_message)
params:(MediaItem:MediaItem), (integer:fxid), (integer:id)
description:
Returns a parameter-lfo-learn-setting from a MediaItem
It is the LFOLEARN-entry
Returns nil in case of an error
PARAMETERS:
MediaItem:the MediaItem, whose ParmLFOLearn-setting you want to get
fxid:the fx, of which you want to get the parameter-lfo-learn-settings
id:the id of the ParmLFOLearn-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parmname:the name of the parameter, though usually only wet or bypass
midi_note:an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLFOLearn
------
name:ultraschall.GetParmLFOLearn_MediaTrack
language:lua
return:(integer:parm_idx),(string:parmname),(integer:midi_note),(integer:checkboxflags),(optional string:osc_message)
params:(MediaTrack:MediaTrack), (integer:fxid), (integer:id)
description:
Returns a parameter-lfo-learn-setting from a MediaTrack
It is the LFOLEARN-entry
Returns nil in case of an error
PARAMETERS:
MediaTrack:the MediaTrack, whose ParmLFOLearn-setting you want to get
fxid:the fx, of which you want to get the parameter-lfo-learn-settings
id:the id of the ParmLFOLearn-settings you want to have, starting with 1 for the first
RETURNS:
parm_idx:the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn
parmname:the name of the parameter, though usually only wet or bypass
midi_note:an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-messages
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLFOLearn
------
name:ultraschall.GetParmAudioControl_FXStateChunk
language:lua
return:(integer:parmidx),(string:parmname),(integer:parameter_modulation),(number:parmbase),(integer:audioctrl),(number:audioctrlstrength),(integer:audioctrl_direction),(integer:channels),(integer:stereo),(integer:rms_attack),(integer:rms_release),(number:db_lo),(number:db_hi),(number:audioctrlshaping_x),(number:audioctrlshaping_y)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Returns the parameter-modulation-settings of the Audio control signal-settings from an FXStateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
It is entries from the
integer parmidx - the id of the parameter, that shall be modulated; order like in the dropdownlist
string parmname - the name of the parameter, usually bypass or wet
integer parameter_modulation - the "Enable parameter modulation, baseline value(envelope overrides)"-checkbox; 0, enabled; 1, disabled
number parmbase - parameter-modulation-baseline-slider; between 0.0000 and 1.0000; default is 0.2500
integer audioctrl - "Audio control signal (sidechain)"-checkbox - 0, disabled; 1, enabled
number audioctrlstrength - the strength-slider for AudioControlSignal; 0.0000(0%) to 1.000(100%); 0.493(49.3%); default is 1
integer audioctrl_direction - the direction-radiobuttons for AudioControlSignal; -1, Negative; 0, Centered; 1, Positive
integer channels - the Track audio channel-dropdownlist; linked to entry parameter stereo as well
- -1, no channel selected(yet) (default)
- 0 and higher, track 1 and higher is selected
integer stereo - linked to channels as well
- 0, mono(use only the channel set in CHAN); 1, stereo(use the channel set in CHAN and CHAN+1)
integer rms_attack - rms attack in milliseconds; 0 to 1000; default is 300
integer rms_release - rms release in milliseconds; 0 to 1000; default is 300
number db_lo - db_lo decides the lowest value possible for parameter db_hi; db_hi decides the highest volume for db_lo
- Min volume-slider in dB; maximum valuerange possible is -60dB to 11.9dB
number db_hi - db_lo decides the lowest value possible for parameter db_hi; db_hi decides the highest volume for db_lo
- Max volume-slider in dB; maximum valuerange possible is -59.9dB to 12dB
number audioctrlshaping_x - the x-position of the shaping-dragging-point; between 0.000000 and 1.000000
number audioctrlshaping_y - the y-position of the shaping-dragging-point; between 0.000000 and 1.000000
string FXStateChunk - the FXStateChunk, from which you want to retrieve the ParmModulation-settings
integer fxid - the fx, of which you want to get the parameter-modulation-settings
integer id - the id of the ParmModulation-settings you want to have, starting with 1 for the first
FX-Management
Parameter Mapping
US_Api_Functions
Modules/ultraschall_functions_FXManagement_Module.lua
fxmanagement, get, parameter, modulation, fxstatechunk, audio control signal
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the ParmModulation-settings
fxid:the fx, of which you want to get the parameter-modulation-settings
id:the id of the ParmModulation-settings you want to have, starting with 1 for the first
RETURNS:
parmidx:the id of the parameter, that shall be modulated; order like in the dropdownlist
parmname:the name of the parameter, usually bypass or wet
parameter_modulation:the "Enable parameter modulation, baseline value(envelope overrides)"-checkbox; 0, enabled; 1, disabled
parmbase:parameter-modulation-baseline-slider; between 0.0000 and 1.0000; default is 0.2500
audioctrl:the y-position of the shaping-dragging-point; between 0.000000 and 1.000000
audioctrlstrength:the strength-slider for AudioControlSignal; 0.0000(0%) to 1.000(100%); 0.493(49.3%); default is 1
audioctrl_direction:the direction-radiobuttons for AudioControlSignal; -1, Negative; 0, Centered; 1, Positive
channels:the Track audio channel-dropdownlist; linked to entry parameter stereo as well
stereo:linked to channels as well
rms_attack:rms attack in milliseconds; 0 to 1000; default is 300
rms_release:rms release in milliseconds; 0 to 1000; default is 300
db_lo:db_lo decides the lowest value possible for parameter db_hi; db_hi decides the highest volume for db_lo
db_hi:db_lo decides the lowest value possible for parameter db_hi; db_hi decides the highest volume for db_lo
audioctrlshaping_x:the x-position of the shaping-dragging-point; between 0.000000 and 1.000000
audioctrlshaping_y:the y-position of the shaping-dragging-point; between 0.000000 and 1.000000
------
name:ultraschall.GetParmLFO_FXStateChunk
language:lua
return:(integer:parmidx),(string:parmname),(integer:parameter_modulation),(number:parmbase),(integer:lfo),(number:lfo_strength),(integer:lfo_direction),(integer:lfo_shape),(integer:temposync),(integer:unknown),(integer:phase_reset),(number:lfo_speed),(number:lfo_speedphase)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Returns the parameter-modulation-settings of the LFO-settings from an FXStateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
It is entries from the
integer parmidx - the id of the parameter, that shall be modulated; order like in the dropdownlist
string parmname - the name of the parameter, usually bypass or wet
integer parameter_modulation - the "Enable parameter modulation, baseline value(envelope overrides)"-checkbox; 0, enabled; 1, disabled
number parmbase - parameter-modulation-baseline-slider; between 0.0000 and 1.0000; default is 0.2500
integer lfo - LFO checkbox; 0, disabled; 1, enabled
number lfo_strength - Strength-slider in the LFO parameter-modulation; 0.0000(0%) to 1.000(100%); 0.493(49.3%); default is 1
integer lfo_direction - Direction-radiobuttons in the LFO parameter modulation; -1, Negative; 0, Centered; 1, Positive
integer lfo_shape - the shape of the LFO
- 0, sine
- 1, square
- 2, saw L
- 3, saw R
- 4, triangle
- 5, random
integer temposync - the Tempo sync-checkbox in the LFO parameter-modulation; 0, disabled; 1, enabled
integer unknown - unknown
integer phase_reset - phase-reset-dropdownlist
- 0, On seek/loop (deterministic output)
- 1, Free-running (non-deterministic output)
number lfo_speed - Speed-slider in the LFO parameter-modulation; either Hz(temposync=0) or QN(temposync=1)
- Hz: 0(0.0039Hz) to 1(8.0000Hz); higher values are possible, lower values go into negative; default is 0.124573(1.0000Hz)
- QN: 0(8.0000QN) to 1(0.2500QN); lower values are possible; higher values go into negative; default is 0.9(1.0000QN)
number lfo_speedphase - Phase-slider in the LFO parameter-modulation; 0.000 to to 1.000; default is 0.5
string FXStateChunk - the FXStateChunk, from which you want to retrieve the ParmModulation-settings
integer fxid - the fx, of which you want to get the parameter-modulation-settings
integer id - the id of the ParmModulation-settings you want to have, starting with 1 for the first
FX-Management
Parameter Mapping
US_Api_Functions
Modules/ultraschall_functions_FXManagement_Module.lua
fxmanagement, get, parameter, modulation, fxstatechunk, lfo
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the ParmModulation-settings
fxid:the fx, of which you want to get the parameter-modulation-settings
id:the id of the ParmModulation-settings you want to have, starting with 1 for the first
RETURNS:
parmidx:the id of the parameter, that shall be modulated; order like in the dropdownlist
parmname:the name of the parameter, usually bypass or wet
parameter_modulation:the "Enable parameter modulation, baseline value(envelope overrides)"-checkbox; 0, enabled; 1, disabled
parmbase:parameter-modulation-baseline-slider; between 0.0000 and 1.0000; default is 0.2500
lfo:Phase-slider in the LFO parameter-modulation; 0.000 to to 1.000; default is 0.5
lfo_strength:Strength-slider in the LFO parameter-modulation; 0.0000(0%) to 1.000(100%); 0.493(49.3%); default is 1
lfo_direction:Direction-radiobuttons in the LFO parameter modulation; -1, Negative; 0, Centered; 1, Positive
lfo_shape:the shape of the LFO
temposync:the Tempo sync-checkbox in the LFO parameter-modulation; 0, disabled; 1, enabled
unknown:unknown
phase_reset:phase-reset-dropdownlist
lfo_speed:Phase-slider in the LFO parameter-modulation; 0.000 to to 1.000; default is 0.5
lfo_speedphase:Phase-slider in the LFO parameter-modulation; 0.000 to to 1.000; default is 0.5
------
name:ultraschall.GetParmMIDIPLink_FXStateChunk
language:lua
return:(integer:parmidx),(string:parmname),(integer:parameter_modulation),(number:parmbase),(boolean:plink_enabled),(number:scale),(integer:midi_fx_idx),(integer:midi_fx_idx2),(integer:linked_parmidx),(number:offset),(optional integer:bus),(optional integer:channel),(optional integer:category),(optional integer:midi_note)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Returns the parameter-modulation-settings of the Parameter-Link-Modulation-settings from an FXStateChunk
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
It is entries from the
integer parmidx - the id of the parameter, that shall be modulated; order like in the dropdownlist
string parmname - the name of the parameter, usually bypass or wet
integer parameter_modulation - the "Enable parameter modulation, baseline value(envelope overrides)"-checkbox; 0, enabled; 1, disabled
number parmbase - parameter-modulation-baseline-slider; between 0.0000 and 1.0000; default is 0.2500
boolean plink_enabled - true, parameter-linking is enabled; false, parameter linking is disabled
number scale - the scale-slider; -1.00(-100%) to 1.00(100%); default is 0(0%)
integer midi_fx_idx - the big MIDI/FX-button in the "Link from MIDI or FX parameter"-area
-  -1, nothing selected
-  -100, MIDI-parameter-settings
-  0 - the first fx
-  1 - the second fx
-  2 - the third fx, etc
integer midi_fx_idx2 - the big MIDI/FX-button in the "Link from MIDI or FX parameter"-area; Reaper stores the idx for idx using two values, where this is the second one
- it is unknown why, so I include it in here anyway
-  -1, nothing selected
-  -100, MIDI-parameter-settings
-  0 - the first fx
-  1 - the second fx
-  2 - the third fx, etc
integer linked_parmidx - the parameter idx, that you want to link;
- When MIDI:
-     16
- When FX-parameter:
-     0 to n; 0 for the first; 1, for the second, etc
number offset - Offset-slider; -1.00(-100%) to 1.00(100%); default is 0(0%)
optional integer bus - the MIDI-bus; 0 to 15 for bus 1 to 16; only available, when midi_fx_idx=-100, otherwise nil
optional integer channel - the MIDI-channel; 0, omni; 1 to 16 for channel 1 to 16; only available, when midi_fx_idx=-100, otherwise nil
optional integer category - the MIDI-category, which affects the meaning of parameter midi_note; only available, when midi_fx_idx=-100, otherwise nil
- 144, MIDI note
- 160, Aftertouch
- 176, CC 14Bit and CC
- 192, Program Change
- 208, Channel Pressure
- 224, Pitch
optional integer midi_note - the midi_note/command, whose meaning depends on parameter category; only available, when midi_fx_idx=-100, otherwise nil
-   When MIDI note:
-        0(C-2) to 127(G8)
-   When Aftertouch:
-        0(C-2) to 127(G8)
-   When CC14 Bit:
-        128 to 159; see dropdownlist for the commands(the order of the list is the same as this numbering)
-   When CC:
-        0 to 119; see dropdownlist for the commands(the order of the list is the same as this numbering)
-   When Program Change:
-        0
-   When Channel Pressure:
-        0
-   When Pitch:
-        0
string FXStateChunk - the FXStateChunk, from which you want to retrieve the ParmLinkModulation-settings
integer fxid - the fx, of which you want to get the parameter-linking-modulation-settings
integer id - the id of the ParmLinkModulation-settings you want to have, starting with 1 for the first
FX-Management
Parameter Mapping
US_Api_Functions
Modules/ultraschall_functions_FXManagement_Module.lua
fxmanagement, get, parameter, linking, linked, midi, fx, modulation, fxstatechunk, lfo
PARAMETERS:
FXStateChunk:the FXStateChunk, from which you want to retrieve the ParmLinkModulation-settings
fxid:the fx, of which you want to get the parameter-linking-modulation-settings
id:the id of the ParmLinkModulation-settings you want to have, starting with 1 for the first
RETURNS:
parmidx:the parameter idx, that you want to link; 
parmname:the name of the parameter, usually bypass or wet
parameter_modulation:the "Enable parameter modulation, baseline value(envelope overrides)"-checkbox; 0, enabled; 1, disabled
parmbase:parameter-modulation-baseline-slider; between 0.0000 and 1.0000; default is 0.2500
plink_enabled:true, parameter-linking is enabled; false, parameter linking is disabled
scale:the scale-slider; -1.00(-100%) to 1.00(100%); default is 0(0%)
midi_fx_idx:the big MIDI/FX-button in the "Link from MIDI or FX parameter"-area; Reaper stores the idx for idx using two values, where this is the second one
midi_fx_idx2:the big MIDI/FX-button in the "Link from MIDI or FX parameter"-area; Reaper stores the idx for idx using two values, where this is the second one
linked_parmidx:the parameter idx, that you want to link; 
offset:Offset-slider; -1.00(-100%) to 1.00(100%); default is 0(0%) 
bus:the MIDI-bus; 0 to 15 for bus 1 to 16; only available, when midi_fx_idx=-100, otherwise nil
channel:the MIDI-channel; 0, omni; 1 to 16 for channel 1 to 16; only available, when midi_fx_idx=-100, otherwise nil
category:the MIDI-category, which affects the meaning of parameter midi_note; only available, when midi_fx_idx=-100, otherwise nil
midi_note:the midi_note/command, whose meaning depends on parameter category; only available, when midi_fx_idx=-100, otherwise nil
------
name:ultraschall.ScanDXPlugins
language:lua
return:
params:(optional boolean:re_scan)
description:
(Re-)scans all DX-Plugins.
------
name:ultraschall.DeleteParmLearn_FXStateChunk
language:lua
return:(boolean:retval),(string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Deletes a ParmLearn-entry from an FXStateChunk.
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, which you want to delete a ParmLearn from
fxid:the id of the fx, which holds the to-delete-ParmLearn-entry; beginning with 1
id:the id of the ParmLearn-entry to delete; beginning with 1
RETURNS:
retval:true, if deletion was successful; false, if the function couldn't delete anything
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.DeleteParmAlias_FXStateChunk
language:lua
return:(boolean:retval),(string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Deletes a ParmAlias-entry from an FXStateChunk.
It's the PARMALIAS-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, which you want to delete a ParmAlias from
fxid:the id of the fx, which holds the to-delete-ParmAlias-entry; beginning with 1
id:the id of the ParmAlias-entry to delete; beginning with 1
RETURNS:
retval:true, if deletion was successful; false, if the function couldn't delete anything
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.DeleteParmLFOLearn_FXStateChunk
language:lua
return:(boolean:retval),(string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:id)
description:
Deletes a ParmLFO-Learn-entry from an FXStateChunk.
It's the LFOLEARN-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, which you want to delete a ParmLFO-Learn-entry from
fxid:the id of the fx, which holds the to-delete-ParmLFO-Learn-entry; beginning with 1
id:the id of the ParmLFO-Learn-entry to delete; beginning with 1
RETURNS:
retval:true, if deletion was successful; false, if the function couldn't delete anything
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.SetParmLFOLearn_FXStateChunk
language:lua
return:(boolean:retval),(optional string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:id), (integer:midi_note), (integer:checkboxflags), (optional string:osc_message)
description:
Sets an already existing ParmLFO-Learn-entry of an FX-plugin from an FXStateChunk.
It's the LFOLEARN-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to set a ParmLFO-Learn-entry
fxid:the id of the fx, which holds the to-set-ParmLFO-Learn-entry; beginning with 1
id:  an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
midi_note:  an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLFOLearn, only when midi_note is set to 0!
RETURNS:
retval:true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLFO)
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.SetParmLearn_FXStateChunk
language:lua
return:(boolean:retval),(optional string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:id), (integer:midi_note), (integer:checkboxflags), (optional string:osc_message)
description:
Sets an already existing Parm-Learn-entry of an FX-plugin from an FXStateChunk.
It's the PARMLEARN-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to set a Parm-Learn-entry
fxid:the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1
id:  an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
midi_note:  an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLearn, only when midi_note is set to 0!
RETURNS:
retval:true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.SetParmAlias_FXStateChunk
language:lua
return:(boolean:retval),(optional string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:id), (string:parmalias)
description:
Sets an already existing Parm-Learn-entry of an FX-plugin from an FXStateChunk.
It's the PARMALIAS-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to set a Parm-Learn-entry
fxid:the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1
id:the id of the Parm-Learn-entry to set; beginning with 1
parmalias:the new aliasname of the parameter
RETURNS:
retval:true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.SetFXStateChunk
language:lua
return:(boolean:retval),(optional string:alteredStateChunk)
params:(string:StateChunk), (string:FXStateChunk), (optional integer:TakeFXChain_id)
description:
Adds/replaces FXStateChunk to/in a TrackStateChunk or a MediaItemStateChunk.
returns false in case of an error
PARAMETERS:
StateChunk:the FXStateChunk, which you want to set into the TrackStateChunk
FXStateChunk:the FXStateChunk, which you want to set into the TrackStateChunk
TakeFXChain_id:when using MediaItemStateChunks, this allows you to choose the take of which you want the FXChain; default is 1
RETURNS:
retval:true, if setting fxstatechunk was successful; false, if setting was unsuccessful
alteredStateChunk:the altered StateChunk
------
name:ultraschall.GetFXStateChunk
language:lua
return:(string:FXStateChunk)
params:(string:StateChunk), (optional integer:TakeFXChain_id)
description:
Returns an FXStateChunk from a TrackStateChunk or a MediaItemStateChunk.
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.
Returns nil in case of an error or if no FXStateChunk has been found.
PARAMETERS:
StateChunk:the StateChunk, from which you want to retrieve the FXStateChunk
TakeFXChain_id:when using MediaItemStateChunks, this allows you to choose the take of which you want the FXChain; default is 1
RETURNS:
FXStateChunk:the FXStateChunk, stored in the StateChunk
------
name:ultraschall.AddParmLFOLearn_FXStateChunk
language:lua
return:(boolean:retval),(optional string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:parmidx), (string:parmname), (integer:midi_note), (integer:checkboxflags), (optional string:osc_message)
description:
Adds a new Parm-LFOLearn-entry to an FX-plugin from an FXStateChunk.
It's the LFOLEARN-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to set a Parm-Learn-entry
fxid:the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1
parmidx:the parameter, whose alias you want to add
parmname:the name of the parameter, usually \"\" or \"byp\" for bypass or \"wet\" for wet; when using wet or bypass, these are essential to give!
midi_note:  an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLFOLearn, only when midi_note is set to 0!
RETURNS:
retval:true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.AddParmLearn_FXStateChunk
language:lua
return:(boolean:retval),(optional string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (integer:parmidx), (string:parmname), (integer:midi_note), (integer:checkboxflags), (optional string:osc_message)
description:
Adds a new Parm-Learn-entry to an FX-plugin from an FXStateChunk.
It's the PARMLEARN-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to set a Parm-Learn-entry
fxid:the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1
parmidx:the parameter, whose alias you want to add
parmname:the name of the parameter, usually \"\" or \"byp\" for bypass or \"wet\" for wet; when using wet or bypass, these are essential to give!
midi_note:  an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message
checkboxflags:the checkboxes checked in the MIDI/OSC-learn dialog
osc_message:the osc-message, that triggers the ParmLearn, only when midi_note is set to 0!
RETURNS:
retval:true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.AddParmAlias_FXStateChunk
language:lua
return:(boolean:retval),(optional string:alteredFXStateChunk)
params:(string:FXStateChunk), (integer:fxid), (string:parmalias)
description:
Adds a new Parm-Alias-entry to an FX-plugin from an FXStateChunk.
It's the PARMALIAS-entry
returns false in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to set a Parm-Learn-entry
fxid:the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1
parmalias:the new aliasname of the parameter
RETURNS:
retval:true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)
alteredFXStateChunk:the altered FXStateChunk
------
name:ultraschall.CountParmAlias_FXStateChunk
language:lua
return:(integer:count)
params:(string:FXStateChunk), (integer:fxid)
description:
Counts already existing Parm-Alias-entries of an FX-plugin from an FXStateChunk.
It's the PARMALIAS-entry
returns -1 in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to count a Parm-Learn-entry
fxid:the id of the fx, which holds the to-count-Parm-Learn-entry; beginning with 1
RETURNS:
count:the number of ParmAliases found
------
name:ultraschall.CountParmLearn_FXStateChunk
language:lua
return:(integer:count)
params:(string:FXStateChunk), (integer:fxid)
description:
Counts already existing Parm-Learn-entries of an FX-plugin from an FXStateChunk.
It's the PARMLEARN-entry
returns -1 in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to count a Parm-Learn-entry
fxid:the id of the fx, which holds the to-count-Parm-Learn-entry; beginning with 1
RETURNS:
count:the number of ParmLearn-entried found
------
name:ultraschall.CountParmLFOLearn_FXStateChunk
language:lua
return:(integer:count)
params:(string:FXStateChunk), (integer:fxid)
description:
Counts already existing Parm-LFOLearn-entries of an FX-plugin from an FXStateChunk.
It's the LFOLEARN-entry
returns -1 in case of an error
PARAMETERS:
FXStateChunk:the FXStateChunk, in which you want to count a Parm-LFOLearn-entry
fxid:the id of the fx, which holds the to-count-Parm-LFOLearn-entry; beginning with 1
RETURNS:
count:the number of LFOLearn-entried found
------
name:ultraschall.ScanVSTPlugins
language:lua
return:
params:(optional boolean:clear_cache)
description:
Re-scans all VST-Plugins.
PARAMETERS:
clear_cache:true, clear cache before re-scanning; false or nil, just scan vts-plugins
------
name:ultraschall.AutoDetectVSTPluginsFolder
language:lua
return:
params:
description:
Auto-detects the vst-plugins-folder.
------
name:ultraschall.CountFXStateChunksInStateChunk
language:lua
return:(integer:count_of_takefx_statechunks),(integer:count_of_trackfx_statechunks)
params:(string:StateChunk)
description:
Counts all FXStateChunks within a StateChunk.
You can pass ItemStateChunks, TrackStateChunks and ProjectStateChunks.
returns -1 in case of an error.
PARAMETERS:
StateChunk:the StateChunk, whose count of FXStateChunks you want to retrieve
RETURNS:
count_of_takefx_statechunks:the number of take-fx-StateChunks within the StateChunk. When passing Track/ProjectStateChunks, it returns number of all FXStateChunks from all Takes within the StateChunk
count_of_trackfx_statechunks:the number of TrackFX-StateChunks; each track alawys has a single one, so it should match the number of tracks within the StateChunk; 0, if you pass a ItemStateChunk
------
name:ultraschall.RemoveFXStateChunkFromTrackStateChunk
language:lua
return:(string:altered_TrackStateChunk)
params:(string:TrackStateChunk)
description:
Clears the FXChain from a TrackStateChunk
returns nil in case of an error.
PARAMETERS:
TrackStateChunk:the TrackStateChunk, whose FXStateChunk you want to remove
RETURNS:
altered_TrackStateChunk:the TrackStateChunk, cleared of the Track-FXStateChunk
------
name:ultraschall.RemoveFXStateChunkFromItemStateChunk
language:lua
return:(string:alteredItemStateChunk)
params:(string:ItemStateChunk), (integer:take_id)
description:
Removes a certain Take-FXStateChunk from an ItemStateChunk.
Returns nil in case of failure.
PARAMETERS:
ItemStateChunk:the ItemStateChunk, from which you want to remove an FXStateChunk
take_id:the take, whose FXStateChunk you want to remove
RETURNS:
alteredItemStateChunk:the StateChunk, from which the FXStateChunk was removed
------
name:ultraschall.LoadFXStateChunkFromRFXChainFile
language:lua
return:(string:FXStateChunk)
params:(string:filename), (integer:trackfx_or_takefx)
description:
Loads an FXStateChunk from an RFXChain-file.
If you don't give a path, it will try to load the file from the folder ResourcePath()/FXChains.
returns nil in case of an error
PARAMETERS:
filename:the filename of the RFXChain-file(must include ".RfxChain"); omit the path to load it from the folder ResourcePath()/FXChains
trackfx_or_takefx:0, return the FXStateChunk as Track-FXStateChunk; 1, return the FXStateChunk as Take-FXStateChunk
RETURNS:
FXStateChunk:the loaded FXStateChunk; nil, in case of an error
------
name:ultraschall.SaveFXStateChunkAsRFXChainfile
language:lua
return:(integer:retval)
params:(string:filename), (string:FXStateChunk)
description:
Loads an FXStateChunk from an RFXChain-file.
If you don't give a path, it will try to load the file from the folder ResourcePath/FXChains.
returns -1 in case of an error
PARAMETERS:
filename:the filename of the output-RFXChain-file(must include ".RfxChain"); omit the path to save it into the folder ResourcePath/FXChains
FXStateChunk:the FXStateChunk, which you want to set into the TrackStateChunk
RETURNS:
retval:-1 in case of failure, 1 in case of success
------
name:ultraschall.GetAllRFXChainfilenames
language:lua
return:(integer:count_of_RFXChainfiles),(array:RFXChainfiles)
params:
description:
Returns all available RFXChainfiles in the folder ResourcePath/FXChains
RETURNS:
count_of_RFXChainfiles:the number of available RFXChainFiles
RFXChainfiles:the filenames of the RFXChainfiles
------
name:ultraschall.GetRecentFX
language:lua
return:(integer:count_of_RecentFX),(array:RecentFX)
params:
description:
Returns the recent fx-list
RETURNS:
count_of_RecentFX:the number of available recent fx
RecentFX:the names of the recent fx
------
name:ultraschall.SplitStringAtLineFeedToArray
language:lua
return:(integer:count),(array:split_string)
params:(string:unsplitstring)
description:
Splits the string unsplitstring at linefeed/tabs/control characters and puts each of these splitpieces into an array, each splitpiece one array-entry.
The linefeeds will not(!) be returned in the array's entries.
Returns the number of entries in the array, as well as the array itself
If there are no control characters or linefeeds in the string, the array will have only one entry with unsplitstring in it.
returns -1 in case of failure
PARAMETERS:
unsplitstring:the string, that shall be split at LineFeed/Tabs/Control Characters. Nil is not allowed.
RETURNS:
count:number of entries in the split_string-array
split_string:an array with all the individual "postsplit"-pieces of the string
------
name:ultraschall.CountCharacterInString
language:lua
return:(integer:count),(array:positions)
params:(string:checkstring), (string:character)
description:
Counts, how often character appears in checkstring and returns the count, as well as a array an with the position-numbers.
returns -1 in case of error
PARAMETERS:
checkstring:the string to check search through
character:the character to search for. Only single characters are allowed. Controlcodes like \n \t count as single character. Case sensitive.
RETURNS:
count:the number of occurences of character in checkstring
positions:the positionnumbers of the character in checkstring
------
name:ultraschall.IsValidMatchingPattern
language:lua
return:(boolean:retval)
params:(string:patstring)
description:
Returns, if patstring is a valid pattern-matching-string
PARAMETERS:
patstring:the string to check for, if it's a valid pattern-matching-string
RETURNS:
retval:true, patstring is a valid pattern-matching-string; false, patstring isn't a valid pattern-matching-string
------
name:ultraschall.CSV2IndividualLinesAsArray
language:lua
return:(integer:count),(array:individual_values)
params:(string:csv_line), (optional string:separator)
description:
convert a csv-string to an array of the individual values. If separator cannot be found, it'll return the original string
returns nil in case or error
PARAMETERS:
csv_line:a string as a csv, with all values included and separated by parameter separator
separator:the separator, that separates the individual entries; use nil for commas; separators will be removed from the final strings!
RETURNS:
count:the number of entries
individual_values:all values, each in an individual array-position
------
name:ultraschall.RoundNumber
language:lua
return:(integer:retval)
params:(number:num)
description:
returns a rounded value of the parameter number. %.5 and higher rounds up, lower than %.5 round down.
returns nil in case of an error
PARAMETERS:
num:the floatingpoint number, you'd like to have rounded.
RETURNS:
retval:the rounded number
------
name:ultraschall.GetPartialString
language:lua
return:(string:partial_string)
params:(string:str), (string:sep1), (string:sep2)
description:
returns the part of a filename-string between sep1 and sep2
returns nil if it doesn't work, no sep1 or sep2 exist
PARAMETERS:
str:separator on the "right" side of the partial string
sep1:separator on the "left" side of the partial string
sep2:separator on the "right" side of the partial string
RETURNS:
partial_string:the partial string between sep1 and sep2
------
name:ultraschall.Notes2CSV
language:lua
return:(string:csv_retval)
params:
description:
Gets the project's notes and returns it as a CSV.
RETURNS:
csv_retval:the project notes, returned as a csv-string; entries separated by a comma
------
name:ultraschall.CSV2Line
language:lua
return:(string:values)
params:(string:csv_line)
description:
converts a string of csv-values into a string with all values and without the ,-separators
returns nil in case of error
RETURNS:
values:all values in one string
------
name:ultraschall.IsItemInTrack
language:lua
return:(boolean:retval)
params:(integer:tracknumber), (integer:itemIDX)
description:
checks, whether a given item is part of the track tracknumber
returns true, if the itemIDX is part of track tracknumber, false if not, nil if no such itemIDX or Tracknumber available
PARAMETERS:
tracknumber:the number of the track to check in, with 1 for track 1, 2 for track 2, etc.
itemIDX:the number of the item to check of
RETURNS:
retval:true, if item is in track, false if item isn't in track
------
name:ultraschall.CheckActionCommandIDFormat
language:lua
return:(boolean:retval)
params:(action_command_id:)
description:
Checks, whether an action command id is a valid commandid(which is a number) or a valid _action_command_id (which is a string with an _underscore in the beginning).
Does not check, whether this action_command_id is a useable one, only if it's "syntax" is correct!
returns falsein case of an error
PARAMETERS:
:the ActionCommandID you want to check; either a number or an action_command_id with an underscore at the beginning
RETURNS:
retval:true, valid action_command_id; false, not a valid action_command_id
------
name:ultraschall.CheckActionCommandIDFormat2
language:lua
return:(boolean:retval)
params:(action_command_id:)
description:
Checks, whether an action command id is a valid commandid(which is a number) or a valid _action_command_id (which is a string with an _underscore in the beginning).
Unlike CheckActionCommandIDFormat, this checks whether an action-command-id-string is an actual registered one(case sensitive!).
returns false in case of an error
PARAMETERS:
:the ActionCommandID you want to check; either a number or an action_command_id with an underscore at the beginning
RETURNS:
retval:true, valid action_command_id; false, not a valid action_command_id
------
name:ultraschall.ToggleStateAction
language:lua
return:(integer:retval)
params:(integer:section), (string:actioncommand_id), (integer:state)
description:
Toggles state of an action using the actioncommand_id(instead of the CommandID-number)
returns current state of the action after toggling or -1 in case of error.
PARAMETERS:
section:the section of the action(see ShowActionlist-dialog)
actioncommand_id:the ActionCommandID of the action to toggle
state:1 or 0
RETURNS:
retval:state if the action, after it has been toggled
------
name:ultraschall.RefreshToolbar_Action
language:lua
return:
params:(integer:section), (string:actioncommand_id)
description:
Refreshes a toolbarbutton with an ActionCommandID(instead of the CommandID-number)
returns -1 in case of error
PARAMETERS:
section:section
actioncommand_id:ActionCommandID of the action, associated with the toolbarbutton 
------
name:ultraschall.ToggleStateButton
language:lua
return:(boolean:retval)
params:(integer:section), (string:actioncommand_id), (integer:state)
description:
Toggles state and refreshes the button of an actioncommand_id
returns false in case of error
PARAMETERS:
section:the section of the action(see ShowActionlist-dialog)
actioncommand_id:the ActionCommandID of the action to toggle
state:1 or 0
RETURNS:
retval:true, toggling worked; false, toggling didn't work
------
name:ultraschall.SecondsToTime
language:lua
return:(string:time_string)
params:(number:pos)
description:
converts timeposition in seconds(pos) to a timestring (h)hh:mm:ss.mss
returns nil in case of error
PARAMETERS:
pos:timeposition in seconds
RETURNS:
time_string:timestring in (h)hh:mm:ss.mss
------
name:ultraschall.TimeToSeconds
language:lua
return:(number:position)
params:(string:timestring)
description:
converts a timestring days:hours:minutes:seconds.milliseconds to timeposition in seconds
it is ok, to have only some of the last ones given, so i.e. excluding days and hours is ok. Though excluding values inbetween does not work!
A single integer in timestring will be seen as seconds.
To only specifiy milliseconds in particular, start the number with a .
all other values are separated by :
returns -1 in case of error, timestring is a nil or if you try to add an additional value, added before days
does not check for valid timeranges, so 61 minutes is possible to give, even if hours are present in the string
PARAMETERS:
timestring:a string like: days:hours:minutes:seconds.milliseconds , i.e. 1:16:27:50.098
RETURNS:
position:the converted position
------
name:ultraschall.SecondsToTimeString_hh_mm_ss_mss
language:lua
return:(string:timestring)
params:(number:time)
description:
Converts the parameter time into a timestring of the format hh:mm:ss.mss
Valid timeranges are from 0 to 359999.99 seconds(about 99 hours).
returns -1 in case of error
PARAMETERS:
time:the time in seconds to be converted into the timestring
RETURNS:
timestring:the converted timestring. It will always follow the format hh:mm:ss.mss and fill up digits with zeros, if necessary.
------
name:ultraschall.TimeStringToSeconds_hh_mm_ss_mss
language:lua
return:(number:time)
params:(string:timestring)
description:
Converts the parameter timestring of the format hh:mm:ss.mss into seconds
The timestring must follow strictly this format, or the function returns -1 as result.
returns -1 in case of error
PARAMETERS:
timestring:the converted timestring. It must always follow the format hh:mm:ss.mss. Fill up digits with zeros, if necessary.
RETURNS:
time:the time in seconds to be converted into the timestring, -1 in case of an error
------
name:ultraschall.CountPatternInString
language:lua
return:(integer:count),(array:positions)
params:(string:sourcestring), (string:searchstring), (boolean:non_case_sensitive)
description:
returns the count and an array with all positions of searchstring in sourcestring.
PARAMETERS:
sourcestring:the string, you want to search through
searchstring:the string, you want to search for in sourcestring
non_case_sensitive:true, the search does not care about case-sensitivity; false, case of searchstring will be kept
RETURNS:
count:the number of appearances of searchstring in sourcestring
positions:an array with count-entries, where every entry contains the position of searchstring in sourcestring
------
name:ultraschall.OpenURL
language:lua
return:(integer:retval)
params:(string:url)
description:
Opens the URI with the standard-browser installed in your system.
returns -1 in case of an error
PARAMETERS:
url:the url to be opened in the browser; will check for :// in it for validity!
------
name:ultraschall.CompareArrays
language:lua
return:(table:diff_array)
params:(table:Array), (table:CompareArray2)
description:
Compares Array using parameter CompareArray2 and returns an array with all entries in CompareArray2, that are not in Array.
The comparable arrays must be indexed by integer-numbers.
Returns nil in case of an error
PARAMETERS:
Array:the array you want to check against Array; all entries in CompareArray2 that are not in Array will be returned
CompareArray2:the array you want to check against Array; all entries in CompareArray2 that are not in Array will be returned
RETURNS:
diff_array:an array with all entries from CompareArray2, that are not in Array
------
name:ultraschall.GetOS
language:lua
return:(string:operating_system),(integer:bits)
params:
description:
Returns operating system and if it's a 64bit/32bit-operating system.
RETURNS:
operating_system:the operating system used; usually "Win", "Mac" or "Other"(e.g. when Linux is used)
bits:the number of bits of the operating-system. Either 32 or 64 bit.
------
name:ultraschall.IsOS_Windows
language:lua
return:(boolean:is_windows),(integer:number_of_bits)
params:
description:
returns, if the current operating system is windows
RETURNS:
is_windows:true, if the operating-system is windows; false if not
------
name:ultraschall.IsOS_Mac
language:lua
return:(boolean:is_mac),(integer:number_of_bits)
params:
description:
returns, if the current operating system is mac-osx
RETURNS:
is_mac:true, if the operating-system is mac-osx; false if not
------
name:ultraschall.IsOS_Other
language:lua
return:(boolean:is_other),(integer:number_of_bits)
params:
description:
returns, if the current operating system is neither mac or win
RETURNS:
is_other:true, if the operating-system is neither mac or win; false if not
------
name:ultraschall.GetReaperAppVersion
language:lua
return:(integer:majorversion),(integer:subversion),(string:bits),(string:operating_system),(boolean:portable),(optional string:betaversion)
params:
description:
Returns operating system and if it's a 64bit/32bit-operating system.
RETURNS:
majorversion:the majorversion of Reaper. Can be used for comparisions like "if version<5 then ... end".
subversion:the subversion of Reaper. Can be used for comparisions like "if subversion<96 then ... end".
bits:the number of bits of the reaper-app
operating_system:the operating system, either "Win", "OSX" or "Other"
portable:true, if it's a portable installation; false, if it isn't a portable installation
betaversion:if you use a pre-release of Reaper, this contains the beta-version, like "rc9" or "+dev0423" or "pre6"
------
name:ultraschall.LimitFractionOfFloat
language:lua
return:(number:altered_number)
params:(number:number), (integer:length_of_fraction), (boolean:roundit)
description:
limits the fraction of a float-number to a specific length of fraction(digits). You can also choose to round the value or not.
returns nil in case of error
PARAMETERS:
number:the number, whose fraction shall be limited
length_of_fraction:the number of digits in the fraction
roundit:false, no rounding; true, rounds the fraction. Rounding-precision is only length_of_fraction+1, all the other digits will be ignored. If length_of_fraction+1>=5, it will be rounded up, otherwise down.
RETURNS:
altered_number:the altered number with the new fraction-length. Will be equal to parameter number, if number was integer or fraction less digits than length_of_fraction
------
name:ultraschall.GetAllEntriesFromTable
language:lua
return:(integer:count),(table:foundtypes),(table:returned_table)
params:(table:table)
description:
Gets an iterable version of table. Good for analysing unknown tables.
Returns the number of entries, a table(array) with the datatypes of each entry and the table with all it's entries in the same order as in the foundtypes-table.
This doesn't treat table recursivley, means: each "Subtable" within the table is treated as one entry of the type "table". That means, that these tables must be analysed themselves in an extra step!
A[1]=1
A[2][1]=2
A[2][2]=3.4
will return two(!) entries, the first being of type "integer", the second being of type "table". Next step would be to run use this function to analyse A[2] as well, which would result in two entries: the first being of type "integer" and the second of type "float", etc.
returns -1 in case of error
PARAMETERS:
table:the table to get the individual entries from
RETURNS:
count:the number of table-entries found
foundtypes:a table, with count-entries, each entry having the type of each entry in the returned_table as string.
returned_table:an iterable version of table. The type of each entry can be found in the accompanying entry of foundtypes
------
name:ultraschall.APIExists
language:lua
return:(boolean:retval)
params:(string:functionname)
description:
returns true, if a certain function/variable exists in ultraschall.
returns false if nothing has been found
PARAMETERS:
functionname:the name of the function to check for; only the functionname without ultraschall. !
RETURNS:
retval:true, if element exists; false if it doesn't exist
------
name:ultraschall.IsValidGuid
language:lua
return:(boolean:retval)
params:(string:guid), (boolean:strict)
description:
Checks, if guid is a valid guid. Can also be used for strings, that contain a guid somewhere in them(strict=false)
A valid guid is a string that follows the following pattern:
{........-....-....-....-............}
where . is a hexadecimal value(0-F)
Returns false in case of error
PARAMETERS:
guid:the guid to check for validity
strict:true, guid must only be the valid guid; false, guid must contain a valid guid somewhere in it(means, can contain trailing or preceding characters)
RETURNS:
retval:true, guid is/contains a valid guid; false, guid isn't/does not contain a valid guid
------
name:ultraschall.SetGuidExtState
language:lua
return:(integer:retval)
params:(string:guid), (string:key), (string:value), (integer:savelocation), (boolean:overwrite), (boolean:persists)
description:
Sets an extension-state using a given guid. Good for storing additional metadata of objects like MediaTracks, MediaItems, MediaItem_Takes, etc(everything, that has a guid).
The state can be saved as either global extension state or "local" extension-project-state(in the currently opened project)
The guid can have additional text, but must contain a valid guid somewhere in it!
A valid guid is a string that follows the following pattern:
{........-....-....-....-............}
where . is a hexadecimal value(0-F)
Returns -1 in case of error
PARAMETERS:
guid:the guid of the object, for whom you want to store a key/value-pair; can have additional characters before and after the guid, but must contain a valid guid!
key:the key for this guid
value:the value to store into the key/value-store
savelocation:0, store as project extension state(into the currently opened project); 1, store as global extension state(when persist=true, into reaper-extstate.ini in the resourcesfolder)
overwrite:true, overwrite a previous given value; false, don't overwrite, if a value exists already
persists:true, make extension state persistent(available after Reaper-restart); false, don't make it persistent; Only with global extension states
RETURNS:
retval:the idx of the extstate(if a project extension state); 1, successful(with extension states), -1, unsuccessful
------
name:ultraschall.SetBitfield
language:lua
return:(integer:new_integer_bitfield)
params:(integer:integer_bitfield), (boolean:set_to), (integer:bit_1), (integer:bit_2), (... integer:bit_n)
description:
Alters an integer-bitfield.
Returns nil in case of error, like invalid bit-values
PARAMETERS:
integer_bitfield:the old integer-bitfield that you want to alter
set_to:true, set the bits to 1; false, set the bits to 0; nil, toggle the bits
RETURNS:
new_integer_bitfield:the newly altered bitfield
------
name:ultraschall.PreventCreatingUndoPoint
language:lua
return:
params:
description:
Prevents creation of an Undo-point. Only useful in non-defer-scripts.
------
name:ultraschall.SetIntConfigVar_Bitfield
language:lua
return:(boolean:retval),(integer:new_integer_bitfield)
params:(string:configvar), (boolean:set_to), (integer:bit_1), (integer:bit_2), (... integer:bit_n)
description:
Alters an integer-bitfield stored by a ConfigVariable.
Returns false in case of error, like invalid bit-values, etc
PARAMETERS:
configvar:the config-variable, that is stored as an integer-bitfield, that you want to alter.
set_to:true, set the bits to 1; false, set the bits to 0; nil, toggle the bits
RETURNS:
retval:true, if altering was successful; false, if not successful
new_integer_bitfield:the newly altered bitfield
------
name:ultraschall.ConvertStringToAscii_Array
language:lua
return:(integer:length),(table:byte_array)
params:(string:string)
description:
Converts a string into it's individual characters and numerical-representation as a table and after that returns its number of table-entries and the table.
Returns -1 if string isn't a valid string
PARAMETERS:
string:the string to be converted
RETURNS:
length:the number of characters in the string/entries in the returned table byte_array
byte_array:the ByteArray as a table, with the format
------
name:ultraschall.CompareStringWithAsciiValues
language:lua
return:(boolean:retval),(integer:errorposition)
params:(string:string), (integer:bytevalue_1), (integer:bytevalue_2), (... integer:bytevalue_n)
description:
Compares a string with a number of byte-values(like ASCII-values).
Bytevalues can be either decimal and hexadecimal.
-1, if you want to skip checking of a specific position in string.
Returns false in case of error
PARAMETERS:
string:the string to check against the bytevalues
bytevalue_1:one or more parameters, that include the bytevalues to check against the accompanying byte in string; -1, if you want to skip check for that position
RETURNS:
retval:true, if check was successful; false, if not successful
errorposition:if retval is false, this will contain the position in string, where the checking failed; nil, if retval is true
------
name:ultraschall.ReturnsMinusOneInCaseOfError_Arzala
language:lua
return:(integer:retval)
params:
description:
Returns -1 in case of an error
RETURNS:
retval:returns -1 in case of error
------
name:ultraschall.CountLinesInString
language:lua
return:(integer:number_of_lines)
params:(string:String)
description:
Counts the lines in a string. It counts them by counting \n-newlines(not carriage returns!)
Returns -1 in case of an error
PARAMETERS:
String:the string to count the lines of
RETURNS:
number_of_lines:number of lines of the string
------
name:ultraschall.ReturnTypeOfReaperObject
language:lua
return:(string:objecttype)
params:(Reaperobject:object)
description:
returns the type of a Reaper-object.
PARAMETERS:
object:a Reaper-object of the following types:
RETURNS:
objecttype:the type of the parameter of object
------
name:ultraschall.IsObjectValidReaperObject
language:lua
return:(boolean:retval),(string:objecttype)
params:(Reaperobject:object)
description:
checks, if object is a valid Reaper-object. It also returns the type of that Reaper-object.
PARAMETERS:
object:a Reaper-object of the following types:
RETURNS:
retval:true, if it's a valid Reaper-object; false, if not
objecttype:the type of the parameter of object
------
name:ultraschall.RemoveTableEntriesOfType
language:lua
return:(table:alteredtable)
params:(table:worktable), (string:removetype)
description:
Removes all entries from worktable, that are of the datatype as given by removetype.
returns nil in case of error
PARAMETERS:
worktable:the unaltered source-table for processing
removetype:the type that shall be removed from table
RETURNS:
alteredtable:the table, that contains only the entries that are nt of the type as given by parameter removetype
------
name:ultraschall.IsItemInTrack3
language:lua
return:(boolean:retval)
params:(MediaItem:MediaItem), (string:trackstring)
description:
Checks, whether a MediaItem is in any of the tracks, given by trackstring.
see IsItemInTrack to use itemidx instead of the MediaItem-object.
see IsItemInTrack2 to check against only one track.
returns nil in case of error
PARAMETERS:
MediaItem:the MediaItem, of which you want to know the track is is placed in
trackstring:a string with all tracknumbers, separated by commas; 1 for track 1, 2 for track 2, etc
RETURNS:
retval:true, if item is in track; false, if not
------
name:ultraschall.AddIntToChar
language:lua
return:(string:new_character)
params:(string:character), (integer:int)
description:
Adds/subtracts int to/from the numeric representation of character. It will return the new character.
It will not(!) include "overflows" into the adding/subtraction. That said, if you want to add a value resulting in a character above ASCII-code 255, it will fail!
Returns nil in case of an error
PARAMETERS:
character:the character, onto which you want to add/subtract parameter int; only single character allowed
int:the value, that you want to add to the numerical representation of parameter character
RETURNS:
new_character:the new character, after parameter int has been added/subtracted from/to character
------
name:ultraschall.MakeFunctionUndoable
language:lua
return:(boolean:retval),(string:current_UndoMessage),(retvals_1:),(...:),(retvals_2:)
params:(function:Func), (string:UndoMessage), (integer:Flag), (Func_parameters_1:), ( ...:Func_parameters_n)
description:
Run the function Func and create an undopoint for this function. You can also give an UndoMessage and a flag for Reaper to use.
All parameters needed by Func follow after parameter Flag, as if it would be the normal parameters.
This should make creating undo-points much much easier...
Note: Reaper will use the undo-point only for functions, who do "undo"-able things. If you don't have something of that kind(no creating a track or something), Reaper will not create an undo-point.
Returns false in case of an error
PARAMETERS:
Func:the parameters, as needed by the function Func; will be given to Func as provided by you
UndoMessage:the undo-message to be displayed by Reaper in the Undo-history
Flag:you can set a flag, if you want, for this undo-point
:the parameters, as needed by the function Func; will be given to Func as provided by you
Func_parameters_n:the parameters, as needed by the function Func; will be given to Func as provided by you
RETURNS:
retval:the returnvalues, as returned by function Func
current_UndoMessage:the current UndoMessage for the last action done by Reaper. Use this so see, if getting an undo-point was successful
retvals_1:the returnvalues, as returned by function Func
...:the returnvalues, as returned by function Func
retvals_2:the returnvalues, as returned by function Func
------
name:ultraschall.ReturnTableAsIndividualValues
language:lua
return:(retval1:),(retval2:),(retval3:),(...:),(retval64:)
params:(table:Table)
description:
Returns the first 64 entries of an numerical-indexed table as returnvalues
PARAMETERS:
Table:the table, whose values you want to return. It will only return values with index 1...64!
RETURNS:
retval1:the values from Table returned
retval2:the values from Table returned
retval3:the values from Table returned
...:the values from Table returned
retval64:the values from Table returned
------
name:ultraschall.type
language:lua
return:(string:type_of_object),(optional boolean:isnumber)
params:(identifier:object)
description:
Returns the type of the object.
Supported types are Lua's own datatypes as well as Reaper's own datatypes.
Due API-limitations, SWS-specific datatypes are not supported in this function!
PARAMETERS:
object:the object, whose type you want to know
RETURNS:
type_of_object:the type of the object; the following are valid:
isnumber:true, if object is a number(either integer or number)
------
name:ultraschall.ConcatIntegerIndexedTables
language:lua
return:(integer:numentries),(array:concatenated_table)
params:(array:table1), (array:table2)
description:
Concatenates the entries of two tables into one table. The entries of each table must be indexed by integers
The new table still has the same references as the old table, means: if you remove the old tables/entries in the old tables, the concatenated table/accompanying entries will loose elements.
To get a "true"-concatenated copy, you should first create new copies of the tables, using MakeCopyOfTable.
PARAMETERS:
table1:the first table to be concatenated; the entries must be indexed by integer-numbers!
table2:the second table to be concatenated; the entries must be indexed by integer-numbers!
RETURNS:
numentries:the number of entries in the new table
concatenated_table:the new concatenated table
------
name:ultraschall.ReverseTable
language:lua
return:(table:reversed_table),(integer:entry_count)
params:(table:the_table)
description:
reversed the order of the entries of a table, means, the last entry will become the first, the first become the last, etc.
The table must be indexed by integers.
Returns nil if table isn't a valid table
RETURNS:
reversed_table:the resulting table with the reversed order of all entries
entry_count:the number of entries in the reversed_table
------
name:ultraschall.GetDuplicatesFromArrays
language:lua
return:(integer:duplicate_count),(array:duplicate_array),(integer:originalscount_array1),(array:originals_array1),(integer:originalscount_array2),(array originals_array2:)
params:(array:array1), (array:array2)
description:
Returns the duplicates and the originals(entries only in one of the arrays) of two arrays. It will also return the number of entries.
This works only on arrays with integer-indexed entries; index must start with index 1!
returns -1 in case of an error
PARAMETERS:
array1:the first array to check for duplicates and "original"-entries
array2:the second array to check for duplicates and "original"-entries
RETURNS:
duplicate_count:the number of entries in both arrays
duplicate_array:the entries in both arrays
originalscount_array1:the number of entries only in array1
originals_array1:the entries that are only existing in array1
originalscount_array2:the number of entries only in array2
array originals_array2:the entries that are only existing in array2
------
name:ultraschall.GetScriptFilenameFromActionCommandID
language:lua
return:(string:scriptfilename_with_path)
params:(string:action_command_id)
description:
returns the filename with path of a script, associated to a ReaScript.
Command-ID-numbers do not work!
returns false in case of an error
RETURNS:
scriptfilename_with_path:the scriptfilename with path associated with this ActionCommandID
------
name:ultraschall.CombineBytesToInteger
language:lua
return:(integer:retval)
params:(integer:bitoffset), (integer:Byte_1), (optional:Byte_2), (...:), (optional:Byte_n)
description:
Combines the Byte-values Byte_1 to Byte_n into one integer.
That means, if you give 4 values, it will return a 32bit-integer(4*8Bits).
Negative values will use the maximum possible value of that byte minus the bits.
In Byte_1, -2 will be 255-1=254, in Byte 2, -2 will be 65280-256=65024.
Use bitoffset to define, from which bit on you want to combine the values.
Returns -1 in case of an error
PARAMETERS:
bitoffset:if you want to start combining the values from a certain bitoffset-onwards, set the offset here; use 0 to start with the first bit.
Byte_1:a bytevalue that you want to combine into one
Byte_2:a bytevalue that you want to combine into one
:a bytevalue that you want to combine into one
Byte_n:a bytevalue that you want to combine into one
RETURNS:
retval:the combined integer
------
name:ultraschall.SplitIntegerIntoBytes
language:lua
return:(integer:Byte1),(integer:Byte2),(integer:Byte3),(integer:Byte4)
params:(integer:integervalue)
description:
Splits a 32-bit-integer-value into four bytes.
Returns -1 in case of an error
RETURNS:
Byte1:the first eight bits of the integer-value as a Byte
Byte2:the second eight bits of the integer-value as a Byte
Byte3:the third eight bits of the integer-value as a Byte
Byte4:the fourth eight bits of the integer-value as a Byte
------
name:ultraschall.GetReaperScriptPath
language:lua
return:(string:reaper_script_path)
params:
description:
Returns path to Reaper's script-folder
RETURNS:
reaper_script_path:the path of the scripts-folder of Reaper
------
name:ultraschall.GetReaperColorThemesPath
language:lua
return:(string:reaper_colorthemes_path)
params:
description:
Returns path to Reaper's color-theme-folder
RETURNS:
reaper_colorthemes_path:the path of the color-theme-folder of Reaper
------
name:ultraschall.GetReaperJSFXPath
language:lua
return:(string:reaper_jsfx_path)
params:
description:
Returns path to Reaper's JSFX-plugin-folder
RETURNS:
reaper_jsfx_path:the path of the JSFX-plugin-folder of Reaper
------
name:ultraschall.GetReaperWebRCPath
language:lua
return:(string:reaper_webrc_path),(string:user_webrc_path)
params:
description:
Returns path to the Web-RC-folder for Reaper as well as for the user-webrc-pages.
------
name:ultraschall.CycleTable
language:lua
return:(table:new_table)
params:(table:the_table), (integer:offset)
description:
Cycles the entries by offset. Offset can be positive(cycle forward) or negative(cycle negative). The number also tells the function, by how many entries the table shall be cycled, with 1 for one entry, 2 for 2 entries, etc.
Entries "falling out" of one side(top or bottom) of the table will be readded on the other side.
returns nil in case of error
PARAMETERS:
the_table:the table to cycle through
offset:the offset, by which to cycle the entries through; positive, cycle entries forward; negative, cycle entries backward
RETURNS:
new_table:the altered table
------
name:ultraschall.SplitStringAtNULLBytes
language:lua
return:(integer:count),(array:split_strings)
params:(string:splitstring)
description:
Splits splitstring into individual string at NULL-Bytes.
returns -1 in case of an error
PARAMETERS:
splitstring:the string with NULL-Bytes(\0) into it, that you want to split
RETURNS:
count:the number of found strings
split_strings:the found strings put into an array
------
name:ultraschall.RunBackgroundHelperFeatures
language:lua
return:
params:(boolean:switch_on)
description:
Starts background-scripts supplied with the Ultraschall-API, like:
- a script for getting the last edit-cursor-position before the current one -> GetLastCursorPosition()
- a script for getting the last playstate before the current one -> GetLastPlayState()
- a script for getting the last loopstate before the current one -> GetLastLoopState()
PARAMETERS:
switch_on:true, start the background-scripts/start unstarted background-helper-scripts; false, stop all background-helper-scripts
------
name:ultraschall.Main_OnCommandByFilename
language:lua
return:(boolean:retval),(string:script_identifier)
params:(string:filename), (string:...)
description:
Runs a command by a filename. It internally registers the file temporarily as command, runs it and unregisters it again.
This is especially helpful, when you want to run a command for sure without possible command-id-number-problems.
It returns a unique script-identifier for this script, which can be used to communicate with this script-instance.
The started script gets its script-identifier using GetScriptIdentifier.
You can use this script-identifier e.g. as extstate.
Returns false in case of an error
PARAMETERS:
filename:the name and path of the scriptfile to run
...:parameters that shall be passed over to the script
RETURNS:
retval:true, if running it was successful; false, if not
script_identifier:a unique script-identifier, which can be used as extstate to communicate with the started scriptinstance
------
name:ultraschall.MIDI_OnCommandByFilename
language:lua
return:(boolean:retval),(string:script_identifier)
params:(string:filename), (optional HWND:Midi_EditorHWND), (string:...)
description:
Runs a command by a filename in the MIDI-editor-context. It internally registers the file temporarily as command, runs it and unregisters it again.
This is especially helpful, when you want to run a command for sure without possible command-id-number-problems.
It returns a unique script-identifier for this script, which can be used to communicate with this script-instance.
The started script gets its script-identifier using GetScriptIdentifier.
You can use this script-identifier e.g. as extstate.
Returns false in case of an error
PARAMETERS:
filename:the name plus path of the scriptfile to run
Midi_EditorHWND:the window-handler of the MIDI-editor, in which to run the script; nil, for the last active MIDI-editor
...:parameters, that shall be passed over to the script
RETURNS:
retval:true, if running it was successful; false, if not
script_identifier:a unique script-identifier, which can be used as extstate to communicate with the started scriptinstance
------
name:ultraschall.GetScriptParameters
language:lua
return:(integer:num_params),(array:params),(string:caller_script_identifier)
params:(optional string:script_identifier), (optional boolean:remove)
description:
Gets the parameters stored for a specific script_identifier.
returns -1 in case of an error
PARAMETERS:
script_identifier:the script-identifier, whose parameters you want to retrieve; 
remove:true or nil, remove the stored parameter-extstates; false, keep them for later retrieval
RETURNS:
num_params:the number of parameters available
params:the values of the parameters as an array
caller_script_identifier:the scriptidentifier of the script, that set the parameters
------
name:ultraschall.SetScriptParameters
language:lua
return:(boolean:retval),(string:script_identifier)
params:(string:script_identifier), (string:...)
description:
Sets the parameters stored for a specific script_identifier.
PARAMETERS:
script_identifier:the script-identifier, whose parameters you want to retrieve; 
...:the parameters you want to set; there can be more than one, but they must be strings
RETURNS:
retval:true, storing was successful
script_identifier:the script_identifier, whose parameters have been set
------
name:ultraschall.GetScriptReturnvalues
language:lua
return:(integer:num_params),(array:retvals)
params:(string:sender_script_identifier), (optional boolean:remove)
description:
Gets the return-values which a specific sender\_script\_identifier sent to the current script.
If you have started numerous child-scripts and want to know, which child-script sent you return-values, see GetScriptReturnvalues_Sender
returns -1 in case of an error
PARAMETERS:
sender_script_identifier:the script-identifier, that sent the return-values to your script
remove:true or nil, remove the stored retval-extstates; false, keep them for later retrieval
RETURNS:
retvals:the number of return-values available
------
name:ultraschall.SetScriptReturnvalues
language:lua
return:(boolean:retval)
params:(string:script_identifier), (string:...)
description:
Send return-values back to the script, that has a specific script_identifier.
returns false in case of an error
PARAMETERS:
script_identifier:the script-identifier of the script-instance, to where you want to send the returnvalues 
...:the returnvalues you want to set; there can be more than one, but they must be strings
RETURNS:
retval:true, storing was successful; false, there was an error
------
name:ultraschall.GetScriptReturnvalues_Sender
language:lua
return:(integer:count),(array:retval_sender)
params:
description:
Retrieves, which scripts sent returnvalues to the current script.
RETURNS:
count:the number of scripts, who have left returnvalues for the current script
retval_sender:the ScriptIdentifier of the scripts, who returned values
------
name:ultraschall.Base64_Encoder
language:lua
return:(string:encoded_string)
params:(string:source_string), (optional integer:base64_type), (optional integer:remove_newlines), (optional integer:remove_tabs)
description:
Converts a string into a Base64-Encoded string.
Currently, only standard Base64-encoding is supported.
Returns nil in case of an error
PARAMETERS:
source_string:the string that you want to convert into Base64
base64_type:the Base64-decoding-style
remove_newlines:1, removes \n-newlines(including \r-carriage return) from the string
remove_tabs:1, removes \t-tabs from the string
RETURNS:
encoded_string:the encoded string
------
name:ultraschall.Base64_Decoder
language:lua
return:(string:decoded_string)
params:(string:source_string), (optional integer:base64_type)
description:
Converts a Base64-encoded string into a normal string.
Currently, only standard Base64-encoding is supported.
Returns nil in case of an error
PARAMETERS:
source_string:the Base64-encoded string
base64_type:the Base64-decoding-style
RETURNS:
decoded_string:the decoded string
------
name:ultraschall.StateChunkLayouter
language:lua
return:(string:layouted_statechunk)
params:(string:statechunk)
description:
Layouts StateChunks as returned by GetTrackStateChunk or GetItemStateChunk into a format that resembles the formatting-rules of an rpp-file.
This is very helpful, when parsing such a statechunk, as you can now use the number of spaces used for intendation as help parsing.
Usually, every new element, that starts with < will be followed by none or more lines, that have two spaces added in the beginning.
Example of a MediaItemStateChunk(I use . to display the needed spaces in the beginning of each line):
<ITEM
..POSITION 6.96537864205337
..SNAPOFFS 0
..LENGTH 1745.2745
..LOOP 0
..ALLTAKES 0
..FADEIN 1 0.01 0 1 0 0
..FADEOUT 1 0.01 0 1 0 0
..MUTE 0
..SEL 1
..IGUID {020E6372-97E6-4066-9010-B044F67F2772}
..IID 1
..NAME myaudio.flac
..VOLPAN 1 0 1 -1
..SOFFS 0
..PLAYRATE 1 1 0 -1 0 0.0025
..CHANMODE 0
..GUID {79F087CE-49E8-4212-91F5-8487FBCF10B1}
..<SOURCE FLAC
....FILE "C:\Users\meo\Desktop\X_Karo_Lynn-Interview.flac"
..>
>
This function will not check, if you've passed a valid statechunk!
returns nil in case of an error
PARAMETERS:
statechunk:a statechunk, that you want to layout properly
RETURNS:
layouted_statechunk:the statechunk, that is now layouted to the rules of rpp-projectfiles
------
name:ultraschall.ReverseEndianess_Byte
language:lua
return:(integer:newbyte)
params:(integer:byte)
description:
reverses the endianess of a byte and returns this as value.
The parameter byte must be between 0 and 255!
returns nil in case of an error
PARAMETERS:
byte:the integer whose endianess you want to reverse
RETURNS:
newbyte:the endianess-reversed byte
------
name:ultraschall.ConvertIntegerToBits
language:lua
return:(string:bitvals_csv),(table:bitvalues)
params:(integer:integer)
description:
converts an integer-value(up to 64 bits) into it's individual bits and returns it as comma-separated csv-string as well as a table with 64 entries.
returns nil in case of an error
PARAMETERS:
integer:the integer-number to separated into it's individual bits
RETURNS:
bitvals_csv:a comma-separated csv-string of all bitvalues, with bit 1 coming first and bit 32 coming last
bitvalues:a 64-entry table, where each entry contains the bit-value of integer; first entry for bit 1, 64th entry for bit 64
------
name:ultraschall.ConvertBitsToInteger
language:lua
return:(integer:integervalue)
params:(table:bitvalues)
description:
converts a table with all bitvalues into it's integer-representation.
each table-entry holds either a 1 or a 0;
with index 1 being the first (for 1),
index 2 for the second (for 2),
index 3 for the third (for 4),
index 4 for the fourth(for 8), etc
returns nil in case of an error
PARAMETERS:
bitvalues:a table, where each entry contains the bit-value of integer; first entry for bit 1, 64th entry for bit 64, etc
------
name:ultraschall.GetSetIntConfigVar
language:lua
return:(boolean:retval),(integer:config_var_value)
params:(string:varname), (boolean:set), (optional boolean:bit1), (...:), (optional boolean:bit32)
description:
Gets/Sets an integer-bitfield of an integer-configvariable.
Pass to it a varname, if it shall be set or gotten from and up to 32 parameters who specify, if that bit shall be set(true) or not(false) or the currently set value shall be used(nil)
See Reaper_Config_Variables.html for more details on config-variables in Reaper.
returns false in case of an error
PARAMETERS:
varname:the name of the config-variable
set:true, set this config-var; false, don't set it
bit1:true, set this bit; false, don't set this bit; nil, use the currently set value
:true, set this bit; false, don't set this bit; nil, use the currently set value
bit32:true, set this bit; false, don't set this bit; nil, use the currently set value
RETURNS:
retval:true, getting/setting the config-var was successful; false, it wasn't successful
config_var_value:the new/current value of the configuration-variable
------
name:ultraschall.GetScriptIdentifier
language:lua
return:(string:script_identifier)
params:
description:
The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance
its own script-identifier, so you can be sure, that you communicate with the right instance.
The identifier is of the format "ScriptIdentifier:scriptfilename-{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}.ext", where the {}-part is a guid and ext either .lua .py or .eel
Defer1](#Defer1) to [Defer20 make use of this to stop a running defer-loop from the outside of a deferred-script.
RETURNS:
script_identifier:a unique script-identifier for this script-instance, of the format:
------
name:ultraschall.ReplacePartOfString
language:lua
return:(string:replaced_string)
params:(string:originalstring), (string:insertstring), (integer:offset), (optional integer:length)
description:
replaces a part of a string with a second string
Returns nil in case of an error
PARAMETERS:
originalstring:the originalstring, in which you want to insert the string
insertstring:the string that shall be inserted
offset:the position, at which to insert the string; it is the position BEFORE the position at which to insert, so if you want to replace the 25th character, offset is 24!
length:the length of the part of the originalstring that shall be replaced, counted from offset. 0 or nil for simple insertion.
RETURNS:
replaced_string:the altered string
------
name:ultraschall.SearchStringInString
language:lua
return:(integer:count),(array:posarray)
params:(string:fullstring), (string:searchstring)
description:
Searches for the string searchstring in fullstring.
Keep in mind: Umlauts may produce multibyte-values. Therefore, the returned offsets might be confusing.
returns -1 in case of error, 0 if string wasn't found
PARAMETERS:
fullstring:the string to be searched through
searchstring:the string to search for within fullstring
RETURNS:
count:the number of found occurences of searchstring in fullstring
posarray:an array that contains the positions, where searchstring was found within fullstring
------
name:ultraschall.MKVOL2DB
language:lua
return:(number:db_value)
params:(number:mkvol_value)
description:
Converts an MKVOL-value into a dB-value.
MKVOL-values are used by the routing-functions for HWOut/AUXSendReceive, specifically for their volume-value as these can't be converted using Reaper's own DB2SLIDER or SLIDER2DB, so this function should help you.
This function is an adapted one from the function provided in Plugins/reaper\_www\_root/main.js
See DB2MKVOL to convert a dB-value into it's MKVOL-representation
returns nil in case of an error
PARAMETERS:
mkvol_value:the mkvol_value, that you want to convert into dB
RETURNS:
db_value:the dB-value, converted from the MKVOL-value; minimum -144dB
------
name:ultraschall.DB2MKVOL
language:lua
return:(number:mkvol_value)
params:(number:db_value)
description:
Converts an dB-value into a MKVOL-value.
MKVOL-values are used by the routing-functions for HWOut/AUXSendReceive, specifically for their volume-value as these can't be converted using Reaper's own DB2SLIDER or SLIDER2DB, so this function should help you.
See MKVOL2DB to convert a MKVOL-value into it's dB-representation
returns nil in case of an error
PARAMETERS:
db_value:the dB-value, that you want to convert into the MKVOL-value; minimum is -144dB
RETURNS:
mkvol_value:the mkvol-value, converted from the dB-value
------
name:ultraschall.ConvertIntegerIntoString2
language:lua
return:(string:converted_value)
params:(integer:Size), (integer:integervalue_1), (...:), (integer:integervalue_n)
description:
Splits numerous integers into its individual bytes and converts them into a string-representation.
Maximum 32bit-integers are supported.
Returns nil in case of an error.
PARAMETERS:
Size:the maximum size of the integer to convert, 1(8 bit) to 4(32 bit)
integervalue_1:the first integer value to convert from
:the last integer value to convert from
integervalue_n:the last integer value to convert from
RETURNS:
converted_value:the string-representation of the integer
------
name:ultraschall.ConvertStringToIntegers
language:lua
return:(integer:num_integers),(array:individual_integers)
params:(string:String), (integer:Size)
description:
Converts a string into its integer-representation. Allows you to set the size of the integers between 1 Byte and 8 Bytes(64 bits).
Returns -1 in case of an error.
PARAMETERS:
String:the string to convert into its integer representation
Size:the size of the integers. 1 for 8 bits, 2 for 16 bits, ..., 8 for 64 bits
RETURNS:
num_integers:the number of integers converted from this string
individual_integers:the individual integers, as converted from the original string
------
name:ultraschall.SetScriptIdentifier_Description
language:lua
return:(integer:retval)
params:(string:description)
description:
The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance
its own script-identifier, so you can be sure, that you communicate with the right instance.
With this function, you can set its description, that is less cryptic than the ScriptIdentifier itself.
You can get it using GetScriptIdentifier_Description.
returns -1 in case of an error
PARAMETERS:
description:the new description of your script
RETURNS:
retval:-1 in case of an error
------
name:ultraschall.GetScriptIdentifier_Description
language:lua
return:(string:script_identifier_description)
params:
description:
The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance
its own script-identifier, so you can be sure, that you communicate with the right instance.
With this function, you can get its description, that is less cryptic than the ScriptIdentifier itself.
You can set it using SetScriptIdentifier_Description.
RETURNS:
script_identifier_description:the description of your script
------
name:ultraschall.SetScriptIdentifier_Title
language:lua
return:(integer:retval)
params:(string:title)
description:
The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance
its own script-identifier, so you can be sure, that you communicate with the right instance.
With this function, you can set its title, that is less cryptic than the ScriptIdentifier itself.
No \n-newlines, \r-carriag returns or \0-nullbytes are allowed and will be removed
You can get it using GetScriptIdentifier_Title.
returns -1 in case of an error
PARAMETERS:
title:the new title of your script
RETURNS:
retval:-1 in case of an error
------
name:ultraschall.GetScriptIdentifier_Title
language:lua
return:(string:script_identifier_title)
params:
description:
The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance
its own script-identifier, so you can be sure, that you communicate with the right instance.
With this function, you can get its description, that is less cryptic than the ScriptIdentifier itself.
Default is the script's filename.
You can set it using SetScriptIdentifier_Title.
RETURNS:
script_identifier_title:the title of your script; default is the filename of the script
------
name:ultraschall.ResetProgressBar
language:lua
return:
params:
description:
Resets the initial-values of the progressbar. Should be called, if you want to start a new progressbar after you filled up the former one, or you may have update-issues.
------
name:ultraschall.PrintProgressBar
language:lua
return:(boolean:retval),(string:ProgressString),(integer:percentage),(integer:progress_position)
params:(boolean:show), (integer:length), (integer:maximumvalue), (integer:currentvalue), (boolean:percentage), (integer:offset), (optional string:toptext), (optional string:bottomtext)
description:
Calculate a simple progressbar, which can be optionally displayed in the ReaScript console; Will clear the console before displaying the next updated progressbar.
Will update it only, if the current-value of last time this function got called is different from the current one or toptext or bottomtext changed.
You can also use the returnvalues to draw your own progressbar, e.g. in a gfx.init-window
If you need to calculate a new progressbar, after the former got to 100%, it is wise to call ResetProgressBar, or it might not update the first time you call this function.
Returns false in case of an error
PARAMETERS:
show:true, show progressbar in the ReaScript-console; false, don't show it there
length:the length of the progressbar in characters. Minimum is 10.
maximumvalue:the maximum integer-value, to which to count; minimum 1
currentvalue:the current integer-value, at which we are with counting, minimum 0
percentage:true, show percentage in progressbar; false, show only progressbar
offset:an offset to be added before the progressbar, so you can indent it
toptext:an optional string, that shall be displayed above the progressbar
bottomtext:an optional string, that shall be displayed below the progressbar
RETURNS:
retval:true, displaying was successful; false, displaying wasn't successful
ProgressString:the progressbar including its full statuses and layout
percentage:the progression of the progressbar in percent
progress_position:the current progress-position, relative to length and maximumvalue
------
name:ultraschall.StoreFunctionInExtState
language:lua
return:(boolean:retval)
params:(string:section), (string:key), (function:func), (boolean:debug)
description:
Stores a function into an extstate. You can store it's debug-information as well.
To load the function again, use LoadFunctionFromExtState
Returns false in case of an error
PARAMETERS:
section:the sectionname of the extstate
key:the keyname of the extstate
func:the function, that you want to store
debug:true, store debug-values as well; false, don't store the debug-values as well
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.LoadFunctionFromExtState
language:lua
return:(function:function)
params:(string:section), (string:key)
description:
Loads a function from an extstate, if it has been stored in there before.
The extstate must contain a valid function. If something else is stored, the loaded "function" might crash Lua!
To store the function, use StoreFunctionInExtState
Returns false in case of an error
PARAMETERS:
section:the sectionname of the extstate
key:the keyname of the extstate
RETURNS:
function:the stored function, that you want to (re-)load
------
name:ultraschall.ConvertHex2Ascii
language:lua
return:(string:ascii_string)
params:(string:hexstring)
description:
converts a hexstring into an ascii-string.
Will combine two hexvalues into one byte, until the whole string is converted.
See ConvertAscii2Hex to convert a string into its HEX-representation.
Returns nil in case of an error
PARAMETERS:
hexstring:the original string with only hexadecimal numbers 
RETURNS:
ascii_string:the converted string
------
name:ultraschall.ConvertAscii2Hex
language:lua
return:(string:hexstring)
params:(string:ascii_string)
description:
converts an ascii-string into a hexstring.
See ConvertHex2Ascii to convert a HEX-string into its normal string-representation.
Returns nil in case of an error
PARAMETERS:
ascii_string:the converted string
RETURNS:
hexstring:the original string with only hexadecimal numbers 
------
name:ultraschall.GetAllActions
language:lua
return:(integer:number_of_actions),(table:actiontable)
params:(integer:section)
description:
Returns all actions and accompanying attributes from a specific section as a handy table
The table is of the following format:
actiontable[index]["commandid"]       - the command-id-number of the action
actiontable[index]["actioncommandid"] - the action-command-id-string of the action, if it's a named command(usually scripts or extensions), otherwise empty string
actiontable[index]["name"]            - the name of command
actiontable[index]["scriptfilename"]  - the filename+path of a command, that is a ReaScript, otherwise empty string
actiontable[index]["termination"]     - the termination-state of the action
-1  - not available
4   - Dialogwindow appears(Terminate, New Instance, Abort), if another instance of a given script is started, that's already running
260 - always Terminate All(!) Instances, if you try to run another instance of a script, that's already running. When no instance is running, it simply starts the script.
516 - always start a New Instance of the script, that's already running
actiontable[index]["consolidate"]     - the consolidate-state of custom actions; 1 consolidate undo points, 2 show in Actions-Menu, 3 consolidate undo points AND show in Actions Menu; -1, if not available
actiontable[index]["actiontype"]      - the type of the action; "native action", "extension action", "custom action", "script"
returns -1 in case of an error.
PARAMETERS:
section:the section, whose actions you want to retrieve
RETURNS:
number_of_actions:the number of actions found; -1 in case of an error
actiontable:a table, which holds all attributes of an action(see description for more details)
------
name:ultraschall.IsWithinTimeRange
language:lua
return:(boolean:retval)
params:(number:time), (number:start), (number:stop)
description:
returns if time is between(including) start and stop.
returns false in case of an error
PARAMETERS:
time:the time in seconds, to check for
start:the starttime in seconds, within to check for
stop:the endtime in seconds, within to check for
RETURNS:
retval:true, time is between start and stop; false, it isn't
------
name:ultraschall.MediaExplorer_OnCommand
language:lua
return:(boolean:retval)
params:(integer:actioncommandid)
description:
runs a Media Explorer-associated action.
Note: Can only run Reaper's native actions currently(all actions having a number as actioncommandid), not scripts!
returns false if Media Explorer is closed
RETURNS:
retval:true, could update run the action in the Media Explorer; false, couldn't run it
------
name:ultraschall.UpdateMediaExplorer
language:lua
return:(boolean:retval)
params:
description:
updates the listview of the Media Explorer.
returns false if Media Explorer is closed
RETURNS:
retval:true, could update the listview of the Media Explorer; false, couldn't update the listview
------
name:ultraschall.FindPatternsInString
language:lua
return:(integer:count_found_items),(array:found_items)
params:(string:SourceString), (string:pattern), (boolean:sort_after_finding)
description:
Finds all occurrences of matching-patterns in a string. You can sort them optionally.
returns -1 in case of an error
PARAMETERS:
SourceString:the source-string to search for all occurences
pattern:the matching-pattern, with which to search for in the string
sort_after_finding:true, sorts the entries; false, doesn't sort the entries
RETURNS:
count_found_items:the number of found items in the string; -1, in case of an error
found_items:all occurrences found in the string as an array
------
name:ultraschall.RunLuaSourceCode
language:lua
return:(boolean:retval)
params:(string:code)
description:
runs the Lua-code stored in the parameter code
Does not check for validity and syntaxerrors in the code!
You can also add new callable functions that way. Just put function-declarations in the parameter code.
For instance from the following code:
code=function main()
reaper.MB("I'm only run, when my parent function main is called", "", 0)
end
reaper.MB("I'm run immediately", "", 0)"
when called by
ultraschall.RunLuaSourceCode(code)
only the line reaper.MB("I'm run immediately", "", 0) will be run immediately.
If you want to run the function main as well, you need to explicitly call it with main()
returns false in case of an error; nil, in case of an syntax/lua-error in the code itself
PARAMETERS:
code:the code, that you want to execute; you can also add new functions that way
RETURNS:
retval:true, code was run successfully; false, code wasn't successfully; nil, code had an error in it, probably syntax error
------
name:ultraschall.Main_OnCommand_LuaCode
language:lua
return:(boolean:retval),(string:script_identifier)
params:(string:Code), (string:...)
description:
Runs LuaCode as new temporary script-instance. It internally registers the code as a file temporarily as command, runs it and unregisters it again.
This is especially helpful, when you want to run a command for sure without possible command-id-number-problems.
It returns a unique script-identifier for this script, which can be used to communicate with this script-instance.
The started script gets its script-identifier using GetScriptIdentifier.
You can use this script-identifier e.g. as extstate.
Returns false in case of an error
PARAMETERS:
Code:the Lua-code, which shall be run; will not be checked vor validity!
...:parameters that shall be passed over to the script
RETURNS:
retval:true, if running it was successful; false, if not
script_identifier:a unique script-identifier, which can be used as extstate to communicate with the started code
------
name:ultraschall.ReplacePatternInString
language:lua
return:(string:altered_string),(boolean:replaced)
params:(string:OriginalString), (string:pattern), (string:replacestring), (integer:index)
description:
Replaces the index'th occurrence of pattern in OriginalString with replacepattern.
Unlike string.gsub, this replaces only the selected pattern!
returns nil, false in case of an error
PARAMETERS:
OriginalString:the string, from which you want to replace a specific occurence of a matching pattern
pattern:the pattern to look for
replacestring:the string, which shall replace the found pattern
index:the number of found occurence of the pattern in the string, which shall be replaced
RETURNS:
altered_string:the altered string, where the n'th occurence of the pattern has been replaced
replaced:true, there has been a replacement; false, no replacement has happened
------
name:ultraschall.ConvertFunction_ToBase64String
language:lua
return:(string:BASE64_functionstring)
params:(function:to_convert_function), (boolean:debug)
description:
Converts a function into a BASE64-string.
To load a function from a BASE64-string, use ConvertFunction_FromBase64String
Returns nil in case of an error
PARAMETERS:
to_convert_function:the function, that you want to convert
debug:true, store debug-information as well; false, only store function
RETURNS:
BASE64_functionstring:the function, stored as BASE64-string
------
name:ultraschall.ConvertFunction_FromBase64String
language:lua
return:(function:function)
params:(string:BASE64_functionstring)
description:
Loads a function from a BASE64-string.
To convert a function into a BASE64-string, use ConvertFunction_ToBase64String
Returns nil in case of an error
PARAMETERS:
BASE64_functionstring:the function, stored as BASE64-string
RETURNS:
function:the loaded function
------
name:ultraschall.ConvertFunction_ToHexString
language:lua
return:(string:HEX_functionstring)
params:(function:to_convert_function), (boolean:debug)
description:
Converts a function into a HEX-string.
To load a function from a HEX-string, use ConvertFunction_FromHexString
Returns nil in case of an error
PARAMETERS:
to_convert_function:the function, that you want to convert
debug:true, store debug-information as well; false, only store function
RETURNS:
HEX_functionstring:the function, stored as HEX-string
------
name:ultraschall.ConvertFunction_FromHexString
language:lua
return:(function:function)
params:(string:HEX_functionstring)
description:
Loads a function from a HEX-string.
To convert a function into a HEX-string, use ConvertFunction_ToHexString
Returns nil in case of an error
PARAMETERS:
HEX_functionstring:the function, stored as HEX-string
RETURNS:
function:the loaded function
------
name:ultraschall.ResizePNG
language:lua
return:(integer:count)
params:(string:filename_with_path), (string:outputfilename_with_path), (boolean:aspectratio), (integer:width), (integer:height)
description:
resizes a png-file. It will stretch/shrink the picture by that. That means you can't crop or enhance pngs with this function.
If you set aspectratio=true, then the image will be resized with correct aspect-ratio. However, it will use the value from parameter width as maximum size for each side of the picture.
So if the height of the png is bigger than the width, the height will get the size and width will be shrinked accordingly.
When making pngs bigger, pixelation will occur. No pixel-filtering within this function!
returns false in case of an error
PARAMETERS:
filename_with_path:the output-file, where to store the resized png
outputfilename_with_path:the output-file, where to store the resized png
aspectratio:true, keep aspect-ratio(use size of param width as base); false, don't keep aspect-ratio
width:the width of the newly created png in pixels
height:the height of the newly created png in pixels
------
name:ultraschall.CaptureScreenAreaAsPNG
language:lua
return:(boolean:retval)
params:(string:filename_with_path), (integer:x), (integer:y), (integer:w), (integer:h)
description:
captures an area of the screen and writes it as png-file.
Note for Mac-users: it doesn't seem to work under certain circumstances, which are still under investigation.
returns false in case of an error
PARAMETERS:
filename_with_path:the filename with path of the png-file to write
x:the x-position of the area to capture
y:the y-position of the area to capture
w:the width of the area to capture
h:the height of the area to capture
RETURNS:
retval:true, capturing was successful; false, capturing was unsuccessful
------
name:ultraschall.CaptureWindowAsPNG
language:lua
return:(boolean:retval)
params:(identifier:window_or_windowtitle), (string:filename_with_path), (integer:x), (integer:y), (integer:w), (integer:h), (boolean:win10)
description:
captures a window and stores it as png-file.
Note for Windows-users with no Windows 10:
Keep in mind, that even if you choose a dedicated window, if it's located behind other windows, these might be captured as well.
Note for Mac-users: it doesn't seem to work under certain circumstances, which are still under investigation.
returns false in case of an error
PARAMETERS:
window_or_windowtitle:either a hwnd or the exact windowtitle of the window, which you want to capture
filename_with_path:the filename with path of the output-file
x:the x-position within the window to capture; nil, to use the left side of the window
y:the y-position within the window to capture; nil, to use the top side of the window
w:true, use the workaround for invisible window-borders on windows 10; false, just capture the window
h:the height of the capture-area; nil, to use the height of the window
win10:true, use the workaround for invisible window-borders on windows 10; false, just capture the window
RETURNS:
retval:true, capturing was successful; false, capturing was unsuccessful
------
name:ultraschall.Localize
language:lua
return:(string:translated_string),(boolean:retval)
params:(string:original_string), (...:)
description:
Translates the string original_string into its translated version, as stored in a translation-file.
To set a translationfile, see Localize_UseFile.
If the string contains %s, the optional parameters "..." will replace them. The order of the parameters is the order of the replacement of the %s in the string.
If no translation is available, it returns the original string. In that case, %s in the string could be replaced by optional parameters ...
This function can be used with or without ultraschall. at the beginning, for your convenience.
see [specs for more information](../misc/ultraschall_translation_file_format.USLangPack).
returns nil in case of an error
PARAMETERS:
original_string:the original string, that you want to translate
:optional parameters, who will be used to substitute %s in the returned string; order of the optional parameters reflects order of %s in the string
RETURNS:
translated_string:the translated string; will be the original_string(with optional substitution), if translation is not possible
retval:true, translation-was successful; false, translation wasn't successful
------
name:ultraschall.Localize_RefreshFile
language:lua
return:(boolean:retval)
params:
description:
Reloads the translation-file, that has been set using Localize_UseFile.
see [specs for more information](../misc/ultraschall_translation_file_format.USLangPack).
RETURNS:
retval:true, translation-file has been found and set successfully; false, translation-file hasn't been found
------
name:ultraschall.AddNormalMarker
language:lua
return:(integer:marker_number),(string:guid)
params:(number:position), (integer:shown_number), (string:markertitle)
description:
Adds a normal marker. Returns the index of the marker as marker_number.
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
returns -1 in case of an error
PARAMETERS:
position:position in seconds.
shown_number:the number, that will be shown within Reaper. Can be multiple times. Use -1 to let Reaper decide the number.
markertitle:the title of the marker.
RETURNS:
marker_number:the overall-marker-index, can be used for reaper's own marker-management functions
guid:the guid, associated with this marker
------
name:ultraschall.AddPodRangeRegion
language:lua
return:(integer:marker_number),(string:guid)
params:(number:startposition), (number:endposition)
description:
Adds a region, which shows the time-range from the beginning to the end of the podcast.
returns -1 in case of an error
PARAMETERS:
startposition:begin of the podcast in seconds
endposition:end of the podcast in seconds
RETURNS:
marker_number:the overall-marker-index, can be used for reaper's own marker-management functions
guid:the guid of the PodRangeRegion
------
name:ultraschall.GetMarkerByName
language:lua
return:(integer:count_markers),(array:foundmarkers),(array:found_guids)
params:(string:searchname), (boolean:searchisrgn)
description:
Get all markers/regions that have a certain name. This function is not case-sensitive.
returns -1 in case of an error
PARAMETERS:
searchname:the name to look for; must be exact; not case-sensitive
searchisrgn:true, search only within regions; false, search only within markers
RETURNS:
count_markers:the number of found markers/regions
foundmarkers:an array with all marker/region-numbers of the found markers; counts only regions or markers(depending on parameter searchisrgn); markernumbers are 0-based
found_guids:the guids of all markers/regions found
------
name:ultraschall.GetMarkerByName_Pattern
language:lua
return:(integer:count_markers),(array:foundmarkers),(array:foundguids)
params:(string:searchname), (boolean:searchisrgn)
description:
Get all markers/regions that have a certain character-sequence in their name. This function is not case-sensitive.
returns -1 in case of an error
PARAMETERS:
searchname:the name to look for; a character-sequence that shall be part of the name; not case-sensitive
searchisrgn:true, search only within regions; false, search only within markers
RETURNS:
count_markers:the number of found markers/regions
foundmarkers:an array with all marker/region-numbers of the found markers; counts only regions or markers(depending on parameter searchisrgn)
foundguids:the guids of all found markers/regions
------
name:ultraschall.GetMarkerAndRegionsByIndex
language:lua
return:(string:name),(integer:shown_number),(integer:color),(number:pos),(optional number:rgnend),(string:guid)
params:(integer:idx), (boolean:searchisrgn)
description:
Returns the values of a certain marker/region. The numbering of idx is either only for the markers or for regions, depending on what you set with parameter searchisrgn.
returns nil in case of an error
PARAMETERS:
idx:the number of the requested marker/region; counts only within either markers or regions, depending on what you've set searchisrgn to; 1-based!
searchisrgn:true, search only within regions; false, search only within markers
RETURNS:
name:the name of the marker/region
color:the color-value of the marker/region
pos:the position of the marker/region
rgnend:the end of the region
guid:the guid of the marker/region; if it's a marker, the retval rgnend will be nil!
------
name:ultraschall.SetMarkerByIndex
language:lua
return:(boolean:retval)
params:(integer:idx), (boolean:searchisrgn), (integer:shown_number), (number:position), (position:rgnend), (string:name), (integer:color), (integer:flags)
description:
Sets the values of a certain marker/region. The numbering of idx is either only for the markers or for regions, depending on what you set with parameter searchisrgn.
returns false in case of an error
PARAMETERS:
idx:the number of the requested marker/region; counts only within either markers or regions, depending on what you've set searchisrgn to
searchisrgn:true, search only within regions; false, search only within markers
shown_number:the shown-number of the region/marker; no duplicate numbers for regions allowed; nil to keep previous shown_number
position:the end of the region in seconds; nil to keep previous region-end
rgnend:the end of the region in seconds; nil to keep previous region-end
name:the name of the marker/region; nil to keep the previous name
color:color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000; nil to keep the previous color
flags:flags&1 to clear name; 0, keep it; nil to use the previous setting
RETURNS:
retval:true, setting the marker/region was successful; false, setting of the marker/region was unsuccessful.
------
name:ultraschall.AddEditMarker
language:lua
return:( integer:marker_number),(string:guid)
params:(number:position), (integer:shown_number), (string:edittitle)
description:
Adds an Edit marker. Returns the index of the marker as marker_number.
returns -1 in case of an error
PARAMETERS:
position:position in seconds.
shown_number:the number, that will be shown within Reaper. Can be multiple times. Use -1 to let Reaper decide the number.
edittitle:the title of the edit-marker; will be shown as _Edit:edittitle
RETURNS:
marker_number:the overall-marker-index, can be used for reaper's own marker-management functions
guid:the guid, associated with this marker
------
name:ultraschall.CountNormalMarkers
language:lua
return:( integer:number_of_markers)
params:
description:
Counts all normal markers.
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
RETURNS:
number_of_markers:number of normal markers
------
name:ultraschall.CountEditMarkers
language:lua
return:( integer:number_of_edit_markers)
params:
description:
Counts all edit-markers.
RETURNS:
number_of_edit_markers:number of edit markers
------
name:ultraschall.GetPodRangeRegion
language:lua
return:( number:start_position),(number:end_position),(string:guid)
params:
description:
Gets the start_position and the end_position of the PodRangeRegion.
returns -1 if no PodRangeRegion exists
RETURNS:
start_position:beginning of the podrangeregion, that marks the beginning of the podcast
end_position:end of the podrangeregion, that marks the end of the podcast
guid:the guid associated with this marker
------
name:ultraschall.EnumerateNormalMarkers
language:lua
return:(integer:retnumber),(integer:retidxnum),(number:position),(string:markertitle),(string:guid)
params:(integer:number)
description:
Get the data of a normal marker.
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
Returns -1 in case of error
PARAMETERS:
number:number of the marker(normal markers only). Refer ultraschall.CountNormalMarkers for getting the number of normal markers.
RETURNS:
retnumber:overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of
retidxnum:indexnumber of the marker
position:the position of the marker
markertitle:the name of the marker
guid:the guid of the enumerated marker
------
name:ultraschall.EnumerateEditMarkers
language:lua
return:(integer:retnumber),(integer:shown_number),(number:position),(string:edittitle),(string:guid)
params:(integer:edit_index)
description:
Gets the data of an edit marker.
returns -1 in case of an error
PARAMETERS:
edit_index:number of the edit-marker. Refer ultraschall.CountEditMarkers for getting the number of edit-markers.
RETURNS:
retnumber:overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of
shown_number:indexnumber of the marker
position:the position of the marker
edittitle:the name of the marker
guid:the guid of the editmarker
------
name:ultraschall.GetAllEditMarkers
language:lua
return:(integer:number_of_editmarkers),(array:editmarkersarray)
params:
description:
returns the number of editmarkers and an array with each editmarker in the format:
editmarkersarray[index][0] - position
editmarkersarray[index][1] - name
editmarkersarray[index][2] - idx
editmarkersarray[index][3] - guid
RETURNS:
number_of_editmarkers:the number of editmarkers returned
editmarkersarray:an array with all the edit-markers of the project
------
name:ultraschall.GetAllNormalMarkers
language:lua
return:(index:number_of_normalmarkers),(array:normalmarkersarray)
params:
description:
returns the number of normalmarkers and an array with each normalmarker in the format:
normalmarkersarray[index][0] - position
normalmarkersarray[index][1] - name
normalmarkersarray[index][2] - idx of the marker within all markers in project
normalmarkersarray[index][3] - the shown index number of the marker
normalmarkersarray[index][4] - the guid of the marker
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
RETURNS:
number_of_normalmarkers:the number of normalmarkers returned
normalmarkersarray:an array, that holds all normal markers of the project
------
name:ultraschall.GetAllMarkers
language:lua
return:( integer:number_of_all_markers),(array:allmarkersarray)
params:
description:
To get all Markers in the project(normal, edit, chapter), regardless of their category.
Doesn't return regions!
returns the number of markers and an array with each marker in the format:
markersarray[index][0] - position
markersarray[index][1] - name
markersarray[index][2] - indexnumber of the marker within all markers in the project
markersarray[index][3] - the shown index-number
markersarray[index][4] - the color of the marker
markersarray[index][5] - the guid of the marker
RETURNS:
allmarkersarray:an array, that holds all markers(not regions!) of the project
------
name:ultraschall.SetNormalMarker
language:lua
return:( boolean:retval)
params:(integer:number), (number:position), (integer:shown_number), (string:markertitle)
description:
Sets values of a normal Marker(no _Chapter:, _Shownote:, etc). Returns true if successful and false if not(i.e. marker doesn't exist)
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
returns false in case of an error
PARAMETERS:
number:the number of the marker
position:position of the marker in seconds
shown_number:the number of the marker
markertitle:title of the marker
RETURNS:
retval:true if successful and false if not(i.e. marker doesn't exist)
------
name:ultraschall.SetEditMarker
language:lua
return:( boolean:retval)
params:(integer:edit_index), (number:position), (integer:shown_number), (string:edittitle)
description:
Sets values of an Edit Marker. Returns true if successful and false if not(i.e. marker doesn't exist)
returns false in case of an error
PARAMETERS:
edit_index:the number of the edit marker
position:position of the marker in seconds
shown_number:the number of the marker
RETURNS:
retval:true if successful and false if not(i.e. marker doesn't exist)
------
name:ultraschall.DeletePodRangeRegion
language:lua
return:( integer:retval)
params:
description:
deletes the PodRange-Region.
Returns false if unsuccessful
RETURNS:
retval:true, if deleting was successful; false, if not
------
name:ultraschall.DeleteNormalMarker
language:lua
return:( boolean:retval)
params:(integer:number)
description:
Deletes a Normal-Marker. Returns true if successful and false if not(i.e. marker doesn't exist) Use ultraschall.EnumerateNormalMarkers to get the correct number.
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
returns -1 in case of an error
PARAMETERS:
number:number of a normal marker
RETURNS:
retval:true, if successful, false if not
------
name:ultraschall.DeleteEditMarker
language:lua
return:( boolean:retval)
params:(integer:edit_index)
description:
Deletes an _Edit:-Marker. Returns true if successful and false if not(i.e. marker doesn't exist) Use ultraschall.EnumerateEditMarkers to get the correct number.
PARAMETERS:
edit_index:number of an edit marker
RETURNS:
retval:true, if successful, false if not
------
name:ultraschall.ExportEditMarkersToFile
language:lua
return:( integer:retval)
params:(string:filename_with_path), (number:PodRangeStart), (number:PodRangeEnd)
description:
Export Edit-Markers (not regions!) to filename_with_path.
Each line in the exportfile contains an entry for such an edit-marker in the format:
hh:mm:ss.mss Title
Returns -1 in case of error.
PARAMETERS:
filename_with_path:the name of the export-file
PodRangeStart:beginning of the podcast in seconds
PodRangeEnd:end of the podcast in seconds
RETURNS:
retval:1 in case of success, -1 if it failed
------
name:ultraschall.ExportNormalMarkersToFile
language:lua
return:( integer:retval)
params:(string:filename_with_path), (number:PodRangeStart), (number:PodRangeEnd)
description:
Export Normal-Markers to filename_with_path. Returns -1 in case of error.
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
returns -1 in case of an error
PARAMETERS:
filename_with_path:the name of the export-file
PodRangeStart:beginning of the podcast in seconds
PodRangeEnd:end of the podcast in seconds
RETURNS:
retval:1 in case of success, -1 if it failed
------
name:ultraschall.ImportEditFromFile
language:lua
return:( array:editmarkers)
params:(string:filename_with_path), (PodRangestart:)
description:
Imports editentries from a file and returns an array of the imported values.
returns -1 in case of error
PARAMETERS:
filename_with_path:markerfile to be imported
:podcast-start-offset
------
name:ultraschall.ImportMarkersFromFile
language:lua
return:( array:markers)
params:(string:filename_with_path), (PodrangeStart:)
description:
Imports markerentries from a file and returns an array of the imported values.
returns -1 in case of error
PARAMETERS:
filename_with_path:markerfile to be imported
:podcast-start-offset
------
name:ultraschall.MarkerToEditMarker
language:lua
return:( integer:idx),(integer:shown_number),(number:position),(string:markertitle)
params:(integer:markerindex)
description:
Converts a normal-marker to an edit-marker.
Normal markers are all markers, that don't include "_Shownote:" or "_Edit" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).
returns -1 in case of an error
PARAMETERS:
markerindex:number of the normal-marker. Refer ultraschall.CountNormalMarkers for getting the number of normal-markers.
RETURNS:
idx:overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of
shown_number:the shown number of the marker
position:the position of the marker in seconds
markertitle:the markertitle
------
name:ultraschall.EditToMarker
language:lua
return:( integer:idx),(integer:shown_number),(number:position),(string:markertitle)
params:(integer:edit_index)
description:
Converts an edit-marker to a normal marker.
returns -1 in case of an error
PARAMETERS:
edit_index:number of the edit-marker. Refer ultraschall.CountEditMarkers for getting the number of edit-markers.
RETURNS:
idx:overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of
shown_number:the shown number of the marker
position:the position of the marker in seconds
markertitle:the markertitle
------
name:ultraschall.GetMarkerByScreenCoordinates
language:lua
return:(string:marker)
params:(integer:xmouseposition)
description:
returns the markers at a given absolute-x-pixel-position. It sees markers according their graphical representation in the arrange-view, not just their position! Returned string will be "Markeridx\npos\nName\nMarkeridx2\npos2\nName2\n...".
Will return "", if no marker has been found.
Returns only markers, no time markers or regions!
returns nil in case of an error
PARAMETERS:
xmouseposition:the absolute x-screen-position, like current mouse-position
RETURNS:
marker:a string with all markernumbers, markerpositions and markertitles, separated by a newline. 
------
name:ultraschall.GetMarkerByTime
language:lua
return:(string:markers)
params:(number:position)
description:
returns the markers at a given project-position in seconds.
It sees markers according their actual graphical representation in the arrange-view, not just their position.
If, for example, you pass to it the current playposition, the function will return the marker as long as the playcursor is behind the marker-graphics.
Returned string will be "Markeridx\npos\nName\nMarkeridx2\npos2\nName2\n...".
Will return "", if no marker has been found.
Returns only markers, no time markers or regions!
returns nil in case of an error
PARAMETERS:
position:the time-position in seconds
------
name:ultraschall.GetRegionByScreenCoordinates
language:lua
return:(string:markers)
params:(integer:xmouseposition)
description:
returns the regions at a given absolute-x-pixel-position. It sees regions according their graphical representation in the arrange-view, not just their position! Returned string will be "Regionidx\npos\nName\nRegionidx2\npos2\nName2\n...".
Returns only regions, no time markers or other markers!
Will return "", if no region has been found.
returns nil in case of an error
PARAMETERS:
xmouseposition:the absolute x-screen-position, like current mouse-position
------
name:ultraschall.GetRegionByTime
language:lua
return:(string:markers)
params:(number:position)
description:
returns the regions at a given absolute-x-pixel-position. It sees regions according their graphical representation in the arrange-view, not just their position! Returned string will be "Regionidx\npos\nName\nRegionidx2\npos2\nName2\n...".
Returns only regions, no timesignature-markers or other markers!
Will return "", if no region has been found.
returns nil in case of an error
PARAMETERS:
position:position in seconds
------
name:ultraschall.GetTimeSignaturesByScreenCoordinates
language:lua
return:(string:markers)
params:(integer:xmouseposition)
description:
returns the time-signature/tempo-marker at a given absolute-x-pixel-position. It sees time-signature/tempo-markers according their graphical representation in the arrange-view, not just their position! Returned string will be "tempomarkeridx\npos\ntempomarkeridx2\npos2\n...".
Returns only time-signature-markers, no regions or other markers!
Will return "", if no timesig-marker has been found.
returns nil in case of an error
PARAMETERS:
xmouseposition:the absolute x-screen-position, like current mouse-position
------
name:ultraschall.GetTimeSignaturesByTime
language:lua
return:(string:markers)
params:(number:position)
description:
returns the time-signature/tempo-marker at a given absolute-x-pixel-position. It sees time-signature/tempo-markers according their graphical representation in the arrange-view, not just their position! Returned string will be "tempomarkeridx\npos\ntempomarkeridx2\npos2\n...".
Returns only time-signature-markers, no other markers or regions!
Will return "", if no timesig-marker has been found.
returns nil in case of an error
PARAMETERS:
position:position in seconds
------
name:ultraschall.IsMarkerEdit
language:lua
return:(boolean:retval)
params:(integer:markerid)
description:
returns true, if the marker is an edit-marker, false if not. Returns nil, if markerid is invalid.
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.
returns nil in case of an error
PARAMETERS:
markerid:the markerid of all markers in the project, beginning with 0 for the first marker
RETURNS:
retval:true, if it's an edit-marker, false if not
------
name:ultraschall.IsMarkerNormal
language:lua
return:(boolean:retval)
params:(integer:markerid)
description:
returns true, if the marker is a normal-marker, false if not. Returns nil, if markerid is invalid.
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.
returns nil in case of an error
PARAMETERS:
markerid:the markerid of all markers in the project, beginning with 0 for the first marker
RETURNS:
retval:true, if it's an normal-marker, false if not
------
name:ultraschall.IsRegionPodrange
language:lua
return:(boolean:retval)
params:(integer:markerid)
description:
returns true, if the marker is a Podrange-region, false if not. Returns nil, if markerid is invalid.
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.
returns nil in case of an error
PARAMETERS:
markerid:the markerid of all markers in the project, beginning with 0 for the first marker
RETURNS:
retval:true, if it's a PodRange-Region, false if not
------
name:ultraschall.IsRegionEditRegion
language:lua
return:(boolean:retval)
params:(integer:markerid)
description:
returns true, if the marker is an Edit-region, false if not. Returns nil, if markerid is invalid.
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.
returns nil in case of an error
PARAMETERS:
markerid:the markerid of all markers in the project, beginning with 0 for the first marker
RETURNS:
retval:true, if it's an Edit-Region, false if not
------
name:ultraschall.AddEditRegion
language:lua
return:(integer:markernr),(string:guid)
params:(number:startposition), (number:endposition), (string:text)
description:
Adds a new edit-region and returns index of the newly created edit-marker-region.
returns -1 in case of an error
PARAMETERS:
startposition:startposition in seconds
endposition:endposition in seconds
text:the title of the marker
RETURNS:
markernr:the number of the newly created region
guid:the guid, associated with this edit-region
------
name:ultraschall.SetEditRegion
language:lua
return:(boolean:retval)
params:(integer:number), (number:position), (number:endposition), (string:edittitle)
description:
Sets the values of an already existing edit-region. To retain an already set position, endposition and/or edittitle, use nil.
Returns true in case of success, false if not.
Note: if you set the new beginning of the region before another region, the indexnumber of the edit-region changes. So if you want to set an edit-region repeatedly, you should get the indexnumber using ultraschall.EnumerateEditRegion, or you might accidently change another region!
returns -1 in case of an error
PARAMETERS:
number:endposition in seconds, nil to retain the old value
position:endposition in seconds, nil to retain the old value
endposition:endposition in seconds, nil to retain the old value
RETURNS:
retval:true, in case of success, false if not
------
name:ultraschall.DeleteEditRegion
language:lua
return:(boolean:retval)
params:(integer:number)
description:
Deletes an already existing edit-region.
Returns true in case of success, false if not.
PARAMETERS:
number:the number of the edit-region, beginning with 1 for the first edit-region
RETURNS:
retval:true, in case of success, false if not
------
name:ultraschall.EnumerateEditRegion
language:lua
return:(integer:retval),(number:position),(number:endposition),(string:title),(integer:rgnindexnumber),(string:guid)
params:(integer:number)
description:
Returns the values of an edit-region.
returns -1 in case of an error
PARAMETERS:
number:the number of the edit-region, beginning with 1 for the first edit-region
RETURNS:
retval:the overall marker-index-number of all markers in the project, -1 in case of error
position:endposition in seconds
endposition:endposition in seconds
title:the title of the region
rgnindexnumber:the overall region index number, as used by other of Reaper's own marker-functions
guid:the guid of the edit-region
------
name:ultraschall.CountEditRegions
language:lua
return:(integer:retval)
params:
description:
returns the number of edit-regions in the project.
RETURNS:
retval:the number of edit-regions in the project
------
name:ultraschall.GetAllMarkersBetween
language:lua
return:(integer:number_of_all_markers),(array:allmarkersarray)
params:(number:startposition), (number:endposition)
description:
To get all Markers in the project(normal, edit, chapter), regardless of their category, between startposition and endposition.
Doesn't return regions!
returns the number of markers and an array with each marker in the format:
markersarray[index][0] - position
markersarray[index][1] - name
markersarray[index][2] - indexnumber of the marker within all markers in the project
markersarray[index][3] - the shown index-number
markersarray[index][4] - the color of the marker
markersarray[index][5] - the guid of the marker
returns -1 in case of error
PARAMETERS:
startposition:the earliest position a returned marker may have
endposition:the latest position a returned marker may have
RETURNS:
allmarkersarray:an array, that holds all markers(not regions!) of the project
------
name:ultraschall.GetAllRegions
language:lua
return:(integer:number_of_all_regions),(array:allregionsarray)
params:
description:
To get all Regions in the project(normal, edit, chapter), regardless of their category.
Doesn't return markers!
returns the number of markers and an array with each marker in the format:
regionarray[index][0] - position
regionarray[index][1] - endposition
regionarray[index][2] - name
regionarray[index][3] - indexnumber of the region within all markers in the project. This is 1-based, unlike in Reaper's own API!
regionarray[index][4] - the shown index-number
regionarray[index][5] - the color of the region
regionarray[index][6] - the guid of the region
returns -1 in case of error
------
name:ultraschall.GetAllRegionsBetween
language:lua
return:(integer:number_of_all_regions),(array:allregionsarray)
params:(number:startposition), (number:endposition), (boolean:partial)
description:
To get all Regions in the project(normal, edit, chapter), regardless of their category between start- and endposition.
Set partial to true, if you want to get regions as well, that are only partially between start- and endposition
Doesn't return markers!
returns the number of markers and an array with each marker in the format:
regionarray[index][0] - position
regionarray[index][1] - endposition
regionarray[index][2] - name
regionarray[index][3] - indexnumber of the region within all markers in the project
regionarray[index][4] - the shown index-number
regionarray[index][5] - the color of the region
regionarray[index][6] - the guid of the region
returns -1 in case of error
PARAMETERS:
startposition:the earliest position a returned region may have
endposition:the latest position a returned region may have
------
name:ultraschall.ParseMarkerString
language:lua
return:(integer:number_of_entries),(array:markerarray)
params:(string:markerstring), (boolean:strict)
description:
Parses the entries in markerstring for timestrings and markertitles.
It returns the number of entries as well as a table with all marker-information.
The table works as such:
markertable[1][markernumber] - the timestring of the marker, -1 if no time is available
markertable[2][markernumber] - the time, converted into position in seconds, -1 if no time is available
markertable[3][markernumber] - the name of the marker
returns -1 in case of an error
PARAMETERS:
markerstring:a string with all markers. An entry is "timestring markertitle\n". Each marker-entry must be separated by a newline from each other.
strict:interpret the time in timestring more strict or more loosely?
RETURNS:
number_of_entries:the number of markers in markerstring
markerarray:a table with all the information of a marker
------
name:ultraschall.RenumerateMarkers
language:lua
return:(integer:retval)
params:(integer:colorvalue), (integer:startingnumber)
description:
Renumbers the shown numbers of markers(not regions!) in the current project, that have the color colorvalue.
The numbering starts with the number startingnumber.
The markers will be renumbered from the earliest marker in the project to the latest one.
returns -1 in case of an error
PARAMETERS:
colorvalue:the (systemdependent)colorvalue a marker must have. -1 if you want all markers to be numbered.
startingnumber:the first number that shall be given.
RETURNS:
retval:-1 in case of error, nil in case of success
------
name:ultraschall.IsMarkerAtPosition
language:lua
return:(boolean:retval),(integer:count),(string:markersstring),(array:markersarray)
params:(number:position)
description:
returns, if markers are at position and returns the marker-numbers.
The marker-numbers are numerated by order, not the shown marker-numbers!
returns false in case of error
PARAMETERS:
position:the position to check for markers in seconds; only positive numbers
RETURNS:
retval:true, if the function found marker(s); false, if no markers are available at position
count:the count of markers at position
markersstring:a string with all the markernumbers, separated by a ,
markersarray:an array with each entry consisting a markernumber
------
name:ultraschall.IsRegionAtPosition
language:lua
return:(boolean:retval),(integer:count),(string:regionsstring),(array:regionsarray)
params:(number:position)
description:
returns, if regions are at position and returns the region-numbers.
The region-numbers are numerated by order, not the shown region-numbers!
returns false in case of error
PARAMETERS:
position:the position to check for regions in seconds; only positive numbers
RETURNS:
retval:true, if the function found region(s); false, if no regions are available at position
count:the count of regions at position
regionsstring:a string with all the regionnumbers, separated by a ,
regionsarray:an array with each entry consisting a regionnumber
------
name:ultraschall.CountMarkersAndRegions
language:lua
return:(integer:count_markers),(integer:count_regions)
params:
description:
Returns the position of the last projectmarker in the project(no regions or time-sig-markers!).
Use GetMarkerAndRegionsByIndex to enumerate markers or regions in particular.
Returns -1 in case of no markers available
RETURNS:
count_markers:the number of markers available in the project
count_regions:the number of regions available in the project
------
name:ultraschall.GetLastMarkerPosition
language:lua
return:(number:position),(integer:marker_idx)
params:
description:
Returns the position of the last projectmarker in the project(no regions or time-sig-markers!).
Returns -1 in case of no markers available
RETURNS:
position:the position of the last marker in the project
marker_idx:the idx of the last marker in the project. Not the shown number!
------
name:ultraschall.GetLastRegion
language:lua
return:(number:position),(number:endposition),(integer:region_idx)
params:
description:
Returns the position of the last region in the project(no markers or time-sig-markers!).
Note: Last region means the last ending region in the project, even if it's the first starting.
Returns -1 in case of no regions available
RETURNS:
position:the endposition of the last region in the project
endposition:the endposition of the last region in the project
region_idx:the idx of the last region in the project. Not the shown number!
------
name:ultraschall.GetLastTimeSigMarkerPosition
language:lua
return:(number:position),(number:measureposition),(number:beatposition),(integer:timesig_idx)
params:
description:
Returns the position of the last time-signature-marker in the project(no markers or regions!).
Returns -1 in case of no time-signature-markers available
RETURNS:
position:the beatposition of the last timesig-marker in the project
measureposition:the measureposition of the last timesig-marker in the project
beatposition:the beatposition of the last timesig-marker in the project
timesig_idx:the idx of the last timesig-marker in the project.
------
name:ultraschall.GetMarkerUpdateCounter
language:lua
return:(integer:marker_update_counter)
params:
description:
returns the number of times, a marker in any project has been updated since Reaper started.
Counts up, if a marker is added, set, moved, deleted from any project opened in Reaper.
This counter includes already closed projects as well
RETURNS:
marker_update_counter:the number of times a marker in any project in Reaper has been updated
------
name:ultraschall.MoveTimeSigMarkersBy
language:lua
return:(integer:retval)
params:(number:startposition), (number:endposition), (number:moveby), (boolean:cut_at_borders), (boolean:update_timeline)
description:
Moves time-signature-markers between startposition and endposition by moveby.
Does NOT move normal projectmarkers or regions!
Returns -1 in case of failure.
PARAMETERS:
startposition:the startposition in seconds
endposition:the endposition in seconds
moveby:in seconds, negative values: move toward beginning of project, positive values: move toward the end of project
cut_at_borders:shortens or cuts markers, that leave the section between startposition and endposition
update_timeline:true, updates the timeline after moving time-signature markers; false, don't update timeline(must be done manually then)
RETURNS:
retval:-1 in case of failure
------
name:ultraschall.GetAllTimeSigMarkers
language:lua
return:(integer:num_timesig_markers),(array:TimeSigArray)
params:
description:
Returns the number of Tempo/Time-Signature-Markers in the project, as well as an array with all attributes of all these markers.
The array is of the format: TimeSigArray[markernumber(1-based)][attribute-idx]
where attribute-idx is
1, number timepos
2, number measurepos
3, number beatpos
4, number bpm
5, number timesig_num
6, number timesig_denom
7, boolean lineartempo
returns -1 in case of error
RETURNS:
num_timesig_markers:the number of time-signature-markers in the project
TimeSigArray:an array with all time-signature-markers and all their attributes; see Description for more details
------
name:ultraschall.MoveMarkersBy
language:lua
return:(integer:retval)
params:(number:startposition), (number:endposition), (number:moveby), (boolean:cut_at_borders)
description:
Moves the markers between startposition and endposition by moveby.
Does NOT move regions and time-signature-markers!
Returns -1 in case of failure.
PARAMETERS:
startposition:the startposition in seconds
endposition:the endposition in seconds
moveby:in seconds, negative values: move toward beginning of project, positive values: move toward the end of project
cut_at_borders:shortens or cuts markers, that leave the section between startposition and endposition when applying moveby
RETURNS:
retval:-1 in case of failure
------
name:ultraschall.MoveRegionsBy
language:lua
return:(integer:retval)
params:(number:startposition), (number:endposition), (number:moveby), (boolean:cut_at_borders)
description:
Moves the regions between startposition and endposition by moveby.
Will affect only regions, who start within start and endposition. It will not affect those, who end within start and endposition but start before startposition.
Does NOT move markers and time-signature-markers!
Returns -1 in case of failure.
PARAMETERS:
startposition:the startposition in seconds
endposition:the endposition in seconds
moveby:in seconds, negative values: move toward beginning of project, positive values: move toward the end of project
cut_at_borders:shortens or cuts markers, that leave the section between startposition and endposition
RETURNS:
retval:-1 in case of failure
------
name:ultraschall.RippleCut_Regions
language:lua
return:(boolean:were_regions_altered),(integer:number_of_altered_regions),(array altered_regions:)
params:(number:startposition), (number:endposition)
description:
Ripplecuts regions, where applicable.
It cuts all (parts of) regions between startposition and endposition and moves remaining parts plus all regions after endposition by endposition-startposition toward projectstart.
Returns false in case of an error.
PARAMETERS:
startposition:the startposition from where regions shall be cut from
endposition:the endposition to which regions shall be cut from; all regions/parts of regions after that will be moved toward projectstart
RETURNS:
were_regions_altered:true, if regions were cut/altered; false, if not
number_of_altered_regions:the number of regions that were altered/cut/moved
array altered_regions:  altered_regions_array[index_of_region][8] - the new endposition
------
name:ultraschall.GetAllCustomMarkers
language:lua
return:(integer:count),(table:marker_array)
params:(string:custom_marker_name)
description:
Will return all custom-markers with a certain name.
A custom-marker has the naming-scheme
\_customname: text for this marker
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-marker has the name
\_\_customname:: test for this marker
Example:
The custom-marker *VanillaChief* has the custom\_marker\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-markers.
Will not check custom-regions, use GetAllCustomRegions instead.
returns -1 in case of an error
PARAMETERS:
custom_marker_name:the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called "__CustomMarker::"
RETURNS:
count:the number of found markers; -1, in case of an error
marker_array:an array with all found custom-markers. It follows the scheme:
------
name:ultraschall.GetAllCustomRegions
language:lua
return:(integer:count),(table:marker_array)
params:(string:custom_region_name)
description:
Will return all custom-regions with a certain name.
A custom-region has the naming-scheme
\_customname: text for this region
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-region has the name
\_\_customname:: test for this region
Example:
The custom-region *VanillaChief* has the custom\_region\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-regions.
Will not check custom-markers, use GetAllCustomMarkers instead.
returns -1 in case of an error
PARAMETERS:
custom_region_name:the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called "__CustomRegion::"
RETURNS:
count:the number of found regions; -1, in case of an error
------
name:ultraschall.CountAllCustomMarkers
language:lua
return:(integer:count)
params:(string:custom_marker_name)
description:
Will count all custom-markers with a certain name.
A custom-marker has the naming-scheme
\_customname: text for this marker
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-marker has the name
\_\_customname:: test for this marker
Example:
The custom-marker *VanillaChief* has the custom\_marker\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-markers.
Will not count custom-regions, use CountAllCustomRegions instead.
returns -1 in case of an error
PARAMETERS:
custom_marker_name:the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called "__CustomMarker::"
RETURNS:
count:the number of found markers; -1, in case of an error
------
name:ultraschall.CountAllCustomRegions
language:lua
return:(integer:count)
params:(string:custom_region_name)
description:
Will count all custom-regions with a certain name.
A custom-region has the naming-scheme
\_customname: text for this region
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-region has the name
\_\_customname:: test for this region
Example:
The custom-region *VanillaChief* has the custom\_region\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-regions.
Will not count custom-markers, use CountAllCustomMarkers instead.
returns -1 in case of an error
PARAMETERS:
custom_region_name:the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called "__CustomRegion::"
RETURNS:
count:the number of found regions; -1, in case of an error
------
name:ultraschall.EnumerateCustomMarkers
language:lua
return:(boolean:retval),(integer:marker_index),(number:pos),(string:name),(integer:shown_number),(integer:color)
params:(string:custom_marker_name), (integer:idx)
description:
Will return a specific custom-marker with a certain name.
A custom-marker has the naming-scheme
\_customname: text for this marker
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-marker has the name
\_\_customname:: test for this marker
Example:
The custom-marker *VanillaChief* has the custom\_marker\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-markers.
Will not enumerate custom-regions, use EnumerateCustomRegions instead.
returns false in case of an error
PARAMETERS:
custom_marker_name:the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called "__CustomMarker::"
idx:the index of the marker within all same-named custom-markers; 0, for the first custom-marker
RETURNS:
retval:true, if the custom-marker exists; false, if not or an error occurred
marker_index:the index of the marker within all markers and regions, as positioned in the project, with 0 for the first, 2 for the second, etc
pos:the position of the marker in seconds
name:the name of the marker, exluding the custom-marker-name
shown_number:the markernumber, that is displayed in the timeline of the arrangeview
color:the color of the marker
------
name:ultraschall.EnumerateCustomRegions
language:lua
return:(boolean:retval),(integer:marker_index),(number:pos),(number:regionend),(string:name),(integer:shown_number),(integer:color),(string:guid)
params:(string:custom_marker_name), (integer:idx)
description:
Will return a specific custom-region with a certain name.
A custom-region has the naming-scheme
\_customname: text for this region
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-region has the name
\_\_customname:: test for this region
Example:
The custom-region *VanillaChief* has the custom\_region\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-regions.
Will not enumerate custom-markers, use EnumerateCustomMarkers instead.
returns false in case of an error
PARAMETERS:
idx:the index of the region within all same-named custom-regions; 0, for the first custom-region
RETURNS:
retval:true, if the custom-region exists; false, if not or an error occurred
marker_index:the index of the marker within all markers and regions, as positioned in the project, with 0 for the first, 2 for the second, etc
pos:the position of the region in seconds
name:the name of the region, exluding the custom-region-name
shown_number:the regionnumber, that is displayed in the timeline of the arrangeview
color:the color of the region
guid:the guid of the custom-region
------
name:ultraschall.DeleteCustomMarkers
language:lua
return:(boolean:retval),(integer:marker_index),(number:pos),(string:name),(integer:shown_number),(integer:color)
params:(string:custom_marker_name), (integer:idx)
description:
Will delete a specific custom-marker with a certain name.
A custom-marker has the naming-scheme
\_customname: text for this marker
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-marker has the name
\_\_customname:: test for this marker
Example:
The custom-marker *VanillaChief* has the custom\_marker\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-markers.
Will not delete custom-regions, use DeleteCustomRegions instead.
returns false in case of an error
PARAMETERS:
custom_marker_name:the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called "__CustomMarker::"
idx:the index of the marker within all same-named custom-markers; 0, for the first custom-marker
RETURNS:
retval:true, if the custom-marker exists; false, if not or an error occurred
marker_index:the index of the marker within all markers and regions, as positioned in the project, with 0 for the first, 2 for the second, etc
pos:the position of the marker in seconds
name:the name of the marker, exluding the custom-marker-name
shown_number:the markernumber, that is displayed in the timeline of the arrangeview
color:the color of the marker
------
name:ultraschall.DeleteCustomRegions
language:lua
return:(boolean:retval),(integer:marker_index),(number:pos),(number:regionend),(string:name),(integer:shown_number),(integer:color)
params:(string:custom_marker_name), (integer:idx)
description:
Deletes a specific custom-region with a certain name.
A custom-region has the naming-scheme
\_customname: text for this region
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-region has the name
\_\_customname:: test for this region
Example:
The custom-region *VanillaChief* has the custom\_region\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-regions.
Will not delete custom-markers, use DeleteCustomMarkers instead.
returns false in case of an error
PARAMETERS:
idx:the index of the region within all same-named custom-regions; 0, for the first custom-region
RETURNS:
retval:true, if the custom-region exists; false, if not or an error occurred
marker_index:the index of the marker within all markers and regions, as positioned in the project, with 0 for the first, 2 for the second, etc
pos:the position of the region in seconds
name:the name of the region, exluding the custom-region-name
shown_number:the regionnumber, that is displayed in the timeline of the arrangeview
color:the color of the region
------
name:ultraschall.AddCustomMarker
language:lua
return:(boolean:retval),(integer:markernumber),(string:guid)
params:(string:custom_marker_name), (number:pos), (string:name), (integer:shown_number), (integer:color)
description:
Will add new custom-marker with a certain name.
A custom-marker has the naming-scheme
\_customname: text for this marker
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-marker has the name
\_\_customname:: test for this marker
Example:
The custom-marker *VanillaChief* has the custom\_marker\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-markers.
Will not add custom-regions, use AddCustomRegion instead.
returns false in case of an error
PARAMETERS:
custom_marker_name:the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called "__CustomMarker::"; nil, adds a normal marker
pos:the position of the marker in seconds
name:the name of the marker, exluding the custom-marker-name
shown_number:the markernumber, that is displayed in the timeline of the arrangeview
color:the color of the marker
RETURNS:
retval:true, if adding the custom-marker was successful; false, if not or an error occurred
markernumber:the indexnumber of the newly added custommarker
guid:the guid of the custommarker
------
name:ultraschall.AddCustomRegion
language:lua
return:(boolean:retval),(integer:shown_number),(integer:markerindex),(string:guid)
params:(string:custom_region_name), (number:pos), (number:regionend), (string:name), (integer:shown_number), (integer:color)
description:
Will add new custom-region with a certain name.
A custom-region has the naming-scheme
\_customname: text for this region
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-region has the name
\_\_customname:: test for this region
Example:
The custom-region *VanillaChief* has the custom\_region\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-regions.
Will not add custom-markers, use AddCustomMarker instead.
returns false in case of an error
PARAMETERS:
pos:the position of the region in seconds
regionend:the endposition of the region in seconds
name:the name of the region, exluding the custom-region-name
shown_number:the regionnumber, that is displayed in the timeline of the arrangeview
color:the color of the marker
RETURNS:
retval:true, if adding the custom-region was successful; false, if not or an error occurred
shown_number:if the desired shown_number is already used by another region, this will hold the alternative number for the new custom-region
guid:the guid of the customregion
------
name:ultraschall.SetCustomMarker
language:lua
return:(boolean:retval)
params:(string:custom_marker_name), (integer:idx), (number:pos), (string:name), (integer:shown_number), (integer:color)
description:
Will set attributes of an already existing custom-marker with a certain name.
A custom-marker has the naming-scheme
\_customname: text for this marker
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-marker has the name
\_\_customname:: test for this marker
Example:
The custom-marker *VanillaChief* has the custom\_marker\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-markers.
Will not set custom-regions, use SetCustomRegion instead.
returns false in case of an error
PARAMETERS:
custom_marker_name:the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called "__CustomMarker::"; nil, make it a normal marker
idx:the index-number of the custom-marker within all custom-markers
pos:the position of the marker in seconds
name:the name of the marker, exluding the custom-marker-name
shown_number:the markernumber, that is displayed in the timeline of the arrangeview
color:the color of the marker
RETURNS:
retval:true, if setting the new attributes of the custom-marker was successful; false, if not or an error occurred
------
name:ultraschall.SetCustomRegion
language:lua
return:(boolean:retval),(integer:shown_number)
params:(string:custom_region_name), (integer:idx), (number:pos), (number:regionend), (string:name), (integer:shown_number), (integer:color)
description:
Will set an already existing custom-region with a certain name.
A custom-region has the naming-scheme
\_customname: text for this region
You just need to pass customname to this function, leaving out the preceding \_ and the trailing :
Exception: if the custom-region has the name
\_\_customname:: test for this region
Example:
The custom-region *VanillaChief* has the custom\_region\_name *VanillaChief* and will be shown as *\_VanillaChief: text* in the project.
So you pass VanillaChief to this function to get all \_VanillaChief:-regions.
Will not add custom-markers, use AddCustomMarker instead.
returns false in case of an error, like the desired shown_number is already taken by another region
PARAMETERS:
idx:the index of the custom region to change
pos:the position of the region in seconds
name:the name of the region, exluding the custom-region-name
shown_number:the regionnumber, that is displayed in the timeline of the arrangeview
color:the color of the marker
RETURNS:
retval:true, if adding the region was successful; false, if not or an error occurred
shown_number:if the desired shown_number is already used by another region, this will hold the alternative number for the new custom-region
------
name:ultraschall.GetNextFreeRegionIndex
language:lua
return:(integer:free_shown_number)
params:
description:
returns the next unused region-index-number, beginning with 0.
RETURNS:
free_shown_number:the next free/unused region-index-number
------
name:ultraschall.IsMarkerValidCustomMarker
language:lua
return:(boolean:retval)
params:(string:custom_marker_name), (integer:markeridx)
description:
returns true, if the marker with id markeridx is a valid custom-marker of the type custom_marker_name
markeridx is the index of all markers and regions!
returns false in case of an error
------
name:ultraschall.IsRegionValidCustomRegion
language:lua
return:(boolean:retval)
params:(string:custom_region_name), (integer:markeridx)
description:
returns true, if the marker with id markeridx is a valid custom-region of the type custom_region_name
markeridx is the index of all markers and regions!
returns false in case of an error
------
name:ultraschall.GetMarkerIDFromGuid
language:lua
return:(integer:index)
params:(string:guid)
description:
Gets the corresponding indexnumber of a marker-guid
The index is for all markers and regions, inclusive and 1-based
returns -1 in case of an error
PARAMETERS:
guid:the guid of the marker/region, whose index-number you want to retrieve
RETURNS:
index:the index of the marker/region, whose guid you have passed to this function
------
name:ultraschall.GetGuidFromMarkerID
language:lua
return:(string:guid)
params:(integer:index)
description:
Gets the corresponding marker-guid of a marker with a specific index
The index is for all markers and regions, inclusive and 1-based
returns -1 in case of an error
PARAMETERS:
index:the index of the marker/region, whose guid you want to retrieve
RETURNS:
guid:the guid of the marker/region of the marker with a specific index
------
name:ultraschall.GetItemPosition
language:lua
return:(number:position)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns position-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
position:the position in seconds, as set in the statechunk
------
name:ultraschall.GetItemLength
language:lua
return:(number:length)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns length-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
length:the length in seconds, as set in the statechunk
------
name:ultraschall.GetItemSnapOffset
language:lua
return:(number:snapoffset)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns snapoffs-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
snapoffset:the snapoffset in seconds, as set in the statechunk
------
name:ultraschall.GetItemLoop
language:lua
return:(integer:loopstate)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns loopstate-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
loopstate:the loopstate, as set in the statechunk; 1, loop source; 0, don't loop source
------
name:ultraschall.GetItemAllTakes
language:lua
return:(integer:alltakes)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns alltakes-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
alltakes:Play all takes(1) or don't play all takes(0)
------
name:ultraschall.GetItemFadeIn
language:lua
return:(number:fadestate1),(number:fadestate2),(number:fadestate3),(number:fadestate4),(integer:fadestate5),(number:fadestate6)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns fadein-entries of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
fadestate3:fadeinstate entry as set in the rppxml-mediaitem-statechunk
fadestate5:fadeinstate entry as set in the rppxml-mediaitem-statechunk
------
name:ultraschall.GetItemFadeOut
language:lua
return:(number:curvetype1),(number:fadeout_length),(number:fadeout_length2),(number:curvetype2),(integer:fadestate5),(number:curve)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns fadeout-entries of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
curvetype1:the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype2
fadeout_length:the fadeout-length in seconds; overrides fadeout_length and will be moved to fadeout_length when fadeout-length changes(e.g. mouse-drag); might be autocrossfade-length
fadeout_length2:the fadeout-length in seconds; overrides fadeout_length and will be moved to fadeout_length when fadeout-length changes(e.g. mouse-drag); might be autocrossfade-length
curvetype2:the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype1
fadestate5:unknown
curve:curvation of the fadeout, -1 to 1
------
name:ultraschall.GetItemFadeFlag
language:lua
return:(integer:autofade_state)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns autofade-entry of a MediaItem or MediaItemStateChunk.
It's the FADEFLAG-entry.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
autofade_state:the autofade-state; 1, autofade is off; nil, autofade is on
------
name:ultraschall.GetItemIGUID
language:lua
return:(string:IGUID)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the IGUID-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
IGUID:the IGUID of the item
------
name:ultraschall.GetItemIID
language:lua
return:(integer:IID)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the IID-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
IID:the IID of the item; the item-id, which is basically a counter of all items created within this project. May change, so use it only as a counter. If you want to identify a specific item, use GUID and IGUID instead.
------
name:ultraschall.GetItemName
language:lua
return:(string:name)
params:(MediaItem:MediaItem), (string:MediaItemStateChunk)
description:
Returns the name-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
name:the name of the item
------
name:ultraschall.GetItemVolPan
language:lua
return:(number:volpan1),(number:pan),(number:volume),(number:volpan4)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the vol/pan-entries of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
volpan1:unknown
pan:unknown
volume:from 0(-inf) to 3.981072(+12db), 1 is 0db; higher numbers are allowed; negative means phase inverted
volpan4:unknown
------
name:ultraschall.GetItemSampleOffset
language:lua
return:(number:sampleoffset)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the sampleoffset-entry of a MediaItem or MediaItemStateChunk.
It's the SOFFS-entry.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
sampleoffset:sampleoffset in seconds
------
name:ultraschall.GetItemPlayRate
language:lua
return:(number:playbackrate),(integer:preserve_pitch),(number:pitch_adjust),(integer:takepitch_timestretch_mode),(integer:optimize_tonal_content),(number:stretch_marker_fadesize)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the playback-rate-entries of a MediaItem or MediaItemStateChunk.
It's the PLAYRATE-entry.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
playbackrate:1 is 1x, 2 is 2x, 1.8 is 1.8x,etc
preserve_pitch:preserve pitch, 1 - preserve, 0 - don't preserve
pitch_adjust:pitch_adjust(semitones); negative values allowed; 1.1=1.1 semitones higher, -0.3=0.3 semitones lower,etc
takepitch_timestretch_mode:- the item's pitchmode - 65536 for project-default
optimize_tonal_content:2, checkbox for optimize-tonal-content is set on; 0, checkbox for optimize-tonal-content is set off
stretch_marker_fadesize:in milliseconds; negative values are allowed
------
name:ultraschall.GetItemChanMode
language:lua
return:(integer:channelmode)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the channelmode-entry of a MediaItem or MediaItemStateChunk.
It's the CHANMODE-entry
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
channelmode:channelmode of the MediaItem
------
name:ultraschall.GetItemGUID
language:lua
return:(string:GUID)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the GUID-entry of a MediaItem or MediaItemStateChunk.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
GUID:the GUID of the item
------
name:ultraschall.GetItemRecPass
language:lua
return:(integer:recpass_state)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the recpass-entry of a MediaItem or MediaItemStateChunk.
It's the counter of the recorded item-takes within a project, ordered by the order of recording. Only displayed with recorded item-takes, not imported ones.
It's the RECPASS-entry.
Returns nil in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
recpass_state:the number of recorded mediaitem; every recorded item gets it's counting-number.
------
name:ultraschall.GetItemBeat
language:lua
return:(integer:beatstate)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the beatstate/timebase-entry of a MediaItem or MediaItemStateChunk.
Returns -1 in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
beatstate:the item-timebase state
------
name:ultraschall.GetItemMixFlag
language:lua
return:(integer:itemmix_state)
params:(MediaItem:MediaItem), (optional string:MediaItemStateChunk)
description:
Returns the item-mix-behavior-entry of a MediaItemStateChunk.
Returns -1 in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
itemmix_state:the item-mix-behavior
------
name:ultraschall.GetItemUSTrackNumber_StateChunk
language:lua
return:(integer:tracknumber),(MediaTrack:track)
params:(string:MediaItemStateChunk)
description:
Returns the tracknumber as well as the mediatrack-object from where the mediaitem was from, as given by a MediaItemStateChunk.
This works only, if the StateChunk contains the entry "ULTRASCHALL_TRACKNUMBER", which holds the original tracknumber of the MediaItem.
This entry will only be added by functions from the Ultraschall-API, like GetAllMediaItemsBetween
Returns -1 in case of error.
PARAMETERS:
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
tracknumber:the tracknumber, where this item came from; starts with 1 for the first track!
track:the accompanying track as MediaTrack-object
------
name:ultraschall.SetItemUSTrackNumber_StateChunk
language:lua
return:(string:MediaItemStateChunk)
params:(string:MediaItemStateChunk), (integer:tracknumber)
description:
Adds/Replaces the entry "ULTRASCHALL_TRACKNUMBER" in a MediaItemStateChunk, that tells other Ultraschall-Apifunctions, from which track this item originated from.
It returns the modified MediaItemStateChunk.
Returns -1 in case of error.
PARAMETERS:
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
tracknumber:the tracknumber you want to set, with 1 for track 1, 2 for track 2
RETURNS:
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
------
name:ultraschall.SetItemPosition
language:lua
return:(string:MediaItemStateChunk)
params:(MediaItem:MediaItem), (integer:position), (optional string:MediaItemStateChunk)
description:
Sets position in a MediaItem or MediaItemStateChunk in seconds.
It returns the modified MediaItemStateChunk.
Returns -1 in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
position:position in seconds
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
------
name:ultraschall.SetItemLength
language:lua
return:(string:MediaItemStateChunk)
params:(MediaItem:MediaItem), (integer:length), (string:MediaItemStateChunk)
description:
Sets length in a MediaItem and MediaItemStateChunk in seconds.
It returns the modified MediaItemStateChunk.
Returns -1 in case of error.
PARAMETERS:
MediaItem:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
length:length in seconds
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
------
name:ultraschall.GetItemStateChunk
language:lua
return:(boolean:retval),(string:MediaItemStateChunk)
params:(MediaItem:MediaItem), (boolean:AddTracknumber)
description:
Returns the statechunk of MediaItem. Parameter AddTracknumber allows you to set, whether the tracknumber of the MediaItem shall be inserted to the statechunk as well, by the new entry "ULTRASCHALL_TRACKNUMBER".
returns false in case of an error
PARAMETERS:
MediaItem:the MediaItem, whose statechunk you want to have
AddTracknumber:nil or true; add the tracknumber, where the MediaItem lies, as additional entry entry "ULTRASCHALL_TRACKNUMBER" to the statechunk; false, just return the original statechunk.
RETURNS:
retval:true, if getting the statechunk was successful; false, if not
MediaItemStateChunk:the statechunk of the MediaItem
------
name:ultraschall.IsValidMediaItemStateChunk
language:lua
return:(boolean:retval)
params:(string:MediaItemStateChunk)
description:
Checks, whether MediaItemStateChunk is a valide MediaItemStateChunk.
Returns false in case of an error
PARAMETERS:
MediaItemStateChunk:the string to check, if it's a valid MediaItemStateChunk
RETURNS:
retval:true, MediaItemStateChunk is valid; false, MediaItemStateChunk isn't a valid statechunk
------
name:ultraschall.CheckMediaItemArray
language:lua
return:(boolean:retval),(integer:count),(array:retMediaItemArray)
params:(array:MediaItemArray)
description:
Checks, whether MediaItemArray is valid.
It throws out all entries, that are not MediaItems and returns the altered array as result.
returns false in case of error or if it is not a valid MediaItemArray
PARAMETERS:
MediaItemArray:a MediaItemArray that shall be checked for validity
RETURNS:
retval:returns true if MediaItemArray is valid, false if not
count:the number of entries in the returned retMediaItemArray
retMediaItemArray:the, possibly, altered MediaItemArray
------
name:ultraschall.IsValidMediaItemArray
language:lua
return:(boolean:retval),(integer:count),(array:retMediaItemArray)
params:(array:MediaItemArray)
description:
Checks, whether MediaItemArray is valid.
It throws out all entries, that are not MediaItems and returns the altered array as result.
returns false in case of an error or if it is not a valid MediaItemArray
PARAMETERS:
MediaItemArray:a MediaItemArray that shall be checked for validity
RETURNS:
retval:returns true if MediaItemArray is valid, false if not
count:the number of entries in the returned retMediaItemArray
retMediaItemArray:the, possibly, altered MediaItemArray
------
name:ultraschall.CheckMediaItemStateChunkArray
language:lua
return:(boolean:retval),(integer:count),(array:retMediaItemStateChunkArray)
params:(array:MediaItemStateChunkArray)
description:
Checks, whether MediaItemStateChunkArray is valid.
It throws out all entries, that are not MediaItemStateChunks and returns the altered array as result.
returns false in case of an error or if it is not a valid MediaItemStateChunkArray
PARAMETERS:
MediaItemStateChunkArray:a MediaItemStateChunkArray that shall be checked for validity
RETURNS:
retval:returns true if MediaItemStateChunkArray is valid, false if not
count:the number of entries in the returned retMediaItemStateChunkArray
retMediaItemStateChunkArray:the, possibly, altered MediaItemStateChunkArray
------
name:ultraschall.IsValidMediaItemStateChunkArray
language:lua
return:(boolean:retval),(integer:count),(array:retMediaItemStateChunkArray)
params:(array:MediaItemStateChunkArray)
description:
Checks, whether MediaItemStateChunkArray is valid.
It throws out all entries, that are not MediaItemStateChunks and returns the altered array as result.
returns false in case of an error or if it is not a valid MediaItemStateChunkArray
PARAMETERS:
MediaItemStateChunkArray:a MediaItemStateChunkArray that shall be checked for validity
RETURNS:
retval:returns true if MediaItemStateChunkArray is valid, false if not
count:the number of entries in the returned retMediaItemStateChunkArray
retMediaItemStateChunkArray:the, possibly, altered MediaItemStateChunkArray
------
name:ultraschall.GetMediaItemsAtPosition
language:lua
return:(integer:number_of_items),(array:MediaItemArray),(array:MediaItemStateChunkArray)
params:(number:position), (string:trackstring)
description:
Gets all Mediaitems at position, from the tracks given by trackstring.
Returns a MediaItemArray with the found MediaItems
returns -1 in case of error
PARAMETERS:
position:position in seconds
trackstring:the tracknumbers, separated by a comma
RETURNS:
number_of_items:the number of items at position
MediaItemArray:an array, that contains all MediaItems at position from the tracks given by trackstring.
MediaItemStateChunkArray:an array, that contains all Mediaitem's MediaItemStatechunks at position from the tracks given by trackstring.
------
name:ultraschall.OnlyMediaItemsOfTracksInTrackstring
language:lua
return:(integer:retval),(array:MediaItemArray)
params:(array:MediaItemArray), (string:trackstring)
description:
Throws all MediaItems out of the MediaItemArray, that are not within the tracks, as given with trackstring.
Returns the "cleared" MediaItemArray
returns -1 in case of error
PARAMETERS:
MediaItemArray:an array with MediaItems; no nil-entries allowed, will be seen as the end of the array
trackstring:the tracknumbers, separated by a comma
RETURNS:
retval:-1 in case of error, 1 in case of success
MediaItemArray:the "cleared" array, that contains only Items in tracks, as given by trackstring, -1 in case of error
------
name:ultraschall.SplitMediaItems_Position
language:lua
return:(boolean:retval),(array:MediaItemArray)
params:(number:position), (string:trackstring), (boolean:crossfade)
description:
Splits items at position, in the tracks given by trackstring.
If auto-crossfade is set in the Reaper-preferences, crossfade turns it on(true) or off(false).
Returns false, in case of error.
PARAMETERS:
position:the position in seconds
trackstring:the numbers for the tracks, where split shall be applied to; numbers separated by a comma
crossfade:true or nil, automatic crossfade(if enabled) will be applied; false, automatic crossfade is off
RETURNS:
retval:true - success, false - error
MediaItemArray:an array with the items on the right side of the split
------
name:ultraschall.SplitItemsAtPositionFromArray
language:lua
return:(boolean:retval),(array:MediaItemArray)
params:(number:position), (array:MediaItemArray), (boolean:crossfade)
description:
Splits items in MediaItemArray at position, in the tracks given by trackstring.
If auto-crossfade is set in the Reaper-preferences, crossfade turns it on(true) or off(false).
Returns false, in case of error.
PARAMETERS:
position:the position in seconds
MediaItemArray:an array with the items, where split shall be applied to. No nil-entries allowed!
crossfade:true - automatic crossfade(if enabled) will be applied; false - automatic crossfade is off
RETURNS:
retval:true - success, false - error
MediaItemArray:an array with the items on the right side of the split
------
name:ultraschall.DeleteMediaItem
language:lua
return:(boolean:retval),(string:MediaItemStateChunk)
params:(MediaItem:MediaItem)
description:
deletes a MediaItem. Returns true, in case of success, false in case of error.
returns the MediaItemStateChunk of the deleted MediaItem as well, so you can do additional processing with a deleted item.
returns false in case of an error
PARAMETERS:
MediaItem:the MediaItem to be deleted
RETURNS:
retval:true, delete was successful; false was unsuccessful
MediaItemStateChunk:the StateChunk of the deleted MediaItem
------
name:ultraschall.DeleteMediaItemsFromArray
language:lua
return:(boolean:retval),(array:MediaItemArray)
params:(array:MediaItemArray)
description:
deletes the MediaItems from MediaItemArray. Returns true, in case of success, false in case of error.
In addition, it returns a MediaItemStateChunkArray, that contains the statechunks of all deleted MediaItems
returns false in case of an error
PARAMETERS:
MediaItemArray:a array with MediaItem-objects to delete; no nil entries allowed
RETURNS:
retval:true, delete was successful; false was unsuccessful
------
name:ultraschall.DeleteMediaItems_Position
language:lua
return:(boolean:retval),(array:MediaItemStateChunkArray)
params:(number:position), (string:trackstring)
description:
Delete the MediaItems at given position, from the tracks as given by trackstring.
returns, if deleting was successful and an array with all statechunks of all deleted MediaItems
returns false in case of an error
PARAMETERS:
position:the position in seconds
trackstring:the tracknumbers, separated by a comma
RETURNS:
retval:true, delete was successful; false was unsuccessful
MediaItemStateChunkArray:and array with all statechunks of all deleted MediaItems; 
------
name:ultraschall.GetAllMediaItemsBetween
language:lua
return:(integer:count),(array:MediaItemArray),(array:MediaItemStateChunkArray)
params:(number:startposition), (number:endposition), (string:trackstring), (boolean:inside)
description:
Gets all MediaItems between startposition and endposition from the tracks as given by trackstring.
Set inside to true to get only items, that are fully within the start and endposition, set it to false, if you also want items, that are just partially inside(end or just the beginning of the item).
Returns the number of items, an array with all the MediaItems and an array with all the MediaItemStateChunks of the items, as used by functions as InsertMediaItem_MediaItemStateChunk, reaper.GetItemStateChunk and reaper.SetItemStateChunk.
The statechunks include a new element "ULTRASCHALL_TRACKNUMBER", which contains the tracknumber of where the item originally was in; important, if you delete the items as you'll otherwise loose this information!
Returns -1 in case of failure.
PARAMETERS:
startposition:startposition in seconds
endposition:endposition in seconds
trackstring:the tracknumbers, separated by a comma
inside:true, only items that are completely within selection; false, include items that are partially within selection
RETURNS:
count:the number of found items
MediaItemArray:an array with all the found MediaItems
MediaItemStateChunkArray:an array with the MediaItemStateChunks, that can be used to create new items with InsertMediaItem_MediaItemStateChunk
------
name:ultraschall.MoveMediaItemsAfter_By
language:lua
return:(boolean:retval)
params:(number:old_position), (number:change_position_by), (string:trackstring)
description:
Moves all items after old_position by change_position_by-seconds. Affects only items, that begin after oldposition, so items that start before and end after old_position do not move.
Returns false in case of failure, true in case of success.
PARAMETERS:
change_position_by:the change of the position in seconds; positive - toward the end of the project, negative - toward the beginning.
trackstring:the tracknumbers, separated by a comma
RETURNS:
retval:true in case of success; false in case of failure
------
name:ultraschall.MoveMediaItemsBefore_By
language:lua
return:(boolean:retval)
params:(number:old_position), (number:change_position_by), (string:trackstring)
description:
Moves all items before old_position by change_position_by-seconds. Affects only items, that end before oldposition, so items that start before and end after old_position do not move.
Returns false in case of failure, true in case of success.
PARAMETERS:
change_position_by:the change of the position in seconds; positive - toward the end of the project, negative - toward the beginning.
trackstring:the tracknumbers, separated by a comma
RETURNS:
retval:true in case of success; false in case of failure
------
name:ultraschall.MoveMediaItemsBetween_To
language:lua
return:(boolean:retval)
params:(number:startposition), (number:endposition), (number:newposition), (string:trackstring), (boolean:inside)
description:
Moves the items between sectionstart and sectionend to newposition, within the tracks given by trackstring.
If inside is set to true, only items completely within the section are moved; if set to false, also items are affected, that are just partially within the section.
Items, that start after sectionstart, and therefore have an offset, will be moved to newposition+their offset. Keep that in mind.
Returns false in case of failure, true in case of success.
PARAMETERS:
startposition:begin of the item-selection in seconds
endposition:end of the item-selection in seconds
newposition:new position in seconds
trackstring:the tracknumbers, separated by a ,
inside:true, only items completely within the section; false, also items partially within the section
RETURNS:
retval:true in case of success; false in case of failure
------
name:ultraschall.ChangeLengthOfMediaItems_FromArray
language:lua
return:(boolean:retval)
params:(array:MediaItemArray), (number:newlength)
description:
Changes the length of the MediaItems in MediaItemArray to newlength.
They will all be set to the new length, regardless of their old length. If you want to change the length of the items not >to< newlength, but >by< newlength, use ChangeDeltaLengthOfMediaItems_FromArray instead.
Returns false in case of failure, true in case of success.
PARAMETERS:
MediaItemArray:an array with items to be changed. No nil entries allowed!
newlength:the new length of the items in seconds
RETURNS:
retval:true in case of success; false in case of failure
------
name:ultraschall.ChangeDeltaLengthOfMediaItems_FromArray
language:lua
return:(boolean:retval)
params:(array:MediaItemArray), (number:deltalength)
description:
Changes the length of the MediaItems in MediaItemArray by deltalength.
If you want to change the length of the items not >by< deltalength, but >to< deltalength, use ChangeLengthOfMediaItems_FromArray instead.
Returns false in case of failure, true in case of success.
PARAMETERS:
MediaItemArray:an array with items to be changed. No nil entries allowed!
deltalength:the change of the length of the items in seconds, positive value - longer, negative value - shorter
RETURNS:
retval:true in case of success; false in case of failure
------
name:ultraschall.ChangeOffsetOfMediaItems_FromArray
language:lua
return:(boolean:retval)
params:(array:MediaItemArray), (number:newoffset)
description:
Changes the audio-offset of the MediaItems in MediaItemArray to newoffset.
It affects all(!) takes that the MediaItems has.
If you want to change the offset of the items not >to< newoffset, but >by< newoffset, use ChangeDeltaOffsetOfMediaItems_FromArray instead.
Returns false in case of failure, true in case of success.
PARAMETERS:
MediaItemArray:an array with items to be changed. No nil entries allowed!
newoffset:the new offset of the items in seconds
RETURNS:
retval:true, in case of success; false, in case of failure
------
name:ultraschall.ChangeDeltaOffsetOfMediaItems_FromArray
language:lua
return:(boolean:retval)
params:(array:MediaItemArray), (number:deltaoffset)
description:
Changes the audio-offset of the MediaItems in MediaItemArray by deltaoffset.
It affects all(!) takes of the MediaItems have.
If you want to change the offset of the items not >by< deltaoffset, but >to< deltaoffset, use ChangeOffsetOfMediaItems_FromArray instead.
Returns false in case of failure, true in case of success.
PARAMETERS:
MediaItemArray:an array with items to be changed. No nil entries allowed!
RETURNS:
retval:true in case of success; false in case of failure
------
name:ultraschall.SectionCut
language:lua
return:(integer:number_items),(array:MediaItemArray_StateChunk)
params:(number:startposition), (number:endposition), (string:trackstring), (boolean:add_to_clipboard)
description:
Cuts out all items between startposition and endposition in the tracks given by trackstring.
Returns number of cut items as well as an array with the mediaitem-statechunks, which can be used with functions as InsertMediaItem_MediaItemStateChunk, reaper.GetItemStateChunk and reaper.SetItemStateChunk.
Returns -1 in case of failure.
PARAMETERS:
startposition:the startposition of the section in seconds
endposition:the endposition of the section in seconds
trackstring:the tracknumbers, separated by ,
add_to_clipboard:true, puts the cut items into the clipboard; false, don't put into the clipboard
RETURNS:
number_items:the number of cut items
MediaItemArray_StateChunk:an array with the mediaitem-states of the cut items.
------
name:ultraschall.SectionCut_Inverse
language:lua
return:(integer:number_items_beforestart),(array:MediaItemArray_StateChunk_beforestart),(integer:number_items_afterend),(array:MediaItemArray_StateChunk_afterend)
params:(number:startposition), (number:endposition), (string:trackstring), (boolean:add_to_clipboard)
description:
Cuts out all items before(!) startposition and after(!) endposition in the tracks given by trackstring; it keeps all items inbetween startposition and endposition.
Returns number of cut items as well as an array with the mediaitem-statechunks, which can be used with functions as InsertMediaItem_MediaItemStateChunk, reaper.GetItemStateChunk and reaper.SetItemStateChunk.
Returns -1 in case of failure.
PARAMETERS:
startposition:the startposition of the section in seconds
endposition:the endposition of the section in seconds
trackstring:the tracknumbers, separated by ,
add_to_clipboard:true, puts the cut items into the clipboard; false, don't put into the clipboard
RETURNS:
number_items_beforestart:the number of cut items before startposition
MediaItemArray_StateChunk_beforestart:an array with the mediaitem-states of the cut items before startposition
number_items_afterend:the number of cut items after endposition
MediaItemArray_StateChunk_afterend:an array with the mediaitem-states of the cut items after endposition
------
name:ultraschall.RippleCut
language:lua
return:(integer:number_items),(array:MediaItemArray_StateChunk)
params:(number:startposition), (number:endposition), (string:trackstring), (boolean:moveenvelopepoints), (boolean:add_to_clipboard)
description:
Cuts out all items between startposition and endposition in the tracks given by trackstring. After cut, it moves the remaining items after(!) endposition toward projectstart, by the difference between start and endposition.
Returns number of cut items as well as an array with the mediaitem-statechunks, which can be used with functions as InsertMediaItem_MediaItemStateChunk, reaper.GetItemStateChunk and reaper.SetItemStateChunk.
Returns -1 in case of failure.
PARAMETERS:
startposition:the startposition of the section in seconds
endposition:the endposition of the section in seconds
trackstring:the tracknumbers, separated by ,
moveenvelopepoints:moves envelopepoints, if existing, as well
add_to_clipboard:true, puts the cut items into the clipboard; false, don't put into the clipboard
RETURNS:
number_items:the number of cut items
MediaItemArray_StateChunk:an array with the mediaitem-states of the cut items
------
name:ultraschall.InsertMediaItem_MediaItem
language:lua
return:(integer:retval),(MediaItem:MediaItem),(number:startposition),(number:endposition),(number:length)
params:(number:position), (MediaItem:MediaItem), (MediaTrack:MediaTrack)
description:
Inserts MediaItem in MediaTrack at position. Returns the newly created(or better: inserted) MediaItem as well as startposition, endposition and length of the inserted item.
Returns -1 in case of failure.
PARAMETERS:
position:the position of the newly created mediaitem
MediaItem:the MediaItem that shall be inserted into a track
MediaTrack:the track, where the item shall be inserted to
RETURNS:
retval:-1 in case of error, 1 in case of success
MediaItem:the newly created MediaItem
startposition:the startposition of the inserted MediaItem in seconds
endposition:the endposition of the inserted MediaItem in seconds
length:the length of the inserted MediaItem in seconds
------
name:ultraschall.InsertMediaItem_MediaItemStateChunk
language:lua
return:(integer:retval),(MediaItem:MediaItem),(number:startposition),(number:endposition),(number:length)
params:(number:position), (string:MediaItemStateChunk), (MediaTrack:MediaTrack)
description:
Inserts a new MediaItem in MediaTrack at position. Uses a mediaitem-state-chunk as created by functions like GetAllMediaItemsBetween, reaper.GetItemStateChunk and reaper.SetItemStateChunk.. Returns the newly created MediaItem.
Returns -1 in case of failure.
PARAMETERS:
position:the position of the newly created mediaitem
MediaTrack:the track, where the item shall be inserted to; nil, use the statechunk-entry ULTRASCHALL_TRACKNUMBER for the track instead.
RETURNS:
retval:-1 in case of error, 1 in case of success
MediaItem:the newly created MediaItem
startposition:the startposition of the inserted MediaItem in seconds
endposition:the endposition of the inserted MediaItem in seconds
length:the length of the inserted MediaItem in seconds
------
name:ultraschall.InsertMediaItemArray
language:lua
return:(integer:number_of_items),(array:MediaItemArray)
params:(number:position), (array:MediaItemArray), (string:trackstring)
description:
Inserts the MediaItems from MediaItemArray at position into the tracks, as given by trackstring.
Returns the number of newly created items, as well as an array with the newly create MediaItems.
Returns -1 in case of failure.
Note: this inserts the items only in the tracks, where the original items came from. Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.
If you have a MediaItemArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.
PARAMETERS:
position:the position of the newly created mediaitem
MediaItemArray:an array with the MediaItems to be inserted
trackstring:the numbers of the tracks, separated by a ,
RETURNS:
number_of_items:the number of MediaItems created
MediaItemArray:an array with the newly created MediaItems
------
name:ultraschall.GetMediaItemStateChunksFromItems
language:lua
return:(integer:number_of_items),(array:MediaItemArray_StateChunks)
params:(array:MediaItemArray)
description:
Returns the MediaItem-StateChunks for all MediaItems in MediaItemArray. It returns the number of items as well as an array, with each entry one MediaItemStateChunk.
StateChunks are used by the reaper-functions reaper.GetItemStateChunk and reaper.SetItemStateChunk.
Returns -1 in case of failure.
PARAMETERS:
MediaItemArray:an array with the MediaItems you want the statechunks of
RETURNS:
number_of_items:the number of trackstatechunks, usually the same as MediaItems in MediaItemArray
MediaItemArray_StateChunks:an array with the StateChunks of the MediaItems in MediaItemArray
------
name:ultraschall.RippleInsert
language:lua
return:(integer:number_of_items),(array:MediaItemArray),(number:endpos_inserted_items)
params:(number:position), (array:MediaItemArray), (string:trackstring), (boolean:moveenvelopepoints), (boolean:movemarkers)
description:
It inserts the MediaItems from MediaItemArray at position into the tracks, as given by trackstring. It moves the items, that were there before, accordingly toward the end of the project.
Returns the number of newly created items, as well as an array with the newly created MediaItems and the endposition of the last(projectposition) inserted item into the project.
Returns -1 in case of failure.
Note: this inserts the items only in the tracks, where the original items came from. Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.
If you have a MediaItemArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.
PARAMETERS:
position:the position of the newly created mediaitem
MediaItemArray:an array with the MediaItems to be inserted
trackstring:the numbers of the tracks, separated by a ,
moveenvelopepoints:true, move the envelopepoints as well; false, keep the envelopepoints where they are
movemarkers:true, move markers as well; false, keep markers where they are
RETURNS:
number_of_items:the number of newly created items
MediaItemArray:an array with the newly created MediaItems
endpos_inserted_items:the endposition of the last newly inserted MediaItem
------
name:ultraschall.InsertMediaItemStateChunkArray
language:lua
return:(integer:number_of_items),(array:MediaItemArray)
params:(number:position), (array:MediaItemStateChunkArray), (string:trackstring)
description:
Inserts the MediaItems from MediaItemStateChunkArray at position into the tracks, as given by trackstring.
Note:Needs ULTRASCHALL_TRACKNUMBER within the statechunks, which includes the tracknumber for each mediaitem to be included. Else it will return -1. That entry will be included automatically into the MediaItemStateChunkArray as provided by GetAllMediaItemsBetween. If you need to manually insert that entry into a statechunk, use SetItemUSTRackNumber_StateChunk.
Returns the number of newly created items, as well as an array with the newly create MediaItems.
Returns -1 in case of failure.
Note: this inserts the items only in the tracks, where the original items came from(or the tracks set with the entry ULTRASCHALL_TRACKNUMBER). Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.
If you have a MediaItemStateChunkArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.
PARAMETERS:
position:the position of the newly created mediaitem
MediaItemStateChunkArray:an array with the statechunks of the MediaItems to be inserted
trackstring:the numbers of the tracks, separated by a ,
RETURNS:
number_of_items:the number of MediaItems created
MediaItemArray:an array with the newly created MediaItems
------
name:ultraschall.RippleInsert_MediaItemStateChunks
language:lua
return:(integer:number_of_items),(array:MediaItemStateChunkArray),(number:endpos_inserted_items)
params:(number:position), (array:MediaItemStateChunkArray), (string:trackstring), (boolean:moveenvelopepoints), (boolean:movemarkers)
description:
It inserts the MediaItems from MediaItemStateChunkArray at position into the tracks, as given by trackstring. It moves the items, that were there before, accordingly toward the end of the project.
Returns the number of newly created items, as well as an array with the newly created MediaItems as statechunks and the endposition of the last(projectposition) inserted item into the project.
Returns -1 in case of failure.
Note: this inserts the items only in the tracks, where the original items came from. Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.
If you have a MediaItemStateChunkArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.
PARAMETERS:
position:the position of the newly created mediaitem
MediaItemStateChunkArray:an array with the statechunks of MediaItems to be inserted
trackstring:the numbers of the tracks, separated by a ,
moveenvelopepoints:true, move the envelopepoints as well; false, keep the envelopepoints where they are
movemarkers:true, move markers as well; false, keep markers where they are
RETURNS:
number_of_items:the number of newly created items
MediaItemStateChunkArray:an array with the newly created MediaItems as StateChunkArray
endpos_inserted_items:the endposition of the last newly inserted MediaItem
------
name:ultraschall.GetAllMediaItemsFromTrack
language:lua
return:(integer:itemcount),(array:MediaItemArray),(array:MediaItemStateChunkArray)
params:(integer:tracknumber)
description:
returns the number of items of tracknumber, as well as an array with all MediaItems and an array with all MediaItemStateChunks
returns -1 in case of error
PARAMETERS:
tracknumber:the tracknumber, from where you want to get the item
RETURNS:
itemcount:the number of items in that track
MediaItemArray:an array with all MediaItems from this track
MediaItemStateChunkArray:an array with all MediaItemStateCunks from this track
------
name:ultraschall.SetItemsLockState
language:lua
return:(boolean:retval)
params:(array:MediaItemArray), (boolean:lockstate)
description:
Sets the lockstate of the items in MediaItemArray. Set lockstate=true to set the items locked; false to set them unlocked.
returns true in case of success, false in case of error
PARAMETERS:
MediaItemArray:an array with the MediaItems to be processed
lockstate:true, to set the MediaItems to locked, false to set them to unlocked
RETURNS:
retval:true in case of success, false in case of error
------
name:ultraschall.AddLockStateToMediaItemStateChunk
language:lua
return:(string:changedMediaItemStateChunk)
params:(string:MediaItemStateChunk), (boolean:lockstate)
description:
Sets the lockstate in a MediaItemStateChunk. Set lockstate=true to set the chunk locked; false to set it unlocked.
Does not apply the changes to the MediaItem itself. To do that, use reaper.GetItemStateChunk or ApplyStateChunkToItems!
returns the changed MediaItemStateChunk
returns -1 in case of failure
PARAMETERS:
MediaItemStateChunk:the statechunk of the item to be processed, as returned by functions like reaper.GetItemStateChunk
lockstate:true, to set the MediaItemStateChunk to locked, false to set it to unlocked
RETURNS:
changedMediaItemStateChunk:the lockstate-modified MediaItemStateChunk
------
name:ultraschall.AddLockStateTo_MediaItemStateChunkArray
language:lua
return:(integer:count),(array:changedMediaItemStateChunkArray)
params:(array:MediaItemStateChunkArray), (boolean:lockstate)
description:
Sets the lockstates in a MediaItemStateChunkArray. Set lockstate=true to set the chunks locked; false to set them unlocked.
Does not apply the changes to the MediaItem itself. To do that, use reaper.GetItemStateChunk or ApplyStateChunkToItems!
returns the number of entries and the altered MediaItemStateChunkArray; -1 in case of failure
PARAMETERS:
MediaItemStateChunkArray:the statechunkarray of the items to be processed, as returned by functions like reaper.GetItemStateChunk
lockstate:true, to set the MediaItemStateChunk to locked, false to set it to unlocked
RETURNS:
count:the number of entries in the changed MediaItemStateChunkArray
changedMediaItemStateChunkArray:the lockstate-modified MediaItemStateChunkArray
------
name:ultraschall.ApplyStateChunkToItems
language:lua
return:(boolean:retval),(integer:skippeditemscount),(array:skipped_MediaItemStateChunkArray)
params:(array:MediaItemStateChunkArray), (boolean:undostate)
description:
Applies changed StateChunks to the respective items. Skips deleted items, as they can't be set.
It will look into the IGUID-entry of the statechunks, to find the right corresponding MediaItem to apply the statechunk to.
returns the number of entries and the altered MediaItemStateChunkArray; -1 in case of failure
PARAMETERS:
MediaItemStateChunkArray:the statechunkarray of the items to be applied, as returned by functions like reaper.GetItemStateChunk
undostate:true, sets the changed undo-possible, false undo-impossible
RETURNS:
retval:true it worked, false it didn't
skippeditemscount:the number of entries that couldn't be applied
skipped_MediaItemStateChunkArray:the StateChunks, that couldn't be aplied
------
name:ultraschall.GetAllLockedItemsFromMediaItemArray
language:lua
return:(integer:countlock),(array:locked_MediaItemArray),(integer:countunlock),(array:unlocked_MediaItemArray)
params:(array:MediaItemArray)
description:
Returns the number and the items that are locked, as well as the number and the items that are NOT locked.
The items are returned as MediaItemArrays
returns -1 in case of failure
PARAMETERS:
MediaItemArray:the statechunkarray of the items to be checked.
RETURNS:
countlock:the number of locked items. -1 in case of failure
locked_MediaItemArray:the un(!)locked items in a mediaitemarray
countunlock:the number of un(!)locked items
unlocked_MediaItemArray:the un(!)locked items in a mediaitemarray
------
name:ultraschall.GetMediaItemStateChunksFromMediaItemArray
language:lua
return:(integer:count),(array:MediaItemStateChunkArray)
params:(array:MediaItemArray)
description:
Returns the number of items and statechunks of the Items in MediaItemArray. It skips items in MediaItemArray, that are deleted.
returns -1 in case of failure
PARAMETERS:
MediaItemArray:the statechunkarray of the items to be checked.
RETURNS:
count:the number of statechunks returned. -1 in case of failure
MediaItemStateChunkArray:the statechunks of the items in mediaitemarray
------
name:ultraschall.GetSelectedMediaItemsAtPosition
language:lua
return:(integer:count),(array:MediaItemArray),(array:MediaItemStateChunkArray)
params:(number:position), (string:trackstring)
description:
Returns all selected items at position in the tracks as given by trackstring, as MediaItemArray. Empty MediaItemAray if none is found.
returns -1 in case of error
PARAMETERS:
position:position in seconds
trackstring:the tracknumbers, separated by commas
RETURNS:
count:the number of entries in the returned MediaItemArray
MediaItemArray:the found MediaItems returned as an array
------
name:ultraschall.GetSelectedMediaItemsBetween
language:lua
return:(integer:count),(array:MediaItemArray)
params:(number:startposition), (number:endposition), (string:trackstring), (boolean:inside)
description:
Returns all selected items between startposition and endposition in the tracks as given by trackstring, as MediaItemArray. Empty MediaItemAray if none is found.
returns -1 in case of error
PARAMETERS:
startposition:startposition in seconds
endposition:endposition in seconds
trackstring:the tracknumbers, separated by commas
inside:true, only items completely within start/endposition; false, also items, that are partially within start/endposition
RETURNS:
count:the number of entries in the returned MediaItemArray
MediaItemArray:the found MediaItems returned as an array
------
name:ultraschall.DeselectMediaItems_MediaItemArray
language:lua
return:(integer:retval)
params:(array:MediaItemArray)
description:
Deselects all MediaItems, that are in MediaItemArray.
returns -1 in case of error
PARAMETERS:
MediaItemArray:an array with all the MediaItemObjects, that shall be deselected
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SelectMediaItems_MediaItemArray
language:lua
return:(integer:retval)
params:(array:MediaItemArray)
description:
Selects all MediaItems, that are in MediaItemArray.
returns -1 in case of error
PARAMETERS:
MediaItemArray:an array with all the MediaItemObjects, that shall be selected
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.EnumerateMediaItemsInTrack
language:lua
return:(MediaItem:item),(integer:itemcount),(array:MediaItemArray)
params:(integer:tracknumber), (integer:itemnumber)
description:
returns the itemnumberth MediaItemobject in track, the number of items in tracknumber and an array with all MediaItems from this track.
returns -1 in case of error
PARAMETERS:
tracknumber:the tracknumber, from where you want to get the item
itemnumber:the itemnumber within that track. 1 for the first, 2 for the second, etc
RETURNS:
item:the number of items in that track
itemcount:the number of items in that track
MediaItemArray:an array with all MediaItems from this track
------
name:ultraschall.GetMediaItemArrayLength
language:lua
return:(integer:start),(integer:end),(integer:length)
params:(array:MediaItemArray)
description:
Returns the beginning of the first item, the end of the last item as well as the length between start and end of all items within the MediaItemArray.
Will return -1, in case of error
PARAMETERS:
MediaItemArray:an array with MediaItems, as returned by functions like GetAllMediaItemsBetween or GetMediaItemsAtPosition or similar.
RETURNS:
start:the beginning of the earliest item in the MediaItemArray in seconds
end:the end of the latest item in the MediaItemArray, timewise, in seconds
length:the length of the MediaItemArray in seconds
------
name:ultraschall.GetMediaItemStateChunkArrayLength
language:lua
return:(integer:start),(integer:end),(integer:length)
params:(array:MediaItemStateChunkArray)
description:
Returns the beginning of the first item, the end of the last item as well as the length between start and end of all items within the MediaItemStateChunkArray.
Will return -1, in case of error
PARAMETERS:
MediaItemStateChunkArray:an array with MediaItemStateChunks, as returned by functions like GetAllMediaItemsBetween or GetMediaItemsAtPosition or similar.
RETURNS:
start:the beginning of the earliest item in the MediaItemArray in seconds
end:the end of the latest item in the MediaItemArray, timewise, in seconds
length:the length of the MediaItemArray in seconds
------
name:ultraschall.GetAllMediaItemGUIDs
language:lua
return:(table:GUID_Array),(integer:count_of_GUID)
params:
description:
Returns an array with all MediaItem-GUIDs in order of the MediaItems-count(1 for first MediaItem, etc).
Returns nil in case of an error
------
name:ultraschall.GetItemSpectralConfig
language:lua
return:(integer:item_spectral_config)
params:(integer:itemidx), (optional string:MediaItemStateChunk)
description:
returns the item-spectral-config, which is the fft-size of the spectral view for this item.
set itemidx to -1 to use the optional parameter MediaItemStateChunk to alter a MediaItemStateChunk instead of an item directly.
returns -1 in case of error or nil if no spectral-config exists(e.g. when no spectral-edit is applied to this item)
PARAMETERS:
itemidx:the number of the item, with 1 for the first item, 2 for the second, etc.; -1, to use the parameter MediaItemStateChunk
MediaItemStateChunk:you can give a MediaItemStateChunk to process, if itemidx is set to -1
RETURNS:
item_spectral_config:the fft-size in points for the spectral-view; 16, 32, 64, 128, 256, 512, 1024(default), 2048, 4096, 8192; -1, if not existing
------
name:ultraschall.SetItemSpectralConfig
language:lua
return:(boolean:retval),(string:MediaItemStateChunk)
params:(integer:itemidx), (integer:item_spectral_config), (optional string:MediaItemStateChunk)
description:
sets the item-spectral-config, which is the fft-size of the spectral view for this item.
returns false in case of error or if no spectral-config exists(e.g. when no spectral-edit is applied to this item)
PARAMETERS:
itemidx:the number of the item, with 1 for the first item, 2 for the second, etc.; -1, if you want to use the optional parameter MediaItemStateChunk
item_spectral_config:the fft-size in points for the spectral-view; 16, 32, 64, 128, 256, 512, 1024(default), 2048, 4096, 8192; nil, to remove it
MediaItemStateChunk:a MediaItemStateChunk you want to have altered; works only, if itemdidx is set to -1, otherwise it will be ignored
RETURNS:
retval:true, if setting spectral-config worked; false, if not
MediaItemStateChunk:the altered MediaItemStateChunk
------
name:ultraschall.CountItemSpectralEdits
language:lua
return:(integer:count)
params:(integer:itemidx), (optional string:MediaItemStateChunk)
description:
counts the number of SPECTRAL_EDITs in a given MediaItem/MediaItemStateChunk.
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.
returns -1 in case of error
PARAMETERS:
itemidx:the MediaItem to look in for the spectral-edit; -1, to use the parameter MediaItemStateChunk instead
MediaItemStateChunk:if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored
RETURNS:
count:the number of spectral-edits available in a given MediaItem/MediaItemStateChunk
------
name:ultraschall.GetItemSpectralEdit
language:lua
return:(number:start_pos),(number:length),(number:gain),(number:fade),(number:freq_fade),(number:freq_range_bottom),(number:freq_range_top),(integer:h),(integer:byp_solo),(number:gate_thres),(number:gate_floor),(number:comp_thresh),(number:comp_exp_ratio),(number:n),(number:o),(number:fade2),(number:freq_fade2)
params:(integer:itemidx), (integer:spectralidx), (optional string:MediaItemStateChunk)
description:
returns the settings of a specific SPECTRAL_EDIT in a given MediaItem/MediaItemStateChunk.
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.
returns -1 in case of error
PARAMETERS:
itemidx:the MediaItem to look in for the spectral-edit; -1, to use the parameter MediaItemStateChunk instead
spectralidx:the number of the spectral-edit to return; 1 for the first, 2 for the second, etc
MediaItemStateChunk:if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored
RETURNS:
start_pos:the startposition of the spectral-edit-region in seconds
length:the length of the spectral-edit-region in seconds
gain:the gain as slider-value; 0(-224dB) to 98350.1875(99.68dB); 1 for 0dB
fade:negative with low frequency-fade, positive with high-frequency-fade
freq_fade:negative with low frequency-fade, positive with high-frequency-fade
freq_range_bottom:the bottom of the edit-region, but can be moved to be top as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)
freq_range_top:the top of the edit-region, but can be moved to be bottom as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)
h:sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default
byp_solo:sets the solo and bypass-state. 0, no solo, no bypass; 1, bypass only; 2, solo only; 3, bypass and solo
gate_thres:sets the threshold of the gate; 0(-224dB)-98786.226563(99.89dB)
gate_floor:sets the floor of the gate; 0(-224dB)-99802.171875(99.98dB)
comp_thresh:sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default
comp_exp_ratio:sets the ratio of the compressor/expander; 0.1(1:10.0)-100(100:1.0); 1(1.0:1) is default
n:negative with low frequency-fade, positive with high-frequency-fade
o:unknown
fade2:negative with low frequency-fade, positive with high-frequency-fade
freq_fade2:negative with low frequency-fade, positive with high-frequency-fade
------
name:ultraschall.DeleteItemSpectralEdit
language:lua
return:(boolean:retval),(string:MediaItemStateChunk)
params:(integer:itemidx), (integer:spectralidx), (optional string:MediaItemStateChunk)
description:
deletes a specific SPECTRAL_EDIT in a given MediaItem/MediaItemStateChunk.
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.
returns false in case of error
PARAMETERS:
itemidx:the MediaItem to look in for the spectral-edit; -1, to use the parameter MediaItemStateChunk instead
spectralidx:the number of the spectral-edit to delete; 1 for the first, 2 for the second, etc
MediaItemStateChunk:if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored
RETURNS:
retval:true, if deleting an spectral-edit-entry was successful; false, if it was unsuccessful
MediaItemStateChunk:the altered MediaItemStateChunk
------
name:ultraschall.SetItemSpectralVisibilityState
language:lua
return:(string:MediaItemStateChunk)
params:(integer:itemidx), (integer:state), (optional string:MediaItemStateChunk)
description:
Sets SPECTROGRAM-state in a MediaItem or MediaItemStateChunk.
Setting it shows the spectrogram, in which you can do spectral-editing, as selected in the MediaItem-menu "Spectral-editing -> Toggle show spectrogram for selected items"
It returns the modified MediaItemStateChunk.
Returns -1 in case of error.
PARAMETERS:
itemidx:the number of the item in the project; use -1 to use MediaItemStateChunk instead
state:the state of the SPECTROGRAM; 0, to hide SpectralEdit; 1, to set SpectralEdit visible
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk; only read, when itemidx=-1
RETURNS:
MediaItemStateChunk:the altered rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
------
name:ultraschall.SetItemSpectralEdit
language:lua
return:(string:MediaItemStateChunk)
params:(integer:itemidx), (integer:spectralidx), (number:start_pos), (number:length), (number:gain), (number:fade), (number:freq_fade), (number:freq_range_bottom), (number:freq_range_top), (integer:h), (integer:byp_solo), (number:gate_thres), (number:gate_floor), (number:comp_thresh), (number:comp_exp_ratio), (number:n), (number:o), (number:fade2), (number:freq_fade2), (optional string:MediaItemStateChunk)
description:
Sets a spectral-edit-instance in a MediaItem or MediaItemStateChunk.
After committing the changed MediaItemStateChunk to a MediaItem, Reaper may change the order of the spectral-edits! Keep that in mind, when changing numerous Spectral-Edits or use MediaItemStateChunks for the setting before committing them to a MediaItem using Reaper's function reaper.SetItemStateChunk().
It returns the modified MediaItemStateChunk.
Returns -1 in case of error.
PARAMETERS:
itemidx:the number of the item in the project; use -1 to use MediaItemStateChunk instead
spectralidx:the number of the spectral-edit-instance, that you want to set
start_pos:the startposition of the spectral-edit-region in seconds
length:the length of the spectral-edit-region in seconds
gain:the gain as slider-value; 0(-224dB) to 98350.1875(99.68dB); 1 for 0dB
fade:negative with low frequency-fade, positive with high-frequency-fade
freq_fade:negative with low frequency-fade, positive with high-frequency-fade
freq_range_bottom:the bottom of the edit-region, but can be moved to be top as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)
freq_range_top:the top of the edit-region, but can be moved to be bottom as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)
h:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
byp_solo:sets the solo and bypass-state. 0, no solo, no bypass; 1, bypass only; 2, solo only; 3, bypass and solo
gate_thres:sets the threshold of the gate; 0(-224dB)-98786.226563(99.89dB)
gate_floor:sets the floor of the gate; 0(-224dB)-99802.171875(99.98dB)
comp_thresh:sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default
comp_exp_ratio:sets the ratio of the compressor/expander; 0.1(1:10.0)-100(100:1.0); 1(1.0:1) is default
n:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
o:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
fade2:negative with low frequency-fade, positive with high-frequency-fade
freq_fade2:negative with low frequency-fade, positive with high-frequency-fade
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
RETURNS:
MediaItemStateChunk:an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk
------
name:ultraschall.GetItemSourceFile_Take
language:lua
return:(string:source_filename),(PCM_source:source),(MediaItem_Take:take)
params:(MediaItem:MediaItem), (integer:take_nr)
description:
returns filename, the PCM_Source-object and the MediaItem_Take-object of a specific take. Use take_nr=0 for active take.
returns nil in case of error
PARAMETERS:
MediaItem:the MediaItem-object, in which the requested take lies
take_nr:the number of the requested take; use 0 for the active take
RETURNS:
source_filename:the filename of the requested take
source:the PCM_source-object of the requested take
take:the Media-Item_Take-object of the requested take
------
name:ultraschall.AddItemSpectralEdit
language:lua
return:(boolean:retval),(MediaItemStateChunk:statechunk)
params:(integer:itemidx), (number:start_pos), (number:length), (number:gain), (number:fade), (number:freq_fade), (number:freq_range_bottom), (number:freq_range_top), (integer:h), (integer:byp_solo), (number:gate_thres), (number:gate_floor), (number:comp_thresh), (number:comp_exp_ratio), (number:n), (number:o), (number:fade2), (number:freq_fade2), (optional string:MediaItemStateChunk)
description:
Adds a new SPECTRAL_EDIT-entry in a given MediaItem/MediaItemStateChunk.
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.
returns false in case of error
PARAMETERS:
itemidx:the MediaItem to add to another spectral-edit-entry; -1, to use the parameter MediaItemStateChunk instead
start_pos:the startposition of the spectral-edit-region in seconds
length:the length of the spectral-edit-region in seconds
gain:the gain as slider-value; 0(-224dB) to 98350.1875(99.68dB); 1 for 0dB
fade:negative with low frequency-fade, positive with high-frequency-fade
freq_fade:negative with low frequency-fade, positive with high-frequency-fade
freq_range_bottom:the bottom of the edit-region, but can be moved to be top as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)
freq_range_top:the top of the edit-region, but can be moved to be bottom as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)
h:if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored
byp_solo:sets the solo and bypass-state. 0, no solo, no bypass; 1, bypass only; 2, solo only; 3, bypass and solo
gate_thres:sets the threshold of the gate; 0(-224dB)-98786.226563(99.89dB)
gate_floor:sets the floor of the gate; 0(-224dB)-99802.171875(99.98dB)
comp_thresh:sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default
comp_exp_ratio:sets the ratio of the compressor/expander; 0.1(1:10.0)-100(100:1.0); 1(1.0:1) is default
n:if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored
o:unknown
fade2:negative with low frequency-fade, positive with high-frequency-fade
freq_fade2:negative with low frequency-fade, positive with high-frequency-fade
MediaItemStateChunk:if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored
RETURNS:
retval:true, if adding was successful; false, if adding wasn't successful
statechunk:the altered MediaItemStateChunk
------
name:ultraschall.GetItemSpectralVisibilityState
language:lua
return:(integer:spectrogram_state)
params:(integer:itemidx), (optional string:MediaItemStateChunk)
description:
returns, if spectral-editing is shown in the arrange-view of item itemidx
set itemidx to -1 to use the optional parameter MediaItemStateChunk to alter a MediaItemStateChunk instead of an item directly.
returns -1 in case of error
PARAMETERS:
itemidx:the number of the item, with 1 for the first item, 2 for the second, etc.; -1, to use the parameter MediaItemStateChunk
MediaItemStateChunk:you can give a MediaItemStateChunk to process, if itemidx is set to -1
------
name:ultraschall.InsertImageFile
language:lua
return:(boolean:retval),(MediaItem:item)
params:(string:filename_with_path), (integer:track), (number:position), (number:length), (boolean:looped)
description:
Inserts a supported image-file into your project.
Due API-limitations, it creates two undo-points(one for inserting the MediaItem and one for changing the length).
Returns false in case of an error
PARAMETERS:
filename_with_path:the file to check for it's image-fileformat
track:the track, in which the image shall be inserted
position:the position of the inserted image in seconds
length:the length of the image-item in seconds; 1, for the default length of 1 second
looped:true, loop the inserted image-file; false, don't loop the inserted image-file
RETURNS:
retval:true, if inserting was successful; false, if inserting was unsuccessful
item:the MediaItem of the newly inserted image
------
name:ultraschall.GetAllSelectedMediaItems
language:lua
return:(integer:count),(array:MediaItemArray)
params:
description:
Returns all selected items in the project as MediaItemArray. Empty MediaItemAray if none is found.
RETURNS:
count:the number of entries in the returned MediaItemArray
MediaItemArray:all selected MediaItems returned as an array
------
name:ultraschall.SetMediaItemsSelected_TimeSelection
language:lua
return:
params:
description:
Sets all MediaItems selected, that are within the time-selection.
------
name:ultraschall.GetParentTrack_MediaItem
language:lua
return:(integer:tracknumber),(MediaTrack:mediatrack)
params:(MediaItem:MediaItem)
description:
Returns the tracknumber and the MediaTrack-object of the track in which the MediaItem is placed.
returns -1 in case of error
PARAMETERS:
MediaItem:the MediaItem, of which you want to know the track is is placed in
RETURNS:
tracknumber:the tracknumber of the track, in which the MediaItem is placed; 1 for track 1, 2 for track 2, etc
mediatrack:the MediaTrack-object of the track, in which the MediaItem is placed
------
name:ultraschall.IsItemInTrack2
language:lua
return:(boolean:retval),(integer:tracknumber)
params:(MediaItem:MediaItem), (integer:tracknumber)
description:
Checks, whether a MediaItem is in track with tracknumber.
see IsItemInTrack to use itemidx instead of the MediaItem-object.
see IsItemInTrack3 to check against multiple tracks at once using a trackstring.
returns nil in case of error
PARAMETERS:
MediaItem:the MediaItem, of which you want to know the track is is placed in
tracknumber:the tracknumber to check the parent track of the MediaItem against, with 1 for track 1, etc
RETURNS:
retval:true, if item is in track; false, if not
tracknumber:the tracknumber of the track, in which the item lies
------
name:ultraschall.IsItemInTimerange
language:lua
return:(boolean:retval)
params:(MediaItem:MediaItem), (number:startposiiton), (number:endposition), (boolean:inside)
description:
checks, whether a given MediaItem is within startposition and endposition and returns the result.
returns nil in case of an error
PARAMETERS:
MediaItem:the MediaItem to check for, if it's within the timerange
endposition:the endtime of the timerange, in which the MediaItem must be, in seconds
inside:true, MediaItem must be fully within timerange; false, MediaItem can be partially inside timerange
RETURNS:
retval:true, item is in timerange; false, item isn't in timerange
------
name:ultraschall.OnlyItemsInTracksAndTimerange
language:lua
return:(integer:count),(MediaItemArray:MediaItemArray)
params:(MediaItemArray:MediaItemArray), (string:trackstring), (number:starttime), (number:endtime), (boolean:inside)
description:
Removes all items from MediaItemArray, that aren't in tracks, as given by trackstring and are outside the timerange(starttime to endtime).
returns -1 in case of an error
PARAMETERS:
MediaItemArray:an array with all MediaItems, that shall be checked for trackexistence and timerange
trackstring:a string with all requested tracknumbers in which the MediaItem must be, separated by commas; 1 for track 1, 2 for track 2, etc
starttime:the starttime of the timerange, in which the MediaItem must be, in seconds
endtime:the endtime of the timerange, in which the MediaItem must be, in seconds
inside:true, only MediaItems are returned, that are fully within starttime and endtime; false, return also MediaItems partially in timerange
RETURNS:
count:the number of items that fit the requested tracks and timerange
MediaItemArray:the altered MediaItemArray, that has only the MediaItems from tracks as requested by trackstring and from within timerange
------
name:ultraschall.ApplyActionToMediaItem
language:lua
return:(boolean:retval)
params:(MediaItem:MediaItem), (string:actioncommandid), (integer:repeat_action), (boolean:midi), (optional HWND:MIDI_hwnd)
description:
Applies an action to a MediaItem, in either main or MIDI-Editor section-context.
The action given must support applying itself to selected items.
Returns false in case of an error
PARAMETERS:
MediaItem:the MediaItem, to whom the action shall be applied to
actioncommandid:the commandid-number or ActionCommandID, that shall be run.
repeat_action:the number of times this action shall be applied to each item; minimum value is 1
midi:true, run an action from MIDI-Editor-section-context; false, run an action from the main section
MIDI_hwnd:the HWND-handle of the MIDI-Editor, to which a MIDI-action shall be applied to; nil, to use the currently selected one
RETURNS:
retval:true, if running the action was successful; false, if not or an error occured
------
name:ultraschall.ApplyActionToMediaItemArray
language:lua
return:(boolean:retval)
params:(MediaItemArray:MediaItemArray), (string:actioncommandid), (integer:repeat_action), (boolean:midi), (optional HWND:MIDI_hwnd)
description:
Applies an action to the MediaItems in MediaItemArray, in either main or MIDI-Editor section-context
The action given must support applying itself to selected items.
This function applies the action to each MediaItem individually. To apply the action to all MediaItems in MediaItemArray at once, see ApplyActionToMediaItemArray2.
Returns false in case of an error
PARAMETERS:
MediaItemArray:an array with all MediaItems, to whom the action shall be applied to
actioncommandid:the commandid-number or ActionCommandID, that shall be run.
repeat_action:the number of times this action shall be applied to each item; minimum value is 1
midi:true, run an action from MIDI-Editor-section-context; false, run an action from the main section
MIDI_hwnd:the HWND-handle of the MIDI-Editor, to which a MIDI-action shall be applied to; nil, to use the currently selected one
RETURNS:
retval:true, if running the action was successful; false, if not or an error occured
------
name:ultraschall.GetAllMediaItemsInTimeSelection
language:lua
return:(integer:count),(array:MediaItemArray)
params:(string:trackstring), (boolean:inside)
description:
Gets all MediaItems from within a time-selection
Returns -1 in case of an error
PARAMETERS:
trackstring:a string with all tracknumbers, separated by a comma; 1 for the first track, 2 for the second
RETURNS:
count:the number of items found in time-selection
MediaItemArray:an array with all MediaItems found within time-selection
------
name:ultraschall.NormalizeItems
language:lua
return:(integer:retval)
params:(array:MediaItemArray)
description:
Normalizes all items in MediaItemArray.
Returns -1 in case of an error
PARAMETERS:
MediaItemArray:an array with all MediaItems, that shall be normalized
RETURNS:
retval:-1, in case of an error
------
name:ultraschall.GetAllMediaItems
language:lua
return:(integer:itemcount),(MediaItemArray:MediaItemArray)
params:
description:
Returns a MediaItemArray with all MediaItems in the current project
RETURNS:
itemcount:the number of items in the MediaItemArray
MediaItemArray:an array with all MediaItems from the current project
------
name:ultraschall.PreviewMediaItem
language:lua
return:(boolean:retval)
params:(MediaItem:MediaItem), (integer:Previewtype)
description:
Will play a preview a given MediaItem.
You can just play one preview at a time, except when previewing additionally through the MediaExplorer.
Returns false in case of an error
PARAMETERS:
MediaItem:the MediaItem, of which you want to play a preview
Previewtype:the type of the preview
RETURNS:
retval:false, in case of error; true, in case of success
------
name:ultraschall.StopAnyPreview
language:lua
return:
params:
description:
Stops any playing preview of a MediaItem.
------
name:ultraschall.PreviewMediaFile
language:lua
return:(integer:retval)
params:(string:filename_with_path), (optional number:gain), (optional boolean:loop)
description:
Plays a preview of a media-file. You can only play one file at a time.
Returns false in case of an error
PARAMETERS:
filename_with_path:the filename with path of the media-file to play
gain:the gain of the volume; nil, defaults to 1
loop:true, loop the previewed file; false or nil, don't loop the file
RETURNS:
retval:true, starting preview was successful; false, starting preview wasn't successful
------
name:ultraschall.GetMediaItemTake
language:lua
return:(MediaItem_Take:Take),(integer:TakeCount)
params:(MediaItem:MediaItem), (integer:TakeNr)
description:
Returns the requested MediaItem-Take of MediaItem. Use TakeNr=0 for the active take(!)
Returns nil in case of an error
PARAMETERS:
MediaItem:the MediaItem, of whom you want to request a certain take.
TakeNr:the take that you want to request; 1 for the first; 2 for the second, etc; 0, for the current active take
RETURNS:
Take:the number of takes available within this Mediaitem
TakeCount:the number of takes available within this Mediaitem
------
name:ultraschall.ApplyFunctionToMediaItemArray
language:lua
return:(table returnvalues:)
params:(MediaItemArray:MediaItemArray), (function:functionname), (functionparameters1:), (...:), (functionparametersn:)
description:
Applies function "functionname" on all items in MediaItemArray. Parameter ... is all parameters used for function "functionname", where you should use nil in place of the parameter that shall hold a MediaItem.
Returns a table with a boolean(did the function run without an error) and all returnvalues returned by function "functionname".
Returns nil in case of an error. Will NOT(!) stop execution, if function "functionname" produces an error(see table returnvalues for more details)
PARAMETERS:
MediaItemArray:an array with all MediaItems, who you want to apply functionname to.
functionname:the name of the function to apply to every MediaItem in MediaItemArray
:This nil-parameter will be filled with the appropriate MediaItem by ApplyFunctionToMediaItemArray automatically
:This nil-parameter will be filled with the appropriate MediaItem by ApplyFunctionToMediaItemArray automatically
:This nil-parameter will be filled with the appropriate MediaItem by ApplyFunctionToMediaItemArray automatically
RETURNS:
table returnvalues:all other tableentries contain the returnvalues, as returned by function "functionname"
------
name:ultraschall.GetGapsBetweenItems
language:lua
return:(integer:number_of_gaps),(array:gaptable)
params:(MediaTrack:MediaTrack)
description:
Returns a table with all gaps between items in MediaTrack.
Returns -1 in case of an error
PARAMETERS:
MediaTrack:the track, of which you want to have the gaps between items
RETURNS:
number_of_gaps:the number of gaps found between items; -1, in case of error
gaptable:an array with all gappositions found
------
name:ultraschall.DeleteMediaItems_Between
language:lua
return:(boolean:retval),(array:MediaItemStateChunkArray)
params:(number:startposition), (number:endposition), (string:trackstring), (boolean:inside)
description:
Delete the MediaItems between start- and endposition, from the tracks as given by trackstring.
Returns also a MediaItemStateChunkArray, that contains the statechunks of all deleted MediaItem
returns false in case of an error
PARAMETERS:
startposition:the startposition in seconds
endposition:the endposition in seconds
trackstring:the tracknumbers, separated by a comma
inside:true, delete only MediaItems that are completely within start and endposition; false, also include MediaItems partially within start and endposition
RETURNS:
retval:true, delete was successful; false was unsuccessful
MediaItemStateChunkArray:and array with all statechunks of all deleted MediaItems; 
------
name:ultraschall.ApplyActionToMediaItemArray2
language:lua
return:(boolean:retval)
params:(MediaItemArray:MediaItemArray), (string:actioncommandid), (integer:repeat_action), (boolean:midi), (optional HWND:MIDI_hwnd)
description:
Applies an action to the MediaItems in MediaItemArray, in either main or MIDI-Editor section-context
The action given must support applying itself to selected items.
This function applies the action to all MediaItems at once. To apply the action to each MediaItem in MediaItemArray individually, see ApplyActionToMediaItemArray
Returns false in case of an error
PARAMETERS:
MediaItemArray:an array with all MediaItems, to whom the action shall be applied to
actioncommandid:the commandid-number or ActionCommandID, that shall be run.
repeat_action:the number of times this action shall be applied to each item; minimum value is 1
midi:true, run an action from MIDI-Editor-section-context; false, run an action from the main section
MIDI_hwnd:the HWND-handle of the MIDI-Editor, to which a MIDI-action shall be applied to; nil, to use the currently selected one
RETURNS:
retval:true, if running the action was successful; false, if not or an error occured
------
name:ultraschall.GetMediafileAttributes
language:lua
return:(number:length),(integer:numchannels),(integer:Samplerate),(string:Filetype)
params:(string:filename)
description:
returns the attributes of a mediafile
if the mediafile is an rpp-project, this function creates a proxy-file called filename.RPP-PROX, which is a wave-file of the length of the project.
This file can be deleted safely after that, but would be created again the next time this function is called.
returns -1 in case of an error
PARAMETERS:
filename:the file whose attributes you want to have
RETURNS:
length:the length of the mediafile in seconds
numchannels:the number of channels of the mediafile
Samplerate:the samplerate of the mediafile in hertz
Filetype:the type of the mediafile, like MP3, WAV, MIDI, FLAC, RPP_PROJECT etc
------
name:ultraschall.InsertMediaItemFromFile
language:lua
return:(integer:retval),(MediaItem:item),(number:endposition),(integer:numchannels),(integer:Samplerate),(string:Filetype),(number:editcursorposition),(MediaTrack:track)
params:(string:filename), (integer:track), (number:position), (number:endposition), (integer:editcursorpos), (optional number:offset)
description:
Inserts the mediafile filename into the project at position in track
When giving an rpp-projectfile, it will be rendered by Reaper and inserted as subproject!
Due API-limitations, it creates two undo-points: one for inserting the MediaItem and one for changing the length(when endposition isn't -1).
Returns -1 in case of failure
PARAMETERS:
filename:the path+filename of the mediafile to be inserted into the project
track:the track, in which the file shall be inserted
position:the length of the newly created mediaitem; -1, use the length of the sourcefile
endposition:the length of the newly created mediaitem; -1, use the length of the sourcefile
editcursorpos:the position of the editcursor after insertion of the mediafile
offset:an offset, to delay the insertion of the item, to overcome possible "too late"-starting of playback of item during recording
RETURNS:
retval:0, if insertion worked; -1, if it failed
item:the newly created MediaItem
endposition:the endposition of the newly created MediaItem in seconds
numchannels:the number of channels of the mediafile
Samplerate:the samplerate of the mediafile in hertz
Filetype:the type of the mediafile, like MP3, WAV, MIDI, FLAC, etc
editcursorposition:the (new) editcursorposition
track:returns the MediaTrack, in which the item is included
------
name:ultraschall.CopyMediaItemToDestinationTrack
language:lua
return:(MediaItem:newMediaItem),(MediaItemStateChunk:statechunk)
params:(MediaItem:MediaItem), (MediaTrack:MediaTrack_destination), (number:position)
description:
Copies MediaItem to MediaTrack_destination at position.
Returns nil in case of an error
PARAMETERS:
MediaItem:the MediaItem, that you want to create a copy from
MediaTrack_destination:the track, into which you want to copy the MediaItem
position:the position of the copy of the MediaItem; negative, to keep the position of the source-MediaItem
RETURNS:
newMediaItem:the newly created MediaItem; nil, if no item could be created
statechunk:the statechunk of the newly created MediaItem
------
name:ultraschall.IsSplitAtPosition
language:lua
return:(boolean:retval)
params:(string:trackstring), (number:position)
description:
returns, if theres at least one split, MediaItemend or MediaItemstart at position within the tracks given in trackstring.
returns false in case of an error
PARAMETERS:
trackstring:the tracknumbers, within to search for, as comma separated string. Starting 1 for the first track.
position:the position, at which to check for.
RETURNS:
retval:true, there's a split/mediaitemend/mediaitemstart at position; false, it isn't
------
name:ultraschall.GetItem_Number
language:lua
return:(integer:itemidx)
params:(MediaItem:MediaItem)
description:
returns the indexnumber of a MediaItem-object
Can be helpful with Reaper's own API-functions, like reaper.GetMediaItem(ReaProject proj, integer itemidx)
returns -1 in case of an error
PARAMETERS:
MediaItem:the MediaItem, whose itemidx you want to have
RETURNS:
itemidx:the indexnumber of the MediaItem, zero based. 
------
name:ultraschall.GetItem_HighestRecCounter
language:lua
return:(integer:highest_item_reccount),(integer:found)
params:
description:
Takes the RECPASS-counters of all items and takes and returns the highest one, which usually means, the number of items, who have been recorded since the project has been created.
Note: a RECPASS-entry can also be part of a copy of a recorded item, so multiple items/takes can share the same RECPASS-entries with the same counter.
Means: the highest number can be of multiple items
returns -1 if no recorded item/take has been found.
RETURNS:
highest_item_reccount:the highest reccount of all MediaItems, which usually means, that so many Items have been recorded in this project
found:the number of MediaItems, who have a recpass-entry in their StateChunk, means, who have been recorded.    
------
name:ultraschall.GetItem_ClickState
language:lua
return:(boolean:clickstate),(number:position),(MediaItem:item),(MediaItem_Take:take)
params:
description:
Returns the currently clicked item and take, as well as the current timeposition.
Mostly useful in defer-scripts.
Returns false, if no item is clicked at
RETURNS:
clickstate:true, item is clicked on; false, item isn't clicked on
position:the position, at which the item is currently clicked at
item:the Item, which is currently clicked at
take:the take found at clickposition
------
name:ultraschall.GetEndOfItem
language:lua
return:(number:end_of_item_position)
params:(MediaItem:MediaItem)
description:
Returns the endposition of MediaItem
returns nil in case of an error
PARAMETERS:
MediaItem:the MediaItem, whose ending-position you want to know
RETURNS:
end_of_item_position:the position of the ending edge of the MediaItem
------
name:ultraschall.GetAllMediaItemAttributes_Table
language:lua
return:(table:AttributeTable)
params:(MediaItem:MediaItem)
description:
Returns all attributes of MediaItem as a handy table.
The returned table is of the following scheme:
AttributeTable["B_MUTE"] - bool * : muted
AttributeTable["B_LOOPSRC"] - bool * : loop source
AttributeTable["B_ALLTAKESPLAY"] - bool * : all takes play
AttributeTable["B_UISEL"] - bool * : selected in arrange view
AttributeTable["C_BEATATTACHMODE"] - char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
AttributeTable["C_AUTOSTRETCH:"] - char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
AttributeTable["C_LOCK"] - char * : locked, &1=locked
AttributeTable["D_VOL"] - double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
AttributeTable["D_POSITION"] - double * : item position in seconds
AttributeTable["D_LENGTH"] - double * : item length in seconds
AttributeTable["D_SNAPOFFSET"] - double * : item snap offset in seconds
AttributeTable["D_FADEINLEN"] - double * : item manual fadein length in seconds
AttributeTable["D_FADEOUTLEN"] - double * : item manual fadeout length in seconds
AttributeTable["D_FADEINDIR"] - double * : item fadein curvature, -1..1
AttributeTable["D_FADEOUTDIR"] - double * : item fadeout curvature, -1..1
AttributeTable["D_FADEINLEN_AUTO"] - double * : item auto-fadein length in seconds, -1=no auto-fadein
AttributeTable["D_FADEOUTLEN_AUTO"] - double * : item auto-fadeout length in seconds, -1=no auto-fadeout
AttributeTable["C_FADEINSHAPE"] - int * : fadein shape, 0..6, 0=linear
AttributeTable["C_FADEOUTSHAPE"] - int * : fadeout shape, 0..6, 0=linear
AttributeTable["I_GROUPID"] - int * : group ID, 0=no group
AttributeTable["I_LASTY"] - int * : Y-position of track in pixels (read-only)
AttributeTable["I_LASTH"] - int * : height in track in pixels (read-only)
AttributeTable["I_CUSTOMCOLOR"] - int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color anyway)
AttributeTable["I_CURTAKE"] - int * : active take number
AttributeTable["IP_ITEMNUMBER"] - int, item number on this track (read-only, returns the item number directly)
AttributeTable["F_FREEMODE_Y"] - float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
AttributeTable["F_FREEMODE_H"] - float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
AttributeTable["P_TRACK"] - MediaTrack * (read-only)
returns nil in case of an error
PARAMETERS:
MediaItem:the MediaItem, whose attributes you want to retrieve
RETURNS:
AttributeTable:a table with all attributes of a MediaItem
------
name:ultraschall.SetAllMediaItemAttributes_Table
language:lua
return:(boolean:retval)
params:(MediaItem:MediaItem), (table:AttributeTable)
description:
Sets all attributes of MediaItem using a AttributeTable, which holds all the new settings for the MediaItem.
The expected table is of the following scheme:
AttributeTable["B_MUTE"] - bool * : muted
AttributeTable["B_LOOPSRC"] - bool * : loop source
AttributeTable["B_ALLTAKESPLAY"] - bool * : all takes play
AttributeTable["B_UISEL"] - bool * : selected in arrange view
AttributeTable["C_BEATATTACHMODE"] - char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
AttributeTable["C_AUTOSTRETCH:"] - char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
AttributeTable["C_LOCK"] - char * : locked, &1=locked
AttributeTable["D_VOL"] - double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
AttributeTable["D_POSITION"] - double * : item position in seconds
AttributeTable["D_LENGTH"] - double * : item length in seconds
AttributeTable["D_SNAPOFFSET"] - double * : item snap offset in seconds
AttributeTable["D_FADEINLEN"] - double * : item manual fadein length in seconds
AttributeTable["D_FADEOUTLEN"] - double * : item manual fadeout length in seconds
AttributeTable["D_FADEINDIR"] - double * : item fadein curvature, -1..1
AttributeTable["D_FADEOUTDIR"] - double * : item fadeout curvature, -1..1
AttributeTable["D_FADEINLEN_AUTO"] - double * : item auto-fadein length in seconds, -1=no auto-fadein
AttributeTable["D_FADEOUTLEN_AUTO"] - double * : item auto-fadeout length in seconds, -1=no auto-fadeout
AttributeTable["C_FADEINSHAPE"] - int * : fadein shape, 0..6, 0=linear
AttributeTable["C_FADEOUTSHAPE"] - int * : fadeout shape, 0..6, 0=linear
AttributeTable["I_GROUPID"] - int * : group ID, 0=no group
AttributeTable["I_LASTY"] - int * : Y-position of track in pixels (read-only)
AttributeTable["I_LASTH"] - int * : height in track in pixels (read-only)
AttributeTable["I_CUSTOMCOLOR"] - int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color anyway)
AttributeTable["I_CURTAKE"] - int * : active take number
AttributeTable["IP_ITEMNUMBER"] - int, item number on this track (read-only, returns the item number directly)
AttributeTable["F_FREEMODE_Y"] - float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
AttributeTable["F_FREEMODE_H"] - float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
AttributeTable["P_TRACK"] - MediaTrack * (read-only)
returns false in case of an error or if some of the attributes could not be set.
PARAMETERS:
MediaItem:the MediaItem, whose attributes you want to set
AttributeTable:a table which holds all settings, that you want to set
RETURNS:
retval:true, setting was successful; false, setting attributes failed
------
name:ultraschall.GetAllSelectedMediaItemsBetween
language:lua
return:(integer:count),(array:MediaItemArray),(array:MediaItemStateChunkArray)
params:(number:startposition), (number:endposition), (string:trackstring), (boolean:inside)
description:
Gets all selected MediaItems between startposition and endposition from the tracks as given by trackstring.
Set inside to true to get only items, that are fully within the start and endposition, set it to false, if you also want items, that are just partially inside(end or just the beginning of the item).
Returns the number of selected items, an array with all the selected MediaItems and an array with all the MediaItemStateChunks of the selected items, as used by functions as InsertMediaItem_MediaItemStateChunk, reaper.GetItemStateChunk and reaper.SetItemStateChunk.
The statechunks include a new element "ULTRASCHALL_TRACKNUMBER", which contains the tracknumber of where the item originally was in; important, if you delete the items as you'll otherwise loose this information!
Returns -1 in case of failure.
PARAMETERS:
startposition:startposition in seconds
endposition:endposition in seconds
trackstring:the tracknumbers, separated by a comma
inside:true, only items that are completely within selection; false, include items that are partially within selection
RETURNS:
count:the number of selected items
MediaItemArray:an array with all the found and selected MediaItems
MediaItemStateChunkArray:an array with the MediaItemStateChunks, that can be used to create new items with InsertMediaItem_MediaItemStateChunk
------
name:ultraschall.DeleteProjExtState_Section
language:lua
return:(integer:retval)
params:(string:section)
description:
Deletes all key/values from a specific section.
Returns -1 in case of an error.
PARAMETERS:
section:the section/extname, whose key/values shall be deleted
RETURNS:
retval:0, in case of success; -1, in case of an error
------
name:ultraschall.DeleteProjExtState_Key
language:lua
return:(integer:retval)
params:(string:section), (section:key)
description:
Deletes the value from a specific section -> key.
Returns -1 in case of an error.
PARAMETERS:
section:the section/extname, from whom a key/value shall be deleted
key:the key, whose value shall be deleted
RETURNS:
retval:0, in case of success; -1, in case of an error
------
name:ultraschall.GetProjExtState_AllKeyValues
language:lua
return:(integer:retval)
params:(string:section)
description:
Returns the count of all key/values in a specific section, as well as an array with all keynames and their accompanying stored values.
The array has the format:
AllValues[idx][1]=Key
AllValues[idx][2]=Value
Returns -1 in case of an error or if no key exists in the given section
PARAMETERS:
section:the section/extname, from whom a key/value shall be deleted
RETURNS:
retval:0, in case of success; -1, in case of an error
------
name:ultraschall.GetGuidExtState
language:lua
return:(integer:retval),(string:value)
params:(string:guid), (string:key), (integer:savelocation)
description:
Gets an extension-state using a given guid. Good for storing additional metadata of objects like MediaTracks, MediaItems, MediaItem_Takes, etc(everything, that has a guid).
The guid can have additional text, but must contain a valid guid somewhere in it!
A valid guid is a string that follows the following pattern:
{........-....-....-....-............}
where . is a hexadecimal value(0-F)
Returns -1 in case of error
PARAMETERS:
guid:the guid of the object, for whom you want to get the key/value-pair; can have additional characters before and after the guid, but must contain a valid guid!
key:the key for this guid
savelocation:0, get as project extension state(from the currently opened project); 1, get as global extension state(when persist=true, from reaper-extstate.ini in the resourcesfolder)
RETURNS:
retval:the idx of the extstate(if a project extension state); 1, successful(with extension states), -1, unsuccessful
value:the returned value from the extstate
------
name:ultraschall.SetMarkerExtState
language:lua
return:(integer:retval)
params:(integer:index), (string:key), (string:value)
description:
Stores an Extstate for a specific marker/region.
The index is for all markers and regions, inclusive and 1-based
returns -1 in case of an error
PARAMETERS:
index:the marker/region-index, for which to store an extstate; starting with 1 for first marker/region, 2 for second marker/region
key:the key, into which the marker-extstate shall be stored
value:the value, which you want to store into the marker-extstate
RETURNS:
retval:-1, in case of an error; 1, in case of success
------
name:ultraschall.GetMarkerExtState
language:lua
return:(string:value)
params:(integer:index), (string:key)
description:
Retrieves an Extstate for a specific marker/region.
The index is for all markers and regions, inclusive and 1-based
returns nil in case of an error
PARAMETERS:
index:the marker/region-index, for which an extstate has been stored; starting with 1 for first marker/region, 2 for second marker/region
key:the key, in which the marker-extstate is stored
RETURNS:
value:the value, that has been stored into the marker-extstate; nil, in case of an error
------
name:ultraschall.ProjExtState_CountAllKeys
language:lua
return:(integer:count)
params:(string:section)
description:
Counts all keys stored within a certain ProjExtState-section.
Be aware: if you want to enumerate them using reaper.EnumProjExtState, the first key is indexed 0, the second 1, etc!
returns -1 in case of an error
PARAMETERS:
section:the section, of which you want to count all keys
------
name:ultraschall.ZoomVertical_MidiEditor
language:lua
return:(boolean:retval)
params:(integer:zoomamt), (optional HWND:midieditor_hwnd)
description:
Zooms within the Midi-Editor vertically.
returns false in case of an error
PARAMETERS:
zoomamt:the zoom-factor; positive values, zoom in; negative values, zoom out
midieditor_hwnd:the HWND of the MIDI-Editor, in which you want to zoom; nil, uses active MIDI-Editor
RETURNS:
retval:true, if zooming was successful; false, if not
------
name:ultraschall.ZoomHorizontal_MidiEditor
language:lua
return:(boolean:retval)
params:(integer:zoomamt), (optional HWND:midieditor_hwnd)
description:
Zooms within the Midi-Editor horizontally.
returns false in case of an error
PARAMETERS:
zoomamt:the zoom-factor; positive values, zoom in; negative values, zoom out
midieditor_hwnd:the HWND of the MIDI-Editor, in which you want to zoom; nil, uses active MIDI-Editor
RETURNS:
retval:true, if zooming was successful; false, if not
------
name:ultraschall.OpenItemInMidiEditor
language:lua
return:(boolean:retval)
params:(MediaItem:MediaItem)
description:
opens a given MediaItem in the MIDI-Editor
returns false in case of an error
PARAMETERS:
MediaItem:the MediaItem to be opened in the MIDI-Editor
RETURNS:
retval:true, if opening was successful; false, if not
------
name:ultraschall.MIDI_SendMidiNote
language:lua
return:
params:(integer:Channel), (integer:Note), (integer:Velocity), (optional integer:Mode)
description:
Sends a MIDI-note to a specific channel with a specific velocity.
PARAMETERS:
Channel:the channel, to which the Midi-note shall be sent; 1-16
Note:the note to be played; 0-127
Velocity:the velocity of the note; 0-255
Mode:0 for VKB
------
name:ultraschall.MIDI_SendMidiCC
language:lua
return:
params:(integer:Channel), (integer:Note), (integer:Velocity), (optional integer:Mode)
description:
Sends a MIDI-CC-message to a specific channel with a specific velocity.
PARAMETERS:
Channel:the channel, to which the Midi-note shall be sent; 1-16
Note:the note to be played; 0-127
Velocity:the velocity of the note; 0-255
Mode:0 for VKB
------
name:ultraschall.MIDI_SendMidiPC
language:lua
return:
params:(integer:Channel), (integer:Note), (integer:Velocity), (optional integer:Mode)
description:
Sends a MIDI-PC-message to a specific channel with a specific velocity.
PARAMETERS:
Channel:the channel, to which the Midi-note shall be sent; 1-16
Note:the note to be played; 0-127
Velocity:the velocity of the note; 0-255
Mode:0 for VKB
------
name:ultraschall.MIDI_SendMidiPitch
language:lua
return:
params:(integer:Channel), (integer:Pitch), (optional integer:Mode)
description:
Sends a MIDI-Pitch-message to a specific channel with a specific velocity.
PARAMETERS:
Channel:the channel, to which the Midi-pitch shall be sent; 1-16
Pitch:the pitchbend of the note; 0-127
Mode:0 for VKB
------
name:ultraschall.QueryMIDIMessageNameByID
language:lua
return:(string:midimessage_name)
params:(integer:modifier), (integer:key)
description:
Returns the name of the MIDI-message, as used by Reaper's function StuffMIDIMessage.
Just pass over the first and second value. The last one is always velocity, which is ~=0 for it to be accepted.
However, some codes don't have a name associated. In that case, this function returns "-1"
Only returns the names for mode 1 and english on Windows!
returns nil in case of an error
PARAMETERS:
modifier:the modifier value, which is the second parameter of StuffMIDIMessage
key:the key value, which is the third parameter of StuffMIDIMessage
RETURNS:
midimessage_name:the actual name of the midi-message, like "A" or "F1" or "Ctrl+Alt+Shift+Win+PgUp".
------
name:ultraschall.ToggleMute
language:lua
return:(integer:retval)
params:(integer:track), (number:position), (integer:state)
description:
Sets mute within the mute-envelope-lane, by inserting the fitting envelope-points. Can be used to program coughbuttons.
Returns -1, in case of an error
PARAMETERS:
track:the track-number, for where you want to set the mute-envelope-lane.
position:position in seconds
state:0, for mute the track on this position; 1, for unmuting the track on this position
RETURNS:
retval:toggling was 0, success; -1, fail
------
name:ultraschall.ToggleMute_TrackObject
language:lua
return:(integer:retval)
params:(MediaTrack:trackobject), (number:position), (integer:state)
description:
Sets mute within the mute-envelope-lane, by inserting the fitting envelope-points. Can be used to program coughbuttons.
Returns -1, if it fails.
Works like ultraschall.ToggleMute but uses a trackobject instead of the tracknumber as parameter.
PARAMETERS:
trackobject:the track-object for the track, where you want to set the mute-envelope-lane. Refer GetTrack() for more details.
position:position in seconds
state:0, for mute the track on this position, 1, for unmuting the track on this position
RETURNS:
retval:toggling was 0, success; -1, fail
------
name:ultraschall.GetNextMuteState
language:lua
return:(integer:envIDX),(number:envVal),(number:envPosition)
params:(integer:track), (number:position)
description:
Returns the next mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0!
Returns -1 if not existing.
PARAMETERS:
track:the track-number, for where you want to set the mute-envelope-lane, beginning with 1.
position:position in seconds, from where to look for the next mute-envelope-point
RETURNS:
envIDX:number of the muteenvelope-point
envVal:value of the muteenvelope-point (0 or 1)
envPosition:position of the muteenvelope-point in seconds
------
name:ultraschall.GetPreviousMuteState
language:lua
return:(integer:envIDX),(number:envVal),(number:envPosition)
params:(integer:track), (number:position)
description:
Returns the previous mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0!
Returns -1 if not existing.
PARAMETERS:
track:the track-number, for where you want to set the mute-envelope-lane, beginning with 1.
position:position in seconds, from where to look for the previous mute-envelope-point
RETURNS:
envIDX:number of the muteenvelope-point
envVal:value of the muteenvelope-point (0 or 1)
envPosition:position of the muteenvelope-point in seconds
------
name:ultraschall.GetNextMuteState_TrackObject
language:lua
return:(integer:envIDX),(number:envVal),(number:envPosition)
params:(MediaTrack:track), (number:position)
description:
Returns the next mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0!
Returns -1 if not existing.
PARAMETERS:
track:the MediaTrack-object, for the track, where you want to set the mute-envelope-lane.
position:position in seconds, from where to look for the next mute-envelope-point
RETURNS:
envIDX:number of the muteenvelope-point
envVal:value of the muteenvelope-point (0 or 1)
envPosition:position of the muteenvelope-point in seconds
------
name:ultraschall.GetPreviousMuteState_TrackObject
language:lua
return:(integer:envIDX),(number:envVal),(number:envPosition)
params:(MediaTrack:track), (number:position)
description:
Returns the previous mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0!
Returns -1 if not existing.
PARAMETERS:
track:the MediaTrack-object, for the track, where you want to set the mute-envelope-lane.
position:position in seconds, from where to look for the previous mute-envelope-point
RETURNS:
envIDX:number of the muteenvelope-point
envVal:value of the muteenvelope-point (0 or 1)
envPosition:position of the muteenvelope-point in seconds
------
name:ultraschall.CountMuteEnvelopePoints
language:lua
return:(integer:retval)
params:(integer:track)
description:
Returns the number of the envelope-points in the Mute-lane of track "track".
Returns -1, if it fails.
PARAMETERS:
track:the track-number, for which you want to count the mute-envelope-points, beginning with 1.
RETURNS:
retval:number of mute-envelope-points
------
name:ultraschall.DeleteMuteState
language:lua
return:(boolean:retval)
params:(integer:tracknumber), (number:position)
description:
Deletes a mute-point in track tracknumber at position.
Returns false in case of an error
PARAMETERS:
tracknumber:the track in which to delete the mute-point; is 1-based, means 1 for track 1
position:the position of the mute-point to delete
RETURNS:
retval:true, deleting was successful; false, deleting wasn't successful.
------
name:ultraschall.DeleteMuteState_TrackObject
language:lua
return:(boolean:retval)
params:(MediaTrack:MediaTrack), (number:position)
description:
Deletes a mute-point in a MediaTrack-object at position.
Returns false in case of an error
PARAMETERS:
MediaTrack:the track in which to delete the mute-point
position:the position of the mute-point to delete
RETURNS:
retval:true, deleting was successful; false, deleting wasn't successful.
------
name:ultraschall.IsMuteAtPosition
language:lua
return:(boolean:retval),(optional integer:envIDX),(optional number:envVal)
params:(integer:tracknumber), (number:position)
description:
Returns true, if a mute-point exists in track tracknumber at position position.
Returns false in case of an error
PARAMETERS:
tracknumber:the track in which to check for a mute-point; is 1-based, means 1 for track 1
position:the position to check for a mute-point
RETURNS:
retval:true, if there is a mute-point; false, if there isn't one
envIDX:if a mute-point is at position, this holds the index of the envelope-point
envVal:the current set value of the mute-point
------
name:ultraschall.IsMuteAtPosition_TrackObject
language:lua
return:(boolean:retval),(optional integer:envIDX),(optional number:envVal)
params:(MediaTrack:MediaTrack), (number:position)
description:
Returns true, if a mute-point exists in MediaTrack-object at position position.
Returns false in case of an error
PARAMETERS:
MediaTrack:the track in which to check for a mute-point
position:the position to check for a mute-point
RETURNS:
retval:true, if there is a mute-point; false, if there isn't one
envIDX:if a mute-point is at position, this holds the index of the envelope-point
envVal:the current set value of the mute-point
------
name:ultraschall.ToggleScrollingDuringPlayback
language:lua
return:
params:(integer:scrolling_switch), (boolean:move_editcursor), (boolean:goto_playcursor)
description:
Toggles scrolling during playback and recording. Let's you choose to put the edit-marker at the playposition, where you toggled scrolling.
You can also move the view to the playcursor-position.
It changes, if necessary, the state of the actions 41817, 40036 and 40262 to scroll or not to scroll; keep that in mind, if you use these actions otherwise as well!
returns -1 in case of error
PARAMETERS:
scrolling_switch:1, on; 0, off
move_editcursor:when scrolling stops, shall the editcursor be moved to current position of the playcursor(true) or not(false)
goto_playcursor:true, move view to playcursor; false, don't move
------
name:ultraschall.SetPlayCursor_WhenPlaying
language:lua
return:
params:(number:position)
description:
Changes position of the play-cursor, when playing. Changes view to new playposition.
Has no effect during recording, when paused or stop and returns -1 in these cases!
PARAMETERS:
position:in seconds
------
name:ultraschall.SetPlayAndEditCursor_WhenPlaying
language:lua
return:
params:(number:position)
description:
Changes position of the play and edit-cursor, when playing. Changes view to new playposition.
Has no effect during recording, when paused or stop and returns -1 in these cases!
PARAMETERS:
position:in seconds
------
name:ultraschall.JumpForwardBy
language:lua
return:
params:(number:seconds), (boolean:seekplay)
description:
Jumps editcursor forward by seconds seconds.
Returns -1 if parameter is negative. During Recording: only the playcursor will be moved, the current recording-position is still at it's "old" position! If you want to move the current recording position as well, use ultraschall.JumpForwardBy_Recording instead.
PARAMETERS:
seconds:jump forward by seconds
seekplay:true, move playcursor as well; false, don't move playcursor
------
name:ultraschall.JumpBackwardBy
language:lua
return:
params:(number:seconds), (boolean:seekplay)
description:
Jumps editcursor backward by seconds seconds.
Returns -1 if parameter is negative. During Recording: only the playcursor will be moved, the current recording-position is still at it's "old" position! If you want to move the current recording position as well, use ultraschall.JumpBackwardBy_Recording instead.
PARAMETERS:
seconds:jump backwards by seconds
seekplay:true, move playcursor as well; false, leave playcursor at it's old position
------
name:ultraschall.JumpForwardBy_Recording
language:lua
return:
params:(number:seconds)
description:
Stops recording, jumps forward by seconds seconds and restarts recording. Will keep paused-recording, if recording was paused. Has no effect during play,play/pause and stop.
returns -1 in case of an error
PARAMETERS:
seconds:restart recording forwards by seconds
------
name:ultraschall.JumpBackwardBy_Recording
language:lua
return:
params:(number:seconds)
description:
Stops recording, jumps backward by seconds seconds and restarts recording. Will keep paused-recording, if recording was paused. Has no effect during play,play/pause and stop.
returns -1 in case of an error
PARAMETERS:
seconds:restart recording backwards by seconds
------
name:ultraschall.GetNextClosestItemEdge
language:lua
return:(number:position),(integer:item_number),(string:edgetype),(MediaItem found_item:)
params:(string:trackstring), (integer:cursor_type), (optional number:time_position)
description:
returns the position of the next closest item in seconds. It will return the position of the beginning or the end of that item, depending on what is closer.
returns -1 in case of an error
PARAMETERS:
trackstring:a string with the numbers of tracks to check for closest items, separated by a comma (e.g. "0,1,6")
cursor_type:next closest item related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition
time_position:only, when cursor_type=3, a time position in seconds, from where to check for the next closest item. When omitted, it will take the current play(during play and rec) or edit-cursor-position.
RETURNS:
position:the position of the next closest item-edge in tracks in trackstring
item_number:the itemnumber in the project
edgetype:"beg" for beginning of the item, "end" for the end of the item
MediaItem found_item:the next closest found MediaItem 
------
name:ultraschall.GetPreviousClosestItemEdge
language:lua
return:(number:position),(number:position),(integer:item_number),(string:edgetype),(MediaItem:found_item)
params:(string:tracks), (integer:cursor_type), (optional number:time_position)
description:
returns the position of the previous closest item-edge in seconds. It will return the position of the beginning or the end of that item, depending on what is closer.
returns -1 in case of an error
PARAMETERS:
tracks:a string with the numbers of tracks to check for closest items, separated by a comma (e.g. "0,1,6")
cursor_type:previous closest item related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition
time_position:only, when cursor_type=3, a time position in seconds, from where to check for the previous closest item. When omitted, it will take the current play(during play and rec) or edit-cursor-position.
RETURNS:
position:the position of the previous closest item edge in tracks in trackstring
position:the position of the previous closest item edge in tracks in trackstring
item_number:the itemnumber in the project
edgetype:"beg" for beginning of the item, "end" for the end of the item
found_item:the next closest found MediaItem 
------
name:ultraschall.GetClosestNextMarker
language:lua
return:(number:markerindex),(number:position),(string:markertitle)
params:(integer:cursor_type), (optional number:time_position)
description:
returns the markerindex(counted from all markers), the position and the name of the next closest marker in seconds.
returns -1 in case of an error
PARAMETERS:
cursor_type:previous closest marker related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition
time_position:only, when cursor_type=3, a time position in seconds, from where to check for the next closest marker. When omitted, it will take the current play(during play and rec) or edit-cursor-position.
RETURNS:
markerindex:the next closest markerindex (of all(!) markers)
position:the position of the next closest marker
markertitle:the name of the next closest marker
------
name:ultraschall.GetClosestPreviousMarker
language:lua
return:(number:markerindex),(number:position),(string:markertitle)
params:(integer:cursor_type), (optional number:time_position)
description:
returns the markerindex(counted from all markers), the position and the name of the previous closest marker in seconds.
PARAMETERS:
cursor_type:previous closest marker related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition
time_position:only, when cursor_type=3, a time position in seconds, from where to check for the previous closest marker. When omitted, it will take the current play(during play and rec) or edit-cursor-position.
RETURNS:
markerindex:the previous closest markerindex (of all(!) markers)
position:the position of the previous closest marker
markertitle:the name of the previous closest marker
------
name:ultraschall.GetClosestNextRegionEdge
language:lua
return:(number:markerindex),(number:position),(string:markertitle),(string:edge_type)
params:(integer:cursor_type), (optional number:time_position)
description:
returns the regionindex(counted from all markers and regions), the position and the name of the next closest regionstart/end(depending on which is closer to time_position) in seconds.
returns -1 in case of an error
PARAMETERS:
cursor_type:previous closest regionstart/end related to the current position of 
time_position:only, when cursor_type=3, a time position in seconds, from where to check for the next closest regionstart/end. When omitted, it will take the current play(during play and rec) or edit-cursor-position.
RETURNS:
markerindex:the next closest markerindex (of all(!) markers)
position:the position of the next closest region
markertitle:the name of the next closest region
edge_type:the type of the edge of the region, either "beg" or "end"
------
name:ultraschall.GetClosestPreviousRegionEdge
language:lua
return:(number:markerindex),(number:position),(string:markertitle),(string:edge_type)
params:(integer:cursor_type), (optional number:time_position)
description:
returns the regionindex(counted from all markers and regions), the position and the name of the previous closest regionstart/end(depending on which is closer to time_position) in seconds.
returns -1 in case of an error
PARAMETERS:
cursor_type:previous closest regionstart/end related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition
time_position:only, when cursor_type=3, a time position in seconds, from where to check for the previous closest regionstart/end. When omitted, it will take the current play(during play and rec) or edit-cursor-position.
RETURNS:
markerindex:the previous closest markerindex (of all(!) markers)
position:the position of the previous closest marker
markertitle:the name of the previous closest marker
edge_type:the type of the edge of the region, either "beg" or "end"
------
name:ultraschall.GetClosestGoToPoints
language:lua
return:(number:elementposition_prev),(string:elementtype_prev),(integer:number_prev),(number:elementposition_next),(string:elementtype_next),(integer:number_next)
params:(string:trackstring), (number:time_position), (optional boolean:check_itemedge), (optional boolean:check_marker), (optional boolean:check_region)
description:
returns, what are the closest markers/regions/item starts/itemends to position and within the chosen tracks.
returns -1 in case of error
PARAMETERS:
trackstring:tracknumbers, separated by a comma.
time_position:a time position in seconds, from where to check for the next/previous closest items/markers/regions.
check_itemedge:true, look for itemedges as possible goto-points; false, do not
check_marker:true, look for markers as possible goto-points; false, do not
check_region:true, look for regions as possible goto-point; false, do not
RETURNS:
elementposition_prev:previous closest markers/regions/item starts/itemends
elementtype_prev:type of the previous closest markers/regions/item starts/itemends
number_prev:number of previous closest markers/regions/item starts/itemends
elementposition_next:previous closest markers/regions/item starts/itemends
elementtype_next:type of the previous closest markers/regions/item starts/itemends
number_next:number of previous closest markers/regions/item starts/itemends
------
name:ultraschall.CenterViewToCursor
language:lua
return:
params:(integer:cursortype), (optional number:position)
description:
centers the arrange-view around a given cursor
returns nil in case of an error
PARAMETERS:
cursortype:the cursortype to center
position:the position to center the arrangeview to; only used, when cursortype=4
------
name:ultraschall.GetLastCursorPosition
language:lua
return:(number:last_editcursor_position),(number:new_editcursor_position),(number:statechangetime)
params:
description:
Returns the last and current editcursor-position. Needs Ultraschall-API-background-scripts started first, see RunBackgroundHelperFeatures().
Has an issue, when editcursor-position was changed using a modifier, like alt+click or shift+click! Because of that, you should use this only in defer-scripts.
returns -1, if Ultraschall-API-backgroundscripts weren't started yet.
RETURNS:
last_editcursor_position:the last cursorposition before the current one; -1, in case of an error
new_editcursor_position:the new cursorposition; -1, in case of an error
statechangetime:the time, when the state has changed the last time
------
name:ultraschall.GetLastPlayState
language:lua
return:(string:last_play_state),(string:new_play_state),(number:statechangetime)
params:
description:
Returns the last and current playstate. Needs Ultraschall-API-background-scripts started first, see RunBackgroundHelperFeatures().
possible states are STOP, PLAY, PLAYPAUSE, REC, RECPAUSE
returns -1, if Ultraschall-API-backgroundscripts weren't started yet.
RETURNS:
last_play_state:the last playstate before the current one; -1, in case of an error
new_play_state:the new playstate; -1, in case of an error
statechangetime:the time, when the state has changed the last time
------
name:ultraschall.GetLastLoopState
language:lua
return:(string:last_loop_state),(string:new_loop_state),(number:statechangetime)
params:
description:
Returns the last and current loopstate. Needs Ultraschall-API-background-scripts started first, see RunBackgroundHelperFeatures().
Possible states are LOOPED, UNLOOPED
returns -1, if Ultraschall-API-backgroundscripts weren't started yet.
RETURNS:
last_loop_state:the last loopstate before the current one; -1, in case of an error
new_loop_state:the current loopstate; -1, in case of an error
statechangetime:the time, when the state has changed the last time
------
name:ultraschall.GetLoopState
language:lua
return:(integer:retval)
params:
description:
Returns the current loop-state
RETURNS:
retval:0, loop is on; 1, loop is off
------
name:ultraschall.SetLoopState
language:lua
return:(boolean:retval)
params:(integer:state)
description:
Sets the current loop-state
returns false in case of an error
PARAMETERS:
state:0, loop is on; 1, loop is off
RETURNS:
retval:true, if setting was successful; false, if setting was unsuccessful
------
name:ultraschall.Scrubbing_MoveCursor_GetToggleState
language:lua
return:(boolean:state)
params:
description:
Returns, if scrub is toggled on/off, for when moving editcursor via action or control surface, as set in Preferences -> Playback.
------
name:ultraschall.Scrubbing_MoveCursor_Toggle
language:lua
return:(boolean:state),(optional integer:new_scrubmode)
params:(boolean:toggle)
description:
Toggles scrub on/off, for when moving editcursor via action or control surface, as set in Preferences -> Playback.
returns false in case of an error
PARAMETERS:
toggle:true, toggles scrubbing on; false, toggles scrubbing off
RETURNS:
new_scrubmode:this is the new value of the configvariable scrubmode, which is altered by this function
------
name:ultraschall.GetProjectFilename
language:lua
return:(string:projectfilename_with_path)
params:(ReaProject:proj)
description:
Returns the filename of a currently opened project(-tab)
returns nil in case of an error
PARAMETERS:
proj:a currently opened project, whose filename you want to know
RETURNS:
projectfilename_with_path:the filename of the project; "", project hasn't been saved yet; nil, in case of an error
------
name:ultraschall.CheckForChangedProjectTabs
language:lua
return:(boolean:retval),(integer:countReorderedProj),(array:reorderedProj),(integer:countNewProj),(array:newProj),(integer:countClosedProj),(array:closedProj),(integer:countRenamedProjects),(array:RenamesProjects)
params:(boolean:update)
description:
Returns if projecttabs have been changed due reordering, new projects or closed projects, since last calling this function.
Set update=true to update Ultraschall's internal project-monitoring-list or it will only return the changes since starting the API in this script or since the last time you used this function with parameter update set to true!
Returns false, -1 in case of error.
PARAMETERS:
update:true, update Ultraschall's internal projecttab-monitoring-list to the current state of all tabs
RETURNS:
retval:false, no changes in the projecttabs at all; true, either order, newprojects or closed project-changes
countReorderedProj:the number of reordered projects
reorderedProj:ReaProjects, who got reordered within the tabs
countNewProj:the number of new projects
newProj:the new projects as ReaProjects
countClosedProj:the number of closed projects
closedProj:the closed projects as ReaProjects
countRenamedProjects:the number of projects, who got renamed by either saving under a new filename or loading of another project
RenamesProjects:the renamed projects, by loading a new project or saving the project under another filename
------
name:ultraschall.IsValidProjectStateChunk
language:lua
return:(boolean:retval)
params:(string:ProjectStateChunk)
description:
Checks, whether ProjectStateChunk is a valid ProjectStateChunk
PARAMETERS:
ProjectStateChunk:the string to check, if it's a valid ProjectStateChunk
RETURNS:
retval:true, if it's a valid ProjectStateChunk; false, if not
------
name:ultraschall.GetProjectStateChunk
language:lua
return:(string:ProjectStateChunk)
params:(optional string:projectfilename_with_path), (optional boolean:keepqrender)
description:
Gets the ProjectStateChunk of the current active project or a projectfile.
Important: when calling it too often in a row, this might fail and result in a timeout-error.
I tried to circumvent this, but best practice is to wait 2-3 seconds inbetween calling this function.
This function also eats up a lot of resources, so be sparse with it in general!
returns nil if getting the ProjectStateChunk took too long
PARAMETERS:
projectfilename_with_path:the filename of an rpp-projectfile, that you want to load as ProjectStateChunk; nil, to get the ProjectStateChunk from the currently active project
keepqrender:true, keeps the QUEUED_RENDER_OUTFILE and QUEUED_RENDER_ORIGINAL_FILENAME entries in the ProjectStateChunk, if existing; false or nil, remove them
RETURNS:
ProjectStateChunk:the ProjectStateChunk of the current project; nil, if getting the ProjectStateChunk took too long
------
name:ultraschall.EnumProjects
language:lua
return:(ReaProject:retval),(string:projfn)
params:(integer:idx)
description:
returns, ReaProject-object and projectname of a requested, opened project.
Returns nil in case of an error.
PARAMETERS:
idx:the project to request; 1(first project-tab) to n(last project-tab), 0 for current project; -1 for currently-rendering project
RETURNS:
retval:a ReaProject-object of the project you requested; nil, if not existing
projfn:the path+filename.rpp of the project. returns "" if no filename exists
------
name:ultraschall.GetProjectLength
language:lua
return:(number:project_length),(number:last_itemedge),(number:last_regionedgepos),(number:last_markerpos),(number:last_timesigmarker)
params:(optional boolean:return_last_itemedge), (optional boolean:return_last_markerpos), (optional boolean:return_lat_timesigmarkerpos)
description:
Returns the position of the last itemedge, regionend, marker, time-signature-marker in the project.
It will return -1, if no such elements are found, means: last\_markerpos=-1 if no marker has been found
Exception when no items are found, it will return nil for last\_itemedge
You can optimise the speed of the function, by setting the appropriate parameters to false.
So if you don't need the last itemedge, setting return\_last\_itemedge=false speeds up execution massively.
To do the same for projectfiles, use: GetProject\_Length
PARAMETERS:
return_last_itemedge:true or nil, return the last itemedge; false, don't return it
return_last_markerpos:true or nil, return the last marker/regionend-position; false, don't return it 
return_lat_timesigmarkerpos:true or nil, return the last timesignature-marker-position; false, don't return it
RETURNS:
last_itemedge:the position of the last itemedge in the project; nil, if not found
last_regionedgepos:the position of the last regionend in the project; -1, if not found
last_markerpos:the position of the last marker in the project; -1, if not found 
last_timesigmarker:the position of the last timesignature-marker in the project; -1, if not found
------
name:ultraschall.GetRecentProjects
language:lua
return:(integer:count_of_RecentProjects),(array:RecentProjectsFilenamesWithPath)
params:
description:
returns all available recent projects, as listed in the File -> Recent projects-menu
RETURNS:
count_of_RecentProjects:the number of available recent projects
RecentProjectsFilenamesWithPath:the filenames of the recent projects
------
name:ultraschall.IsValidProjectBayStateChunk
language:lua
return:(boolean:retval)
params:(string:ProjectBayStateChunk)
description:
checks, if ProjectBayStateChunk is a valid ProjectBayStateChunk
returns false in case of an error
PARAMETERS:
ProjectBayStateChunk:a string, that you want to check for being a valid ProjectBayStateChunk
RETURNS:
retval:true, valid ProjectBayStateChunk; false, not a valid ProjectBayStateChunk
------
name:ultraschall.GetAllMediaItems_FromProjectBayStateChunk
language:lua
return:(integer:count),(array:MediaItemStateChunkArray)
params:(string:ProjectBayStateChunk)
description:
returns all items from a ProjectBayStateChunk as MediaItemStateChunkArray
returns -1 in case of an error
PARAMETERS:
ProjectBayStateChunk:a string, that you want to check for being a valid ProjectBayStateChunk
RETURNS:
count:the number of items found in the ProjectBayStateChunk
------
name:ultraschall.GetProjectState_NumbersOnly
language:lua
return:(table:values)
params:(string:projectfilename_with_path), (string:state), (optional string:ProjectStateChunk), (optional boolean:numbertoggle)
description:
returns a state of the project or a ProjectStateChunk.
It only supports single-entry-states with numbers/integers, separated by spaces!
All other values will be set to nil and strings with spaces will produce weird results!
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the states; nil to use ProjectStateChunk
state:the state, whose attributes you want to retrieve
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
numbertoggle:true or nil; converts all values to numbers; false, keep them as string versions
RETURNS:
values:all values found as numerical indexed array
------
name:ultraschall.GetProject_RenderCFG
language:lua
return:(string:render_cfg),(string:render_cfg2)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the render-cfg-string2, that contains all render-settings for primary and secondary render-settings of a project from an RPP-Projectfile or a ProjectStateChunk.
It's the entry <RENDER_CFG
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
render_cfg:the renderstring, which contains all secondary-render-settings for a project/projectstatechunk
render_cfg2:the renderstring, which contains all secondary-render-settings for a project/projectstatechunk
------
name:ultraschall.GetProject_GroupOverride
language:lua
return:(integer:group_override1),(integer:group_override2),(integer:group_override3)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the group-override-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry GROUPOVERRIDE
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
group_override1:the group-override state
group_override3:the group-override state
------
name:ultraschall.GetProject_AutoCrossFade
language:lua
return:(integer:autocrossfade_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the autocrossfade-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry AUTOXFADE
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename
RETURNS:
autocrossfade_state:the autocrossfade-state
------
name:ultraschall.GetProject_EnvAttach
language:lua
return:(integer:env_attach)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the EnvAttach-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry ENVATTACH
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path of the rpp-project-file; nil, use parameter ProjectStateChunk instead
ProjectStateChunk:a projectstatechunk to read the value from; only used, projectfilename_with_path is nil
RETURNS:
env_attach:the env-attach state
------
name:ultraschall.GetProject_PooledEnvAttach
language:lua
return:(integer:pooled_env_attach)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the PooledEnvAttach-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry POOLEDENVATTACH
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path of the rpp-project-file; nil, use parameter ProjectStateChunk instead
ProjectStateChunk:a projectstatechunk to read the value from; only used, projectfilename_with_path is nil
RETURNS:
pooled_env_attach:the pooled-env-attach state
------
name:ultraschall.GetProject_MixerUIFlags
language:lua
return:(integer:state1),(integer:state2)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the MixerUI-state-flags from an RPP-Projectfile or a ProjectStateChunk.
It's the entry MIXERUIFLAGS
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
state1:folders, receives, etc 
state2:master-track, FX, Mixer
------
name:ultraschall.GetProject_PeakGain
language:lua
return:(number:peakgain_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the GetProject_PeakGain-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry PEAKGAIN
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path of the rpp-project-file
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
peakgain_state:peakgain-state
------
name:ultraschall.GetProject_Feedback
language:lua
return:(integer:feedback_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the GetProject_Feedback-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry FEEDBACK
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
feedback_state:feedback-state
------
name:ultraschall.GetProject_PanLaw
language:lua
return:(number:panlaw_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the GetProject_PanLaw-state from an RPP-Projectfile or a ProjectStateChunk, as set in the project-settings->Advanced->Pan law/mode->Pan:law(db).
It's the entry PANLAW
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
panlaw_state:state of the panlaw, as set in the project-settings->Advanced->Pan law/mode->Pan:law(db). 0.5(-6.02 db) to 1(default +0.0 db)
------
name:ultraschall.GetProject_ProjOffsets
language:lua
return:(number:start_time),(integer:start_measure),(integer:base_ruler_marking_off_this_measure)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the Project Offset-state from an RPP-Projectfile or a ProjectStateChunk, start time as well as start measure.
as set in ProjectSettings->ProjectSettings->Project Start Time/Measure and the checkbox Base Ruler Marking Off This Measure-checkbox
It's the entry PROJOFFS
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
start_time:the project-start-time in seconds
start_measure:starting with 0, unlike the Settingswindow, where the 0 becomes 1 as measure
base_ruler_marking_off_this_measure:0, checkbox unchecked; 1, checkbox checked
------
name:ultraschall.GetProject_MaxProjectLength
language:lua
return:(integer:limit_project_length),(number:projectlength_limit)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the maximum-project-length from an RPP-Projectfile or a ProjectStateChunk, as set in ProjectSettings->Advanced->
as set in ProjectSettings->ProjectSettings->Project Start Time/Measure.
It's the entry MAXPROJLEN
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
limit_project_length:checkbox "Limit project length, stop playback/recording at:" - 0 off, 1 on
projectlength_limit:projectlength-limit in seconds
------
name:ultraschall.GetProject_Grid
language:lua
return:(integer:gridstate1),(integer:gridstate2),(number:gridstate3),(integer:gridstate4),(number:gridstate5),(integer:gridstate6),(integer:gridstate7),(number:gridstate8)
params:(string:projectfilename_with_path)
description:
Returns the grid-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry GRID
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path of the rpp-project-file
RETURNS:
gridstate1:gridstate1
gridstate2:gridstate2
gridstate3:gridstate3
gridstate4:gridstate4
gridstate5:gridstate5
gridstate6:gridstate6
gridstate7:gridstate7
gridstate8:gridstate8
------
name:ultraschall.GetProject_Timemode
language:lua
return:(integer:ruler_timemode),(integer:timemode2),(integer:showntime),(integer:timemode4),(integer:timemode5),(integer:timemode6),(integer:timemode7)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the timemode-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry TIMEMODE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
ruler_timemode:ruler-timemode-state
timemode2:timemode-state
showntime:Transport shown time
timemode4:timemode-state
timemode5:timemode-state
timemode6:timemode-state
timemode7:timemode-state
------
name:ultraschall.GetProject_VideoConfig
language:lua
return:(integer:preferredVidSizeX),(integer:preferredVidSizeY),(integer:settingsflags)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the videoconfig-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry VIDEO_CONFIG
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
preferredVidSizeX:preferred video size, x pixels
preferredVidSizeY:preferred video size, y pixels
settingsflags:settings
------
name:ultraschall.GetProject_PanMode
language:lua
return:(integer:panmode_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the panmode-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry PANMODE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
panmode_state:panmode-state
------
name:ultraschall.GetProject_CursorPos
language:lua
return:(number:cursorpos)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the cursorposition-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry CURSOR
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
cursorpos:editcursorposition in seconds
------
name:ultraschall.GetProject_HorizontalZoom
language:lua
return:(number:hzoom),(integer:hzoomscrollpos),(integer:scrollbarfactor)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the horizontal-zoom-state from an RPP-Projectfile or a ProjectStateChunk.
Keep in mind, that hzoomscrollpos and scrollbarfactor depend on each other. hzoomscrollpos is a smaller positioning-unit, while scrollbarfactor is the bigger positioning-unit.
Experiment with it to get an idea.
It's the entry ZOOM
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
hzoom:horizontalscrollbarposition - 0 - 4294967296
hzoomscrollpos:horizontalscrollbarposition - 0 - 4294967296
scrollbarfactor:0 to 500837, counts up, when maximum hzoomscrollpos overflows
------
name:ultraschall.GetProject_VerticalZoom
language:lua
return:(integer:vzoom)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the verticalzoom from an RPP-Projectfile or a ProjectStateChunk.
It's the entry VZOOMEX
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
vzoom:vertical zoomfactor(0-40)
------
name:ultraschall.GetProject_UseRecConfig
language:lua
return:(integer:rec_cfg)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the rec-cfg-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry USE_REC_CFG
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
rec_cfg:recording-cfg-state
------
name:ultraschall.GetProject_RecMode
language:lua
return:(integer:rec_mode)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the rec-mode-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry RECMODE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
rec_mode:recording-mode-state
------
name:ultraschall.GetProject_SMPTESync
language:lua
return:(integer:smptesync_state1),(number:smptesync_fps),(integer:smptesync_resyncdrift),(integer:smptesync_skipdropframes),(integer:smptesync_syncseek),(integer:smptesync_freewheel),(integer:smptesync_userinput),(number:smptesync_offsettimecode),(integer:smptesync_stop_rec_drift),(integer:smptesync_state10),(integer smptesync_stop_rec_lacktime:)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the smpte-sync-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry SMPTESYNC
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
smptesync_state1:smptesync-state
smptesync_fps:framerate in fps
smptesync_resyncdrift:"Re-synchronize if drift exceeds" in ms (0 = never)
smptesync_skipdropframes:"skip/drop frames if drift exceeds" in ms(0 - never)
smptesync_syncseek:"Synchronize by seeking ahead" in ms (default = 1000)
smptesync_freewheel:"Freewheel on missing time code for up to" in ms(0 = forever)
smptesync_userinput:User Input-flag
smptesync_offsettimecode:Offset incoming timecode by in seconds
smptesync_stop_rec_drift:"Stop recording if drift exceeds" in ms(0 = never)
smptesync_state10:smptesync-state
integer smptesync_stop_rec_lacktime:"stop recording on lack of timecode after" in ms(0 = never)
------
name:ultraschall.GetProject_Loop
language:lua
return:(integer:loopbutton_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the loop-button-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry LOOP
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
------
name:ultraschall.GetProject_LoopGran
language:lua
return:(integer:loopgran_state1),(number:loopgran_state2)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the loop_gran-state from an RPP-Projectfile or a ProjectStateChunk.
It's the entry LOOPGRAN
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
loopgran_state1:loopgran_state1
loopgran_state2:loopgran_state2
------
name:ultraschall.GetProject_RecPath
language:lua
return:(string:prim_recpath),(string:sec_recpath)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the primary and secondary recording-path from an RPP-Projectfile or a ProjectStateChunk.
It's the entry RECORD_PATH
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
prim_recpath:the primary recording path
sec_recpath:the secondary recording path
------
name:ultraschall.GetProject_ApplyFXCFG
language:lua
return:(string:applyfx_cfg_string)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the audioformat-configuration, for fx-appliance-operation, as an encoded BASE64-string from an RPP-Projectfile or a ProjectStateChunk, as set in ProjectSettings->Media->Format for Apply FX, Glue, Freeze, etc
It's the entry <APPLY_CFG
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
applyfx_cfg_string:the file-format-configuration for fx-appliance as encoded string
------
name:ultraschall.GetProject_RenderPattern
language:lua
return:(string:render_pattern)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the render-pattern, that tells Reaper, how to automatically name the render-file, from an RPP-Projectfile or a ProjectStateChunk. If it contains nothing, you should check the Render_Pattern using GetProject_RenderFilename, as a render-pattern influences the rendering-filename as well.
It's the entry RENDER_PATTERN
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
render_pattern:the pattern, with which the rendering-filename will be automatically created. Check also GetProject_RenderFilename
------
name:ultraschall.GetProject_RenderFreqNChans
language:lua
return:(integer:unknown),(integer:rendernum_chans),(integer:render_frequency)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns an unknown number, the render-frequency and rendernumber of channels from an RPP-Projectfile or a ProjectStateChunk.
It's the entry RENDER_FMT
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
unknown:unknown number
rendernum_chans:Number_Channels 0-seems default-project-settings(?), 1-Mono, 2-Stereo, ... up to 64 channels
render_frequency:RenderFrequency -2147483647 to 2147483647, except 0, which seems to be default-project-settings-frequency
------
name:ultraschall.GetProject_RenderSpeed
language:lua
return:(integer:render_speed)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the rendering-speed from an RPP-Projectfile or a ProjectStateChunk.
It's the entry RENDER_1X
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
render_speed:render_speed 
------
name:ultraschall.GetProject_RenderRange
language:lua
return:(integer:bounds),(number:time_start),(number:time_end),(integer:tail),(integer:tail_length)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the render-range, render-timestart, render-timeend, render-tail and render-taillength from an RPP-Projectfile or a ProjectStateChunk. To get RENDER_STEMS, refer GetProject_RenderStems
It's the entry RENDER_RANGE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
bounds:the bounds of the project to be rendered
time_start:TimeStart in milliseconds -2147483647 to 2147483647
time_end:TimeEnd in milliseconds 2147483647 to 2147483647
tail:TailLength in milliseconds, valuerange 0 - 2147483647
tail_length:TailLength in milliseconds, valuerange 0 - 2147483647
------
name:ultraschall.GetProject_RenderResample
language:lua
return:(integer:resample_mode),(integer:playback_resample_mode),(integer:project_smplrate4mix_and_fx)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns Resamplemode for a)Rendering and b)Playback as well as c)if both are combined from an RPP-Projectfile or a ProjectStateChunk.
It's the entry RENDER_RESAMPLE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
resample_mode:Playback Resample Mode (as set in the Project-Settings)
playback_resample_mode:Playback Resample Mode (as set in the Project-Settings)
project_smplrate4mix_and_fx:Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked
------
name:ultraschall.GetProject_AddMediaToProjectAfterRender
language:lua
return:(integer:addmedia_after_render_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns, if rendered media shall be added to the project afterwards, from an RPP-Projectfile or a ProjectStateChunk.
It's the entry RENDER_ADDTOPROJ
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
addmedia_after_render_state:1, rendered media shall be added to the project afterwards; 0, don't add
------
name:ultraschall.GetProject_RenderStems
language:lua
return:(integer:render_stems)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the render-stems-state from an rpp-project-file or a ProjectStateChunk.
It's the entry RENDER_STEMS
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
render_stems:the state of Render Stems
------
name:ultraschall.GetProject_RenderDitherState
language:lua
return:(integer:renderdither_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the render-dither-state from an rpp-project-file or a ProjectStateChunk.
It's the entry RENDER_DITHER
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
renderdither_state:the state of render dithering
------
name:ultraschall.GetProject_TimeBase
language:lua
return:(integer:timebase)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the timebase-state from an rpp-project-file or a ProjectStateChunk.
It's the entry TIMELOCKMODE x
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
timebase:the timebase for items/envelopes/markers as set in the project settings
------
name:ultraschall.GetProject_TempoTimeSignature
language:lua
return:(integer:tempotimesignature)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the timebase for tempo/time-signature as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
It's the entry TEMPOENVLOCKMODE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
tempotimesignature:the timebase for tempo/time-signature as set in the project settings
------
name:ultraschall.GetProject_ItemMixBehavior
language:lua
return:(integer:item_mix_behav_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the item mix behavior, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
It's the entry ITEMMIX
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
item_mix_behav_state:item mix behavior
------
name:ultraschall.GetProject_SampleRate
language:lua
return:(integer:sample_rate),(integer:project_sample_rate),(integer:force_tempo_time_sig)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the take-lane-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
It's the entry SAMPLERATE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
sample_rate:Checkbox: Project Sample Rate
project_sample_rate:Checkbox: Project Sample Rate
force_tempo_time_sig:Checkbox: Force Project Tempo/Time Signature changes to occur on whole samples 
------
name:ultraschall.GetProject_TrackMixingDepth
language:lua
return:(integer:track_mixing_depth)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the track-mixing-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
It's the entry INTMIXMODE
Returns -1 in case of error, nil if it's set to 64bit(default)!
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
track_mixing_depth:track mixing depth
------
name:ultraschall.GetProject_TrackStateChunk
language:lua
return:(string:trackstatechunk)
params:(string:projectfilename_with_path), (integer:idx), (boolean:deletetrackid), (optional string:ProjectStateChunk)
description:
Returns an RPPXML-trackstatechunk from an rpp-project-file or a ProjectStateChunk, with tracknumber idx. IDX is 1 for the first track in the project-file, 2 for the second, etc
Returns -1 in case of error.
Use GetProject_NumberOfTracks to get the number of tracks within an rpp-file.
The returned trackstatechunk can be inserted into the current project with InsertTrack_TrackStateChunk.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
idx:the tracknumber you want to have
deletetrackid:deletes the trackID in the trackstate-chunk, to avoid possible conflicts within a project, where it shall be imported to
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
trackstatechunk:an RPP-XML-Trackstate-chunk, that can be used by functions like reaper.SetTrackStateChunk()
------
name:ultraschall.GetProject_NumberOfTracks
language:lua
return:(integer:number_of_tracks)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the number of tracks within an rpp-project-file or a GetProject_NumberOfTracks.
Returns -1 in case of error.
Note: Huge projectfiles with thousands of items may take some seconds to load.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
number_of_tracks:the number of tracks within an projectfile
------
name:ultraschall.GetProject_Selection
language:lua
return:(number:start_selection),(number:end_selection),(number:start_selection2),(number:end_selection2)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the selection-range from an RPP-Projectfile or a ProjectStateChunk.
It's the entry SELECTION
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
start_selection:start of the time-selection
end_selection:end of the time-selection
start_selection2:start of the time-selection
end_selection2:end of the time-selection
------
name:ultraschall.GetProject_Selection
language:lua
return:(boolean:qdelay_checkstate),(integer:qdelay_seconds)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the state of the checkbox Delay queued render to allow samples to load-checkbox and the length of the delay.
It's the entry RENDER_QDELAY
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
qdelay_checkstate:true, the checkbox is checked; false, it is unchecked
qdelay_seconds:the length of the queued-render-delay in seconds
------
name:ultraschall.GetProject_QRenderOriginalProject
language:lua
return:(string:qrender_originalproject_file)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the original-filename of a queue-render-projectfile. Will return empty string, if the queued-render-project hadn't been saved before it was added to the render-queue.
It's the entry QUEUED_RENDER_ORIGINAL_FILENAME
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
qrender_originalproject_file:the original-projectfilename of the queue-render-project
------
name:ultraschall.GetProject_QRenderOutFiles
language:lua
return:(integer:count_outfiles),(table:QRenderOutFilesList),(table:QRenderOutFilesListGuid),(boolean:AutoCloseWhenFinished),(boolean:AutoIncrementFilename),(boolean:SaveCopyToOutfile)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the outfiles of the rendered files, stored in a queue-render-projectfile. This includes the path and files of the files, that will be rendered.
It's the entry QUEUED_RENDER_OUTFILE
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
count_outfiles:the number of render-outfiles
QRenderOutFilesList:the guids of the rendered outfiles
QRenderOutFilesListGuid:the guids of the rendered outfiles
AutoCloseWhenFinished:true, the render-dialog will be closed after render is finished; false, the render-dialog keeps open
AutoIncrementFilename:true, autoincrement filename if the file already exists; false, don't autoincrement filename
SaveCopyToOutfile:true, save a copy of the project as e.g. "outfile.wav.RPP"; false, don't save a copy of the project
------
name:ultraschall.SetProject_RippleState
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:ripple_state), (optional string:ProjectStatechunk)
description:
Sets the ripple-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
ripple_state:0, no Ripple; 1, Ripple One Track; 2, Ripple All
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RenderQueueDelay
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:renderqdelay), (optional string:ProjectStatechunk)
description:
Sets the render-queue-delay-time in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
renderqdelay:0 and higher, sets the checkbox "Delay queued render to allow samples to load and the amount of time to wait in seconds
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_Selection
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (number:starttime), (number:endtime), (number:starttime2), (number:endtime2), (optional string:ProjectStatechunk)
description:
Sets the ripple-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
starttime:start of the second selection in seconds
endtime:end of the second selection in seconds
starttime2:start of the second selection in seconds
endtime2:end of the second selection in seconds
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_GroupOverride
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:group_override1), (optional string:ProjectStateChunk)
description:
Sets the group-override-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
group_override1:the group-override state
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_MixerUIFlags
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:state_bitfield1), (integer:state_bitfield2), (optional string:ProjectStateChunk)
description:
Sets the Mixer-UI-state-flags in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
state_bitfield1:folders, receives, etc 
state_bitfield2:master-track, FX, Mixer
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_PeakGain
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (number:peakgain_state), (optional string:ProjectStateChunk)
description:
Sets the peak-gain-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
peakgain_state:peak-gain-state
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_Feedback
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:feedback_state), (optional string:ProjectStateChunk)
description:
Sets the feedback-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
feedback_state:feedback-state
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_PanLaw
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (number:panlaw_state), (optional string:ProjectStateChunk)
description:
Sets the panlaw-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
panlaw_state:state of the panlaw, as set in the project-settings->Advanced->Pan law/mode->Pan:law(db). 0.5(-6.02 db) to 1(default +0.0 db)
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_ProjOffsets
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (number:start_time), (integer:start_measure), (integer:base_ruler_marking_off_this_measure), (optional:ProjectStateChunk)
description:
Sets the project-offset-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
The project-offset, as set in the ProjectSettings -> Project Time Start, Project start measure and Base Ruler Marking Off This Measure-checkbox
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
start_time:the project-start-time in seconds
start_measure:the start-measure; starting with 0, unlike in the Project-Settings-window, where the 0 becomes 1 as startmeasure
base_ruler_marking_off_this_measure:0, checkbox unchecked; 1, checkbox checked
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_MaxProjectLength
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:limit_project_length), (number:projectlength_limit), (optional string:ProjectStateChunk)
description:
Sets the max-project-length-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
limit_project_length:checkbox "Limit project length, stop playback/recording at:" - 0 off, 1 on
projectlength_limit:projectlength-limit in seconds
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_Grid
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:gridstate1), (integer:gridstate2), (number:gridstate3), (integer:gridstate4), (number:gridstate5), (integer:gridstate6), (integer:gridstate7), (number:gridstate8), (optional string:ProjectStateChunk)
description:
Sets the setproject-grid-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
gridstate1:gridstate1
gridstate2:gridstate2
gridstate3:gridstate3
gridstate4:gridstate4
gridstate5:gridstate5
gridstate6:gridstate6
gridstate7:gridstate7
gridstate8:gridstate8
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_Timemode
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:timemode1), (integer:timemode2), (integer:showntime), (integer:timemode4), (integer:timemode5), (optional string:ProjectStateChunk)
description:
Sets the timemode-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
timemode2:timemode-state
showntime:Transport shown time
timemode4:timemode-state
timemode5:timemode-state
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_VideoConfig
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:preferredVidSizeX), (integer:preferredVidSizeY), (integer:settingsBitfield), (optional string:ProjectStateChunk)
description:
Sets the video-config-settings, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
preferredVidSizeX:preferred video size, x pixels
preferredVidSizeY:preferred video size, y pixels
settingsBitfield:settings
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_PanMode
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:panmode_state), (optional string:ProjectStateChunk)
description:
Sets the panmode-settings, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
panmode_state:panmode-state - ProjectSettings->Advanced->Pan law/mode->Pan mode
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_CursorPos
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (number:cursorpos), (optional string:ProjectStateChunk)
description:
Sets the cursor-position in an rpp-project-file or a ProjectStateChunk
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
cursorpos:editcursorposition in seconds
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_HorizontalZoom
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (number:hzoom), (integer:hzoomscrollpos), (integer:scrollbarfactor), (optional string:ProjectStateChunk)
description:
Sets the horizontal-zoom in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
hzoom:horizontalscrollbarposition - 0 - 4294967296
hzoomscrollpos:horizontalscrollbarposition - 0 - 4294967296
scrollbarfactor:0 to 500837, counts up, when maximum hzoomscrollpos overflows
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_VerticalZoom
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:vzoom), (optional string:ProjectStateChunk)
description:
Sets the vertical-zoom from an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
vzoom:vertical zoomfactor(0-40)
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_UseRecConfig
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:rec_cfg), (optional string:ProjectStateChunk)
description:
Sets the UseRec-Config in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
rec_cfg:recording-cfg-state
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RecMode
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:rec_mode), (optional string:ProjectStateChunk)
description:
Sets the recording-mode-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
rec_mode:recording mode
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_SMPTESync
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:smptesync_state1), (number:smptesync_fps), (integer:smptesync_resyncdrift), (integer:smptesync_skipdropframes), (integer:smptesync_syncseek), (integer:smptesync_freewheel), (integer:smptesync_userinput), (number:smptesync_offsettimecode), (integer:smptesync_stop_rec_drift), (integer:smptesync_state10), (integer:smptesync_stop_rec_lacktime), (optional string:ProjectStateChunk)
description:
Sets the TimeCodeSyncronization-SMPTE-Config in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
smptesync_state1:smptesync-state
smptesync_fps:framerate in fps
smptesync_resyncdrift:"Re-synchronize if drift exceeds" in ms (0 = never)
smptesync_skipdropframes:"skip/drop frames if drift exceeds" in ms(0 - never)
smptesync_syncseek:"Synchronize by seeking ahead" in ms (default = 1000)
smptesync_freewheel:"Freewheel on missing time code for up to" in ms(0 = forever)
smptesync_userinput:User Input-flag
smptesync_offsettimecode:Offset incoming timecode by in seconds
smptesync_stop_rec_drift:"Stop recording if drift exceeds" in ms(0 = never)
smptesync_state10:smptesync-state
smptesync_stop_rec_lacktime:"stop recording on lack of timecode after" in ms(0 = never)
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_Loop
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:loopbutton_state), (optional string:ProjectStateChunk)
description:
Sets the UseRec-Config in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_LoopGran
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:loopgran_state1), (number:loopgran_state2), (optional string:ProjectStateChunk)
description:
Sets the Loop-Gran-state in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
loopgran_state1:loopgran_state1
loopgran_state2:loopgran_state2
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RecPath
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (string:prim_recpath), (string:sec_recpath), (optional string:ProjectStateChunk)
description:
Sets the primary and secondary recording-paths in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
prim_recpath:primary recording path
sec_recpath:secondary recording path
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RenderCFG
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (string:rendercfg_string), (string:rendercfg_string2), (optional string:ProjectStateChunk)
description:
Sets the primary and secondary render-configuration as encoded string in an RPP-Projectfile or a ProjectStateChunk, as set in Render-Settings
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
rendercfg_string:the secondary render-configuration as encoded string; use "" or nil to not set it
rendercfg_string2:the secondary render-configuration as encoded string; use "" or nil to not set it
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RenderFilename
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (string:renderfilename), (optional string:ProjectStateChunk)
description:
Sets the render-filename in an rpp-projectfile or a ProjectStateChunk. Set to "", if you want to set a render-pattern with SetProject_RenderPattern.
The rendername is influenced by the settings in the RENDER_PATTERN-entry in the RPP-file, see SetProject_RenderPattern to influence or remove the RENDER_PATTERN-entry(Removing RENDER_PATTERN may help when Reaper rendering it to the name given in parameter render_filename.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk insteadO
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RenderFreqNChans
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:unknown), (integer:rendernum_chans), (integer:render_frequency), (optional string:ProjectStateChunk)
description:
Returns an unknown number, the render-frequency and rendernumber of channels from an RPP-Projectfile or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
unknown:unknown number
rendernum_chans:Number_Channels 0-seems default-project-settings(?), 1-Mono, 2-Stereo, ... up to 64 channels
render_frequency:RenderFrequency -2147483647 to 2147483647, except 0, which seems to be default-project-settings-frequency
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RenderRange
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:bounds), (number:time_start), (number:time_end), (integer:tail), (integer:tail_length), (optional string:ProjectStateChunk)
description:
Sets the render-range, render-timestart, render-timeend, render-tail and render-taillength in an RPP-Projectfile or a ProjectStateChunk.
To get RENDER_STEMS, refer GetProject_RenderStems
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
bounds:the bounds of the project to be rendered
time_start:TimeStart in milliseconds -2147483647 to 2147483647
time_end:TimeEnd in milliseconds 2147483647 to 2147483647
tail:TailLength in milliseconds, valuerange 0 - 2147483647
tail_length:TailLength in milliseconds, valuerange 0 - 2147483647
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RenderResample
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:resample_mode), (integer:playback_resample_mode), (integer:project_smplrate4mix_and_fx), (optional string:ProjectStateChunk)
description:
Resamplemode for a)Rendering and b)Playback as well as c)if both are combined from an RPP-Projectfile or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
resample_mode:Playback Resample Mode (as set in the Project-Settings)
playback_resample_mode:Playback Resample Mode (as set in the Project-Settings)
project_smplrate4mix_and_fx:Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_AddMediaToProjectAfterRender
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:addmedia_after_render_state), (optional string:ProjectStateChunk)
description:
Returns, if rendered media shall be added to the project afterwards, from an RPP-Projectfile or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
addmedia_after_render_state:1 - rendered media shall be added to the project afterwards, 0 - don't add
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_RenderStems
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:render_stems), (optional string:ProjectStateChunk)
description:
Sets the render-stems-state from an RPP-Projectfile or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
render_stems:the state of Render Stems
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_TimeBase
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:timebase), (optional string:ProjectStateChunk)
description:
Sets the timebase, as set in the project-settings, in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
timebase:the timebase for items/envelopes/markers as set in the project settings
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_TempoTimeSignature
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:tempotimesignature), (optional string:ProjectStateChunk)
description:
Sets the timebase, as set in the project-settings, in an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
tempotimesignature:the timebase for tempo/time-signature as set in the project settings
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_ItemMixBehavior
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:item_mix_behav_state), (optional string:ProjectStateChunk)
description:
Sets the item mix behavior, as set in the project-settings, from an rpp-project-file.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:filename with path of the rpp-project-file
item_mix_behav_state:item mix behavior
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_DefPitchMode
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:def_pitch_mode_state), (integer:stretch_marker_mode), (optional string:ProjectStateChunk)
description:
Sets the default-pitch-mode, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
def_pitch_mode_state:the default pitch mode
stretch_marker_mode:the stretch marker mode
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.SetProject_TrackMixingDepth
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:mixingdepth), (optional string:ProjectStateChunk)
description:
Sets the project-samplerate-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
mixingdepth:the track mixing depth
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.GetProject_CountMarkersAndRegions
language:lua
return:(integer:number_of_markers_and_regions),(integer:number_of_regions_only),(integer:number_of_markers_only)
params:(string:projectfilename_with_path)
description:
returns the number of all markers, the number of regions and the number of markers(that are not regions) in the project.
It's the entry MARKER
returns -1 in case of an error
PARAMETERS:
projectfilename_with_path:the projectfilename in which to count the markers
RETURNS:
number_of_markers_and_regions:the number of all markers and regions
number_of_regions_only:the number of regions
number_of_markers_only:the number of markers only
------
name:ultraschall.GetProject_GetMarker
language:lua
return:(boolean:retval),(integer:shownnumber),(number:markerposition),(string:markertitle),(integer:markercolor)
params:(string:projectfilename_with_path), (integer:idx)
description:
returns the information of the marker idx in a projectfile.
It's the entry MARKER
returns false in case of error
PARAMETERS:
projectfilename_with_path:the projectfilename from where to get the marker
idx:the number of the marker, you want to have the information of
RETURNS:
retval:true, in case of success; false in case of failure
shownnumber:the number that is shown with the marker in the arrange-view
markerposition:the position of the marker in seconds
markertitle:the name of the marker. "" if no name is given.
markercolor:the colorvalue of the marker
------
name:ultraschall.GetProject_GetRegion
language:lua
return:(boolean:retval),(integer:shownnumber),(number:start_of_region),(number:end_of_region),(string:regionname),(integer:regioncolor)
params:(string:projectfilename_with_path), (integer:idx)
description:
returns the information of the region idx in a projectfile.
It's the entry MARKER
returns false in case of error
PARAMETERS:
projectfilename_with_path:the projectfilename from where to get the region
idx:the number of the marker, you want to have the information of
RETURNS:
retval:true, in case of success; false in case of failure
shownnumber:the number that is shown with the region in the arrange-view
start_of_region:the startposition of the region in seconds
end_of_region:the endposition of the region in seconds
regionname:the name of the region. "" if no name is given.
regioncolor:the colorvalue of the region
------
name:ultraschall.IsValidReaProject
language:lua
return:(boolean:retval)
params:(ReaProject:ReaProject)
description:
Returns, if parameter ReaProject is a valid ReaProject(means, an existing opened project) or not.
returns false in case of an error
PARAMETERS:
ReaProject:the object that you want to check for being a valid ReaProject
RETURNS:
retval:true, if parameter ReaProject is a valid ReaProject; false, if parameter ReaProject isn't a valid ReaProject
------
name:ultraschall.NewProjectTab
language:lua
return:(ReaProject:newproject)
params:(boolean:switch_to_new_tab)
description:
Opens a new projecttab and optionally switches to it. Returns the newly created ReaProject.
returns nil in case of an error
PARAMETERS:
switch_to_new_tab:true, switch to the newly created project-tab; false, stay in the "old" project-tab
RETURNS:
newproject:the newly created project-object of the projecttab
------
name:ultraschall.GetCurrentTimeLengthOfFrame
language:lua
return:(number:length)
params:(ReaProject:ReaProject)
description:
Returns a project's length of a frame in seconds. Depends on the fps set in the Project's settings of ReaProject.
Returns -1 in case of an error
PARAMETERS:
ReaProject:the project to check for; use nil or 0 for the current project
RETURNS:
length:the current length of a frame of ReaProject in seconds
------
name:ultraschall.GetLengthOfFrames
language:lua
return:(number:length)
params:(integer:frames), (ReaProject:ReaProject)
description:
Returns the length of a number of frames of a ReaProject. Depends on the fps set in the Project's settings of ReaProject.
Returns -1 in case of an error
PARAMETERS:
frames:the number of frames, whose length you would love to know
ReaProject:the project to check for; use nil or 0 for the current project
RETURNS:
length:the current length of frames of ReaProject in seconds
------
name:ultraschall.ConvertOldProjectToCurrentReaperVersion
language:lua
return:(boolean:retval)
params:(string:filename_with_path)
description:
Convert an old Reaper-project to the current Reaper-version.
It creates a backup-copy of the old version of the project.rpp to project.rpp~0
After that, it will open the project and save it again, so it is saved with the newest version of Reaper.
Maybe helpful, when you want to use the Ultraschall-API Get/SetProject-State-functions on older projects, where some states were saved differently.
Just create a "new" version of it and use the aforementioned functions on the new project-version.
Returns false in case of an error.
PARAMETERS:
filename_with_path:the filename with path of the rpp-projectfile to be converted.
RETURNS:
retval:true, conversion was successfull; false, conversion wasn't successful(file doesn't exist or a copy can't be created)
------
name:ultraschall.GetProject_ProjectBay
language:lua
return:(string:ProjectBayStateChunk)
params:(string:ProjectStateChunk), (optional string:ProjectStateChunk)
description:
returns the ProjectBay-StateChunk, that holds MediaItems, that shall be retained in the "background" of the project, even if they are deleted from the project.
These MediaItems can be seen and set to retain from within the ProjectBay-window.
It's the entry <PROJBAY ... >
returns nil in case of an error
PARAMETERS:
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
ProjectBayStateChunk:the statechunk of the ProjectBay
------
name:ultraschall.GetProject_Metronome
language:lua
return:(string:MetronomeStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Metronome-StateChunk, that holds metronome-settings.
It's the entry <METRONOME ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the metronome-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MetronomeStateChunk:the statechunk of the Metronome
------
name:ultraschall.GetProject_MasterPlayspeed
language:lua
return:(string:MasterPlayspeedStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-Playspeed-StateChunk, that holds Playspeed-settings of the master.
It's the entry <MASTERPLAYSPEEDENV ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-playspeed-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterPlayspeedStateChunk:the statechunk of the MasterPlaySpeed
------
name:ultraschall.GetProject_TempoEnvEx
language:lua
return:(string:TempoStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Tempo-StateChunk, that holds tempo-settings of the master.
It's the entry <TEMPOENVEX ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the tempo-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
TempoStateChunk:the statechunk of the Tempo
------
name:ultraschall.GetProject_Extensions
language:lua
return:(string:ExtensionsStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Extensions-settings-StateChunk, that holds tempo-settings of the master.
It's the entry <EXTENSIONS ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the extension-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
ExtensionsStateChunk:the statechunk of the Extensions-settings
------
name:ultraschall.GetProject_Lock
language:lua
return:(integer:lock_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the individual lock-settings of the project, as set in menu Options -> Locking -> Locking Settings
It's the entry LOCK
It is the one before(!) any
string projectfilename_with_path - the projectfile+path, from which to get the lock-state; nil to use ProjectStateChunk
optional string ProjectStateChunk - a statechunk of a project, usually the contents of a rpp-project-file
integer lock_state - the lock-state, which is a bitfield
- &1     - Time selection
- &2     - Items (full)
- &4     - Track envelopes
- &8     - Markers
- &16    - Regions
- &32    - Time signature markers
- &64    - Items (prevent left/right movement)
- &128   - Items (prevent up/down movement)
- &256   - Item edges
- &512   - Item fade/volume handles
- &1024  - Loop points locked
- &2048  - Item envelopes
- &4096  - Item stretch markers
- &16384 - Enable locking
Project-Management
RPP-Files Get
US_Api_Functions
Modules/ultraschall_functions_ProjectManagement_ProjectFiles_Module.lua
projectmanagement, get, lock, projectstatechunk
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the lock-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
lock_state:the lock-state, which is a bitfield
------
name:ultraschall.GetProject_GlobalAuto
language:lua
return:(integer:globalauto_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the global-automation-settings of the project.
It's the entry GLOBAL_AUTO
returns nil in case of an error or if the setting isn't existing
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the global-automation-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
globalauto_state:the global automation override state, this sets the same automation mode to all tracks!
------
name:ultraschall.GetProject_Tempo
language:lua
return:(number:bpm),(integer:beat),(integer:denominator)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the tempo-settings of the project, as set in the Project Settings -> Project Settings-tab
It's the entry TEMPO
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the tempo-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
bpm:the tempo of the project in bpm
beat:the beat of the project
denominator:the denominator for the beat
------
name:ultraschall.GetProject_Playrate
language:lua
return:(number:playrate),(integer:preserve_pitch),(number:min_playrate),(number:max_playrate)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the tempo-settings of the project, as set in the Project Settings -> Project Settings-tab
It's the entry PLAYRATE
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the playrate-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
playrate:the maximum playrate possible in the project; 0.01 to 10
preserve_pitch:0, don't preserve pitch, when changing playrate; 1, preserve pitch, when changing playrate
min_playrate:the minimum playrate possible in the project; 0.01 to 10
max_playrate:the maximum playrate possible in the project; 0.01 to 10
------
name:ultraschall.GetProject_MasterAutomode
language:lua
return:(integer:automode)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the automation-mode of the master-track of the project, as set in the "Envelopes for Master Track"-dialog or the context-menu for the Master Track -> Set track automation mode -> ...
It's the entry MASTERAUTOMODE
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-automation-mode; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
automode:the automation-mode, as set in the Envelopes for Master Track
------
name:ultraschall.GetProject_MasterSel
language:lua
return:(integer:selection)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the master-track-selection-state of the master-track of the project.
It's the entry MASTER_SEL
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-selection; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
selection:the selection-state; 0, master-track unselected; 1, master-track selected
------
name:ultraschall.GetProject_MasterFXByp
language:lua
return:(integer:fx_byp_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the fx-bypass-state of the master-track of the project.
It's the entry MASTER_FX
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-fx-bypass-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
fx_byp_state:the fx-bypass-state; 0, master-track-fx bypassed; 1, master-track-fx normal
------
name:ultraschall.GetProject_MasterMuteSolo
language:lua
return:(integer:mute_solo_state)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the mute-solo-state of the master-track of the project.
Has no exclusive-solo/mute-settings!
It's the entry MASTERMUTESOLO
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-mute-solo-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
mute_solo_state:the mute-solo-state; it is a bitfield
------
name:ultraschall.GetProject_MasterNChans
language:lua
return:(integer:number_of_channels),(integer:peak_metering)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the number of output channels-settings and the vu-peak-metering-settings of the master-track of the project.
It's the entry MASTER_NCH
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-nchans; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
number_of_channels:the number of output-channels, as set in the "Outputs for the Master Channel -> Track Channels"-dialog
peak_metering:2, Multichannel peak metering-setting, as set in the "Master VU settings"-dialog
------
name:ultraschall.GetProject_MasterTrackHeight
language:lua
return:(integer:height_state),(integer:height_lock)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the master-trackheight-states of the master-track of the project.
It's the entry MASTERTRACKHEIGHT
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the mastertrackheight-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
height_state:the current-height of the master-track, from 24 to 260
height_lock:0, height-lock is off; 1, height-lock is on
------
name:ultraschall.GetProject_MasterTrackColor
language:lua
return:(integer:color)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the master-color of the master-track of the project.
It's the entry MASTERPEAKCOL
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the mastertrack-color; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
color:the color for the master-track
------
name:ultraschall.GetProject_MasterTrackView
language:lua
return:(integer:tcp_visibility),(number:state2),(number:state3),(number:state4),(integer:state5),(integer:state6),(integer:state7),(integer:state8),(integer:state9),(integer:state10)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the master-view-state of the master-track of the project or a ProjectStateChunk.
It's the entry MASTERTRACKVIEW
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the trackview-states; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
tcp_visibility:0, Master-track is invisible in MCP; 1, Master-track is visible in MCP
state2:unknown
state3:unknown
state4:unknown
state5:unknown
state6:unknown
state7:unknown
state8:unknown
state9:unknown
state10:unknown
------
name:ultraschall.GetProject_CountMasterHWOuts
language:lua
return:(integer:count_of_hwouts)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the number of available hwouts in an rpp-project or ProjectStateChunk
It's the entry MASTERHWOUT
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to count the master-hwouts; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
count_of_hwouts:the number of available hwouts in an rpp-project or ProjectStateChunk
------
name:ultraschall.GetProject_MasterHWOut
language:lua
return:(integer:state1),(integer:state2),(number:volume),(number:pan),(integer:mute),(integer:phase),(integer:output_channels),(number:state8)
params:(string:projectfilename_with_path), (integer:idx), (optional string:ProjectStateChunk)
description:
returns the HWOut of the master-track of the project, as set in the "Outputs for Master Track"-dialog
There can be multiple HWOuts for the Master-Track.
It's the entry MASTERHWOUT
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-hwout-states; nil to use ProjectStateChunk
idx:the number of the requested HWOut-setting; 1 for the first, etc.
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
state1:unknown
state2:unknown
volume:volume of the HWOut; 
pan:the panning; -1(left), 1(right), 0(center)
mute:mute-state; 0, unmuted; 1, muted
phase:phase-inversion; 0, normal phase; 1, inversed phase
output_channels:       -1 - None
state8:unknown
------
name:ultraschall.GetProject_MasterVolume
language:lua
return:(number:volume),(number:pan),(number:pan_law),(number:state4),(number:pan_knob3)
params:(string:projectfilename_with_path), (integer:idx), (optional string:ProjectStateChunk)
description:
returns the Master-volume-state of the master-track of the project.
It's the entry MASTER_VOLUME
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-volume-states; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
volume:Volume; 0(-inf dB) to 3.981071705535(+12dB);1 for 0dB
pan:the second pan_knob for pan-mode "Dual Pan" 
pan_law:Pan_Law, as set in the "Pan Law: Master Track"-dialog; 1(0dB); 0.5(-6.02dB)
state4:unknown
pan_knob3:the second pan_knob for pan-mode "Dual Pan" 
------
name:ultraschall.GetProject_MasterPanMode
language:lua
return:(integer:panmode)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the master-panmode of the master-track of the project.
It's the entry MASTER_PANMODE
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-panmode; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
panmode:the panmode for the master-track; 
------
name:ultraschall.GetProject_MasterWidth
language:lua
return:(number:pan_knob_two)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the master-width for the second pan-knob in stereo pan-modes, of the master-track of the project.
It's the entry MASTER_WIDTH
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the masterwidth-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
pan_knob_two:-1(left), 1(right), 0(center)
------
name:ultraschall.GetProject_MasterGroupFlagsState
language:lua
return:(integer:GroupState_as_Flags),(array:IndividualGroupState_Flags)
params:(string:projectfilename_with_path), (optional stirng:ProjectStateChunk)
description:
returns the state of the group-flags for the Master-Track, as set in the menu Track Grouping Parameters; from an rpp-projectfile or a ProjectStateChunk.
Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.
You can reach the Group-Flag-Settings in the context-menu of a track.
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.
So if you want to get Volume Master(table entry 1) to check if it's set in Group 1(2^0=1) and 3(2^2=4):
group1=groups_bitfield_table[1]&1
group2=groups_bitfield_table[1]&4
The following flags(and their accompanying array-entry-index) are available:
1 - Volume Master
2 - Volume Slave
3 - Pan Master
4 - Pan Slave
5 - Mute Master
6 - Mute Slave
7 - Solo Master
8 - Solo Slave
9 - Record Arm Master
10 - Record Arm Slave
11 - Polarity/Phase Master
12 - Polarity/Phase Slave
13 - Automation Mode Master
14 - Automation Mode Slave
15 - Reverse Volume
16 - Reverse Pan
17 - Do not master when slaving
18 - Reverse Width
19 - Width Master
20 - Width Slave
21 - VCA Master
22 - VCA Slave
23 - VCA pre-FX slave
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.
This function will work only for Groups 1 to 32. To get Groups 33 to 64, use GetTrackGroupFlags_HighState instead!
It's the entry MASTER_GROUP_FLAGS
returns -1 in case of failure
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the groups-state-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
GroupState_as_Flags:returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.
IndividualGroupState_Flags:returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.
------
name:ultraschall.GetProject_MasterGroupFlagsHighState
language:lua
return:(integer:GroupState_as_Flags),(array:IndividualGroupState_Flags)
params:(string:projectfilename_with_path), (optional stirng:ProjectStateChunk)
description:
returns the state of the group-high-flags for the Master-Track, as set in the menu Track Grouping Parameters; from an rpp-projectfile or a ProjectStateChunk.
Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.
You can reach the Group-Flag-Settings in the context-menu of a track.
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.
So if you want to get Volume Master(table entry 1) to check if it's set in Group 1(2^0=1) and 3(2^2=4):
group1=groups_bitfield_table[1]&1
group2=groups_bitfield_table[1]&4
The following flags(and their accompanying array-entry-index) are available:
1 - Volume Master
2 - Volume Slave
3 - Pan Master
4 - Pan Slave
5 - Mute Master
6 - Mute Slave
7 - Solo Master
8 - Solo Slave
9 - Record Arm Master
10 - Record Arm Slave
11 - Polarity/Phase Master
12 - Polarity/Phase Slave
13 - Automation Mode Master
14 - Automation Mode Slave
15 - Reverse Volume
16 - Reverse Pan
17 - Do not master when slaving
18 - Reverse Width
19 - Width Master
20 - Width Slave
21 - VCA Master
22 - VCA Slave
23 - VCA pre-FX slave
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.
This function will work only for Groups 1 to 32. To get Groups 33 to 64, use GetTrackGroupFlags_HighState instead!
It's the entry MASTER_GROUP_FLAGS_HIGH
returns -1 in case of failure
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the groupshigh-state-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
GroupState_as_Flags:returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.
IndividualGroupState_Flags:returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.
------
name:ultraschall.GetProject_GroupDisabled
language:lua
return:(integer:disabled1),(integer:disabled2)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the group-disabled-stated, of the master-track of the project.
It's the entry GROUPS_DISABLED
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the groups-disabled-state; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
disabled1:the disabled groups; it is a bitfield, with &1 for group 1; &32 for group 32; if it's set, the accompanying group is disabled
disabled2:the disabled groups_high; it is a bitfield, with &1 for group 33; &32 for group 64; if it's set, the accompanying group is disabled
------
name:ultraschall.GetProject_MasterHWVolEnvStateChunk
language:lua
return:(string:MasterHWVolEnvStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-HWVolEnv-StateChunk, that holds MasterHWVolEnv-settings of the master.
It's the entry <MASTERHWVOLENV ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-hwvolenv-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterHWVolEnvStateChunk:the statechunk of the HWVolEnv
------
name:ultraschall.GetProject_MasterFXListStateChunk
language:lua
return:(string:MasterFXListStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-FX_List-StateChunk, that holds Master-FX-settings for the window as well as the FX themselves, of the master.
It's the entry <MASTERFXLIST ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-fxlist-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterFXListStateChunk:the statechunk of the Master-FX-list
------
name:ultraschall.GetProject_MasterDualPanEnvStateChunk
language:lua
return:(string:MasterDualPanEnvStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-DualPanEnv-StateChunk, that holds MasterDualPanEnv-settings of the master.
It's the entry <MASTERDUALPANENV ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-dualpan-env-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterDualPanEnvStateChunk:the statechunk of the Master-DualPan-Env-state
------
name:ultraschall.GetProject_MasterDualPanEnv2StateChunk
language:lua
return:(string:MasterDualPanEnv2StateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-DualPanEnv2-StateChunk, that holds master-DualPanEnv2-settings of the master.
It's the entry <MASTERDUALPANENV2 ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-dualpan-env2-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
------
name:ultraschall.GetProject_MasterDualPanEnvLStateChunk
language:lua
return:(string:MasterDualPanEnvLStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-DualPan-EnvL-StateChunk, that holds Master-DualPan-EnvL-settings of the master.
It's the entry <MASTERDUALPANENVL ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-dualpan-envL-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterDualPanEnvLStateChunk:the statechunk of the Master-DualPan-EnvL-state
------
name:ultraschall.GetProject_MasterDualPanEnvL2StateChunk
language:lua
return:(string:MasterDualPanEnvL2StateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-Dual-Pan-EnvL2-StateChunk, that holds Master-FX-Dual-Pan-EnvL2-settings of the master.
It's the entry <MASTERDUALPANENVL2 ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-dualpan-envL2-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterDualPanEnvL2StateChunk:the statechunk of the Master-DualPan-EnvL2-state
------
name:ultraschall.GetProject_MasterVolEnvStateChunk
language:lua
return:(string:MasterVolEnvStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-Vol-Env-StateChunk, that holds Master-Vol-Env-settings of the master.
It's the entry <MASTERVOLENV ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-volenv-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterVolEnvStateChunk:the statechunk of the Master-volenv-state
------
name:ultraschall.GetProject_MasterVolEnv2StateChunk
language:lua
return:(string:MasterVolEnv2StateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-Vol-Env2-StateChunk, that holds Master-Vol-Env2-settings of the master.
It's the entry <MASTERVOLENV2 ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-volenv2-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterVolEnv2StateChunk:the statechunk of the Master-volenv2-state
------
name:ultraschall.GetProject_MasterVolEnv3StateChunk
language:lua
return:(string:MasterVolEnv3StateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-Vol-Env3-StateChunk, that holds Master-Vol-Env3-settings of the master.
It's the entry <MASTERVOLENV3 ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-volenv3-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterVolEnv3StateChunk:the statechunk of the Master-volenv3-state
------
name:ultraschall.GetProject_MasterHWPanEnvStateChunk
language:lua
return:(string:MasterHWPanEnvStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-HW-pan-env-StateChunk, that holds Master-pan-env-settings of the master.
It's the entry <MASTERHWPANENV ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-HW-pan-env-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterHWPanEnvStateChunk:the statechunk of the Master-volenv3-state
------
name:ultraschall.GetProject_MasterPanMode_Ex
language:lua
return:(string:MasterHWPanModeEx_StateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the Master-HW-pan-mode-ex-StateChunk, that holds Master-pan-mode-ex-settings of the master.
It's the entry <MASTER_PANMODE_EX ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the master-HW-pan-env-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
MasterHWPanModeEx_StateChunk:the statechunk of the Master-pan-mode-ex
------
name:ultraschall.GetProject_TempoEnv_ExStateChunk
language:lua
return:(string:TempoEnv_ExStateChunk)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
returns the TempoEnv_ExStateChunk, that holds TempoEnv_Ex-settings of an rpp-project or ProjectStateChunk.
It's the entry <TEMPOENVEX ... >
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile+path, from which to get the tempo-env-ex-statechunk; nil to use ProjectStateChunk
ProjectStateChunk:a statechunk of a project, usually the contents of a rpp-project-file
RETURNS:
TempoEnv_ExStateChunk:the statechunk of the Tempo-Env-Ex
------
name:ultraschall.GetProject_Length
language:lua
return:(number:length),(number:last_itemedge),(number:last_marker_reg_edge),(number:last_timesig_marker)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the projectlength of an rpp-project-file.
It's returning the position of the overall length, as well as the position of the last itemedge/regionedge/marker/time-signature-marker of the project.
To do the same for currently opened projects, use: GetProjectLength
Returns -1 in case of an error
PARAMETERS:
projectfilename_with_path:the filename of the project, that you want to know it's length of; nil, to use Parameter ProjectStateChunk instead
ProjectStateChunk:a ProjectStateChunk to count the length of; only available when projectfilename_with_path=nil
RETURNS:
length:the length of the project
last_itemedge:the postion of the last itemedge in the project
last_marker_reg_edge:the position of the last marker/regionedge in the project
last_timesig_marker:the position of the last time-signature-marker in the project
------
name:ultraschall.CreateTemporaryFileOfProjectfile
language:lua
return:(string:tempfile)
params:(string:projectfilename_with_path)
description:
Creates a temporary copy of an rpp-projectfile, which can be altered and rendered again.
Must be deleted by hand using os.remove(tempfile) after you're finished.
returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the project to render; nil, for the currently opened project(needs to be saved first)
RETURNS:
tempfile:the temporary-file, that is a valid copy of the projectfilename_with_path
------
name:ultraschall.GetProject_Length
language:lua
return:(number:length),(number:last_itemedge),(number:last_marker_reg_edge),(number:last_timesig_marker)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the projectlength of an rpp-project-file.
It's eturning the position of the overall length, as well as the position of the last itemedge/regionedge/marker/time-signature-marker of the project.
Returns -1 in case of an error
PARAMETERS:
projectfilename_with_path:the filename of the project, that you want to know it's length of; nil, to use Parameter ProjectStateChunk instead
ProjectStateChunk:a ProjectStateChunk to count the length of; only available when projectfilename_with_path=nil
RETURNS:
length:the length of the project
last_itemedge:the postion of the last itemedge in the project
last_marker_reg_edge:the position of the last marker/regionedge in the project
last_timesig_marker:the position of the last time-signature-marker in the project
------
name:ultraschall.SetProject_RenderPattern
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (string:render_pattern), (optional string:ProjectStateChunk)
description:
Sets the render-filename in an rpp-projectfile or a ProjectStateChunk. Set it to "", if you want to set the render-filename with SetProject_RenderFilename.
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
render_pattern:the pattern, with which the rendering-filename will be automatically created. Check also GetProject_RenderFilename
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.GetProject_RenderFilename
language:lua
return:(string:render_filename)
params:(string:projectfilename_with_path), (optional string:ProjectStateChunk)
description:
Returns the render-filename from an RPP-Projectfile or a ProjectStateChunk. If it contains only a path or nothing, you should check the Render_Pattern using GetProject_RenderPattern, as a render-pattern influences the rendering-filename as well.
It's the entry RENDER_FILE
Returns nil in case of error.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
render_filename:the filename for rendering, check also GetProject_RenderPattern
------
name:ultraschall.GetProject_GroupName
language:lua
return:(string:groupname)
params:(string:projectfilename_with_path), (integer:idx), (optional string:ProjectStateChunk)
description:
Returns the name associated to a specific group of items. There can be more than one!
It is the GROUP-entry in the root of the ProjectStateChunk.
Returns nil in case of error or if no such entry exists.
PARAMETERS:
projectfilename_with_path:filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk
idx:the index of the item-group, whose name you want to know
ProjectStateChunk:a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil
RETURNS:
groupname:the associated groupname of the itemgroup; nil, no such group or no name is given(default Group idx)
------
name:ultraschall.SetProject_Lock
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:lock_state), (optional string:ProjectStateChunk)
description:
Sets the Locked-state of an rpp-projectfile or a ProjectStateChunk.
It's the entry LOCK
It is the one before(!) any
string projectfilename_with_path - the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
integer lock_state - the lock-state, which is a bitfield
- &1     - Time selection
- &2     - Items (full)
- &4     - Track envelopes
- &8     - Markers
- &16    - Regions
- &32    - Time signature markers
- &64    - Items (prevent left/right movement)
- &128   - Items (prevent up/down movement)
- &256   - Item edges
- &512   - Item fade/volume handles
- &1024  - Loop points locked
- &2048  - Item envelopes
- &4096  - Item stretch markers
- &16384 - Enable locking
optional string ProjectStateChunk - a projectstatechunk, that you want to be changed
integer retval - -1 in case of error, 1 in case of success
Project-Management
RPP-Files Set
US_Api_Functions
Modules/ultraschall_functions_ProjectManagement_ProjectFiles_Module.lua
projectfiles, rpp, state, set, lock state
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
lock_state:the lock-state, which is a bitfield
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_GlobalAuto
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:global_auto_state), (optional string:ProjectStateChunk)
description:
Sets the global-auto-override-state of an rpp-projectfile or a ProjectStateChunk.
It's the entry GLOBAL_AUTO
This sets the same automation mode to all tracks!
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
global_auto_state:the global automation override state, this sets the same automation mode to all tracks!
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_Tempo
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:bpm), (integer:beat), (integer:denominator), (optional string:ProjectStateChunk)
description:
Sets the tempo, bpm, beat, denominator-state of an rpp-projectfile or a ProjectStateChunk.
It's the entry TEMPO
They are set in the Project Settings -> "Project BPM" and "Time signature"
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
bpm:the tempo of the project in bpm
beat:the beat of the project 
denominator:the denominator for the beat 
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_Playrate
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (number:playrate), (integer:preserve_pitch), (number:min_playrate), (number:max_playrate), (optional string:ProjectStateChunk)
description:
Sets the playrate of an rpp-projectfile or a ProjectStateChunk.
It's the entry PLAYRATE
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
playrate:the maximum playrate possible in the project; 0.01 to 10
preserve_pitch:0, don't preserve pitch, when changing playrate; 1, preserve pitch, when chaning playrate 
min_playrate:the minimum playrate possible in the project; 0.01 to 10
max_playrate:the maximum playrate possible in the project; 0.01 to 10
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterAutomode
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:automode), (optional string:ProjectStateChunk)
description:
Sets the automation-mode for the master-track of an rpp-projectfile or a ProjectStateChunk.
It's the entry MASTERAUTOMODE
This sets the same automation mode to all tracks!
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
automode:the automation mode for the master-track
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterSel
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:selection_state), (optional string:ProjectStateChunk)
description:
Sets the selection-state for the master-track of an rpp-projectfile or a ProjectStateChunk.
It's the entry MASTER_SEL
This sets the same automation mode to all tracks!
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
selection_state:the selection-state of the MasterTrack; 0, unselected; 1, selected
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterMuteSolo
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:mute_solo_state), (optional string:ProjectStateChunk)
description:
Sets the mute/solo-state for the master-track of an rpp-projectfile or a ProjectStateChunk.
Has no exclusive-solo/mute-settings!
It's the entry MASTERMUTESOLO
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
mute_solo_state:the mute-solo-state; it is a bitfield
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterFXByp
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:fx_byp_state), (optional string:ProjectStateChunk)
description:
Sets the fx-bypass-state for the master-track of an rpp-projectfile or a ProjectStateChunk.
It's the entry MASTER_FX
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
fx_byp_state:the fx-bypass-state; 0, master-track-fx bypassed; 1, master-track-fx normal 
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterNChans
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:number_of_channels), (integer:peak_metering), (optional string:ProjectStateChunk)
description:
Sets the number of channels and vu-meter-settings for the master-track of an rpp-projectfile or a ProjectStateChunk.
It's the entry MASTER_NCH
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
number_of_channels:the number of output-channels, as set in the "Outputs for the Master Channel -> Track Channels"-dialog 
peak_metering:2, Multichannel peak metering-setting, as set in the "Master VU settings"-dialog 
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterTrackHeight
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:height_state), (integer:height_lock), (optional string:ProjectStateChunk)
description:
Sets the trackheight for the master-track of an rpp-projectfile or a ProjectStateChunk.
It's the entry MASTERTRACKHEIGHT
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
height_state:the current-height of the master-track, from 24 to 260 
height_lock:0, height-lock is off; 1, height-lock is on 
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterTrackColor
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:color), (integer:peak_metering), (optional string:ProjectStateChunk)
description:
Sets the color for the master-track of an rpp-projectfile or a ProjectStateChunk.
To generate the correct color-value, use ConvertColor.
Note: This color reverses red and blue component on Mac, so it looks different on Mac compared to Windows and Linux!
It's the entry MASTERPEAKCOL
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
color:the color-value of the MasterTrack
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterPanMode
language:lua
return:(integer:retval)
params:(string:projectfilename_with_path), (integer:panmode), (integer:peak_metering), (optional string:ProjectStateChunk)
description:
Sets the panmode for the master-track of an rpp-projectfile or a ProjectStateChunk.
It's the entry MASTER_PANMODE
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
panmode:the panmode for the master-track;
ProjectStateChunk:a projectstatechunk, that you want to be changed
RETURNS:
retval:-1 in case of error, 1 in case of success
------
name:ultraschall.SetProject_MasterTrackView
language:lua
return:(integer:retval),(optional string:ProjectStateChunk)
params:(string:projectfilename_with_path), (integer:tcp_visibility), (number:state2), (number:state3), (number:state4), (integer:state5), (integer:state6), (integer:state7), (optional string:ProjectStatechunk)
description:
Sets the master-view-state of the master-track of the project or a ProjectStateChunk.
It is the entry: MASTERTRACKVIEW
Returns -1 in case of error.
PARAMETERS:
projectfilename_with_path:the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead
tcp_visibility:0, Master-track is invisible in MCP; 1, Master-track is visible in MCP
state2:unknown
state3:unknown
state4:unknown
state5:unknown
state6:unknown
state7:unknown
RETURNS:
retval:-1 in case of error, 1 in case of success
ProjectStateChunk:the altered ProjectStateChunk
------
name:ultraschall.AutoSearchReaMoteSlaves
language:lua
return:
params:
description:
Auto-searches for new ReaMote-Slaves
------
name:ultraschall.GetVerticalZoom
language:lua
return:(integer:vertical_zoom_factor)
params:
description:
Returns the vertical-zoom-factor.
Returns -1 in case of error
RETURNS:
vertical_zoom_factor:the current vertical zoom-factor
------
name:ultraschall.SetVerticalZoom
language:lua
return:(integer:retval)
params:(integer:vertical_zoom_factor)
description:
Sets the vertical zoom factor.
To set it relative to the current vertical-zoom-value, use Reaper's own API-function [CSurf_OnZoom](Reaper_Api_Documentation.html#CSurf_OnZoom)
Returns -1 in case of error.
PARAMETERS:
vertical_zoom_factor:the current vertical zoom-factor
RETURNS:
retval:-1, in case of error
------
name:ultraschall.StoreArrangeviewSnapshot
language:lua
return:(integer:retval)
params:(integer:slot), (string:description), (boolean:position), (boolean:vzoom), (boolean:vscroll)
description:
Stores a new Arrangeview-snapshot, that includes the position, horizontal zoom, vertical zoom and vertical scroll.
Returns -1 in case of error.
PARAMETERS:
slot:the slot for arrangeview-snapshot
description:a description for this arrangeview-snapshot
position:true, store start and endposition of the current arrangeview; false, don't store start and endposition of current arrangeview(keep old position in slot, if existing)
vzoom:true, store current vertical-zoom-factor; false, don't store current vertical-zoom-factor(keep old zoomfactor in slot, if existing)
vscroll:true, store current vertical scroll-factor; false, don't store current vertival-scroll-factor
RETURNS:
retval:-1, in case of error
------
name:ultraschall.IsValidArrangeviewSnapshot
language:lua
return:(boolean:retval)
params:(integer:slot)
description:
Checks, if an Arrangeview-snapshot-slot is valid(means set).
Returns false in case of error.
PARAMETERS:
slot:the slot for arrangeview-snapshot
RETURNS:
retval:true, if Arrangeview-Snapshot is valid; false, if Arrangeview-Snapshot is not existing
------
name:ultraschall.RetrieveArrangeviewSnapshot
language:lua
return:(boolean:retval),(string:description),(number:startposition),(number:endposition),(integer:vzoomfactor),(number:hzoomfactor),(number:vertical_scroll)
params:(integer:slot)
description:
Retrieves an Arrangeview-snapshot and returns the startposition, endposition and vertical and horizontal zoom-factor as well as the number vertical-scroll-factor..
Returns false in case of error.
PARAMETERS:
slot:the slot for arrangeview-snapshot
RETURNS:
retval:false, in case of error; true, in case of success
description:a description for this arrangeview-snapshot
startposition:the startposition of the arrangeview
endposition:the endposition of the arrangeview
hzoomfactor:the horizontal zoomfactor
vertical_scroll:the vertical scroll-value
------
name:ultraschall.RestoreArrangeviewSnapshot
language:lua
return:(boolean:retval),(string:description),(number:startposition),(number:endposition),(integer:vzoomfactor),(number:hzoomfactor),(number:vertical_scroll_factor)
params:(integer:slot), (optional boolean:position), (optional boolean:vzoom), (optional integer:hcentermode), (optional boolean:verticalscroll)
description:
Sets arrangeview to start/endposition and horizontal and vertical-zoom, as received from Arrangeview-Snapshot-slot. It returns the newly set start/endposition, vertical zoom, horizontal zoom and description of slot.
Returns false in case of error.
PARAMETERS:
slot:the slot for arrangeview-snapshot
position:nil or true, set arrange to stored start and endposition(and it's horizontal-zoom); false, set only horizontal-zoom
vzoom:nil or true, set vertical-zoom; false, don't set vertical zoom
hcentermode:decides, what shall be in the center of the zoomed horizontal view. Only available when position==false
verticalscroll:true, sets vertical scroll-value as well; false, doesn't set vertical-scroll-value
RETURNS:
retval:false, in case of error; true, in case of success
description:a description for this arrangeview-snapshot
startposition:the startposition of the arrangeview
endposition:the endposition of the arrangeview
hzoomfactor:the horizontal zoomfactor
vertical_scroll_factor:the vertical-scroll-factor
------
name:ultraschall.DeleteArrangeviewSnapshot
language:lua
return:(integer:retval)
params:(integer:slot)
description:
Deletes an ArrangeviewSnapshot-slot.
Returns -1 if the slot is unset or slot is an invalid value.
PARAMETERS:
slot:the slot for arrangeview-snapshot
RETURNS:
retval:-1 in case of an error; 0 in case of success
------
name:ultraschall.SetIDEFontSize
language:lua
return:(boolean:retval)
params:(integer:fontsize)
description:
Sets the fontsize of Reaper's IDE (ReaScript/Video Processor/JSFX)
New fontsize is valid for all IDE's opened after calling this function.
Returns false in case of an error
PARAMETERS:
fontsize:the new font-size for Reaper's IDEs
RETURNS:
retval:true, if setting was successful; false, if not
------
name:ultraschall.GetIDEFontSize
language:lua
return:(integer:retval)
params:
description:
Returns the current fontsize of Reaper's IDE (ReaScript/Video Processor/JSFX)
------
name:ultraschall.GetPlayCursorWidth
language:lua
return:(integer:play_cursor_width)
params:
description:
Returns the width of the playcursor in pixels
see SetPlayCursorWidth for setting the playcursor-width.
RETURNS:
play_cursor_width:the width of the playcursor in pixels
------
name:ultraschall.SetPlayCursorWidth
language:lua
return:(boolean:retval)
params:(integer:play_cursor_width), (boolean:persist)
description:
Sets a new playcursor-width.
see GetPlayCursorWidth for getting the playcursor-width.
Returns false in case of an error
PARAMETERS:
play_cursor_width:the new width of the playcursor
persist:true, set the setting to reaper.ini so it persists after restarting Reaper; false, set it only for the time, until Reaper is restarted
RETURNS:
retval:true, setting was successful; false, setting was unsuccessful
------
name:ultraschall.GetScreenWidth
language:lua
return:(integer:width)
params:(optional boolean:want_workarea)
description:
returns the width of the screen in pixels.
returns -1 in case of an error
PARAMETERS:
want_workarea:true, returns workspace only; false, full monitor coordinates of the returned viewport; nil, will be seen as true
RETURNS:
width:the width of the screen in pixels
------
name:ultraschall.GetScreenHeight
language:lua
return:(integer:height)
params:(optional boolean:want_workarea)
description:
returns the height of the screen in pixels.
returns -1 in case of an error
PARAMETERS:
want_workarea:true, returns workspace only; false, full monitor coordinates of the returned viewport; nil, will be seen as true
------
name:ultraschall.ShowMenu
language:lua
return:(integer:retval)
params:(string:Title), (string:Entries), (integer:x), (integer:y)
description:
Draws a menu at position x,y.
Entries is the string, that contains the Menuentries, separated by |
Example: "Entry1|Entry2|Entry3"
Each field can start with a special character
# grays out the entry
! entry is checked
> starts a new submenu, where every following entry will be part of the submenu
< ends a submenu with this entry being the last one
These special characters can be combined, however, grayed out entries don't open submenus, even if they are shown as submenus.
A field with nothing in it || creates a separator.
The returned number follows the numbering of the clickable(!) entries. Even if grayed out-entries can't be selected, they count as well.
However, opening-submenu-entries and separators don't count as clickable.
That said, if you have one grayed out entry and one normal entry, the grayed out entry is 1, the normal entry(the only selectable one) is 2.
The following entry
Normal1|>SubmenuOpener|Submenuentry1|
Submenuentry1
SubmenuEntry2Closer
Grayed Out
One last thing: the title does not count as entry!
Note for Mac-users: has a possible issue with the y coordinate, where it's position is actually "reversed", due a Reaper-bug.
Note for Linux: does not work on Linux yet.
returns -1 in case of an error
PARAMETERS:
Title:the title shown on top of the menu
Entries:the individual entries. See above on how to create such an entry.
x:the x-position of the menu
y:the y-position of the menu
RETURNS:
retval:the selected entry; 0, nothing selected
------
name:ultraschall.IsValidHWND
language:lua
return:(boolean:retval)
params:(HWND:hwnd)
description:
Checks, if a HWND-handler is a valid one.
Returns false in case of an error
PARAMETERS:
hwnd:the HWND-handler to check for
RETURNS:
retval:true, if running it was successful; false, if not
------
name:ultraschall.BrowseForOpenFiles
language:lua
return:(string:path),(integer:number_of_files),(array:filearray)
params:(string:windowTitle), (string:initialFolder), (string:initialFile), (string:extensionList), (boolean:allowMultiple)
description:
Opens a filechooser-dialog which optionally allows selection of multiple files.
Unlike Reaper's own GetUserFileNameForRead, this dialog allows giving non-existant files as well(for saving operations).
Returns nil in case of an error
PARAMETERS:
windowTitle:the title shown in the filechooser-dialog
initialFolder:the initial-folder opened in the filechooser-dialog
initialFile:the initial-file selected in the filechooser-dialog, good for giving default filenames
extensionList:a list of extensions that can be selected in the selection-list.
allowMultiple:true, allows selection of multiple files; false, only allows selection of single files
RETURNS:
path:the path, in which the selected file(s) lie; nil, in case of an error; "" if no file was selected
number_of_files:the number of files selected; 0, if no file was selected
filearray:an array with all the selected files
------
name:ultraschall.HasHWNDChildWindowNames
language:lua
return:(boolean:retval)
params:(HWND:hwnd), (string:childwindownames)
description:
Returns, whether the given HWND has childhwnds with a certain name in them. This is good for checking for valid Reaper-windows.
As gfx.init()-windows can have the same as Reaper's original-windows, this function gives you the chance for aditional checks.
gfx.init windows don't have child-hwnds and other applications probably have child-hwnds with different names.
returns false in case of an error
PARAMETERS:
hwnd:the HWND, whose child-hwnd-names you want to check
childwindownames:a string with the names of the child-HWNDs the parameter hwnd must have. It is a \0-separated string, means, you put \0 in between the child-Hwnd-names.
------
name:ultraschall.CloseReaScriptConsole
language:lua
return:(boolean:retval)
params:
description:
Closes the ReaConsole-window, if opened.
Returns false in case of an error
RETURNS:
retval:true, if there is a mute-point; false, if there isn't one
------
name:ultraschall.MB
language:lua
return:(integer:retval)
params:(string:msg), (optional string:title), (optional integer:type), (optional string:button1_caption), (optional string:button2_caption), (optional string:button3_caption)
description:
Shows Messagebox with user-clickable buttons. Works like reaper.MB() but unlike reaper.MB, this function accepts omitting some parameters for quicker use.
Important: This works only on Windows.
You can change the text in the buttons with button1_caption, button2_caption and button3_caption.
Returns -1 in case of an error
PARAMETERS:
msg:the message, that shall be shown in messagebox
title:the title of the messagebox
type:which buttons shall be shown in the messagebox, in that order
button1_caption:caption of the first button
button2_caption:caption of the second button
button3_caption:caption of the third button
------
name:ultraschall.GetTopmostHWND
language:lua
return:(HWND:topmost_hwnd),(integer:number_of_parent_hwnd),(table:all_parent_hwnds)
params:(HWND:hwnd)
description:
returns the topmost-parent hwnd of a hwnd, as sometimes, hwnds are children of a higher hwnd. It also returns the number of parent hwnds available and a list of all parent hwnds for this hwnd.
A hwnd is a window-handler, which contains all attributes of a certain window.
returns nil in case of an error
PARAMETERS:
hwnd:the HWND, whose topmost parent-HWND you want to have
RETURNS:
number_of_parent_hwnd:the number of parent hwnds, that are above the parameter hwnd
all_parent_hwnds:all available parent hwnds, above the parameter hwnd, including the topmost-hwnd
------
name:ultraschall.GetReaperWindowAttributes
language:lua
return:(integer:left),(integer:top),(integer:right),(integer:bottom),(boolean:active),(boolean:visible),(string:title),(integer:number_of_childhwnds),(table:childhwnds)
params:
description:
returns many attributes of the Reaper Main-window, like position, size, active, visibility, childwindows
A hwnd is a window-handler, which contains all attributes of a certain window.
returns nil in case of an error
RETURNS:
left:the left position of the Reaper-window in pixels
top:the top position of the Reaper-window in pixels
right:the right position of the Reaper-window in pixels
bottom:the bottom position of the Reaper-window in pixels
active:true, if the window is active(any child-hwnd of the Reaper-window has focus currently); false, if not
visible:true, Reaper-window is visible; false, Reaper-window is not visible
title:the current title of the Reaper-window
number_of_childhwnds:the number of available child-hwnds that the Reaper-window currently has
childhwnds:a table with all child-hwnds in the following format:
------
name:ultraschall.Windows_Find
language:lua
return:(integer:count_hwnds),(array:hwnd_array),(array:hwnd_adresses)
params:(string:title), (boolean:strict)
description:
Returns all Reaper-window-HWND-handler, with a given title. Can be further used with the JS\_Window\_functions of the JS-function-plugin.
Doesn't return IDE-windows! Use GetAllReaScriptIDEWindows to get them.
returns -1 in case of an error
------
name:ultraschall.GetAllReaScriptIDEWindows
language:lua
return:(integer:count_ide_hwnds),(array:ide_hwnd_array),(array:ide_titles)
params:
description:
Returns the hwnds and all titles of all Reaper-IDE-windows currently opened.
RETURNS:
count_ide_hwnds:the number of windows found
ide_hwnd_array:the hwnd-handler of all found windows
ide_titles:the titles of all found windows
------
name:ultraschall.GetReaScriptConsoleWindow
language:lua
return:(HWND:reascript_console_hwnd)
params:
description:
Returns the hwnd of the ReaScript-Console-window, if opened.
returns nil when ReaScript-console isn't opened
RETURNS:
reascript_console_hwnd:the window-handler to the ReaScript-console, if opened
------
name:ultraschall.GetHWND_ArrangeViewAndTimeLine
language:lua
return:(HWND:arrange_view),(HWND:timeline),(HWND:TrackControlPanel)
params:
description:
Returns the HWND-Reaper-Windowhandler for the tracklist- and timeline-area in the arrange-view
returns nil in case of an error. Please report such an error, which means, that you should use ultraschall.ShowLastErrorMessage() to show that error and report the information requested(fruitful bugreports lead to a handwritten postcard as reward :) )
RETURNS:
arrange_view:the HWND-window-handler for the tracklist-area of the arrangeview
timeline:the HWND-window-handler for the timeline/markerarea of the arrangeview
TrackControlPanel:the HWND-window-handler for the track-control-panel(TCP)(may not work anymore in an upcoming Reaper-release!)
------
name:ultraschall.GetVerticalScroll
language:lua
return:(integer:vertical_scroll_factor)
params:
description:
Gets the current vertical_scroll_value. The valuerange is dependent on the vertical zoom.
RETURNS:
vertical_scroll_factor:the vertical-scroll-factor
------
name:ultraschall.SetVerticalScroll
language:lua
return:(boolean:retval)
params:(integer:scrollposition)
description:
Sets the absolute vertical-scroll-factor.
The possible value-range depends on the vertical-zoom.
returns false in case of an error or if scrolling is impossible(e.g. zoomed out fully)
PARAMETERS:
scrollposition:the vertical scrolling-position
RETURNS:
retval:true, if setting was successful; false, if setting was unsuccessful
------
name:ultraschall.SetVerticalRelativeScroll
language:lua
return:(boolean:retval)
params:(integer:relative_scrollposition)
description:
Sets the vertical-scroll-factor, relative to it's current position.
The possible value-range depends on the vertical-zoom.
returns false in case of an error or if scrolling is impossible(e.g. zoomed out fully)
RETURNS:
retval:true, if setting was successful; false, if setting was unsuccessful
------
name:ultraschall.GetRenderToFileHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Render to File-dialog, if the window is opened.
returns nil if Render to File-dialog is closed
RETURNS:
hwnd:the window-handler of the Render to File-dialog
------
name:ultraschall.GetActionsHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Actions-dialog, if the window is opened.
returns nil if the Actions-dialog is closed
RETURNS:
hwnd:the window-handler of the Actions-dialog
------
name:ultraschall.GetVideoHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Video window, if the window is opened.
due API-limitations on Mac and Linux: if more than one window called "Video Window" is opened, it will return -1
I hope to find a workaround for that problem at some point...
returns nil if the Video Window is closed or can't be determined
RETURNS:
hwnd:the window-handler of the Video Window
------
name:ultraschall.GetRenderQueueHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Render-Queue-dialog, if the window is opened.
returns nil if the Render-Queue-dialog is closed
RETURNS:
hwnd:the window-handler of the Render-Queue-dialog
------
name:ultraschall.GetProjectSettingsHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Project Settings-dialog, if the window is opened.
returns nil if the Project-Settings-dialog is closed
RETURNS:
hwnd:the window-handler of the Project Settings-dialog
------
name:ultraschall.GetPreferencesHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Preferences-dialog, if the window is opened.
returns nil if the Preferences-dialog is closed
RETURNS:
hwnd:the window-handler of the Preferences-dialog
------
name:ultraschall.GetSaveLiveOutputToDiskHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the "Save live output to disk(bounce)"-dialog, if the window is opened.
returns nil if the "Save live output to disk(bounce)"-dialog is closed
RETURNS:
hwnd:the window-handler of the "Save live output to disk(bounce)"-dialog
------
name:ultraschall.GetConsolidateTracksHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Consolidate Tracks-dialog, if the window is opened.
returns nil if the Consolidate Tracks-dialog is closed
RETURNS:
hwnd:the window-handler of the Consolidate Tracks-dialog
------
name:ultraschall.GetExportProjectMIDIHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the "Export Project MIDI"-dialog, if the window is opened.
returns nil if the "Export Project MIDI"-dialog is closed
RETURNS:
hwnd:the window-handler of the "Export Project MIDI"-dialog
------
name:ultraschall.GetProjectDirectoryCleanupHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the "Project Directory Cleanup"-dialog, if the window is opened.
returns nil if the "Project Directory Cleanup"-dialog is closed
RETURNS:
hwnd:the window-handler of the "Project Directory Cleanup"-dialog
------
name:ultraschall.GetBatchFileItemConverterHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the "Batch File/Item Converter"-dialog, if the window is opened.
returns nil if the "Batch File/Item Converter"-dialog is closed
RETURNS:
hwnd:the window-handler of the "Batch File/Item Converter"-dialog
------
name:ultraschall.MoveChildWithinParentHWND
language:lua
return:(integer:newxpos),(integer:newypos),(integer:newrightpos),(integer:newbottompos),(integer:newrelativeleft),(integer:newrelativetop),(integer:newwidth),(integer:newheight)
params:(hwnd:parenthwnd), (hwnd:childhwnd), (boolean:relative), (integer:left), (integer:top), (integer:width), (integer:height)
description:
Moves a childhwnd within the coordinates of its parenthwnd.
Good for moving gui-elements around without having to deal with screen-coordinates.
You can decide, whether the new position shall be relative to its old position or absolute within the parenthwnd-position.
The parent-hwnd must not be necessarily the parenthwnd of the childhwnd, so you can move the childhwnd relative to other hwnds as well, but
keep in mind, that the childhwnd is only seeable within the boundaries of it's own parenthwnd!
Returns nil in case of an error
PARAMETERS:
parenthwnd:the parenthwnd of the childhwnd, within whose dimensions you want to move the childhwnd
childhwnd:the childhwnd, that you want to move
relative:true, new position will be relative to the old position; false, new position will be absolute within the boundaries of the parenthwnd
left:the new x-position of the childhwnd in pixels
top:the new y-position of the childhwnd in pixels
width:the new width of the childhwnd in pixels; when relative=true then 0 keeps the old width; when relative=false then 0 is width of 0 pixels
height:the new height of the childhwnd in pixels; when relative=true then 0 keeps the old height; when relative=false then 0 is height of 0 pixels
RETURNS:
newxpos:the new x-position on the screen in pixels
newypos:the new y-position on the screen in pixels
newrightpos:the new right-position on the screen in pixels
newbottompos:the new bottom-position on the screen in pixels
newwidth:the new width of the childhwnd in pixels
newheight:the new height of the childhwnd in pixels
------
name:ultraschall.GetChildSizeWithinParentHWND
language:lua
return:(integer:xpos),(integer:ypos),(integer:width),(integer:height)
params:(hwnd:parenthwnd), (hwnd:childhwnd)
description:
Returns the position, height and width of a childhwnd, relative to the position of parenthwnd
Returns nil in case of an error
PARAMETERS:
parenthwnd:the parenthwnd of the childhwnd, whose position will be the base for position-calculation of the childhwnd
childhwnd:the childhwnd, whose dimensions you want to get, relative to the position of the parenthwnd
RETURNS:
xpos:the x-position of the childhwnd relative to the position of the parenthwnd in pixels
ypos:the y-position of the childhwnd relative to the position of the parenthwnd in pixels
width:the width of the childhwnd in pixels
height:the height of the childhwnd in pixels
------
name:ultraschall.GetCheckboxState
language:lua
return:(boolean:retval)
params:(HWND:hwnd)
description:
Gets the checked-state of a checkbox-hwnd.
This function will not check, whether the hwnd is an actual checkbox!
Returns nil in case of an error
PARAMETERS:
hwnd:the hwnd-handler of the checkbox
RETURNS:
retval:true, checkbox is checked; false, checkbox isn't checked
------
name:ultraschall.SetCheckboxState
language:lua
return:(integer:retval)
params:(HWND:hwnd), (boolean:state)
description:
Sets the checked-state of a checkbox-hwnd.
This function will not check, whether the hwnd is an actual checkbox!
Returns nil in case of an error
PARAMETERS:
hwnd:the hwnd-handler of the checkbox
state:true, checkbox will be checked; false, checkbox will be unchecked
RETURNS:
retval:0, in case of success
------
name:ultraschall.GetRenderingToFileHWND
language:lua
return:(HWND:rendertofile_dialog)
params:
description:
Gets the HWND of the Rendering to File-dialog, which is displayed while Reaper is rendering.
returns nil in case of an error
RETURNS:
rendertofile_dialog:the HWND of the render to file-dialog; nil, in case of an error
------
name:ultraschall.ConvertScreen2ClientXCoordinate_ReaperWindow
language:lua
return:(integer:Xclientcoordinate)
params:(integer:Xscreencoordinate)
description:
Converts an x-screencoordinate into a x-coordinate within the Reaper-Main-Window.
Due to Api-limitations, if the Reaper-window is too small, the position might be wrong up to about 74 pixels!
returns -1 in case of error
PARAMETERS:
Xscreencoordinate:the screen-coordinate, you want to have converted to.
RETURNS:
Xclientcoordinate:coordinate within the main Reaper-window. Negative, if the coordinate is left of the edge of the window; -1, in case of error
------
name:ultraschall.ConvertClient2ScreenXCoordinate_ReaperWindow
language:lua
return:(integer:Xscreencoordinate)
params:(integer:Xclientcoordinate)
description:
Converts an x-clientcoordinate from within the main Reaper-window into a x-screencoordinate.
Due to Api-limitations, if the Reaper-window is too small, the position might be wrong up to about 74 pixels!
returns -1 in case of error
PARAMETERS:
Xclientcoordinate:the screen-coordinate, you want to have converted to. Negative, if left of the left edge of the main Reaper-window.
RETURNS:
Xscreencoordinate:coordinate within the screen.
------
name:ultraschall.SetReaperWindowToSize
language:lua
return:(integer:retval)
params:(integer:width), (integer:height)
description:
Sets the Reaper-Window to the size of w and h. The x and y-windowposition will be retained.
Returns -1 in case of error.
RETURNS:
retval:-1 in case of error
------
name:ultraschall.ConvertYCoordsMac2Win
language:lua
return:(integer:conv_ycoord)
params:(integer:ycoord), (optional integer:height)
description:
Converts the y-coordinate between Windows/Linux and MacOS-based systems.
Note: MacOS y-coordinates begin at the bottom of the screen, while Windows and Linux y-coordinates begin at the top.
With this function, you can convert between these two coordinate-systems
returns nil in case of error
PARAMETERS:
ycoord:the y-coordinate to convert in pixels
height:the height of the screen in pixels, which is the base for the conversion; nil, uses current screenheight
RETURNS:
conv_ycoord:the converted coordinate in pixels
------
name:ultraschall.GetMediaExplorerHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Media Explorer, if the window is opened.
returns nil if Media Explorer is closed
RETURNS:
hwnd:the window-handler of the Media Explorer
------
name:ultraschall.GetTimeByMouseXPosition
language:lua
return:(number:position)
params:(integer:xposition)
description:
Returns the projectposition at x-mouseposition.
Returns nil in case of an error
PARAMETERS:
xposition:the x-position in pixels, from which you would love to have the projectposition
RETURNS:
position:the projectposition at x-coordinate in seconds
------
name:ultraschall.ShowTrackInputMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (optional MediaTrack:MediaTrack), (optional HWND:HWNDParent)
description:
Opens a TrackInput-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
MediaTrack:the MediaTrack, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowTrackPanelMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (optional MediaTrack:MediaTrack), (optional HWND:HWNDParent)
description:
Opens a TrackPanel-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
MediaTrack:the MediaTrack, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowTrackAreaMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (optional HWND:HWNDParent)
description:
Opens a TrackArea-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowTrackRoutingMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (optional MediaTrack:MediaTrack), (optional HWND:HWNDParent)
description:
Opens a TrackRouting-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
MediaTrack:the MediaTrack, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowRulerMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (optional HWND:HWNDParent)
description:
Opens a Ruler-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowMediaItemMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (optional MediaItem:MediaItem), (optional HWND:HWNDParent)
description:
Opens a MediaItem-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
MediaItem:the MediaItem, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowEnvelopeMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (optional TrackEnvelope:TrackEnvelope), (optional HWND:HWNDParent)
description:
Opens a Track/TakeEnvelope-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
TrackEnvelope:the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowEnvelopePointMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (integer:Pointidx), (optional TrackEnvelope:TrackEnvelope), (optional HWND:HWNDParent)
description:
Opens a Track/TakeEnvelope-Point-context menu
Returns false in case of error.
PARAMETERS:
x:the envelope-point, which shall be influenced by the context-menu
y:y position of the context-menu in pixels
Pointidx:the envelope-point, which shall be influenced by the context-menu
TrackEnvelope:the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowEnvelopePointMenu_AutomationItem
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (integer:Pointidx), (integer:AutomationIDX), (optional TrackEnvelope:TrackEnvelope), (optional HWND:HWNDParent)
description:
Opens a Track/TakeEnvelope-Point-context menu for AutomationItems
Returns false in case of error.
PARAMETERS:
x:the envelope-point, which shall be influenced by the context-menu
y:y position of the context-menu in pixels
Pointidx:the envelope-point, which shall be influenced by the context-menu
AutomationIDX:the automation item-id within this Envelope, beginning with 1 for the first
TrackEnvelope:the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.ShowAutomationItemMenu
language:lua
return:(boolean:retval)
params:(integer:x), (integer:y), (integer:AutomationIDX), (optional TrackEnvelope:TrackEnvelope), (optional HWND:HWNDParent)
description:
Opens an AutomationItem-context menu
Returns false in case of error.
PARAMETERS:
x:x position of the context-menu in pixels
y:y position of the context-menu in pixels
AutomationIDX:the automation item-id within this Envelope which shall be influenced by the menu-selection of the opened context-menu, beginning with 1 for the first
TrackEnvelope:the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope
HWNDParent:a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window
RETURNS:
retval:true, opening the menu worked; false, there was an error
------
name:ultraschall.GetSaveProjectAsHWND
language:lua
return:(HWND:hwnd)
params:
description:
returns the HWND of the Save As-dialog, if the window is opened.
returns nil if the Save As-dialog is closed
RETURNS:
hwnd:the window-handler of the Save As-dialog
------
name:ultraschall.SetHelpDisplayMode
language:lua
return:(boolean:retval)
params:(integer:helpcontent), (boolean:mouseediting)
description:
sets the help-display-mode, as shown in the area beneath the track control panels.
returns false in case of an error
PARAMETERS:
helpcontent:0, No information display  
mouseediting:true, show mouse editing-help; false, don't show mouse editing-help
RETURNS:
retval:true, setting was successful; false, setting was unsuccessful
------
name:ultraschall.GetHelpDisplayMode
language:lua
return:(integer:helpcontent),(boolean:mouseediting)
params:
description:
gets the current help-display-mode, as shown in the area beneath the track control panels.
RETURNS:
helpcontent:0, No information display  
mouseediting:true, show mouse editing-help; false, don't show mouse editing-help
------
name:ultraschall.WiringDiagram_SetOptions
language:lua
return:(boolean:retval)
params:(boolean:show_send_wires), (boolean:show_routing_controls), (boolean:show_hardware_outputs)
description:
sets the current wiring-display-options
PARAMETERS:
show_send_wires:only show send wires on track mouseover; true, it's set; false, it's unset
show_routing_controls:show routing controls when creating send/hardware output; true, it's set; false, it's unset
show_hardware_outputs:only show hardware output/input wires on track mouseover; true, it's set; false, it's unset
RETURNS:
retval:true, setting was successful; false, setting was not successful
------
name:ultraschall.WiringDiagram_GetOptions
language:lua
return:(boolean:show_send_wires),(boolean:show_routing_controls),(boolean:show_hardware_outputs)
params:
description:
gets the current wiring-display-options
RETURNS:
show_send_wires:only show send wires on track mouseover; true, it's set; false, it's unset
show_routing_controls:show routing controls when creating send/hardware output; true, it's set; false, it's unset
show_hardware_outputs:only show hardware output/input wires on track mouseover; true, it's set; false, it's unset
------
name:ultraschall.GetTCPWidth
language:lua
return:(integer:width)
params:
description:
Returns the current width of the TrackControlPanel.
RETURNS:
width:the width of the TCP
------
name:ultraschall.GetRenderCFG_Settings_FLAC
language:lua
return:(integer:encoding_depth),(integer:compression)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for flac.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
encoding_depth:the encoding-depth of the flac in bits(16 to 24)
compression:the data-compression speed from fastest and worst efficiency(0) to slowest but best efficiency(8); default is 5
------
name:ultraschall.GetRenderCFG_Settings_AIFF
language:lua
return:(integer:bitdepth),(boolean:EmbedBeatLength)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for aiff.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
bitdepth:the bitdepth of the AIFF-file(8, 16, 24, 32)
EmbedBeatLength:Embed beat length if exact-checkbox; true, checked; false, unchecked
------
name:ultraschall.GetRenderCFG_Settings_AudioCD
language:lua
return:(integer:trackmode),(boolean:use_markers_hashes),(integer:leadin_silence_tracks),(integer:leadin_silence_disc),(boolean:burn_cd_after_render)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for AudioCD.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
trackmode:the trackmode
use_markers_hashes:Only use markers starting with #-checkbox; only available when trackmode=0, otherwise it will be ignored
leadin_silence_tracks:the leadin-silence for tracks in milliseconds(0 to 2147483647)
leadin_silence_disc:the leadin-silence for discs in milliseconds(0 to 2147483647)
burn_cd_after_render:burn cd image after render-checkbox
------
name:ultraschall.GetRenderCFG_Settings_MP3
language:lua
return:(integer:Mode),(integer:enc_quality),(integer:vbr_quality),(integer:abr_bitrate),(integer:cbr_bitrate),(boolean:no_joint_stereo),(boolean:write_replay_gain)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MP3.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
Mode:the encoding-mode
enc_quality:the encoding-quality
vbr_quality:target-quality for VBR; 0(best 100%) to 9(worst 10%); 4, when Mode is set to  ABR, CBR or Maximum bitrate/quality
abr_bitrate:the average bitrate for ABR in kbps
cbr_bitrate:the bitrate for CBR in kbps
no_joint_stereo:the do not allow joint stereo-checkbox
write_replay_gain:the write ReplayGain tag-checkbox
------
name:ultraschall.GetRenderCFG_Settings_MP3MaxQuality
language:lua
return:(integer:retval),(boolean:write_replay_gain)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MP3 with maximum quality-settings.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
retval:0, the renderstring is a valid MP3-MaxQuality-setting; -1, it is not a valid renderstring for MP3-MaxQuality
write_replay_gain:the write ReplayGain tag-checkbox
------
name:ultraschall.GetRenderCFG_Settings_MP3CBR
language:lua
return:(integer:cbr_bitrate),(integer:enc_quality),(boolean:no_joint_stereo),(boolean:write_replay_gain)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MP3 CBR.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
cbr_bitrate:the bitrate for CBR in kbps
enc_quality:the encoding-quality
no_joint_stereo:the do not allow joint stereo-checkbox
write_replay_gain:the write ReplayGain tag-checkbox
------
name:ultraschall.GetRenderCFG_Settings_MP3VBR
language:lua
return:(integer:vbr_bitrate),(integer:enc_quality),(boolean:no_joint_stereo),(boolean:write_replay_gain)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MP3 VBR.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
enc_quality:the encoding-quality
no_joint_stereo:the do not allow joint stereo-checkbox
write_replay_gain:the write ReplayGain tag-checkbox
------
name:ultraschall.GetRenderCFG_Settings_MP3ABR
language:lua
return:(integer:bitrate),(integer:enc_quality),(boolean:no_joint_stereo),(boolean:write_replay_gain)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MP3 ABR.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
bitrate:  the encoding quality for the mp3
enc_quality:the encoding-quality
no_joint_stereo:the do not allow joint stereo-checkbox
write_replay_gain:the write ReplayGain tag-checkbox
------
name:ultraschall.GetRenderCFG_Settings_OGG
language:lua
return:(integer:Mode),(integer:VBR_quality),(integer:CBR_KBPS),(integer:ABR_KBPS),(integer:ABR_KBPS_MIN),(integer:ABR_KBPS_MAX)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for OGG.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
Mode:the mode for the ogg-file; 0, VBR; 1, CBR; 2, ABR 
VBR_quality:the quality for VBR-mode; a floating-value between 0 and 1
CBR_KBPS:the bitrate for CBR-mode; 0 to 4294967295 
ABR_KBPS:the maximum bitrate for ABR-mode; 0 to 4294967295
ABR_KBPS_MIN:the minimum bitrate for ABR-mode; 0 to 4294967295
ABR_KBPS_MAX:the maximum bitrate for ABR-mode; 0 to 4294967295
------
name:ultraschall.GetRenderCFG_Settings_OPUS
language:lua
return:(integer:Mode),(integer:Bitrate),(integer:Complexity),(boolean:channel_audio),(boolean:per_channel)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for Opus.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
Mode:the Mode for the Opus-file; 0, VBR; 1, CVBR; 2, HARDCBR 
Bitrate:the kbps of the opus-file; between 1 and 256 
Complexity:the complexity-setting between 0(lowest quality) and 10(highest quality, slow encoding) 
channel_audio:true, Encode 3-8 channel audio as 2.1-7.1(LFE) -> checked; false, DON'T Encode 3-8 channel audio as 2.1-7.1(LFE) -> unchecked
per_channel:true, kbps per channel (6-256); false, kbps combined for all channels 
------
name:ultraschall.GetRenderCFG_Settings_GIF
language:lua
return:(integer:Width),(integer:Height),(number:MaxFramerate),(boolean:PreserveAspectRatio),(integer:IgnoreLowBits),(boolean:Transparency)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for Gif.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
Width:the width of the gif in pixels; 1 to 2147483647 pixels
Height:the height of the gif in pixels; 1 to 2147483647 pixels
MaxFramerate:the maximum framerate of the gif
PreserveAspectRatio:Preserve aspect ratio (black bars, if necessary)-checkbox; true, checked; false, unchecked
IgnoreLowBits:Ignore changed in low bits of color (0-7, 0 = full quality)-inputbox
Transparency:Encode transparency (bad for normal video, good for some things possibly)-checkbox; true, checked; false, unchecked
------
name:ultraschall.GetRenderCFG_Settings_LCF
language:lua
return:(integer:Width),(integer:Height),(number:MaxFramerate),(boolean:PreserveAspectRatio),(string:TweakSettings)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for LCF.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
Width:the width of the gif in pixels; 1 to 2147483647 pixels
Height:the height of the gif in pixels; 1 to 2147483647 pixels
MaxFramerate:the maximum framerate of the gif
PreserveAspectRatio:Preserve aspect ratio (black bars, if necessary)-checkbox; true, checked; false, unchecked
TweakSettings:the tweak-settings for LCF, default is "t20 x128 y16"
------
name:ultraschall.GetRenderCFG_Settings_WAV
language:lua
return:(integer:BitDepth),(integer:LargeFiles),(integer:BWFChunk),(integer:IncludeMarkers),(boolean:EmbedProjectTempo)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for WAV.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
BitDepth:the bitdepth of the WAV-file
LargeFiles:how shall Reaper treat large WAV-files
BWFChunk:The "Write BWF ('bext') chunk" and "Include project filename in BWF data" - checkboxes
IncludeMarkers: The include markerlist-dropdownlist
EmbedProjectTempo:Embed project tempo (use with care)-checkbox; true, checked; false, unchecked 
------
name:ultraschall.GetRenderCFG_Settings_WAVPACK
language:lua
return:(integer:Mode),(integer:Bitdepth),(integer:Writemarkers),(boolean:WriteBWFChunk),(boolean:IncludeFilenameBWF)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for WAVPACK.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
Mode:0, Normal; 1, Fast; 2, High; 3, Very High(slowest) 
Bitdepth:  the bitdepth of the WAVPACK-file
Writemarkers:Write markers as cues-checkboxes
WriteBWFChunk:the Write BWF chunk-checkbox; true, checked; false, unchecked 
IncludeFilenameBWF:the include project filename in BWF data-checkbox; true, checked; false, unchecked 
------
name:ultraschall.GetRenderCFG_Settings_WebMVideo
language:lua
return:(integer:VIDKBPS),(integer:AUDKBPS),(integer:WIDTH),(integer:HEIGHT),(integer:FPS),(boolean:AspectRatio)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for WEBM_Video.
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
VIDKBPS: the video-bitrate of the video in kbps
AUDKBPS: the audio-bitrate of the video in kbps
WIDTH:the width of the video in pixels
HEIGHT: the height of the video in pixels
FPS:the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
------
name:ultraschall.GetRenderCFG_Settings_MKV_Video
language:lua
return:(integer:VIDEO_CODEC),(integer:MJPEG_quality),(integer:AUDIO_CODEC),(integer:WIDTH),(integer:HEIGHT),(integer:FPS),(boolean:AspectRatio)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MKV-Video.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
VIDEO_CODEC:the used VideoCodec for the MKV-video
MJPEG_quality:the MJPEG-quality of the MKV-video, if VIDEO_CODEC=2
AUDIO_CODEC:the audio-codec of the MKV-video
WIDTH:the width of the video in pixels
HEIGHT:the height of the video in pixels
FPS:the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
------
name:ultraschall.GetRenderCFG_Settings_AVI_Video
language:lua
return:(integer:VIDEO_CODEC),(integer:MJPEG_quality),(integer:AUDIO_CODEC),(integer:WIDTH),(integer:HEIGHT),(integer:FPS),(boolean:AspectRatio)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for AVI_Video.
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
VIDEO_CODEC:the used VideoCodec for the AVI-video
MJPEG_quality:the MJPEG-quality of the AVI-video, if VIDEO_CODEC=1
AUDIO_CODEC:the audio-codec of the avi-video
WIDTH:the width of the video in pixels
HEIGHT:the height of the video in pixels
FPS:the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
------
name:ultraschall.GetRenderCFG_Settings_QTMOVMP4_Video
language:lua
return:(integer:MJPEG_quality),(integer:AUDIO_CODEC),(integer:WIDTH),(integer:HEIGHT),(integer:FPS),(boolean:AspectRatio)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for QT/MOV/MP4-video.
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
MJPEG_quality:the MJPEG-quality of the video
AUDIO_CODEC:the audio-codec of the video
WIDTH:the width of the video in pixels
HEIGHT:the height of the video in pixels
FPS:the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
------
name:ultraschall.GetRenderCFG_Settings_DDP
language:lua
return:(boolean:retval)
params:(string:rendercfg)
description:
Returns, if a renderstring is a valid DDP-render-string
You can get this from the current RENDER\_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
retval:true, if renderstring is of the format DDP; false, if not
------
name:ultraschall.CreateRenderCFG_GIF
language:lua
return:(string:render_cfg_string)
params:(integer:Width), (integer:Height), (number:MaxFPS), (boolean:AspectRatio), (integer:IgnoreLowBits), (boolean:EncodeTransparency)
description:
Creates the render-cfg-string for the GIF-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
Width:the width of the gif in pixels; 1 to 2147483647
Height:the height of the gif in pixels; 1 to 2147483647 
MaxFPS:the maximum framerate of the gif in fps; 0.01 to 2000.01 supported by the Ultraschall API
AspectRatio:Preserve aspect ratio-checkbox; true, checked; false, unchecked
IgnoreLowBits:Ignore changes in low bits of color-inputbox, 0-7
EncodeTransparency:Encode transparency-checkbox; true, checked; false, unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected GIF-settings
------
name:ultraschall.CreateRenderCFG_LCF
language:lua
return:(string:render_cfg_string)
params:(integer:Width), (integer:Height), (number:MaxFPS), (boolean:AspectRatio), (optional string:LCFoptionstweak)
description:
Creates the render-cfg-string for the LCF-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
Width:the width of the lcf in pixels; 1 to 2147483647
Height:the height of the lcf in pixels; 1 to 2147483647 
MaxFPS:the maximum framerate of the lcf in fps; 0.01 to 2000.01 supported by the Ultraschall API
AspectRatio:Preserve aspect ratio-checkbox; true, checked; false, unchecked
LCFoptionstweak:a 64bytes string, which can hold tweak-settings for lcf; default is "t20 x128 y16"; this function does not check for these options to be valid!
RETURNS:
render_cfg_string:the render-cfg-string for the selected LCF-settings
------
name:ultraschall.CreateRenderCFG_WebMVideo
language:lua
return:(string:render_cfg_string)
params:(integer:VIDKBPS), (integer:AUDKBPS), (integer:WIDTH), (integer:HEIGHT), (integer:FPS), (boolean:AspectRatio)
description:
Returns the render-cfg-string for the WebM-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
VIDKBPS:the video-bitrate of the video in kbps; 1 to 2147483647
AUDKBPS:the audio-bitrate of the video in kbps; 1 to 2147483647
WIDTH:the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
HEIGHT:the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
FPS:the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio
RETURNS:
render_cfg_string:the render-cfg-string for the selected WebM-Video-settings
------
name:ultraschall.CreateRenderCFG_MKV_Video
language:lua
return:(string:render_cfg_string)
params:(integer:VideoCodec), (integer:MJPEG_quality), (integer:AudioCodec), (integer:WIDTH), (integer:HEIGHT), (integer:FPS), (boolean:AspectRatio)
description:
Returns the render-cfg-string for the MKV-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
VideoCodec:the videocodec used for the video;
MJPEG_quality:set here the MJPEG-quality in percent, when VideoCodec=3; otherwise just set it to 0
AudioCodec:the audiocodec to use for the video
WIDTH:the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
HEIGHT:the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
FPS:the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio
RETURNS:
render_cfg_string:the render-cfg-string for the selected MKV-Video-settings
------
name:ultraschall.CreateRenderCFG_QTMOVMP4_Video
language:lua
return:(string:render_cfg_string)
params:(integer:VideoCodec), (integer:MJPEG_quality), (integer:AudioCodec), (integer:WIDTH), (integer:HEIGHT), (integer:FPS), (boolean:AspectRatio)
description:
Returns the render-cfg-string for the QT/MOV/MP4-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
VideoCodec:the videocodec used for the video;
MJPEG_quality:set here the MJPEG-quality in percent
AudioCodec:the audiocodec to use for the video
WIDTH:the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
HEIGHT:the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
FPS:the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio
RETURNS:
render_cfg_string:the render-cfg-string for the selected QT/MOV/MP4-Video-settings
------
name:ultraschall.CreateRenderCFG_AVI_Video
language:lua
return:(string:render_cfg_string)
params:(integer:VideoCodec), (integer:MJPEG_quality), (integer:AudioCodec), (integer:WIDTH), (integer:HEIGHT), (integer:FPS), (boolean:AspectRatio)
description:
Returns the render-cfg-string for the AVI-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
VideoCodec:the videocodec used for the video;
MJPEG_quality:set here the MJPEG-quality in percent when VideoCodec=2, otherwise just set it to 0
AudioCodec:the audiocodec to use for the video
WIDTH:the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
HEIGHT:the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
FPS:the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio
RETURNS:
render_cfg_string:the render-cfg-string for the selected QT/MOV/MP4-Video-settings
------
name:ultraschall.GetRenderCFG_Settings_MP4Mac_Video
language:lua
return:(boolean:Stream),(integer:VIDKBPS),(integer:AUDKBPS),(integer:WIDTH),(integer:HEIGHT),(integer:FPS),(boolean:AspectRatio)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MP4 for Mac_Video(stream optimised and non-stream optimised).
This is Mac-OS only!
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
Stream:true, mp4-video would be stream-optimized; false, mp4-video would not be stream-optimized
VIDKBPS: the video-bitrate of the video in kbps
AUDKBPS: the audio-bitrate of the video in kbps
WIDTH:the width of the video in pixels
HEIGHT: the height of the video in pixels
FPS:the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
------
name:ultraschall.GetRenderCFG_Settings_MOVMac_Video
language:lua
return:(integer:VideoCodec),(integer:VIDKBPS),(integer:MJPEG_quality),(integer:AudioCodec),(integer:AUDKBPS),(integer:WIDTH),(integer:HEIGHT),(integer:FPS),(boolean:AspectRatio)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for MOV for Mac_Video.
This is MacOS-only.
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
VideoCodec:the videocodec used for this setting
VIDKBPS: the video-bitrate of the video in kbps
MJPEG_quality:when VideoCodec==3, then MJPEG is used; given in percent
AudioCodec:the audiocodec used 
AUDKBPS: the audio-bitrate of the video in kbps
WIDTH:the width of the video in pixels
HEIGHT: the height of the video in pixels
FPS:the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
------
name:ultraschall.GetRenderCFG_Settings_M4AMac
language:lua
return:(integer:AUDKBPS),(integer:WIDTH),(integer:HEIGHT),(integer:FPS),(boolean:AspectRatio)
params:(string:rendercfg)
description:
Returns the settings stored in a render-cfg-string for M4A for Mac_Video(even though this stores only audio-files).
This is MacOS-only.
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns -1 in case of an error
RETURNS:
AUDKBPS: the audio-bitrate of the audio in kbps
WIDTH:the width of the audio in pixels
HEIGHT: the height of the audio in pixels
FPS:the fps of the audio; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
------
name:ultraschall.CreateRenderCFG_MP4MAC_Video
language:lua
return:(string:render_cfg_string)
params:(boolean:stream), (integer:VIDKBPS), (integer:AUDKBPS), (integer:WIDTH), (integer:HEIGHT), (integer:FPS), (boolean:AspectRatio)
description:
Returns the render-cfg-string for the MP4-Mac-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Only available on MacOS!
Returns nil in case of an error
PARAMETERS:
VIDKBPS:the video-bitrate for the video; 0 to 2147483647kbps
AUDKBPS:the audio-bitrate for the video; 0 to 2147483647kbps
WIDTH:the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
HEIGHT:the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
FPS:the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio
RETURNS:
render_cfg_string:the render-cfg-string for the selected MP4-Mac-Video-settings
------
name:ultraschall.CreateRenderCFG_M4AMAC
language:lua
return:(string:render_cfg_string)
params:(integer:AUDKBPS), (integer:WIDTH), (integer:HEIGHT), (integer:FPS), (boolean:AspectRatio)
description:
Returns the render-cfg-string for the M4A-Mac-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Only available on MacOS!
Returns nil in case of an error
PARAMETERS:
AUDKBPS:the audio-bitrate for the video; 0 to 2147483647 kbps
WIDTH:the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
HEIGHT:the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!
FPS:the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio
RETURNS:
render_cfg_string:the render-cfg-string for the selected M4A-Mac-settings
------
name:ultraschall.CreateRenderCFG_MOVMAC_Video
language:lua
return:(string:render_cfg_string)
params:(integer:VideoCodec), (integer:VIDKBPS), (integer:MJPEG_quality), (integer:AudioCodec), (integer:AUDKBPS), (integer:WIDTH), (integer:HEIGHT), (integer:FPS), (boolean:AspectRatio)
description:
Returns the render-cfg-string for the MOV-Mac-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Only available on MacOS!
Returns nil in case of an error
PARAMETERS:
VideoCodec:the videocodec used for this setting
VIDKBPS: the video-bitrate of the video in kbps
MJPEG_quality:when VideoCodec==3, then MJPEG is used; given in percent
AudioCodec:the audiocodec used 
AUDKBPS: the audio-bitrate of the video in kbps
WIDTH:the width of the video in pixels
HEIGHT: the height of the video in pixels
FPS:the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps
AspectRatio:the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio 
RETURNS:
render_cfg_string:the render-cfg-string for the selected MP4-Mac-Video-settings
------
name:ultraschall.GetRenderTable_Project
language:lua
return:(table:RenderTable)
params:
description:
Returns all stored render-settings for the current project, as a handy table.
RenderTable["AddToProj"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked
RenderTable["Bounds"] - 0, Custom time range; 1, Entire project; 2, Time selection; 3, Project regions; 4, Selected Media Items(in combination with Source 32); 5, Selected regions
RenderTable["Channels"] - the number of channels in the rendered file; 1, mono; 2, stereo; higher, the number of channels
RenderTable["CloseAfterRender"] - true, closes rendering to file-dialog after render; false, doesn't close it
RenderTable["Dither"] - &1, dither master mix; &2, noise shaping master mix; &4, dither stems; &8, dither noise shaping stems
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides; true, checked; false, unchecked
RenderTable["Endposition"] - the endposition of the rendering selection in seconds
RenderTable["MultiChannelFiles"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked
RenderTable["OfflineOnlineRendering"] - Offline/Online rendering-dropdownlist; 0, Full-speed Offline; 1, 1x Offline; 2, Online Render; 3, Online Render(Idle); 4, Offline Render(Idle)
RenderTable["OnlyMonoMedia"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked
RenderTable["RenderFile"] - the contents of the Directory-inputbox of the Render to File-dialog
RenderTable["RenderPattern"] - the render pattern as input into the File name-inputbox of the Render to File-dialog
RenderTable["RenderQueueDelay"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked
RenderTable["RenderQueueDelaySeconds"] - the amount of seconds for the render-queue-delay
RenderTable["RenderResample"] - Resample mode-dropdownlist; 0, Medium (64pt Sinc); 1, Low (Linear Interpolation); 2, Lowest (Point Sampling); 3, Good (192pt Sinc); 4, Better (348 pt Sinc); 5, Fast (IIR + Linear Interpolation); 6, Fast (IIRx2 + Linear Interpolation); 7, Fast (16pt Sinc); 8, HQ (512 pt); 9, Extreme HQ(768pt HQ Sinc)
RenderTable["RenderString"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string
RenderTable["RenderString2"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string
RenderTable["RenderTable"]=true - signals, this is a valid render-table
RenderTable["SampleRate"] - the samplerate of the rendered file(s)
RenderTable["SaveCopyOfProject"] - the "Save copy of project to outfile.wav.RPP"-checkbox; true, checked; false, unchecked
RenderTable["SilentlyIncrementFilename"] - Silently increment filenames to avoid overwriting-checkbox; true, checked; false, unchecked
RenderTable["Source"] - 0, Master mix; 1, Master mix + stems; 3, Stems (selected tracks); 8, Region render matrix; 16, Tracks with only Mono-Media to Mono Files; 32, Selected media items; 64, selected media items via master; 128, selected tracks via master
RenderTable["Startposition"] - the startposition of the rendering selection in seconds
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked? &1, custom time bounds; &2, entire project; &4, time selection; &8, all project regions; &16, selected media items; &32, selected project regions
RenderTable["TailMS"] - the amount of milliseconds of the tail
Returns nil in case of an error
RETURNS:
RenderTable:a table with all of the current project's render-settings
------
name:ultraschall.GetRenderTable_ProjectFile
language:lua
return:(table:RenderTable)
params:(string:projectfilename_with_path)
description:
Returns all stored render-settings in a projectfile, as a handy table.
RenderTable["AddToProj"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked
RenderTable["Bounds"] - 0, Custom time range; 1, Entire project; 2, Time selection; 3, Project regions; 4, Selected Media Items(in combination with Source 32); 5, Selected regions
RenderTable["Channels"] - the number of channels in the rendered file; 1, mono; 2, stereo; higher, the number of channels
RenderTable["CloseAfterRender"] - close rendering to file-dialog after render; always true, as this isn't stored in projectfiles
RenderTable["Dither"] - &1, dither master mix; &2, noise shaping master mix; &4, dither stems; &8, dither noise shaping stems
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides; true, checked; false, unchecked
RenderTable["Endposition"] - the endposition of the rendering selection in seconds
RenderTable["MultiChannelFiles"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked
RenderTable["OfflineOnlineRendering"] - Offline/Online rendering-dropdownlist; 0, Full-speed Offline; 1, 1x Offline; 2, Online Render; 3, Online Render(Idle); 4, Offline Render(Idle)
RenderTable["OnlyMonoMedia"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked
RenderTable["RenderFile"] - the contents of the Directory-inputbox of the Render to File-dialog
RenderTable["RenderPattern"] - the render pattern as input into the File name-inputbox of the Render to File-dialog
RenderTable["RenderQueueDelay"] - Delay queued render to allow samples to load-checkbox; true, checkbox is checked; false, checkbox is unchecked
RenderTable["RenderQueueDelaySeconds"] - the amount of seconds for the render-queue-delay
RenderTable["RenderResample"] - Resample mode-dropdownlist; 0, Medium (64pt Sinc); 1, Low (Linear Interpolation); 2, Lowest (Point Sampling); 3, Good (192pt Sinc); 4, Better (348 pt Sinc); 5, Fast (IIR + Linear Interpolation); 6, Fast (IIRx2 + Linear Interpolation); 7, Fast (16pt Sinc); 8, HQ (512 pt); 9, Extreme HQ(768pt HQ Sinc)
RenderTable["RenderString"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string
RenderTable["RenderString2"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string
RenderTable["RenderTable"]=true - signals, this is a valid render-table
RenderTable["SampleRate"] - the samplerate of the rendered file(s)
RenderTable["SaveCopyOfProject"] - the "Save copy of project to outfile.wav.RPP"-checkbox; always true(checked), as this isn't stored in projectfiles
RenderTable["SilentlyIncrementFilename"] - Silently increment filenames to avoid overwriting-checkbox; always false, as this is not stored in projectfiles
RenderTable["Source"] - 0, Master mix; 1, Master mix + stems; 3, Stems (selected tracks); 8, Region render matrix; 16, Tracks with only Mono-Media to Mono Files; 32, Selected media items; 64, selected media items via master; 128, selected tracks via master
RenderTable["Startposition"] - the startposition of the rendering selection in seconds
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked? &1, custom time bounds; &2, entire project; &4, time selection; &8, all project regions; &16, selected media items; &32, selected project regions
RenderTable["TailMS"] - the amount of milliseconds of the tail
Returns nil in case of an error
PARAMETERS:
projectfilename_with_path:the projectfile, whose render-settings you want to get
RETURNS:
RenderTable:a table with all of the current project's render-settings
------
name:ultraschall.GetOutputFormat_RenderCfg
language:lua
return:(string:outputformat),(string:renderstring)
params:(string:Renderstring), (optional ReaProject:ReaProject)
description:
Returns the output-format set in a render-cfg-string, as stored in rpp-files and the render-presets file reaper-render.ini
Returns nil in case of an error
PARAMETERS:
Renderstring:the render-cfg-string from a rpp-projectfile or the reaper-render.ini
ReaProject:a ReaProject, whose renderformat you want to know; only available, when Renderstring=nil
RETURNS:
outputformat:the outputformat, set in the render-cfg-string
renderstring:the renderstringm which is either the renderstring you've passed or the one from the ReaProject you passed as second parameter
------
name:ultraschall.CreateRenderCFG_Opus
language:lua
return:(string:render_cfg_string)
params:(integer:Mode), (integer:Kbps), (integer:Complexity), (optional boolean:channel_audio), (optional boolean:per_channel)
description:
Creates the render-cfg-string for the Opus-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
Mode:the Mode for the Opus-file; 0, VBR; 1, CVBR; 2, HARDCBR
Kbps:the kbps of the opus-file; Ultraschall-Api supports between 1 and 10256 
Complexity:the complexity-setting between 0(lowest quality) and 10(highest quality, slow encoding)
channel_audio:true, Encode 3-8 channel audio as 2.1-7.1(LFE); false, DON'T Encode 3-8 channel audio as 2.1-7.1(LFE) 
per_channel:true, kbps per channel (6-256); false, kbps combined for all channels 
RETURNS:
render_cfg_string:the render-cfg-string for the selected Opus-settings
------
name:ultraschall.CreateRenderCFG_OGG
language:lua
return:(string:render_cfg_string)
params:(integer:Mode), (number:VBR_Quality), (integer:CBR_KBPS), (integer:ABR_KBPS), (integer:ABR_KBPS_MIN), (integer:ABR_KBPS_MAX)
description:
Returns the render-cfg-string for the OGG-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
For all mode-settings that you don't need(kbps or quality), you can safely set them to 1.
Returns nil in case of an error
PARAMETERS:
Mode:the mode for the ogg-file; 0, VBR; 1, CBR; 2, ABR
VBR_Quality:the quality for VBR-mode; a floating-value between 0 and 1
CBR_KBPS:the bitrate for CBR-mode; 0 to 2048
ABR_KBPS:the maximum-bitrate for ABR-mode; 0 to 2048
ABR_KBPS_MIN:the minimum-bitrate for ABR-mode; 0 to 2048
ABR_KBPS_MAX:the maximum-bitrate for ABR-mode; 0 to 2048
RETURNS:
render_cfg_string:the render-cfg-string for the selected OGG-settings
------
name:ultraschall.CreateRenderCFG_DDP
language:lua
return:(string:render_cfg_string)
params:
description:
Returns the render-cfg-string for the DDP-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
RETURNS:
render_cfg_string:the render-cfg-string for the selected DDP-settings
------
name:ultraschall.CreateRenderCFG_FLAC
language:lua
return:(string:render_cfg_string)
params:(integer:Bitrate), (integer:EncSpeed)
description:
Returns the render-cfg-string for the FLAC-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
Bitrate:the bitrate of the flac-file; 
EncSpeed:the encoding speed; 0(fastest) to 8(slowest); 5(default)
RETURNS:
render_cfg_string:the render-cfg-string for the selected FLAC-settings
------
name:ultraschall.CreateRenderCFG_WAVPACK
language:lua
return:(string:render_cfg_string)
params:(integer:Mode), (integer:Bitdepth), (integer:Writemarkers), (boolean:WriteBWFChunk), (boolean:IncludeFilenameBWF)
description:
Returns the render-cfg-string for the WAVPACK-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
Mode:0, Normal; 1, Fast; 2, High; 3, Very High(slowest)
Bitdepth:the bitdepth of the WAVPACK-file
Writemarkers:Write markers as cues-checkboxes
WriteBWFChunk:the Write BWF chunk-checkbox; true, checked; false, unchecked
IncludeFilenameBWF:the include project filename in BWF data-checkbox; true, checked; false, unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected WAVPACK-settings
------
name:ultraschall.IsValidRenderTable
language:lua
return:(boolean:retval)
params:(RenderTable:RenderTable)
description:
returns, if the table RenderTable is a valid RenderTable.
Returns false in case of an error; the error-message contains the faulty table-entry.
PARAMETERS:
RenderTable:the table, that you want to check for validity
RETURNS:
retval:true, RenderTable is a valid RenderTable; false, it is not a valid RenderTable
------
name:ultraschall.ApplyRenderTable_Project
language:lua
return:(boolean:retval)
params:(RenderTable:RenderTable), (optional boolean:apply_rendercfg_string)
description:
Sets all stored render-settings from a RenderTable as the current project-settings.
Expected table is of the following structure:
RenderTable["AddToProj"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked
RenderTable["Bounds"] - 0, Custom time range; 1, Entire project; 2, Time selection; 3, Project regions; 4, Selected Media Items(in combination with Source 32); 5, Selected regions
RenderTable["Channels"] - the number of channels in the rendered file; 1, mono; 2, stereo; higher, the number of channels
RenderTable["CloseAfterRender"] - true, close rendering to file-dialog after render; false, don't close it
RenderTable["Dither"] - &1, dither master mix; &2, noise shaping master mix; &4, dither stems; &8, dither noise shaping stems
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides; true, checked; false, unchecked
RenderTable["Endposition"] - the endposition of the rendering selection in seconds
RenderTable["MultiChannelFiles"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked
RenderTable["OfflineOnlineRendering"] - Offline/Online rendering-dropdownlist; 0, Full-speed Offline; 1, 1x Offline; 2, Online Render; 3, Online Render(Idle); 4, Offline Render(Idle)
RenderTable["OnlyMonoMedia"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked
RenderTable["RenderFile"] - the contents of the Directory-inputbox of the Render to File-dialog
RenderTable["RenderPattern"] - the render pattern as input into the File name-inputbox of the Render to File-dialog
RenderTable["RenderQueueDelay"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked
RenderTable["RenderQueueDelaySeconds"] - the amount of seconds for the render-queue-delay
RenderTable["RenderResample"] - Resample mode-dropdownlist; 0, Medium (64pt Sinc); 1, Low (Linear Interpolation); 2, Lowest (Point Sampling); 3, Good (192pt Sinc); 4, Better (348 pt Sinc); 5, Fast (IIR + Linear Interpolation); 6, Fast (IIRx2 + Linear Interpolation); 7, Fast (16pt Sinc); 8, HQ (512 pt); 9, Extreme HQ(768pt HQ Sinc)
RenderTable["RenderString"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string
RenderTable["RenderString2"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string
RenderTable["RenderTable"]=true - signals, this is a valid render-table
RenderTable["SampleRate"] - the samplerate of the rendered file(s)
RenderTable["SaveCopyOfProject"] - the "Save copy of project to outfile.wav.RPP"-checkbox; true, checked; false, unchecked
RenderTable["SilentlyIncrementFilename"] - Silently increment filenames to avoid overwriting-checkbox; true, checked; false, unchecked
RenderTable["Source"] - 0, Master mix; 1, Master mix + stems; 3, Stems (selected tracks); 8, Region render matrix; 16, Tracks with only Mono-Media to Mono Files; 32, Selected media items; 64, selected media items via master; 128, selected tracks via master
RenderTable["Startposition"] - the startposition of the rendering selection in seconds
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked? &1, custom time bounds; &2, entire project; &4, time selection; &8, all project regions; &16, selected media items; &32, selected project regions
RenderTable["TailMS"] - the amount of milliseconds of the tail
Returns false in case of an error
PARAMETERS:
RenderTable:a RenderTable, that contains all render-dialog-settings
apply_rendercfg_string:true or nil, apply it as well; false, don't apply it
RETURNS:
retval:true, setting the render-settings was successful; false, it wasn't successful
------
name:ultraschall.ApplyRenderTable_ProjectFile
language:lua
return:(boolean:retval),(string:ProjectStateChunk)
params:(RenderTable:RenderTable), (string:projectfilename_with_path), (optional boolean:apply_rendercfg_string), (optional string:ProjectStateChunk)
description:
Sets all stored render-settings from a RenderTable as the current project-settings.
Expected table is of the following structure:
RenderTable["AddToProj"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked
RenderTable["Bounds"] - 0, Custom time range; 1, Entire project; 2, Time selection; 3, Project regions; 4, Selected Media Items(in combination with Source 32); 5, Selected regions
RenderTable["Channels"] - the number of channels in the rendered file; 1, mono; 2, stereo; higher, the number of channels
RenderTable["CloseAfterRender"] - close rendering to file-dialog after render; ignored, as this can't be set in projectfiles
RenderTable["Dither"] - &1, dither master mix; &2, noise shaping master mix; &4, dither stems; &8, dither noise shaping stems
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides; true, checked; false, unchecked
RenderTable["Endposition"] - the endposition of the rendering selection in seconds
RenderTable["MultiChannelFiles"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked
RenderTable["OfflineOnlineRendering"] - Offline/Online rendering-dropdownlist; 0, Full-speed Offline; 1, 1x Offline; 2, Online Render; 3, Online Render(Idle); 4, Offline Render(Idle);
RenderTable["OnlyMonoMedia"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked
RenderTable["RenderFile"] - the contents of the Directory-inputbox of the Render to File-dialog
RenderTable["RenderPattern"] - the render pattern as input into the File name-inputbox of the Render to File-dialog
RenderTable["RenderQueueDelay"] - Delay queued render to allow samples to load-checkbox
RenderTable["RenderQueueDelaySeconds"] - the amount of seconds for the render-queue-delay
RenderTable["RenderResample"] - Resample mode-dropdownlist; 0, Medium (64pt Sinc); 1, Low (Linear Interpolation); 2, Lowest (Point Sampling); 3, Good (192pt Sinc); 4, Better (348 pt Sinc); 5, Fast (IIR + Linear Interpolation); 6, Fast (IIRx2 + Linear Interpolation); 7, Fast (16pt Sinc); 8, HQ (512 pt); 9, Extreme HQ(768pt HQ Sinc)
RenderTable["RenderString"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string
RenderTable["RenderString2"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string
RenderTable["RenderTable"]=true - signals, this is a valid render-table
RenderTable["SampleRate"] - the samplerate of the rendered file(s)
RenderTable["SaveCopyOfProject"] - the "Save copy of project to outfile.wav.RPP"-checkbox; ignored, as this can't be stored in projectfiles
RenderTable["SilentlyIncrementFilename"] - Silently increment filenames to avoid overwriting-checkbox; ignored, as this can't be stored in projectfiles
RenderTable["Source"] - 0, Master mix; 1, Master mix + stems; 3, Stems (selected tracks); 8, Region render matrix; 16, Tracks with only Mono-Media to Mono Files; 32, Selected media items; 64, selected media items via master; 128, selected tracks via master
RenderTable["Startposition"] - the startposition of the rendering selection in seconds
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked? &1, custom time bounds; &2, entire project; &4, time selection; &8, all project regions; &16, selected media items; &32, selected project regions
RenderTable["TailMS"] - the amount of milliseconds of the tail
Returns false in case of an error
PARAMETERS:
RenderTable:a RenderTable, that contains all render-dialog-settings
projectfilename_with_path:the rpp-projectfile, to which you want to apply the RenderTable; nil, to use parameter ProjectStateChunk instead
apply_rendercfg_string:true or nil, apply it as well; false, don't apply it
ProjectStateChunk:the ProjectStateChunkk, to which you want to apply the RenderTable
RETURNS:
retval:true, setting the render-settings was successful; false, it wasn't successful
ProjectStateChunk:the altered project/ProjectStateChunk as a string
------
name:ultraschall.GetRender_SaveCopyOfProject
language:lua
return:(boolean:retval)
params:
description:
Gets the current state of the "Save copy of project to outfile.wav.RPP"-checkbox from the Render to File-dialog.
Returns false in case of an error
RETURNS:
retval:true, checkbox is checked; false, checkbox is unchecked
------
name:ultraschall.SetRender_SaveCopyOfProject
language:lua
return:(boolean:retval)
params:(boolean:state)
description:
Sets the "Save copy of project to outfile.wav.RPP"-checkbox of the Render to File-dialog.
Returns false in case of an error
PARAMETERS:
state:true, check the checkbox; false, uncheck the checkbox
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.SetRender_QueueDelay
language:lua
return:(boolean:retval)
params:(boolean:state), (integer:length)
description:
Sets the "Delay queued render to allow samples to load"-checkbox of the Render to File-dialog.
Returns false in case of an error
PARAMETERS:
state:true, check the checkbox; false, uncheck the checkbox
length:the number of seconds the delay shall be
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.GetRender_QueueDelay
language:lua
return:(boolean:retval),(integer:length)
params:
description:
Gets the current checkstate of the "Delay queued render to allow samples to load"-checkbox from the Render to File-dialog,
as well as the length of the queue-render-delay.
RETURNS:
length:the number of seconds the delay shall be
------
name:ultraschall.SetRender_ProjectSampleRateForMix
language:lua
return:(boolean:retval)
params:(boolean:state)
description:
Sets the "Use project sample rate for mixing and FX/synth processing"-checkbox of the Render to File-dialog.
Returns false in case of an error
PARAMETERS:
state:true, check the checkbox; false, uncheck the checkbox
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.GetRender_ProjectSampleRateForMix
language:lua
return:(boolean:retval)
params:
description:
Gets the current state of the "Use project sample rate for mixing and FX/synth processing"-checkbox from the Render to File-dialog.
------
name:ultraschall.SetRender_AutoIncrementFilename
language:lua
return:(boolean:retval)
params:(boolean:state)
description:
Gets the current state of the "Silently increment filenames to avoid overwriting"-checkbox from the Render to File-dialog.
Returns false in case of an error
PARAMETERS:
state:true, check the checkbox; false, uncheck the checkbox
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.GetRender_AutoIncrementFilename
language:lua
return:(boolean:retval)
params:
description:
Gets the current state of the "Silently increment filenames to avoid overwriting"-checkbox from the Render to File-dialog.
------
name:ultraschall.GetRenderPreset_Names
language:lua
return:(integer:bounds_presets),(table:bounds_names),(integer:options_format_presets),(table:options_format_names),(integer:both_presets),(table:both_names)
params:
description:
Returns all render-preset-names for a) Bounds and output pattern/filename b) Options and format c) both presets, who share the same name
RETURNS:
bounds_presets:the number of found bounds and output-pattern-presets
bounds_names:the names of all found bounds and output-pattern-presets
options_format_presets:the number of found options and format-presets
options_format_names:the names of all found options and format-presets
both_presets:the number of found presets, who both share the same name
both_names:the names of all found presets, who both share the same name
------
name:ultraschall.GetRenderPreset_RenderTable
language:lua
return:(RenderTable:RenderTable)
params:(string:Bounds_Name), (string:Options_and_Format_Name)
description:
returns a rendertable, that contains all settings of a specific render-preset.
use GetRenderPreset_Names to get the available render-preset-names.
Some settings aren't stored in Presets and will get default values:
TailMS=0, SilentlyIncrementFilename=false, AddToProj=false, SaveCopyOfProject=false, RenderQueueDelay=false, RenderQueueDelaySeconds=false
returned table if of the following format:
RenderTable["AddToProj"] - Add rendered items to new tracks in project-checkbox; always false, as this isn't stored in render-presets
RenderTable["Bounds"] - 0, Custom time range; 1, Entire project; 2, Time selection; 3, Project regions; 4, Selected Media Items(in combination with Source 32); 5, Selected regions
RenderTable["Channels"] - the number of channels in the rendered file; 1, mono; 2, stereo; higher, the number of channels
RenderTable["CloseAfterRender"] - close rendering to file-dialog after rendering; always true, as this isn't stored in render-presets
RenderTable["Dither"] - &1, dither master mix; &2, noise shaping master mix; &4, dither stems; &8, dither noise shaping stems
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides; true, checked; false, unchecked
RenderTable["Endposition"] - the endposition of the rendering selection in seconds
RenderTable["MultiChannelFiles"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked
RenderTable["OfflineOnlineRendering"] - Offline/Online rendering-dropdownlist; 0, Full-speed Offline; 1, 1x Offline; 2, Online Render; 3, Online Render(Idle); 4, Offline Render(Idle)
RenderTable["OnlyMonoMedia"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked
RenderTable["RenderFile"] - the contents of the Directory-inputbox of the Render to File-dialog
RenderTable["RenderPattern"] - the render pattern as input into the File name-inputbox of the Render to File-dialog
RenderTable["RenderQueueDelay"] - Delay queued render to allow samples to load-checkbox; always false, as this isn't stored in render-presets
RenderTable["RenderQueueDelaySeconds"] - the amount of seconds for the render-queue-delay; always 0, as this isn't stored in render-presets
RenderTable["RenderResample"] - Resample mode-dropdownlist; 0, Medium (64pt Sinc); 1, Low (Linear Interpolation); 2, Lowest (Point Sampling); 3, Good (192pt Sinc); 4, Better (348 pt Sinc); 5, Fast (IIR + Linear Interpolation); 6, Fast (IIRx2 + Linear Interpolation); 7, Fast (16pt Sinc); 8, HQ (512 pt); 9, Extreme HQ(768pt HQ Sinc)
RenderTable["RenderString"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string
RenderTable["RenderString2"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string
RenderTable["RenderTable"]=true - signals, this is a valid render-table
RenderTable["SampleRate"] - the samplerate of the rendered file(s)
RenderTable["SaveCopyOfProject"] - the "Save copy of project to outfile.wav.RPP"-checkbox; always false, as this isn't stored in render-presets
RenderTable["SilentlyIncrementFilename"] - Silently increment filenames to avoid overwriting-checkbox; always true, as this isn't stored in Presets
RenderTable["Source"] - 0, Master mix; 1, Master mix + stems; 3, Stems (selected tracks); 8, Region render matrix; 16, Tracks with only Mono-Media to Mono Files; 32, Selected media items; 64, selected media items via master; 128, selected tracks via master
RenderTable["Startposition"] - the startposition of the rendering selection in seconds
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked? &1, custom time bounds; &2, entire project; &4, time selection; &8, all project regions; &16, selected media items; &32, selected project regions
RenderTable["TailMS"] - the amount of milliseconds of the tail; always 0, as this isn't stored in render-presets
Returns nil in case of an error
PARAMETERS:
Bounds_Name:the name of the Bounds-render-preset you want to get
Options_and_Format_Name:the name of the Renderformat-options-render-preset you want to get
RETURNS:
RenderTable:a render-table, which contains all settings from a render-preset
------
name:ultraschall.DeleteRenderPreset_Bounds
language:lua
return:(boolean:retval)
params:(string:Bounds_Name)
description:
deletes a Bounds-render-preset from Reaper's render-presets.
This deletes all(!) occurrences of the Bounds-render-preset with the same name.
Though, you shouldn't store multiple Bounds-render-presets with the same name into reaper-render.ini in the first place.
use GetRenderPreset_Names to get the available render-preset-names.
Returns false in case of an error
PARAMETERS:
Bounds_Name:the name of the Bounds-render-preset you want to get
RETURNS:
retval:true, deleting was successful; false, deleting was unsuccessful
------
name:ultraschall.DeleteRenderPreset_FormatOptions
language:lua
return:(boolean:retval)
params:(string:Options_and_Format_Name)
description:
deletes a Render-Format-Options-render-preset from Reaper's render-presets.
This deletes all(!) occurrences of the Render-Format-Options-render-preset with the same name.
Though, you shouldn't store multiple Render-Format-Options-render-preset with the same name into reaper-render.ini in the first place.
use GetRenderPreset_Names to get the available render-preset-names.
Returns false in case of an error
PARAMETERS:
Options_and_Format_Name:the name of the Renderformat-options-render-preset you want to get
RETURNS:
retval:true, deleting was successful; false, deleting was unsuccessful
------
name:ultraschall.AddRenderPreset
language:lua
return:(boolean:retval)
params:(string:Bounds_Name), (string:Options_and_Format_Name), (RenderTable:RenderTable)
description:
adds a new render-preset into reaper-render.ini.
This function will check, whether the chosen names are already in use.
Added render-presets are available after (re-)opening in the Render to File-dialog
Note: You can choose, whether to include only Bounds, only RenderFormatOptions of both. The Bounds and the RenderFormatOptions store different parts of the render-presets.
Bounds_Name stores only:
RenderTable["Bounds"] - the bounds-dropdownlist,
0, Custom time range
1, Entire project
2, Time selection
3, Project regions
4, Selected Media Items(in combination with Source 32)
5, Selected regions
RenderTable["Startposition"] - the startposition of the render
RenderTable["Endposition"] - the endposition of the render
RenderTable["Source"] - the source dropdownlist, includes
0, Master mix
1, Master mix + stems
3, Stems (selected tracks)
8, Region render matrix
32, Selected media items
64, selected media items via master
128, selected tracks via master
"0"    - unknown, default setting is 0
RenderTable["RenderPattern"] - the renderpattern, which hold also the wildcards
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked?
&1, custom time bounds
&2, entire project
&4, time selection
&8, all project regions
&16, selected media items
&32, selected project regions
Options_and_Format_Name stores only:
RenderTable["SampleRate"] - the samplerate, with which to render; 0, use project-settings
RenderTable["Channels"] - the number of channels for the output-file
RenderTable["OfflineOnlineRendering"] - the offline/online-dropdownlist
0, Full-speed Offline
1, 1x Offline
2, Online Render
3, Online Render(Idle)
4, Offline Render(Idle);
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked
RenderTable["RenderResample"] - Resample mode-dropdownlist;
0, Medium (64pt Sinc)
1, Low (Linear Interpolation)
2, Lowest (Point Sampling)
3, Good (192pt Sinc)
4, Better (348 pt Sinc)
5, Fast (IIR + Linear Interpolation)
6, Fast (IIRx2 + Linear Interpolation)
7, Fast (16pt Sinc)
8, HQ (512 pt)
9, Extreme HQ(768pt HQ Sinc)
RenderTable["Dither"] - the Dither/Noise shaping-checkboxes:
&1, dither master mix
&2, noise shaping master mix
&4, dither stems
&8, dither noise shaping stems
RenderTable["MultiChannelFiles"] - multichannel-files-checkbox
RenderTable["OnlyMonoMedia"] - only mono media-checkbox
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides-checkbox
RenderTable["RenderString"] - the render-cfg-string, which holds the render-outformat-settings
RenderTable["RenderString2"] - the render-cfg-string, which holds the secondary render-outformat-settings
Returns false in case of an error
PARAMETERS:
Bounds_Name:the name of the Bounds-render-preset you want to add; nil, to not add a new Bounds-render-preset
Options_and_Format_Name:the name of the Renderformat-options-render-preset you want to add; to not add a new Render-Format-Options-render-preset
RenderTable:the RenderTable, which holds all information for inclusion into the Render-Preset
RETURNS:
retval:true, adding was successful; false, adding was unsuccessful
------
name:ultraschall.SetRenderPreset
language:lua
return:(boolean:retval)
params:(string:Bounds_Name), (string:Options_and_Format_Name), (RenderTable:RenderTable)
description:
sets an already existing render-preset in reaper-render.ini.
This function will check, whether the chosen names aren't given yet in any preset.
Changed render-presets are updated after (re-)opening in the Render to File-dialog
Note: You can choose, whether to include only Bounds, only RenderFormatOptions of both. The Bounds and the RenderFormatOptions store different parts of the render-presets.
Bounds_Name stores only:
RenderTable["Bounds"] - the bounds-dropdownlist,
0, Custom time range
1, Entire project
2, Time selection
3, Project regions
4, Selected Media Items(in combination with Source 32)
5, Selected regions
RenderTable["Startposition"] - the startposition of the render
RenderTable["Endposition"] - the endposition of the render
RenderTable["Source"]+RenderTable["MultiChannelFiles"]+RenderTable["OnlyMonoMedia"] - the source dropdownlist, includes
0, Master mix
1, Master mix + stems
3, Stems (selected tracks)
&4, Multichannel tracks to multichannel files
8, Region render matrix
&16, Tracks with only mono media to mono files
32, Selected media items
64, selected media items via master
128, selected tracks via master
"0"    - unknown, default setting is 0
RenderTable["RenderPattern"] - the renderpattern, which hold also the wildcards
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked?
&1, custom time bounds
&2, entire project
&4, time selection
&8, all project regions
&16, selected media items
&32, selected project regions
Options_and_Format_Name stores only:
RenderTable["SampleRate"] - the samplerate, with which to render; 0, use project-settings
RenderTable["Channels"] - the number of channels for the output-file
RenderTable["OfflineOnlineRendering"] - the offline/online-dropdownlist
0, Full-speed Offline
1, 1x Offline
2, Online Render
3, Online Render(Idle)
4, Offline Render(Idle);
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked
RenderTable["RenderResample"] - Resample mode-dropdownlist;
0, Medium (64pt Sinc)
1, Low (Linear Interpolation)
2, Lowest (Point Sampling)
3, Good (192pt Sinc)
4, Better (348 pt Sinc)
5, Fast (IIR + Linear Interpolation)
6, Fast (IIRx2 + Linear Interpolation)
7, Fast (16pt Sinc)
8, HQ (512 pt)
9, Extreme HQ(768pt HQ Sinc)
RenderTable["Dither"] - the Dither/Noise shaping-checkboxes:
&1, dither master mix
&2, noise shaping master mix
&4, dither stems
&8, dither noise shaping stems
RenderTable["RenderString"] - the render-cfg-string, which holds the render-outformat-settings
RenderTable["RenderString2"] - the render-cfg-string, which holds the secondary render-outformat-settings; "" to remove it from this preset
Returns false in case of an error
PARAMETERS:
Bounds_Name:the name of the Bounds-render-preset you want to add; nil, to not add a new Bounds-render-preset
Options_and_Format_Name:the name of the Renderformat-options-render-preset you want to add; to not add a new Render-Format-Options-render-preset
RenderTable:the RenderTable, which holds all information for inclusion into the Render-Preset
RETURNS:
retval:true, setting was successful; false, setting was unsuccessful
------
name:ultraschall.RenderProject_RenderTable
language:lua
return:(integer:count),(array:MediaItemStateChunkArray),(array:Filearray)
params:(optional string:projectfilename_with_path), (optional RenderTable:RenderTable), (optional boolean:AddToProj), (optional boolean:CloseAfterRender), (optional boolean:SilentlyIncrementFilename)
description:
Renders a projectfile or the current active project, using the settings from a RenderTable.
Expected RenderTable is of the following structure:
RenderTable["AddToProj"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked
RenderTable["Bounds"] - 0, Custom time range; 1, Entire project; 2, Time selection; 3, Project regions; 4, Selected Media Items(in combination with Source 32); 5, Selected regions
RenderTable["Channels"] - the number of channels in the rendered file; 1, mono; 2, stereo; higher, the number of channels
RenderTable["CloseAfterRender"] - true, close rendering to file-dialog after render; false, don't close it
RenderTable["Dither"] - &1, dither master mix; &2, noise shaping master mix; &4, dither stems; &8, dither noise shaping stems
RenderTable["EmbedStretchMarkers"] - Embed stretch markers/transient guides; true, checked; false, unchecked
RenderTable["Endposition"] - the endposition of the rendering selection in seconds
RenderTable["MultiChannelFiles"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked
RenderTable["OfflineOnlineRendering"] - Offline/Online rendering-dropdownlist; 0, Full-speed Offline; 1, 1x Offline; 2, Online Render; 3, Online Render(Idle); 4, Offline Render(Idle)
RenderTable["OnlyMonoMedia"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked
RenderTable["ProjectSampleRateFXProcessing"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked
RenderTable["RenderFile"] - the contents of the Directory-inputbox of the Render to File-dialog
RenderTable["RenderPattern"] - the render pattern as input into the File name-inputbox of the Render to File-dialog
RenderTable["RenderQueueDelay"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked
RenderTable["RenderQueueDelaySeconds"] - the amount of seconds for the render-queue-delay
RenderTable["RenderResample"] - Resample mode-dropdownlist; 0, Medium (64pt Sinc); 1, Low (Linear Interpolation); 2, Lowest (Point Sampling); 3, Good (192pt Sinc); 4, Better (348 pt Sinc); 5, Fast (IIR + Linear Interpolation); 6, Fast (IIRx2 + Linear Interpolation); 7, Fast (16pt Sinc); 8, HQ (512 pt); 9, Extreme HQ(768pt HQ Sinc)
RenderTable["RenderString"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string
RenderTable["RenderString2"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string
RenderTable["RenderTable"]=true - signals, this is a valid render-table
RenderTable["SampleRate"] - the samplerate of the rendered file(s)
RenderTable["SaveCopyOfProject"] - the "Save copy of project to outfile.wav.RPP"-checkbox; true, checked; false, unchecked
RenderTable["SilentlyIncrementFilename"] - Silently increment filenames to avoid overwriting-checkbox; true, checked; false, unchecked
RenderTable["Source"] - 0, Master mix; 1, Master mix + stems; 3, Stems (selected tracks); 8, Region render matrix; 16, Tracks with only Mono-Media to Mono Files; 32, Selected media items; 64, selected media items via master; 128, selected tracks via master
RenderTable["Startposition"] - the startposition of the rendering selection in seconds
RenderTable["TailFlag"] - in which bounds is the Tail-checkbox checked? &1, custom time bounds; &2, entire project; &4, time selection; &8, all project regions; &16, selected media items; &32, selected project regions
RenderTable["TailMS"] - the amount of milliseconds of the tail
Returns -1 in case of an error
PARAMETERS:
projectfilename_with_path:the projectfilename with path of the rpp-file that you want to render; nil, to render the current active project
RenderTable:the RenderTable with all render-settings, that you want to apply; nil, use the project's existing settings
AddToProj:true, add the rendered files to the project; nil or false, don't add them; 
CloseAfterRender:true or nil, closes rendering to file-dialog after rendering is finished; false, keep it open
SilentlyIncrementFilename:true or nil, silently increment filename, when file already exists; false, ask for overwriting
RETURNS:
count:the number of files that have been rendered
MediaItemStateChunkArray:the MediaItemStateChunks of all the rendered files
Filearray:filenames with path of all rendered files
------
name:ultraschall.GetRenderQueuedProjects
language:lua
return:(integer:Filecount),(array:Filearray)
params:
description:
Gets the number and names of files currently in the render-queue
RETURNS:
Filecount:the number of project-files in the render-queue
Filearray:filenames with path of all queued-projectfiles
------
name:ultraschall.RenderProject_RenderQueue
language:lua
return:(boolean:retval)
params:(integer:index)
description:
Renders a specific project from the render-queue.
See GetRenderQueuedProjects to get the names of the currently existing render-queue-projects, where the filename-order reflects the index needed for this function.
returns false in case of an error
PARAMETERS:
index:the index of the render-queued-project; beginning with 1; -1 to render all projects in the render-queue
RETURNS:
retval:false, a problem occurred; true, rendering went through; returns true as well, when rendering is aborted!
------
name:ultraschall.RenderProject
language:lua
return:(integer:retval),(integer:renderfilecount),(array:MediaItemStateChunkArray),(array:Filearray)
params:(string:projectfilename_with_path), (string:renderfilename_with_path), (number:startposition), (number:endposition), (boolean:overwrite_without_asking), (boolean:renderclosewhendone), (boolean:filenameincrease), (optional string:rendercfg), (optional string:rendercfg2)
description:
Renders a project, using a specific render-cfg-string.
To get render-cfg-strings, see functions starting with CreateRenderCFG_, like CreateRenderCFG_AIFF, CreateRenderCFG_DDP, CreateRenderCFG_FLAC, CreateRenderCFG_OGG, CreateRenderCFG_Opus, etc.
Will use the render-settings currently set in projectfilename_with_path/the currently active project, except bound(set to Custom time range), render file and render-pattern, as they are set by this function!
Returns -1 in case of an error
PARAMETERS:
projectfilename_with_path:the project to render; nil, for the currently opened project
renderfilename_with_path:the filename with path of the output-file. If you give the wrong extension, Reaper will exchange it by the correct one.
startposition:the startposition of the render-area in seconds; 
endposition:the endposition of the render-area in seconds; 
overwrite_without_asking:true, overwrite an existing renderfile; false, don't overwrite an existing renderfile
renderclosewhendone:true, automatically close the render-window after rendering; false, keep rendering window open after rendering; nil, use current settings
filenameincrease:true, silently increase filename, if it already exists; false, ask before overwriting an already existing outputfile; nil, use current settings
rendercfg:just like rendercfg, but for the secondary render-format
rendercfg2:just like rendercfg, but for the secondary render-format
RETURNS:
retval:-1, in case of error; 0, in case of success
renderfilecount:the number of rendered files
MediaItemStateChunkArray:the MediaItemStateChunks of all rendered files, with the one in entry 1 being the rendered master-track(when rendering stems+master)
Filearray:the filenames of the rendered files, including their paths. The filename in entry 1 is the one of the mastered track(when rendering stems+master)
------
name:ultraschall.RenderProject_Regions
language:lua
return:(integer:retval),(integer:renderfilecount),(array:MediaItemStateChunkArray),(array:Filearray)
params:(string:projectfilename_with_path), (string:renderfilename_with_path), (integer:region), (boolean:addregionname), (boolean:overwrite_without_asking), (boolean:renderclosewhendone), (boolean:filenameincrease), (string:rendercfg), (optional string:addregionnameseparator), (optional string:rendercfg2)
description:
Renders a region of a project, using a specific render-cfg-string.
To get render-cfg-strings, see CreateRenderCFG_AIFF, CreateRenderCFG_DDP, CreateRenderCFG_FLAC, CreateRenderCFG_OGG, CreateRenderCFG_Opus
Returns -1 in case of an error
PARAMETERS:
projectfilename_with_path:the project to render; nil, for the currently opened project
renderfilename_with_path:the filename of the output-file. 
region:when addregionname==true, this parameter allows you to set a separator between renderfilename_with_path and regionname. 
addregionname:when addregionname==true, this parameter allows you to set a separator between renderfilename_with_path and regionname. 
overwrite_without_asking:true, overwrite an existing renderfile; false, don't overwrite an existing renderfile
renderclosewhendone:true, automatically close the render-window after rendering; false, keep rendering window open after rendering; nil, use current settings
filenameincrease:true, silently increase filename, if it already exists; false, ask before overwriting an already existing outputfile; nil, use current settings
rendercfg:the render-cfg-string for secondary render-format
addregionnameseparator:when addregionname==true, this parameter allows you to set a separator between renderfilename_with_path and regionname. 
rendercfg2:the render-cfg-string for secondary render-format
RETURNS:
retval:-1, in case of error; 0, in case of success
renderfilecount:the number of rendered files
MediaItemStateChunkArray:the MediaItemStateChunks of all rendered files, with the one in entry 1 being the rendered master-track(when rendering stems)
Filearray:the filenames of the rendered files, including their paths. The filename in entry 1 is the one of the mastered track(when rendering stems)
------
name:ultraschall.AddSelectedItemsToRenderQueue
language:lua
return:(boolean:retval),(integer:num_queued_projects)
params:(optional boolean:render_items_individually), (optional boolean:render_items_through_master), (optional RenderTable:RenderTables)
description:
Adds the selected MediaItems to the render-queue.
returns false in case of an error
PARAMETERS:
render_items_individually:false or nil, render all selected MediaItems in one render-queued-project; true, render all selected MediaItems individually as separate Queued-projects
render_items_through_master:false or nil, just render the MediaItems; true, render the MediaItems through the Master-channel
RenderTables:a RenderTable to apply for the renders in the render-queue
RETURNS:
retval:true, adding was successful; false, adding was unsuccessful
num_queued_projects:the number of newly created projects in the render-queue
------
name:ultraschall.CreateRenderCFG_MP3MaxQuality
language:lua
return:(string:render_cfg_string)
params:(optional boolean:write_replay_gain)
description:
Creates the render-cfg-string for the MP3-format with highest quality-settings. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
PARAMETERS:
write_replay_gain:the "Write ReplayGain-tag"-checkbox; true, checked; false, unchecked; default is unchecked
RETURNS:
render_cfg_string:the renderstring for MP3 with maximum quality
------
name:ultraschall.CreateRenderCFG_MP3VBR
language:lua
return:(string:render_cfg_string)
params:(integer:vbr_quality), (integer:quality), (optional boolean:no_joint_stereo), (optional boolean:write_replay_gain)
description:
Creates the render-cfg-string for the MP3-format with variable bitrate. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
vbr_quality:the variable-bitrate quality; 1(for 10%) to 10(for 100%)
quality:the encoding speed for the mp3
no_joint_stereo:the "Do not allow joint stereo"-checkbox; true, checked; false, unchecked; default is unchecked
write_replay_gain:the "Write ReplayGain-tag"-checkbox; true, checked; false, unchecked; default is unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected MP3-VBR-settings
------
name:ultraschall.CreateRenderCFG_MP3ABR
language:lua
return:(string:render_cfg_string)
params:(integer:bitrate), (integer:quality), (optional boolean:no_joint_stereo), (optional boolean:write_replay_gain)
description:
Creates the render-cfg-string for the MP3-format with average bitrate. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
bitrate:the encoding quality for the mp3
quality:the encoding speed for the mp3
no_joint_stereo:the "Do not allow joint stereo"-checkbox; true, checked; false, unchecked; default is unchecked
write_replay_gain:the "Write ReplayGain-tag"-checkbox; true, checked; false, unchecked; default is unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected MP3-ABR-settings
------
name:ultraschall.CreateRenderCFG_MP3CBR
language:lua
return:(string:render_cfg_string)
params:(integer:bitrate), (integer:quality), (optional boolean:no_joint_stereo), (optional boolean:write_replay_gain)
description:
Creates the render-cfg-string for the MP3-format with constant bitrate. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
bitrate:the encoding quality for the mp3
quality:the encoding speed for the mp3
no_joint_stereo:the "Do not allow joint stereo"-checkbox; true, checked; false, unchecked; default is unchecked
write_replay_gain:the "Write ReplayGain-tag"-checkbox; true, checked; false, unchecked; default is unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected MP3-CBR-settings
------
name:ultraschall.CreateRenderCFG_WAV
language:lua
return:(string:render_cfg_string)
params:(integer:BitDepth), (integer:LargeFiles), (integer:BWFChunk), (integer:IncludeMarkers), (boolean:EmbedProjectTempo)
description:
Creates the render-cfg-string for the WAV-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
BitDepth:the bitdepth of the WAV-file
LargeFiles:how shall Reaper treat large WAV-files
BWFChunk:Write BWF ('bext') chunk and Include project filename in BWF data - checkboxes
IncludeMarkers:The include markerlist-dropdownlist
EmbedProjectTempo:Embed project tempo (use with care)-checkbox; true, checked; false, unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected WAV-settings
------
name:ultraschall.GetLastUsedRenderPatterns
language:lua
return:(array:last_render_patterns)
params:
description:
returns the last 12 used render-patterns, that have been used for rendering by any project in Reaper.
RETURNS:
last_render_patterns:a table, which holds the last 12 used render-patterns, used by any project in Reaper
------
name:ultraschall.GetLastRenderPaths
language:lua
return:(array:last_render_paths)
params:
description:
returns the last 20 used render-output-paths, that have been used for rendering by any project in Reaper.
RETURNS:
last_render_paths:a table, which holds the last 20 used render-output-paths, used by any project in Reaper
------
name:ultraschall.IsReaperRendering
language:lua
return:(boolean:retval),(optional number:render_position),(optional number:render_projectlength),(optional ReaProject:proj),(optional boolean:queue_render)
params:
description:
Returns, if Reaper is currently rendering and the rendering position and projectlength of the rendered project
RETURNS:
retval:true, Reaper is rendering; false, Reaper does not render
render_position:the current rendering-position of the rendering project
render_projectlength:the length of the currently rendering project
proj:the project currently rendering
queue_render:true, if a project from the queued-folder is currently being rendered; false, if not; a hint if queued-rendering is currently active
------
name:ultraschall.CreateRenderCFG_AIFF
language:lua
return:(string:render_cfg_string)
params:(integer:bits), (optional boolean:EmbedBeatLength)
description:
Returns the render-cfg-string for the AIFF-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
Returns nil in case of an error
PARAMETERS:
bits:the bitdepth of the aiff-file; 8, 16, 24 and 32 are supported
EmbedBeatLength:Embed beat length if exact-checkbox; true, checked; false or nil, unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected AIFF-settings
------
name:ultraschall.CreateRenderCFG_AudioCD
language:lua
return:(string:render_cfg_string)
params:(integer:trackmode), (boolean:only_markers_starting_with_hash), (integer:leadin_silence_tracks), (integer:leadin_silence_disc), (boolean:burncd_image_after_render)
description:
Returns the render-cfg-string for the AudioCD-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini
You can also check, whether to burn the created cd-image after rendering.
Returns nil in case of an error
PARAMETERS:
trackmode:Track mode-dropdownlist: 1, Markers define new track; 2, Regions define tracks (other areas ignored); 3, One Track
only_markers_starting_with_hash:Only use markers starting with #-checkbox; true, checked; false, unchecked
leadin_silence_tracks:Lead-in silence for tracks-inputbox, in milliseconds
leadin_silence_disc:Extra lead-in silence for disc-inputbox, in milliseconds
burncd_image_after_render:Burn CD image after render-checkbox; true, checked; false, unchecked
RETURNS:
render_cfg_string:the render-cfg-string for the selected AudioCD-image-settings
------
name:ultraschall.GetRender_EmbedStretchMarkers
language:lua
return:(boolean:retval)
params:
description:
Gets the current state of the "Embed stretch markers/transient guides"-checkbox from the Render to File-dialog.
------
name:ultraschall.SetRender_EmbedStretchMarkers
language:lua
return:(boolean:retval)
params:(boolean:state)
description:
Sets the new state of the "Embed stretch markers/transient guides"-checkbox from the Render to File-dialog.
Returns false in case of an error
PARAMETERS:
state:true, check the checkbox; false, uncheck the checkbox
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.Render_Loop
language:lua
return:(integer:count),(array:MediaItemStateChunkArray),(array:Filearray)
params:(table:RenderTable), (string:RenderFilename), (boolean:AutoIncrement), (number:FirstStart), (number:FirstEnd), (number:SecondStart), (number:SecondEnd), (number:FadeIn), (number:FadeOut), (integer:FadeInShape), (integer:FadeOutShape)
description:
Renders a part of a project using 2 passes. Good for rendering loops, including wetloops.
The first pass will be set by FirstStart and FirstStart. This is the one for possible fx-buildups(reverbs, etc).
The second pass will be set by SecondStart and SecondEnd. This is the one, which "crops" the first-pass to its correct length.
You can also influence the second pass by setting fadein and fadeout, including the fadein/fadeout-shape.
That way, you can control, how the beginning and the end of the loop-item sounds.
SecondStart and SecondEnd are in relation of the original source project. SecondStart is from the beginning of the source-project, NOT FirstStart!
returns -1 in case of an error
PARAMETERS:
RenderTable:the RenderTable, which holds the render-settings for the second pass
RenderFilename:the filename with path of the final rendered file
AutoIncrement:true, autoincrement the filename(if it already exists); false, ask before rendering(if file already exists)
FirstStart:the beginning of the first-pass-render in seconds
FirstEnd:the end of the first-pass-render in seconds
SecondStart:the beginning of the second-pass-render in seconds
SecondEnd:the end of the second-pass-render in seconds
FadeIn:the shape of the fade-in-curve; fadein shape, 0..6, 0=linear
FadeOut:the shape of the fade-out-curve; fadeout shape, 0..6, 0=linear
FadeInShape:the shape of the fade-in-curve; fadein shape, 0..6, 0=linear
FadeOutShape:the shape of the fade-out-curve; fadeout shape, 0..6, 0=linear
RETURNS:
count:the number of rendered files
MediaItemStateChunkArray:all MediaItemStateChunks within an array
Filearray:all rendered filenames including path
------
name:ultraschall.GetAllThemeLayoutNames
language:lua
return:(integer:index),(table:ThemeLayoutNames=)
params:
description:
returns all layout-names and values of the current theme
the table ThemeLayoutNames is of the following format:
ThemeLayoutNames[parameter_index]["layout section"] - the name of the layout-section of the parameter
ThemeLayoutNames[parameter_index]["value"] - the value of the parameter
ThemeLayoutNames[parameter_index]["description"] - the description of the parameter
returns nil in case of an error
RETURNS:
index:the number of theme-layout-parameters available
------
name:ultraschall.GetAllThemeLayoutParameters
language:lua
return:(integer:index),(table:ThemeLayoutParameters)
params:
description:
returns all theme-layout-parameter attributes of the current theme
the table ThemeLayoutParameters is of the following format:
ThemeLayoutParameters[parameter_index]["name"] - the name of the parameter
ThemeLayoutParameters[parameter_index]["description"] - the description of the parameter
ThemeLayoutParameters[parameter_index]["value"] - the value of the parameter
ThemeLayoutParameters[parameter_index]["value default"] - the defult value of the parameter
ThemeLayoutParameters[parameter_index]["value min"] - the minimum value of the parameter
ThemeLayoutParameters[parameter_index]["value max"] - the maximum value of the parameter
returns nil in case of an error
RETURNS:
index:the number of theme-layout-parameters available
ThemeLayoutParameters:a table with all theme-layout-parameter available in the current theme
------
name:ultraschall.IsValidTrackString
language:lua
return:(boolean:valid),(integer:count),(array:individual_tracknumbers)
params:(string:trackstring)
description:
checks, whether a given trackstring is a valid one. Will also return all valid numbers, from trackstring, that can be used as tracknumbers, as an array.
returns false in case of an error
PARAMETERS:
trackstring:the trackstring to check, if it's a valid one
RETURNS:
valid:true, is a valid trackstring; false, is not a valid trackstring
count:the number of entries found in trackstring
individual_tracknumbers:an array that contains all available tracknumbers
------
name:ultraschall.IsValidTrackStateChunk
language:lua
return:(boolean:valid)
params:(string:TrackStateChunk)
description:
returns, if a TrackStateChunk is a valid statechunk
returns false in case of an error
PARAMETERS:
TrackStateChunk:a string to check, if it's a valid TrackStateChunk
RETURNS:
valid:true, if the string is a valid statechunk; false, if not a valid statechunk
------
name:ultraschall.CreateTrackString
language:lua
return:(string:trackstring)
params:(integer:firstnumber), (integer:lastnumber), (optional integer:step)
description:
returns a string with the all numbers from firstnumber to lastnumber, separated by a ,
e.g. firstnumber=4, lastnumber=8 -> 4,5,6,7,8
returns nil in case of an error
PARAMETERS:
firstnumber:the number, with which the string starts
lastnumber:the number, with which the string ends
step:how many numbers shall be skipped inbetween. Can lead to a different lastnumber, when step is not 1! nil or invalid value=1
RETURNS:
trackstring:a string with all tracknumbers, separated by a ,
------
name:ultraschall.CreateTrackString_SelectedTracks
language:lua
return:(string:trackstring)
params:
description:
Creates a string with all numbers from selected tracks, separated by a ,
Returns an empty string, if no tracks are selected.
RETURNS:
trackstring:a string with the tracknumbers, separated by a string
------
name:ultraschall.InsertTrack_TrackStateChunk
language:lua
return:(boolean:retval),(MediaTrack:MediaTrack)
params:(string:trackstatechunk)
description:
Creates a new track at the end of the project and sets it's trackstate, using the parameter trackstatechunk.
Returns true, if it succeeded and the newly created MediaTrack.
PARAMETERS:
trackstatechunk:the rpp-xml-Trackstate-Chunk, as created by reaper.GetTrackStateChunk or GetProject_TrackStateChunk
RETURNS:
retval:true, if creation succeeded, false if not
MediaTrack:the newly created track, as MediaItem-trackobject
------
name:ultraschall.RemoveDuplicateTracksInTrackstring
language:lua
return:(integer:retval),(string:trackstring),(array:trackstringarray),(integer:number_of_entries)
params:(string:trackstring)
description:
Sorts tracknumbers in trackstring and throws out duplicates. It also throws out entries, that are no numbers.
Returns the "cleared" trackstring as string and as array, as well as the number of entries.
Returns -1 in case of failure.
PARAMETERS:
trackstring:the tracknumbers, separated by a comma
RETURNS:
retval:-1 in case of error, 1 in case of success
trackstring:the "cleared" trackstring as an array
trackstringarray:the "cleared" trackstring as an array
number_of_entries:the number of entries in the trackstring
------
name:ultraschall.IsTrackObjectTracknumber
language:lua
return:(boolean:retval),(integer:tracknumber)
params:(MediaTrack:track), (integer:tracknumber)
description:
returns true, if MediaTrack has the tracknumber "tracknumber"; false if not.
Returns nil in case of error.
PARAMETERS:
track:the tracknumber you want to check for
tracknumber:the tracknumber you want to check for
RETURNS:
retval:true if track is tracknumber, false if not
tracknumber:the number of track, so in case of false, you know it's number
------
name:ultraschall.InverseTrackstring
language:lua
return:(string:inv_trackstring)
params:(string:trackstring), (integer:limit)
description:
returns a newtrackstring with numbers, that are NOT in trackstring, in the range between 0 and limit
returns -1 in case of error
PARAMETERS:
trackstring:the tracknumbers, separated with a ,
limit:the maximum tracknumber to include. Use reaper.CountTracks(0) function to use the maximum tracks in current project
RETURNS:
inv_trackstring:the tracknumbers, that are NOT in the parameter trackstring, from 0 to limit
------
name:ultraschall.CountItemsInTrackStateChunk
language:lua
return:(integer:countitems)
params:(string:trackstatechunk)
description:
returns the number of items in a trackstatechunk
returns -1 in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk
RETURNS:
countitems:number of items in the trackstatechunk
------
name:ultraschall.GetItemStateChunkFromTrackStateChunk
language:lua
return:(boolean:retval),(string:mediaitemstatechunk)
params:(string:trackstatechunk), (integer:idx)
description:
Returns a mediaitemstatechunk of the idx'th item in trackstatechunk.
returns false in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk
idx:the number of the item you want to have returned as mediaitemstatechunk
RETURNS:
retval:true in case of success, false in case of error
mediaitemstatechunk:number of items in the trackstatechunk
------
name:ultraschall.AddMediaItemStateChunk_To_TrackStateChunk
language:lua
return:(string:trackstatechunk)
params:(string:trackstatechunk), (string:mediaitemstatechunk)
description:
Adds the item mediaitemstatechunk into trackstatechunk and returns this altered trackstatechunk.
returns nil in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk
mediaitemstatechunk:a mediaitemstatechunk, as returned by reaper's api function reaper.GetItemStateChunk
RETURNS:
trackstatechunk:the new trackstatechunk with mediaitemstatechunk added
------
name:ultraschall.RemoveMediaItem_TrackStateChunk
language:lua
return:(boolean:retval),(string:trackstatechunk)
params:(string:trackstatechunk), (integer:idx)
description:
Deletes the idx'th item from trackstatechunk and returns this altered trackstatechunk.
returns false in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk
idx:the number of the item you want to delete
RETURNS:
retval:true in case of success, false in case of error
trackstatechunk:the new trackstatechunk with the idx'th item deleted
------
name:ultraschall.RemoveMediaItemByIGUID_TrackStateChunk
language:lua
return:(boolean:retval),(string:trackstatechunk)
params:(string:trackstatechunk), (string:IGUID)
description:
Deletes the item with the iguid IGUID from trackstatechunk and returns this altered trackstatechunk.
returns false in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk
IGUID:the IGUID of the item you want to delete
RETURNS:
retval:true in case of success, false in case of error
trackstatechunk:the new trackstatechunk with the IGUID-item deleted
------
name:ultraschall.RemoveMediaItemByGUID_TrackStateChunk
language:lua
return:(boolean:retval),(string:trackstatechunk)
params:(string:trackstatechunk), (string:GUID)
description:
Deletes the item with the guid GUID from trackstatechunk and returns this altered trackstatechunk.
returns false in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk
GUID:the GUID of the item you want to delete
RETURNS:
retval:true in case of success, false in case of error
trackstatechunk:the new trackstatechunk with the GUID-item deleted
------
name:ultraschall.OnlyTracksInBothTrackstrings
language:lua
return:(integer:retval),(string:trackstring),(array:trackstringarray),(integer:number_of_entries)
params:(string:trackstring1), (string:trackstring2)
description:
returns a new trackstring, that contains only the tracknumbers, that are in trackstring1 and trackstring2.
returns -1 in case of error
PARAMETERS:
trackstring1:a string with the tracknumbers, separated by commas
trackstring2:a string with the tracknumbers, separated by commas
RETURNS:
retval:-1 in case of error, 1 in case of success
trackstring:the "cleared" trackstring as an array
trackstringarray:the "cleared" trackstring as an array
number_of_entries:the number of entries in the trackstring
------
name:ultraschall.OnlyTracksInOneTrackstring
language:lua
return:(integer:retval),(string:trackstring),(array:trackstringarray),(integer:number_of_entries)
params:(string:trackstring1), (string:trackstring2)
description:
returns a new trackstring, that contains only the tracknumbers, that are in either trackstring1 or trackstring2, NOT in both!
returns -1 in case of error
PARAMETERS:
trackstring1:a string with the tracknumbers, separated by commas
trackstring2:a string with the tracknumbers, separated by commas
RETURNS:
retval:-1 in case of error, 1 in case of success
trackstring:the "cleared" trackstring as an array
trackstringarray:the "cleared" trackstring as an array
number_of_entries:the number of entries in the trackstring
------
name:ultraschall.SetMediaItemStateChunk_in_TrackStateChunk
language:lua
return:(boolean:retval),(string:trackstatechunk)
params:(string:trackstatechunk), (integer:idx), (string:mediaitemstatechunk)
description:
Overwrites the idx'th item from trackstatechunk with mediaitemstatechunk and returns this altered trackstatechunk.
returns false in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk
idx:the number of the item you want to delete
mediaitemstatechunk:a mediaitemstatechunk, as returned by reaper's api function reaper.GetItemStateChunk
RETURNS:
retval:true in case of success, false in case of error
trackstatechunk:the new trackstatechunk with the idx'th item replaced
------
name:ultraschall.GetAllMediaItemsFromTrackStateChunk
language:lua
return:(integer:count),(array:MediaItemStateChunkArray)
params:(string:trackstatechunk)
description:
Returns a MediaItemStateChunkArray with all items in trackstatechunk.
returns -1 in case of error
PARAMETERS:
trackstatechunk:a trackstatechunk, as returned by functions like reaper.GetTrackStateChunk
RETURNS:
count:number of MediaItemStateChunks in the returned array. -1 in case of error
MediaItemStateChunkArray:an array with all MediaItemStateChunks from trackstatechunk
------
name:ultraschall.CreateTrackString_AllTracks
language:lua
return:(string:trackstring)
params:
description:
Returns a trackstring with all tracknumbers from the current project.
Returns an empty string, if no track is available.
RETURNS:
trackstring:a string with all tracknumbers, separated by commas.
------
name:ultraschall.GetTrackLength
language:lua
return:(integer:length)
params:(integer:Tracknumber)
description:
Returns the length of a track, that means, the end of the last item in track Tracknumber.
Will return -1, in case of error
PARAMETERS:
Tracknumber:the tracknumber, whose length you want to know
RETURNS:
length:the length of the track in seconds
------
name:ultraschall.GetLengthOfAllMediaItems_Track
language:lua
return:(integer:length)
params:(integer:Tracknumber)
description:
Returns the length of all MediaItems in track, combined.
Will return -1, in case of error
PARAMETERS:
Tracknumber:the tracknumber, whose length you want to know; 1, track 1; 2, track 2, etc
RETURNS:
length:the length of all MediaItems in the track combined, in seconds
------
name:ultraschall.ApplyActionToTrack
language:lua
return:(boolean:retval)
params:(string:trackstring), (string/number:actioncommandid)
description:
Applies action to the tracks, given by trackstring
The action given must support applying itself to selected tracks.
Returns false in case of an error
PARAMETERS:
trackstring:a string with all tracknumbers, separated by a comma; 1 for the first track, 2 for the second
RETURNS:
retval:true, running action was successful; false, running the action was unsuccessful
------
name:ultraschall.InsertTrackAtIndex
language:lua
return:(string:trackarray),(integer:new_track_count),(array:trackarray_newtracks)
params:(integer:index), (integer:number_of_tracks), (boolean:wantdefaults)
description:
Inserts one or more tracks at index.
Returns nil in case of an error
PARAMETERS:
index:the index, at which to include the new tracks; 0, for including before the first track
number_of_tracks:the number of tracks that you want to create; 0 for including before track 1; number of tracks+1, include new tracks after last track
wantdefaults:true, set the tracks with default settings/fx/etc; false, create new track without any defaults
RETURNS:
trackarray:an array with the MediaTrack-objects of all newly created tracks
new_track_count:the number of newly created tracks
trackarray_newtracks:an array with the MediaTrack-objects of all newly created tracks
------
name:ultraschall.MoveTracks
language:lua
return:(boolean:retval)
params:(string:trackstring), (integer:targetindex), (integer:makepreviousfolder)
description:
Moves tracks in trackstring to position targetindex. You can also set, if the tracks shall become folders.
Multiple tracks in trackstring will be put together, so track 2, 4, 6 would become 1, 2, 3, when moved above the first track!
Returns false in case of an error
PARAMETERS:
trackstring:a string with all tracknumbers of the tracks you want to move, separated by commas
targetindex:the index, to which to move the tracks; 0, move tracks before track 1; number of tracks+1, move after the last track
makepreviousfolder:make tracks a folder or not
RETURNS:
retval:true, moving was successful; false, moving wasn't successful
------
name:ultraschall.CreateTrackString_ArmedTracks
language:lua
return:(string:trackstring)
params:
description:
Gets a trackstring with tracknumbers of all armed tracks in it.
Returns "" if no track is armed.
RETURNS:
trackstring:a trackstring with the tracknumbers of all armed tracks as comma separated csv-string, eg: "1,3,4,7"
------
name:ultraschall.CreateTrackString_UnarmedTracks
language:lua
return:(string:trackstring)
params:
description:
Gets a trackstring with tracknumbers of all unarmed tracks in it.
Returns "" if all tracks are armed.
RETURNS:
trackstring:a trackstring with the tracknumbers of all unarmed tracks as comma separated csv-string, eg: "1,3,4,7"
------
name:ultraschall.CreateTrackStringByGUID
language:lua
return:(string:trackstring)
params:(string:guid_csv_string)
description:
returns a trackstring with all tracks, as given by the GUIDs in the comma-separated-csv-string guid_csv_string.
returns "" in case of an error, like no track available or an invalid string
PARAMETERS:
guid_csv_string:a comma-separated csv-string, that includes all GUIDs of all track to be included in the trackstring.
RETURNS:
trackstring:a string with all the tracknumbers of the tracks given as GUIDs in guid_csv_string
------
name:ultraschall.CreateTrackStringByTracknames
language:lua
return:(string:trackstring)
params:(string:tracknames_csv_string)
description:
returns a trackstring with all tracks, as given by the tracknames in the newline(!)-separated-csv-string guid_csv_string.
returns "" in case of an error, like no track available or an invalid string
PARAMETERS:
tracknames_csv_string:a newline(!)-separated csv-string, that includes all tracknames of all track to be included in the trackstring. Tracknames are case sensitive!
RETURNS:
trackstring:a string with all the tracknumbers of the tracks given as tracknames in tracknames_csv_string
------
name:ultraschall.CreateTrackStringByMediaTracks
language:lua
return:(string:trackstring)
params:(array:MediaTrackArray)
description:
returns a trackstring with all tracks, as given in the array MediaTrackArray
returns "" in case of an error, like no track available or an invalid string
PARAMETERS:
MediaTrackArray:an array, that includes all MediaTrack-objects to be included in the trackstring; a nil-entry is seen as the end of the array
RETURNS:
trackstring:a string with all the tracknumbers of the MediaTrack-objects given in parameter MediaTrackArray
------
name:ultraschall.GetTracknumberByGuid
language:lua
return:(integer:tracknumber),(MediaTrack:tr)
params:(string:guid)
description:
returns the tracknumber and track of a guid. The track must be in the currently active project!
Supports the returned guids by reaper.BR_GetMediaTrackGUID and reaper.GetTrackGUID.
returns -1 in case of an error
RETURNS:
tracknumber:the number of the track; 0, for master track; 1, for track 1; 2, for track 2, etc. -1, in case of an error
tr:the MediaTrack-object of the requested track; nil, if no track is found
------
name:ultraschall.DeleteTracks_TrackString
language:lua
return:(boolean:retval)
params:(string:trackstring)
description:
deletes all tracks in trackstring
Returns false in case of an error
PARAMETERS:
trackstring:a string with all tracknumbers, separated by commas
RETURNS:
retval:true, setting it was successful; false, setting it was unsuccessful
------
name:ultraschall.AnyTrackMute
language:lua
return:(boolean:retval)
params:(optional boolean:master)
description:
returns true, if any track is muted, otherwise returns false.
PARAMETERS:
master:true, include the master-track as well; false, don't include master-track
RETURNS:
retval:true, if any track is muted; false, if not
------
name:ultraschall.AnyTrackRecarmed
language:lua
return:(boolean:retval)
params:
description:
Returns true, if any track is recarmed.
RETURNS:
retval:true, at least one track is recarmed; false, no track is recarmed
------
name:ultraschall.AnyTrackPhased
language:lua
return:(boolean:retval)
params:
description:
Returns true, if any track has phase-invert activated.
RETURNS:
retval:true, at least one track has an activated phase-invert; false, no track is phase-inverted
------
name:ultraschall.AnyTrackRecMonitored
language:lua
return:(boolean:retval)
params:
description:
Returns true, if any track has monitoring of recinput activated.
RETURNS:
retval:true, at least one track has an activated rec-monitoring; false, no track is rec-monitored
------
name:ultraschall.AnyTrackHiddenTCP
language:lua
return:(boolean:retval)
params:(optional boolean:master)
description:
Returns true, if any track is hidden in Track Control Panel.
PARAMETERS:
master:true, include the master-track; false, don't include the master-track
RETURNS:
retval:true, at least one track is hidden in TCP; false, no track is hidden
------
name:ultraschall.AnyTrackHiddenMCP
language:lua
return:(boolean:retval)
params:(optional boolean:master)
description:
Returns true, if any track is hidden in Mixer Control Panel.
PARAMETERS:
master:true, include the master-track; false, don't include the master-track
RETURNS:
retval:true, at least one track is hidden in MCP; false, no track is hidden
------
name:ultraschall.AnyTrackFreeItemPositioningMode
language:lua
return:(boolean:retval)
params:
description:
Returns true, if any track has free item positioning mode(freemode) activated.
RETURNS:
retval:true, at least one track has freemode activated; false, no track has freemode-activated
------
name:ultraschall.AnyTrackFXBypass
language:lua
return:(boolean:retval)
params:(optional boolean:master)
description:
Returns true, if any track has fx-bypass activated.
PARAMETERS:
master:true, include the master-track; false, don't include the master-track
RETURNS:
retval:true, at least one track has fx bypass activated; false, no track has fx-bypass activated
------
name:ultraschall.GetTrackHWOut
language:lua
return:(integer:outputchannel),(integer:post_pre_fader),(number:volume),(number:pan),(integer:mute),(integer:phase),(integer:source),(number:pan_law),(integer:automationmode)
params:(integer:tracknumber), (integer:idx), (optional string:TrackStateChunk)
description:
Returns the settings of the HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber. There can be more than one, which you can choose with idx.
It's the entry HWOUT
returns -1 in case of failure
PARAMETERS:
tracknumber:the number of the track, whose HWOut you want, 0 for Master Track
idx:the id-number of the HWOut, beginning with 1 for the first HWOut-Settings
TrackStateChunk:a TrackStateChunk, whose HWOUT-entries you want to get
RETURNS:
outputchannel:outputchannel, with 1024+x the individual hw-outputchannels, 0,2,4,etc stereo output channels
post_pre_fader:0-post-fader(post pan), 1-preFX, 3-pre-fader(Post-FX), as set in the Destination "Controls for Track"-dialogue
volume:volume, as set in the Destination "Controls for Track"-dialogue; see MKVOL2DB to convert it into a dB-value
pan:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
mute:mute, 1-on, 0-off, as set in the Destination "Controls for Track"-dialogue
phase:Phase, 1-on, 0-off, as set in the Destination "Controls for Track"-dialogue
source:source, as set in the Destination "Controls for Track"-dialogue
pan_law:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
automationmode:automation mode, as set in the Destination "Controls for Track"-dialogue
------
name:ultraschall.GetTrackAUXSendReceives
language:lua
return:(integer:recv_tracknumber),(integer:post_pre_fader),(number:volume),(number:pan),(integer:mute),(integer:mono_stereo),(integer:phase),(integer:chan_src),(integer:snd_chan),(number:pan_law),(integer:midichanflag),(integer:automation)
params:(integer:tracknumber), (integer:idx), (optional string:TrackStateChunk)
description:
Returns the settings of the Send/Receive, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber. There can be more than one, which you can choose with idx.
Remember, if you want to get the sends of a track, you need to check the recv_tracknumber-returnvalues of the OTHER(!) tracks, as you can only get the receives. With the receives checked, you know, which track sends.
It's the entry AUXRECV
returns -1 in case of failure
PARAMETERS:
tracknumber:the number of the track, whose Send/Receive you want
idx:the id-number of the Send/Receive, beginning with 1 for the first Send/Receive-Settings
TrackStateChunk:a TrackStateChunk, whose AUXRECV-entries you want to get
RETURNS:
recv_tracknumber:Tracknumber, from where to receive the audio from
post_pre_fader:0-PostFader, 1-PreFX, 3-Pre-Fader
volume:Volume; see MKVOL2DB to convert it into a dB-value
pan:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
mute:Mute this send(1) or not(0)
mono_stereo:Mono(1), Stereo(0)
phase:Phase of this send on(1) or off(0)
chan_src:Audio-Channel Source
snd_chan:send to channel
pan_law:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
midichanflag:All Midi Tracks
automation:Automation Mode
------
name:ultraschall.CountTrackHWOuts
language:lua
return:(integer:count_HWOuts)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
Counts and returns the number of existing HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber.
returns -1 in case of failure
PARAMETERS:
tracknumber:the number of the track, whose HWOUTs you want to count. 0 for Master Track; -1, to use optional parameter TrackStateChunk instead
TrackStateChunk:the TrackStateChunk, whose hwouts you want to count; only when tracknumber=-1
RETURNS:
count_HWOuts:the number of HWOuts in tracknumber
------
name:ultraschall.CountTrackAUXSendReceives
language:lua
return:(integer:count_SendReceives)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
Counts and returns the number of existing Send/Receives/Routing-settings, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber.
returns -1 in case of failure
PARAMETERS:
tracknumber:the number of the track, whose Send/Receive you want; -1, if you want to pass a TrackStateChunk instead
TrackStateChunk:the TrackStateChunk, whose hwouts you want to count; only when tracknumber=-1
RETURNS:
count_SendReceives:the number of Send/Receives-Settings in tracknumber
------
name:ultraschall.AddTrackHWOut
language:lua
return:(boolean:retval),(optional string:TrackStateChunk)
params:(integer:tracknumber), (integer:outputchannel), (integer:post_pre_fader), (number:volume), (number:pan), (integer:mute), (integer:phase), (integer:source), (number:pan_law), (integer:automationmode), (optional parameter:TrackStateChunk)
description:
Adds a setting of the HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber.
This function does not check the parameters for plausability, so check your settings twice!
returns false in case of failure
PARAMETERS:
tracknumber:the number of the track, whose HWOut you want. 0 for Master Track; -1, use parameter TrackStateChunk instead
outputchannel:outputchannel, with 1024+x the individual hw-outputchannels, 0,2,4,etc stereo output channels
post_pre_fader:0-post-fader(post pan), 1-preFX, 3-pre-fader(Post-FX), as set in the Destination "Controls for Track"-dialogue
volume:volume, as set in the Destination "Controls for Track"-dialogue; see DB2MKVOL to convert from a dB-value
pan:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
mute:mute, 1-on, 0-off, as set in the Destination "Controls for Track"-dialogue
phase:Phase, 1-on, 0-off, as set in the Destination "Controls for Track"-dialogue
source:source, as set in the Destination "Controls for Track"-dialogue
pan_law:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
automationmode:automation mode, as set in the Destination "Controls for Track"-dialogue
TrackStateChunk:a TrackStateChunk into which to add the hwout-setting; only available, when tracknumber=-1
RETURNS:
retval:true, if it worked; false if it didn't
TrackStateChunk:an altered TrackStateChunk into which you added the new hwout-setting
------
name:ultraschall.AddTrackAUXSendReceives
language:lua
return:(boolean:retval),(optional string:TrackStateChunk)
params:(integer:tracknumber), (integer:recv_tracknumber), (integer:post_pre_fader), (number:volume), (number:pan), (integer:mute), (integer:mono_stereo), (integer:phase), (integer:chan_src), (integer:snd_chan), (number:pan_law), (integer:midichanflag), (integer:automation), (optional string:TrackStateChunk)
description:
Adds a setting of Send/Receive, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber. There can be more than one.
Remember, if you want to set the sends of a track, you need to add it to the track, that shall receive, not the track that sends! Set recv_tracknumber in the track that receives with the tracknumber that sends, and you've set it successfully.
Due to the complexity of send/receive-settings, this function does not check, whether the parameters are plausible. So check twice, whether the added sends/receives appear, as they might not appear!
returns false in case of failure
PARAMETERS:
tracknumber:Tracknumber, from where to receive the audio from
recv_tracknumber:Tracknumber, from where to receive the audio from
post_pre_fader:0-PostFader, 1-PreFX, 3-Pre-Fader
volume:Volume, see DB2MKVOL to convert from a dB-value
pan:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
mute:Mute this send(1) or not(0)
mono_stereo:Mono(1), Stereo(0)
phase:Phase of this send on(1) or off(0)
chan_src:Audio-Channel Source
snd_chan:send to channel
pan_law:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
midichanflag:All Midi Tracks
automation:Automation Mode
TrackStateChunk:the TrackStateChunk, to which you want to add a new receive-routing
RETURNS:
retval:true if it worked, false if it didn't.
TrackStateChunk:an altered TrackStateChunk into which you added a new receive/routing; only available, when tracknumber=-1
------
name:ultraschall.DeleteTrackHWOut
language:lua
return:(boolean:retval),(optional string:TrackStateChunk)
params:(integer:tracknumber), (integer:idx), (optional string:TrackStateChunk)
description:
Deletes the idxth HWOut-Setting of tracknumber.
returns false in case of failure
PARAMETERS:
tracknumber:the number of the track, whose HWOUTs you want to delete. 0 for Master Track. -1, if you want to use the parameter TrackStateChunk instead
idx:the number of the HWOut-setting, that you want to delete; -1, to delete all HWOuts from this track
TrackStateChunk:the TrackStateChunk, from which you want to delete HWOut-entries
RETURNS:
retval:true if it worked, false if it didn't.
TrackStateChunk:the altered TrackStateChunk, from which you deleted HWOut-entries; only available, when tracknumber=-1
------
name:ultraschall.DeleteTrackAUXSendReceives
language:lua
return:(boolean:retval)
params:(integer:tracknumber), (integer:idx), (optional string:TrackStateChunk)
description:
Deletes the idxth Send/Receive-Setting of tracknumber.
returns false in case of failure
PARAMETERS:
tracknumber:the number of the track, whose Send/Receive you want; -1, if you want to use the parameter TrackStateChunk
idx:the number of the send/receive-setting, that you want to delete; -1, deletes all AuxReceives on this track
TrackStateChunk:a TrackStateChunk, from which you want to delete Send/Receive-entries; only available, when tracknumber=-1
RETURNS:
retval:true if it worked, false if it didn't.
------
name:ultraschall.SetTrackHWOut
language:lua
return:(boolean:retval),(optional string:TrackStateChunk)
params:(integer:tracknumber), (integer:idx), (integer:outputchannel), (integer:post_pre_fader), (number:volume), (number:pan), (integer:mute), (integer:phase), (integer:source), (number:pan_law), (integer:automationmode), (optional string:TrackStateChunk)
description:
Sets a setting of the HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber. There can be more than one, so choose the one you want to change with idx.
To retain old-settings, use nil with the accompanying parameters.
This function does not check the parameters for plausability, so check your settings twice, or the HWOut-setting might disappear with faulty parameters!
returns false in case of failure
PARAMETERS:
tracknumber:the number of the track, whose HWOut you want. 0 for Master Track
idx:the number of the HWOut-setting, you want to change
outputchannel:outputchannel, with 1024+x the individual hw-outputchannels, 0,2,4,etc stereo output channels
post_pre_fader:0-post-fader(post pan), 1-preFX, 3-pre-fader(Post-FX), as set in the Destination "Controls for Track"-dialogue
volume:volume, as set in the Destination "Controls for Track"-dialogue; see DB2MKVOL to convert from a dB-value
pan:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
mute:mute, 1-on, 0-off, as set in the Destination "Controls for Track"-dialogue
phase:Phase, 1-on, 0-off, as set in the Destination "Controls for Track"-dialogue
source:source, as set in the Destination "Controls for Track"-dialogue
pan_law:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
automationmode:automation mode, as set in the Destination "Controls for Track"-dialogue
TrackStateChunk:sets an HWOUT-entry in a TrackStateChunk
RETURNS:
retval:true, if it worked; false if it didn't
TrackStateChunk:an altered TrackStateChunk, in which you've set a send/receive-setting; only available when track=-1
------
name:ultraschall.SetTrackAUXSendReceives
language:lua
return:(boolean:retval),(optional string:TrackStateChunk)
params:(integer:tracknumber), (integer:idx), (integer:recv_tracknumber), (integer:post_pre_fader), (number:volume), (number:pan), (integer:mute), (integer:mono_stereo), (integer:phase), (integer:chan_src), (integer:snd_chan), (number:pan_law), (integer:midichanflag), (integer:automation), (optional string:TrackStateChunk)
description:
Alters a setting of Send/Receive, as set in the routing-matrix, as well as in the Destination "Controls for Track"-dialogue, of tracknumber. There can be more than one, so choose the right one with idx.
You can keep the old-setting by using nil as a parametervalue.
Remember, if you want to set the sends of a track, you need to add it to the track, that shall receive, not the track that sends! Set recv_tracknumber in the track that receives with the tracknumber that sends, and you've set it successfully.
Due to the complexity of send/receive-settings, this function does not check, whether the parameters are plausible. So check twice, whether the change sends/receives still appear, as they might disappear with faulty settings!
returns false in case of failure
PARAMETERS:
tracknumber:Tracknumber, from where to receive the audio from
idx:the send/receive-setting, you want to set
recv_tracknumber:Tracknumber, from where to receive the audio from
post_pre_fader:0-PostFader, 1-PreFX, 3-Pre-Fader
volume:Volume; see DB2MKVOL to convert from a dB-value
pan:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
mute:Mute this send(1) or not(0)
mono_stereo:Mono(1), Stereo(0)
phase:Phase of this send on(1) or off(0)
chan_src:Audio-Channel Source
snd_chan:send to channel
pan_law:pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB
midichanflag:All Midi Tracks
automation:Automation Mode
TrackStateChunk:a TrackStateChunk, whose AUXRECV-entries you want to set
RETURNS:
retval:true if it worked, false if it didn't.
TrackStateChunk:an altered TrackStateChunk, whose AUXRECV-entries you've altered
------
name:ultraschall.ClearRoutingMatrix
language:lua
return:(boolean:retval)
params:(boolean:ClearHWOuts), (boolean:ClearAuxRecvs), (boolean:ClearTrackMasterSends), (boolean:ClearMasterTrack), (boolean:undo)
description:
Clears all routing-matrix-settings or optionally part of them
returns false in case of an error
PARAMETERS:
ClearHWOuts:nil or true, clear all HWOuts; false, keep the HWOuts intact
ClearAuxRecvs:nil or true, clear all Send/Receive-settings; false, keep the Send/Receive-settings intact
ClearTrackMasterSends:nil or true, clear all send to master-checkboxes; false, keep them intact
ClearMasterTrack:nil or true, include the Mastertrack as well; false, don't include it
undo:true, set undo point; false or nil, don't set undo point
RETURNS:
retval:true, clearing was successful; false, clearing was unsuccessful
------
name:ultraschall.ApplyAllHWOuts
language:lua
return:(boolean:retval)
params:(table:AllHWOuts), (optional integer:option)
description:
Takes a table, as returned by GetAllHWOuts with all HWOut-settings of all tracks and applies it to all tracks.
When you set option to 2, the individual entries will be applied to the tracks, that have the guids stored in table
table[tracknumber]["TrackID"], otherwise, this function will apply it to track0 to trackn, which is the same as table["number\_of_tracks"].
That way, you can create RoutingSnapshots, that will stay in the right tracks, even if they are ordered differently or when tracks have been added/deleted.
This influences the MasterTrack as well!
expected table is of structure:
table["HWOuts"]=true                              - signals, this is a HWOuts-table; don't change that!
table["number\_of_tracks"]                         - the number of tracks in this table, from track 0(master) to track n
table[tracknumber]["HWOut_count"]                 - the number of HWOuts of tracknumber, beginning with 1
table[tracknumber]["TrackID"]                     - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)
table[tracknumber][HWOutIndex]["outputchannel"]   - the number of outputchannels of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["post\_pre_fader"] - the setting of post-pre-fader of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["volume"]          - the volume of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["pan"]             - the panning of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["mute"]            - the mute-setting of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["phase"]           - the phase-setting of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["source"]          - the source/input of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["pan\_law"]         - pan-law, default is -1
table[tracknumber][HWOutIndex]["automationmode"]  - the automation-mode of this HWOutIndex of tracknumber
See GetTrackHWOut for more details on the individual settings, stored in the entries.
returns false in case of an error
PARAMETERS:
AllHWOuts:a table with all AllHWOut-entries of the current project
option:nil or 1, HWOuts will be applied to Track 0(MasterTrack) to table["number_of_tracks"]; 2, HWOuts will be applied to the tracks with the guid TrackID
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.ApplyAllAUXSendReceives
language:lua
return:(boolean:retval)
params:(table:AllAUXSendReceives), (optional integer:option)
description:
takes a table, as returned by GetAllAUXSendReceive with all AUXSendReceive-settings of all tracks and applies it to all tracks.
When you set option to 2, the individual entries will be applied to the tracks, that have the guids stored in table
table[tracknumber]["TrackID"], otherwise, this function will apply it to track1 to trackn, which is the same as table["number\_of_tracks"].
That way, you can create RoutingSnapshots, that will stay in the right tracks, even if they are ordered differently or when tracks have been added/deleted.
expected table is of structure:
table["AllAUXSendReceive"]=true                               - signals, this is an AllAUXSendReceive-table. Don't alter!
table["number\_of_tracks"]                                     - the number of tracks in this table, from track 1 to track n
table[tracknumber]["AUXSendReceives_count"]                   - the number of AUXSendReceives of tracknumber, beginning with 1
table[tracknumber]["TrackID"]                                 - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)
table[tracknumber][AUXSendReceivesIndex]["recv\_tracknumber"] - the track, from which to receive audio in this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["recv\_track\_guid"] - the guid of the receive-track; with that, you can be sure to get the right receive-track, even if trackorder changes
table[tracknumber][AUXSendReceivesIndex]["post\_pre_fader"]   - the setting of post-pre-fader of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["volume"]            - the volume of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["pan"]               - the panning of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["mute"]              - the mute-setting of this AUXSendReceivesIndex  of tracknumber
table[tracknumber][AUXSendReceivesIndex]["mono\_stereo"]      - the mono/stereo-button-setting of this AUXSendReceivesIndex  of tracknumber
table[tracknumber][AUXSendReceivesIndex]["phase"]             - the phase-setting of this AUXSendReceivesIndex  of tracknumber
table[tracknumber][AUXSendReceivesIndex]["chan\_src"]         - the audiochannel-source of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["snd\_src"]          - the send-to-channel-target of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["pan\_law"]           - pan-law, default is -1
table[tracknumber][AUXSendReceivesIndex]["midichanflag"]      - the Midi-channel of this AUXSendReceivesIndex of tracknumber, leave it 0
table[tracknumber][AUXSendReceivesIndex]["automation"]        - the automation-mode of this AUXSendReceivesIndex  of tracknumber
See GetTrackAUXSendReceives for more details on the individual settings, stored in the entries.
returns false in case of an error
PARAMETERS:
AllAUXSendReceives:a table with all AllAUXSendReceive-entries of the current project
option:nil or 1, AUXRecvs will be applied to Track 1 to table["number_of_tracks"]; 2, AUXRecvs will be applied to the tracks with the guid TrackID
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.GetAllMainSendStates
language:lua
return:(table:AllMainSends),(integer number_of_tracks:)
params:
description:
returns a table with all MainSend-settings of all tracks, excluding master-track.
The MainSend-settings are the settings, if a certain track sends it's signal to the Master Track
returned table is of structure:
Table["number\_of_tracks"]            - The number of tracks in this table, from track 1 to track n
Table["MainSend"]=true               - signals, this is an AllMainSends-table
table[tracknumber]["TrackID"]        - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)
Table[tracknumber]["MainSendOn"]     - Send to Master on(1) or off(1)
Table[tracknumber]["ParentChannels"] - the parent channels of this track
See GetTrackMainSendState for more details on the individual settings, stored in the entries.
RETURNS:
AllMainSends:a table with all AllMainSends-entries of the current project.
integer number_of_tracks:the number of tracks in the AllMainSends-table
------
name:ultraschall.ApplyAllMainSendStates
language:lua
return:(boolean:retval)
params:(table:AllMainSendsTable), (optional integer:option)
description:
takes a table, as returned by GetAllMainSendStates with all MainSend-settings of all tracks and applies it to all tracks.
The MainSend-settings are the settings, if a certain track sends it's signal to the Master Track.
When you set option to 2, the individual entries will be applied to the tracks, that have the guids stored in table
table[tracknumber]["TrackID"], otherwise, this function will apply it to track0 to trackn, which is the same as table["number\_of_tracks"].
That way, you can create RoutingSnapshots, that will stay in the right tracks, even if they are ordered differently or when tracks have been added/deleted.
This influences the MasterTrack as well!
expected table is of structure:
Table["number\_of_tracks"]            - The number of tracks in this table, from track 1 to track n
Table["MainSend"]=true               - signals, this is an AllMainSends-table
table[tracknumber]["TrackID"]        - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)
Table[tracknumber]["MainSendOn"]     - Send to Master on(1) or off(1)
Table[tracknumber]["ParentChannels"] - the parent channels of this track
See GetTrackMainSendState for more details on the individual settings, stored in the entries.
returns false in case of an error
PARAMETERS:
option:nil or 1, MainSend-settings will be applied to Track 1 to table["number_of_tracks"]; 2, MasterSends will be applied to the tracks with the guid stored in table[tracknumber]["TrackID"].
RETURNS:
retval:true, setting was successful; false, it was unsuccessful
------
name:ultraschall.AreHWOutsTablesEqual
language:lua
return:(boolean retval:)
params:(table:AllHWOuts), (table:AllHWOuts2), (optional integer:option)
description:
Compares two HWOuts-tables, as returned by GetAllHWOuts](#GetAllHWOuts) or [GetAllHWOuts2
if option=2 then it will also compare, if the stored track-guids are the equal. Otherwise, it will only check the individual settings, even if the guids are different between the two tables.
returns false in case of an error
PARAMETERS:
AllHWOuts:a table with all HWOut-settings of all tracks, that you want to compare to AllHWOuts
AllHWOuts2:a table with all HWOut-settings of all tracks, that you want to compare to AllHWOuts
option:nil or 1, to compare everything, except the stored TrackGuids; 2, include comparing the stored TrackGuids as well
RETURNS:
boolean retval:true, if the two tables are equal HWOuts; false, if not
------
name:ultraschall.AreMainSendsTablesEqual
language:lua
return:(boolean retval:)
params:(table:AllMainSends), (table:AllMainSends2), (optional integer:option)
description:
Compares two AllMainSends-tables, as returned by GetAllMainSendStates](#GetAllMainSendStates) or [GetAllMainSendStates2
if option=2 then it will also compare, if the stored track-guids are the equal. Otherwise, it will only check the individual settings, even if the guids are different between the two tables.
returns false in case of an error
PARAMETERS:
AllMainSends:a table with all AllMainSends-settings of all tracks, that you want to compare to AllMainSends
AllMainSends2:a table with all AllMainSends-settings of all tracks, that you want to compare to AllMainSends
option:nil or 1, to compare everything, except the stored TrackGuids; 2, include comparing the stored TrackGuids as well
RETURNS:
boolean retval:true, if the two tables are equal AllMainSends; false, if not
------
name:ultraschall.AreAUXSendReceivesTablesEqual
language:lua
return:(boolean retval:)
params:(table:AllAUXSendReceives), (table:AllAUXSendReceives2), (optional integer:option)
description:
Compares two AllAUXSendReceives-tables, as returned by GetAllAUXSendReceives](#GetAllAUXSendReceives) or [GetAllAUXSendReceives2
if option=2 then it will also compare, if the stored track-guids are the equal. Otherwise, it will only check the individual settings, even if the guids are different between the two tables.
returns false in case of an error
PARAMETERS:
AllAUXSendReceives:a table with all AllAUXSendReceives-settings of all tracks, that you want to compare to AllAUXSendReceives
AllAUXSendReceives2:a table with all AllAUXSendReceives-settings of all tracks, that you want to compare to AllAUXSendReceives
option:nil or 1, to compare everything, except the stored TrackGuids; 2, include comparing the stored TrackGuids as well
RETURNS:
boolean retval:true, if the two tables are equal AllMainSends; false, if not
------
name:ultraschall.GetTrackStateChunk_Tracknumber
language:lua
return:(boolean:retval),(string:trackstatechunk)
params:(integer:tracknumber)
description:
returns the trackstatechunk for track tracknumber
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber, 0 for master track, 1 for track 1, 2 for track 2, etc.    
RETURNS:
retval:true in case of success; false in case of error
trackstatechunk:the trackstatechunk for track tracknumber
------
name:ultraschall.GetTrackState_NumbersOnly
language:lua
return:(table:values)
params:(string:state), (optional string:TrackStateChunk), (optional string:functionname), (optional boolean:numbertoggle)
description:
returns a state of a TrackStateChunk.
It only supports single-entry-states with numbers/integers, separated by spaces!
All other values will be set to nil and strings with spaces will produce weird results!
returns nil in case of an error
PARAMETERS:
state:the state, whose attributes you want to retrieve
TrackStateChunk:a statechunk of a track
functionname:if this function is used within specific gettrackstate-functions, pass here the "host"-functionname, so error-messages will reflect that
numbertoggle:true or nil; converts all values to numbers; false, keep them as string versions
RETURNS:
values:all values found as numerical indexed array
------
name:ultraschall.GetTrackName
language:lua
return:(string:trackname)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns name of the track.
It's the entry NAME
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
trackname:the name of the track
------
name:ultraschall.GetTrackPeakColorState
language:lua
return:(integer:PeakColorState)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns state of the PeakColor-number, which is the trackcolor. Will be returned as string, to avoid losing trailing or preceding zeros.
It's the entry PEAKCOL
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
PeakColorState:the color of the track
------
name:ultraschall.GetTrackBeatState
language:lua
return:(number:BeatState)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns Track-BeatState.
It's the entry BEAT
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
BeatState:-1 - Project time base; 0 - Time; 1 - Beats position, length, rate; 2 - Beats position only
------
name:ultraschall.GetTrackMuteSoloState
language:lua
return:(integer:Mute),(integer:Solo),(integer:SoloDefeat)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns states of Mute and Solo-Buttons.
It's the entry MUTESOLO
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
Mute:Mute set to 0 - Mute off, 1 - Mute On
Solo:SoloDefeat set to 0 - off, 1 - on
SoloDefeat:SoloDefeat set to 0 - off, 1 - on
------
name:ultraschall.GetTrackIPhaseState
language:lua
return:(number:IPhase)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns state of the IPhase. If the Phase-button is pressed, it will return 1, else it will return 0.
It's the entry IPHASE
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
IPhase:state of the phase-button; 0, normal phase; 1, inverted phase(180°)
------
name:ultraschall.GetTrackBusCompState
language:lua
return:(number:BusCompState1),(number:BusCompState2),(number:BusCompState3),(number:BusCompState4),(number:BusCompState5)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns BusCompState, if the tracks in a folder are compacted or not.
It's the entry BUSCOMP
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
BusCompState1:0 - no compacting, 1 - compacted tracks, 2 - minimized tracks
BusCompState2:0 - unknown,1 - unknown
BusCompState3:0 - unknown,1 - unknown
BusCompState4:0 - unknown,1 - unknown
BusCompState5:0 - unknown,1 - unknown
------
name:ultraschall.GetTrackShowInMixState
language:lua
return:(integer:MCPvisible),(number:MCP_FX_visible),(number:MCPTrackSendsVisible),(integer:TCPvisible),(number:ShowInMix5),(number:ShowInMix6),(number:ShowInMix7),(number:ShowInMix8)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns Show in Mix-state.
It's the entry SHOWINMIX
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
MCPvisible:0 invisible, 1 visible
MCP_FX_visible:0 visible, 1 FX-Parameters visible, 2 invisible
MCPTrackSendsVisible:0 & 1.1 and higher TrackSends in MCP visible, every other number makes them invisible
TCPvisible:0 track is invisible in TCP, 1 track is visible in TCP
ShowInMix5:unknown
ShowInMix6:unknown
ShowInMix7:unknown
ShowInMix8:unknown
------
name:ultraschall.GetTrackFreeModeState
language:lua
return:(integer:FreeModeState)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns if the track has track free item positioning enabled(1) or not(0).
It's the entry FREEMODE
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
FreeModeState:1 - enabled, 0 - not enabled
------
name:ultraschall.GetTrackRecState
language:lua
return:(integer:ArmState),(integer:InputChannel),(integer:MonitorInput),(integer:RecInput),(integer:MonitorWhileRec),(integer:presPDCdelay),(integer:RecordingPath)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns Track Rec State.
It's the entry REC
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
ArmState:returns 1(armed) or 0(unarmed)
InputChannel:returns the InputChannel
MonitorInput:0 monitor off, 1 monitor on, 2 monitor on tape audio style
RecInput:returns rec-input type
MonitorWhileRec:Monitor Trackmedia when recording, 0 is off, 1 is on
presPDCdelay:preserve PDC delayed monitoring in media items
RecordingPath:recording path used 
------
name:ultraschall.GetTrackHeightState
language:lua
return:(integer:height),(integer:heightstate2),(integer:unknown)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns height of the track.
It's the entry TRACKHEIGHT
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
height:0, don't lock the trackheight; 1, lock the trackheight
heightstate2:0 - use height, 1 - compact the track and ignore the height
------
name:ultraschall.GetTrackINQState
language:lua
return:(integer:quantMIDI),(integer:quantPOS),(integer:quantNoteOffs),(number:quantToFractBeat),(integer:quantStrength),(integer:swingStrength),(integer:quantRangeMin),(integer quantRangeMax:)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
Gets INQ-state, mostly the quantize-settings for MIDI, as set in the "Track: View track recording settings (MIDI quantize, file format/path) for last touched track"-dialog (action 40604)
It's the entry INQ
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
quantMIDI: quantize MIDI; 0 or 1
quantPOS: quantize to position; -1,prev; 0, nearest; 1, next
quantNoteOffs: quantize note-offs; 0 or 1
quantToFractBeat: quantize to (fraction of beat)
quantStrength: quantize strength; -128 to 127
swingStrength: swing strength; -128 to 127
quantRangeMin: quantize range minimum; -128 to 127
integer quantRangeMax: quantize range maximum; -128 to 127
------
name:ultraschall.GetTrackNChansState
language:lua
return:(integer:channelnumber)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the number of channels for this track, as set in the routing.
It's the entry NCHAN
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
channelnumber:number of channels for this track
------
name:ultraschall.GetTrackBypFXState
language:lua
return:(integer:FXState)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the off/bypass(0) or nobypass(1) state of the FX-Chain
It's the entry FX
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
FXState:off/bypass(0) or nobypass(1)
------
name:ultraschall.GetTrackPerfState
language:lua
return:(integer:TrackPerfState)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns TrackPerformance-state
It's the entry PERF
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
TrackPerfState:TrackPerformance-state
------
name:ultraschall.GetTrackMIDIOutState
language:lua
return:(integer:MidiOutState)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns MIDI_Out-State, as set in the Routing-Settings
It's the entry MIDIOUT
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
MidiOutState:MIDI_Out-State, as set in the Routing-Settings
------
name:ultraschall.GetTrackMainSendState
language:lua
return:(integer:MainSendOn),(integer:ParentChannels)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns, if Main-Send is on(1) or off(0) and the ParentChannels(0-63), as set in the Routing-Settings.
It's the entry MAINSEND
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
MainSendOn:Main-Send is on(1) or off(0)
ParentChannels:ParentChannels(0-63)
------
name:ultraschall.GetTrackGroupFlagsState
language:lua
return:(integer:GroupState_as_Flags),(array:IndividualGroupState_Flags)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the state of the group-flags, as set in the menu Track Grouping Parameters. Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.
You can reach the Group-Flag-Settings in the context-menu of a track.
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.
So if you want to get Volume Master(table entry 1) to check if it's set in Group 1(2^0=1) and 3(2^2=4):
group1=groups_bitfield_table[1]&1
group2=groups_bitfield_table[1]&4
The following flags(and their accompanying array-entry-index) are available:
1 - Volume Master
2 - Volume Slave
3 - Pan Master
4 - Pan Slave
5 - Mute Master
6 - Mute Slave
7 - Solo Master
8 - Solo Slave
9 - Record Arm Master
10 - Record Arm Slave
11 - Polarity/Phase Master
12 - Polarity/Phase Slave
13 - Automation Mode Master
14 - Automation Mode Slave
15 - Reverse Volume
16 - Reverse Pan
17 - Do not master when slaving
18 - Reverse Width
19 - Width Master
20 - Width Slave
21 - VCA Master
22 - VCA Slave
23 - VCA pre-FX slave
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.
This function will work only for Groups 1 to 32. To get Groups 33 to 64, use GetTrackGroupFlags_HighState instead!
It's the entry GROUP_FLAGS
returns -1 in case of failure
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
GroupState_as_Flags:returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.
IndividualGroupState_Flags:returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.
------
name:ultraschall.GetTrackGroupFlags_HighState
language:lua
return:(integer:GroupState_as_Flags),(array:IndividualGroupState_Flags)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the state of the group-flags, as set in the menu Track Grouping Parameters. Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.
You can reach the Group-Flag-Settings in the context-menu of a track.
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.
So if you want to get Volume Master(table entry 1) to check if it's set in Group 33(2^0=1) and 35(2^2=4):
group1=groups_bitfield_table[1]&1
group2=groups_bitfield_table[1]&4
The following flags(and their accompanying array-entry-index) are available:
1 - Volume Master
2 - Volume Slave
3 - Pan Master
4 - Pan Slave
5 - Mute Master
6 - Mute Slave
7 - Solo Master
8 - Solo Slave
9 - Record Arm Master
10 - Record Arm Slave
11 - Polarity/Phase Master
12 - Polarity/Phase Slave
13 - Automation Mode Master
14 - Automation Mode Slave
15 - Reverse Volume
16 - Reverse Pan
17 - Do not master when slaving
18 - Reverse Width
19 - Width Master
20 - Width Slave
21 - VCA Master
22 - VCA Slave
23 - VCA pre-FX slave
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.
This function will work only for Groups 33(2^0) to 64(2^31). To get Groups 1 to 32, use GetTrackGroupFlagsState instead!
It's the entry GROUP_FLAGS_HIGH
returns -1 in case of failure
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
GroupState_as_Flags:returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.
IndividualGroupState_Flags:returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.
------
name:ultraschall.GetTrackLockState
language:lua
return:(integer:lockedstate)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns, if the track-controls of this track are locked(1) or not(nil).
It's the entry LOCK
Only the LOCK within TrackStateChunks, but not MediaItemStateChunks
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
lockedstate:locked(1) or not(nil)
------
name:ultraschall.GetTrackLayoutNames
language:lua
return:(string:TCP_Layoutname),(string:MCP_Layoutname)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the current selected layouts for TrackControlPanel and MixerControlPanel for this track as strings. Returns nil, if default is set.
It's the entry LAYOUTS
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
TCP_Layoutname:name of the TCP-Layoutname
MCP_Layoutname:name of the MCP-Layoutname
------
name:ultraschall.GetTrackAutomodeState
language:lua
return:(integer:automodestate)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns, if the automation-mode for envelopes of this track
It's the entry AUTOMODE
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
automodestate:is set to 0 - trim/read, 1 - read, 2 - touch, 3 - write, 4 - latch.
------
name:ultraschall.GetTrackIcon_Filename
language:lua
return:(string:filename_with_path)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the filename with path for the track-icon of the current track. Returns nil, if no trackicon has been set.
It's the entry TRACKIMGFN
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
filename_with_path:filename with path for the current track-icon.
------
name:ultraschall.GetTrackRecCFG
language:lua
return:(string:reccfg)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the Rec-configuration-string, with which recordings are made. Returns nil, if no reccfg exists.
It's the entry
string reccfg - the string, that encodes the recording configuration of the track.
integer reccfgnr - the number of the recording-configuration of the track;
- 0, use default project rec-setting
- 1, use track-customized rec-setting, as set in the "Track: View track recording settings (MIDI quantize, file format/path) for last touched track"-dialog (action 40604)
integer tracknumber - number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
optional string TrackStateChunk - a TrackStateChunk that you want to use, instead of a given track
Track Management
Get Track States
US_Api_Functions
Modules/ultraschall_functions_TrackManagement_TrackStates_Module.lua
trackmanagement, state, get, reccfg, trackstatechunk
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
reccfg:the number of the recording-configuration of the track; 
------
name:ultraschall.GetTrackMidiInputChanMap
language:lua
return:(integer:MidiInputChanMap_state)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns the state of the MIDIInputChanMap for the current track, as set in the Input-MIDI->Map Input to Channel menu. 0 for channel 1, 2 for channel 2, etc. Nil, if not existing.
It's the entry MIDI_INPUT_CHANMAP
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
MidiInputChanMap_state:0 for channel 1, 1 for channel 2, ... 15 for channel 16; nil, source channel.
------
name:ultraschall.GetTrackMidiCTL
language:lua
return:(integer:LinkedToMidiChannel),(integer:unknown)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns linked to Midi channel and an unknown value. Nil if not existing.
It's the entry MIDICTL
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
LinkedToMidiChannel:linked to midichannel
unknown:unknown
------
name:ultraschall.GetTrackWidth
language:lua
return:(number:width)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns width of the track. 1 if set to +100%.
Note for TrackStateChunk-enthusiasts: When set to +100%, it is not stored in the TrackStateChunk
It's the entry WIDTH
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
width:width of the track, from -1(-100%) to 1(+100%)
------
name:ultraschall.GetTrackPanMode
language:lua
return:(integer:PanMode)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns Panmode of the track.
It's the entry PANMODE
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
PanMode:the Panmode of the track
------
name:ultraschall.GetTrackMidiColorMapFn
language:lua
return:(string:MidiColorMapFn)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns MidiColorMap-Filename of the track. Nil if not existing.
It's the entry MIDICOLORMAPFN
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
MidiColorMapFn:the MidiColorMap-Filename; nil if not existing
------
name:ultraschall.GetTrackMidiBankProgFn
language:lua
return:(string:MidiBankProgFn)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns MidiBankProg-Filename of the track. Nil if not existing.
It's the entry MIDIBANKPROGFN
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
MidiBankProgFn:the MidiBankProg-Filename; nil if not existing
------
name:ultraschall.GetTrackMidiTextStrFn
language:lua
return:(string:MidiTextStrFn)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns MidiTextStrFn-Filename of the track. Nil if not existing.
It's the entry MIDIEXTSTRFN
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
MidiTextStrFn:the MidiTextStrFn-Filename; nil if not existing
------
name:ultraschall.GetTrackID
language:lua
return:(string:TrackID)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns TrackID of the track.
It's the entry TRACKID
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
TrackID:the TrackID as GUID
------
name:ultraschall.GetTrackScore
language:lua
return:(integer:Score1),(integer:Score2),(number:Score3),(number Score4:)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns Score of the track.
It's the entry SCORE
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
Score1:unknown 
Score2:unknown
Score3:unknown
number Score4:unknown
------
name:ultraschall.GetTrackVolPan
language:lua
return:(number:Vol),(number:Pan),(number:OverridePanLaw),(number:unknown),(number:unknown2)
params:(integer:tracknumber), (optional string:TrackStateChunk)
description:
returns Vol and Pan-states of the track.
It's the entry VOLPAN
returns nil in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.
TrackStateChunk:a TrackStateChunk that you want to use, instead of a given track
RETURNS:
Vol:Volume Settings
Pan:Override Default Pan Track Law
OverridePanLaw:Override Default Pan Track Law
unknown:unknown
unknown2:unknown
------
name:ultraschall.SetTrackName
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:name), (optional string:TrackStateChunk)
description:
Set the name of a track or a trackstatechunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
name:new name of the track
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackPeakColorState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:colorvalue), (optional string:TrackStateChunk)
description:
Set the color of the track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
colorvalue:the color for the track
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackBeatState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:beatstate), (optional string:TrackStateChunk)
description:
Set the timebase for a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
beatstate:tracktimebase for this track; -1 - Project time base, 0 - Time, 1 - Beats position, length, rate, 2 - Beats position only
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackAutoRecArmState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:autorecarmstate), (optional string:TrackStateChunk)
description:
Set the AutoRecArmState for a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
autorecarmstate:autorecarmstate - 1 - autorecarm on, <> than 1 - off
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMuteSoloState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:Mute), (integer:Solo), (integer:SoloDefeat), (optional string:TrackStateChunk)
description:
Set the Track Mute/Solo/Solodefeat for a track or a TrackStateChunk.
Has no real effect on master track.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
Mute:Mute set to 0 - Mute off, 1 - Mute On
Solo:SoloDefeat set to 0 - off, 1 - on
SoloDefeat:SoloDefeat set to 0 - off, 1 - on
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackIPhaseState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:iphasestate), (optional string:TrackStateChunk)
description:
Sets IPhase, the Phase-Buttonstate of the track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
iphasestate:0-off, <> than 0-on
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackIsBusState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:busstate1), (integer:busstate2), (optional string:TrackStateChunk)
description:
Sets ISBUS-state of the track or a TrackStateChunk; if it's a folder track.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk
busstate1:track is last track in folder(no tracks of subfolders follow)
busstate2:track is last track in folder(no tracks of subfolders follow)
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackBusCompState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:buscompstate1), (integer:buscompstate2), (optional string:TrackStateChunk)
description:
Sets BUSCOMP-state of the track or a TrackStateChunk; This is the state, if tracks in a folder are compacted or not.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackShowInMixState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:MCPvisible), (number:MCP_FX_visible), (number:MCP_TrackSendsVisible), (integer:TCPvisible), (number:ShowInMix5), (integer:ShowInMix6), (integer:ShowInMix7), (integer:ShowInMix8), (optional string:TrackStateChunk)
description:
Sets SHOWINMIX, that sets visibility of track or TrackStateChunk in MCP and TCP.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
MCPvisible:0 invisible, 1 visible
MCP_FX_visible:0 visible, 1 FX-Parameters visible, 2 invisible
TCPvisible:0 track is invisible in TCP, 1 track is visible in TCP
ShowInMix5:unknown
ShowInMix6:unknown
ShowInMix7:unknown
ShowInMix8:unknown
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackFreeModeState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:freemodestate), (optional string:TrackStateChunk)
description:
Sets FREEMODE-state of a track or a TrackStateChunk; enables Track-Free Item Positioning.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk
freemodestate:0 - off, 1 - on
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackRecState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:ArmState), (integer:InputChannel), (integer:MonitorInput), (integer:RecInput), (integer:MonitorWhileRec), (integer:presPDCdelay), (integer:RecordingPath), (optional string:TrackStateChunk)
description:
Sets REC, that sets the Recording-state of the track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
ArmState:set to 1(armed) or 0(unarmed)
InputChannel:the InputChannel
RecInput:the rec-input type
MonitorWhileRec:Monitor Trackmedia when recording, 0 is off, 1 is on
presPDCdelay:preserve PDC delayed monitoring in media items
RecordingPath:0 Primary Recording-Path only, 1 Secondary Recording-Path only, 2 Primary Recording Path and Secondary Recording Path(for invisible backup)
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackVUState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:VUState), (optional string:TrackStateChunk)
description:
Sets VU-state of a track or a TrackStateChunk; the way metering shows.
Has no real effect on master track.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
VUState: 0 MultiChannelMetering is off, 2 MultichannelMetering is on, 3 Metering is off;seems to have no effect on MasterTrack
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackHeightState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:height), (integer:heightstate2), (integer:lockedtrackheight), (optional string:TrackStateChunk)
description:
Sets TRACKHEIGHT-state; the height and compacted state of the track or a TrackStateChunk.
Has no visible effect on the master-track.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
height:0, trackheight is not locked; 1, trackheight is locked
lockedtrackheight:0, trackheight is not locked; 1, trackheight is locked
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackINQState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:quantMIDI), (integer:quantPOS), (integer:quantNoteOffs), (number:quantToFractBeat), (integer:quantStrength), (integer:swingStrength), (integer:quantRangeMin), (integer:quantRangeMax), (optional string:TrackStateChunk)
description:
Sets INQ-state, mostly the quantize-settings for MIDI, of a track or a TrackStateChunk, as set in the "Track: View track recording settings (MIDI quantize, file format/path) for last touched track"-dialog (action 40604)
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
quantMIDI: quantize MIDI; 0 or 1
quantPOS: quantize to position; -1,prev; 0, nearest; 1, next
quantNoteOffs: quantize note-offs; 0 or 1
quantToFractBeat: quantize to (fraction of beat)
quantStrength: quantize strength; -128 to 127
swingStrength: swing strength; -128 to 127
quantRangeMin: quantize range minimum; -128 to 127
quantRangeMax: quantize range maximum; -128 to 127
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackNChansState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:NChans), (optional string:TrackStateChunk)
description:
Sets NCHAN-state; the number of channels in this track or a TrackStateChunk, as set in the routing.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
NChans:2 to 64, counted every second channel (2,4,6,8,etc) with stereo-tracks. Unknown, if Multichannel and Mono-tracks count differently.
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackBypFXState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:FXBypassState), (optional string:TrackStateChunk)
description:
Sets FX, FX-Bypass-state of the track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
FXBypassState:0 bypass, 1 activate fx; has only effect, if FX or instruments are added to this track
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackPerfState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:Perf), (optional string:TrackStateChunk)
description:
Sets PERF, the TrackPerformance-State of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk
Perf:performance-state
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMIDIOutState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:MIDIOutState), (optional string:TrackStateChunk)
description:
Sets MIDIOUT, the state of MIDI out for this track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMainSendState
language:lua
return:(boolean:retval),(optional string:TrackStateChunk)
params:(integer:tracknumber), (integer:MainSendOn), (integer:ParentChannels), (optional string:TrackStateChunk)
description:
Sets MAINSEND, as set in the routing-settings, of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
MainSendOn:on(1) or off(0)
ParentChannels:the ParentChannels(0-64), interpreted as beginning with ParentChannels to ParentChannels+NCHAN
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk, if tracknumber=-1
------
name:ultraschall.SetTrackLockState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:LockedState), (optional string:TrackStateChunk)
description:
Sets LOCK-State, as set by the menu entry Lock Track Controls, of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk
LockedState:1 - locked, 0 - unlocked
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackLayoutNames
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:TCP_Layoutname), (string:MCP_Layoutname), (optional string:TrackStateChunk)
description:
Sets LAYOUTS, the MCP and TCP-layout by name of the layout as defined in the theme, of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
TCP_Layoutname:name of the TrackControlPanel-Layout from the theme to use
MCP_Layoutname:name of the MixerControlPanel-Layout from the theme to use
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackAutomodeState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:automodestate), (optional string:TrackStateChunk)
description:
Sets AUTOMODE-State, as set by the menu entry Set Track Automation Mode, for a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
automodestate:0 - trim/read, 1 - read, 2 - touch, 3 - write, 4 - latch
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackIcon_Filename
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:Iconfilename_with_path), (optional string:TrackStateChunk)
description:
Sets TRACKIMGFN, the trackicon-filename with path, of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk
Iconfilename_with_path:filename+path of the imagefile to use as the trackicon; "", to remove track-icon
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMidiInputChanMap
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:InputChanMap), (optional string:TrackStateChunk)
description:
Sets MIDI_INPUT_CHANMAP, as set in the Input-MIDI->Map Input to Channel menu, of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
InputChanMap:0 for channel 1, 2 for channel 2, etc. -1 if not existing; nil, to remove MidiInputChanMap
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMidiCTL
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:LinkedToMidiChannel), (integer:unknown), (optional string:TrackStateChunk)
description:
sets MIDICTL-state, the linkage to Midi-Channels of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
LinkedToMidiChannel:unknown; nil, to remove this setting completely
unknown:unknown
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackID
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:guid), (optional string:TrackStateChunk)
description:
sets the track-id, which must be a valid GUID, of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
guid:a valid GUID. Can be generated with the native Reaper-function reaper.genGuid()
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMidiColorMapFn
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:MIDI_ColorMapFN), (optional string:TrackStateChunk)
description:
sets the filename+path to the MIDI-ColorMap-graphicsfile of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
MIDI_ColorMapFN:filename+path to the MIDI-ColorMap-file; "", to remove it
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMidiBankProgFn
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:MIDIBankProgFn), (optional string:TrackStateChunk)
description:
sets the filename+path to the MIDI-Bank-Prog-file of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
MIDIBankProgFn:filename+path to the MIDI-Bank-Prog-file; "", to remove it
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackMidiTextStrFn
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:MIDITextStrFn), (optional string:TrackStateChunk)
description:
sets the filename+path to the MIDI-Text-Str-file of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
MIDITextStrFn:filename+path to the MIDI-Text-Str-file; "", to remove it
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackPanMode
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:panmode), (optional string:TrackStateChunk)
description:
sets the panmode for a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
panmode:the Panmode of the track
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackWidth
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (number:width), (optional string:TrackStateChunk)
description:
sets the width of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
width:width of the track, from -1(-100%) to 1(+100%)
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackScore
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (integer:unknown1), (integer:unknown2), (number:unknown3), (number:unknown4), (optional string:TrackStateChunk)
description:
sets the SCORE of a track or a TrackStateChunk.
set unknown1 to unknown4 to 0 to remove the entry from the TrackStateChunk
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
unknown1:unknown
unknown2:unknown
unknown3:unknown
unknown4:unknown
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackVolPan
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (number:Vol), (number:Pan), (number:OverridePanLaw), (number:unknown), (number:unknown2), (optional string:TrackStateChunk)
description:
sets the VOLPAN-state of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1, if you want to use parameter TrackStateChunk
Vol:Volume Settings; -Inf dB(0) to +12dB (3.98107170553497)
Pan:Override Default Pan Track Law; 0dB(1) to -144dB(0.00000006309573)
OverridePanLaw:Override Default Pan Track Law; 0dB(1) to -144dB(0.00000006309573)
unknown:unknown
unknown2:unknown
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackRecCFG
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (string:reccfg_string), (integer:reccfg_nr), (optional string:TrackStateChunk)
description:
sets the RECCFG of a track or a TrackStateChunk.
returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
reccfg_string: the string, that encodes the recording configuration of the track
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.GetAllLockedTracks
language:lua
return:(string:locked_trackstring),(string:unlocked_trackstring)
params:
description:
returns a trackstring with all tracknumbers of tracks, that are locked, as well as one with all tracknumbers of tracks, that are unlocked.
returns an empty locked_trackstring, if none is locked, returns an empty unlocked_trackstring if all are locked.
RETURNS:
locked_trackstring:the tracknumbers of all tracks, that are NOT locked; empty string if all are locked
unlocked_trackstring:the tracknumbers of all tracks, that are NOT locked; empty string if all are locked
------
name:ultraschall.GetAllSelectedTracks
language:lua
return:(string:selected_trackstring),(string:unselected_trackstring)
params:
description:
returns a trackstring with all tracknumbers of tracks, that are selected, as well as one with all tracknumbers of tracks, that are unselected.
returns an empty selected_trackstring, if none is selected, returns an empty unselected_trackstring if all are selected.
RETURNS:
selected_trackstring:the tracknumbers of all tracks, that are NOT selected; empty string if all are selected
unselected_trackstring:the tracknumbers of all tracks, that are NOT selected; empty string if all are selected
------
name:ultraschall.SetAllTracksSelected
language:lua
return:(integer:retval)
params:(boolean:selected)
description:
Sets all tracks selected(if selected is true) of unselected(if selected is false)
returns -1 in case of error
PARAMETERS:
selected:true, if all tracks shall be selected, false if all shall be deselected
RETURNS:
retval:returns -1 in case of error
------
name:ultraschall.SetTracksSelected
language:lua
return:(integer:retval)
params:(string:trackstring), (boolean:reset)
description:
Sets tracks in trackstring selected. If reset is set to true, then the previous selection will be discarded.
returns -1 in case of error
PARAMETERS:
trackstring:a string with the tracknumbers, separated by a comma; nil or "", deselects all
reset:true, any previous selection will be discarded; false, it will be kept
RETURNS:
retval:returns -1 in case of error
------
name:ultraschall.SetTracksToLocked
language:lua
return:(boolean:retval)
params:(string:trackstring), (boolean:reset)
description:
sets tracks in trackstring locked.
returns false in case or error, true in case of success
PARAMETERS:
trackstring:the tracknumbers, separated with a ,
reset:reset lockedstate of other tracks
RETURNS:
retval:true in case of success, false in case of error
------
name:ultraschall.SetTracksToUnlocked
language:lua
return:(boolean:retval)
params:(string:trackstring)
description:
sets tracks in trackstring unlocked.
returns false in case or error, true in case of success
PARAMETERS:
trackstring:the tracknumbers, separated with a ,
RETURNS:
retval:true in case of success, false in case of error
------
name:ultraschall.SetTrackStateChunk_Tracknumber
language:lua
return:(boolean:retval)
params:(integer:tracknumber), (string:trackstatechunk), (boolean:undo)
description:
Sets the trackstatechunk for track tracknumber. Undo flag is a performance/caching hint.
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber, 0 for master track, 1 for track 1, 2 for track 2, etc.
trackstatechunk:the trackstatechunk, you want to set this track with
undo:Undo flag is a performance/caching hint.
RETURNS:
retval:true in case of success; false in case of error
------
name:ultraschall.SetTrackGroupFlagsState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (array:groups_bitfield_table), (optional string:TrackStateChunk)
description:
Set the GroupFlags-state of a track or trackstatechunk.
You can reach the Group-Flag-Settings in the context-menu of a track.
The groups_bitfield_table can contain up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.
So if you want to set Volume Master(table entry 1) to checked in Group 1(2^0=1) and 3(2^2=4):
groups_bitfield_table[1]=groups_bitfield_table[1]+1+4
The following flags(and their accompanying array-entry-index) are available:
1 - Volume Master
2 - Volume Slave
3 - Pan Master
4 - Pan Slave
5 - Mute Master
6 - Mute Slave
7 - Solo Master
8 - Solo Slave
9 - Record Arm Master
10 - Record Arm Slave
11 - Polarity/Phase Master
12 - Polarity/Phase Slave
13 - Automation Mode Master
14 - Automation Mode Slave
15 - Reverse Volume
16 - Reverse Pan
17 - Do not master when slaving
18 - Reverse Width
19 - Width Master
20 - Width Slave
21 - VCA Master
22 - VCA Slave
23 - VCA pre-FX slave
This function will work only for Groups 1 to 32. To set Groups 33 to 64, use SetTrackGroupFlags_HighState instead!
Returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
groups_bitfield_table:an array with all bitfields with all groupflag-settings
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.SetTrackGroupFlags_HighState
language:lua
return:(boolean:retval),(string:TrackStateChunk)
params:(integer:tracknumber), (array:groups_bitfield_table), (optional string:TrackStateChunk)
description:
Set the GroupFlags-state of a track or trackstatechunk.
You can reach the Group-Flag-Settings in the context-menu of a track.
The groups_bitfield_table can contain up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.
So if you want to set Volume Master(table entry 1) to checked in Group 33(2^0=1) and 35(2^2=4):
groups_bitfield_table[1]=groups_bitfield_table[1]+1+4
The following flags(and their accompanying array-entry-index) are available:
1 - Volume Master
2 - Volume Slave
3 - Pan Master
4 - Pan Slave
5 - Mute Master
6 - Mute Slave
7 - Solo Master
8 - Solo Slave
9 - Record Arm Master
10 - Record Arm Slave
11 - Polarity/Phase Master
12 - Polarity/Phase Slave
13 - Automation Mode Master
14 - Automation Mode Slave
15 - Reverse Volume
16 - Reverse Pan
17 - Do not master when slaving
18 - Reverse Width
19 - Width Master
20 - Width Slave
21 - VCA Master
22 - VCA Slave
23 - VCA pre-FX slave
This function will work only for Groups 33(2^0) to 64(2^31). To set Groups 1 to 32, use SetTrackGroupFlagsState instead!
Returns false in case of an error
PARAMETERS:
tracknumber:number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk
groups_bitfield_table:an array with all bitfields with all groupflag-settings
TrackStateChunk:use a trackstatechunk instead of a track; only used when tracknumber is -1
RETURNS:
retval:true, if successful, false if unsuccessful
TrackStateChunk:the altered TrackStateChunk
------
name:ultraschall.pause_follow_one_cycle
language:lua
return:
params:
description:
Skips auto-follow-off-checking-script for one cycle.
FollowMode in Ultraschall turns on Autoscrolling in a useable way. In addition, under certain circumstances, followmode will be turned off automatically.
If you experience this but want to avoid the follow-off-functionality, use this function.
This function is only relevant, if you want to develop scripts that work perfectly within the Ultraschall.fm-extension.
------
name:ultraschall.IsTrackSoundboard
language:lua
return:(boolean:retval)
params:(integer:tracknumber)
description:
Returns, if this track is a soundboard-track, means, contains an Ultraschall-Soundboard-plugin.
Only relevant in Ultraschall-installations
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n
RETURNS:
retval:true, it is an Ultraschall-Soundboard-track; false, it is not
------
name:ultraschall.IsTrackStudioLink
language:lua
return:(boolean:retval)
params:(integer:tracknumber)
description:
Returns, if this track is a StudioLink-track, means, contains a StudioLink-Plugin
Only relevant in Ultraschall-installations
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n
RETURNS:
retval:true, it is a StudioLink-track; false, it is not
------
name:ultraschall.IsTrackStudioLinkOnAir
language:lua
return:(boolean:retval)
params:(integer:tracknumber)
description:
Returns, if this track is a StudioLinkOnAir-track, means, contains a StudioLinkOnAir-Plugin
Only relevant in Ultraschall-installations
returns false in case of an error
PARAMETERS:
tracknumber:the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n
RETURNS:
retval:true, it is a StudioLinkOnAir-track; false, it is not
------
name:ultraschall.GetTypeOfTrack
language:lua
return:(string:type),(boolean:multiple)
params:(integer:tracknumber)
description:
Returns the tracktype of a specific track. Will return the type of the first valid SoundBoard, StudioLink, StudioLinkOnAir-plugin in the track-fx-chain.
If there are multiple valid plugins and therefore types, the second retval multiple will be set to true, else to false.
Only relevant in Ultraschall-installations
returns "", false in case of an error
PARAMETERS:
tracknumber:the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n
RETURNS:
type:Either "StudioLink", "StudioLinkOnAir", "SoundBoard" or "Other". "", in case of an error
multiple:true, the track has other valid plugins as well; false, it is a "pure typed" track
------
name:ultraschall.GetAllAUXSendReceives2
language:lua
return:(table:AllAUXSendReceives),(integer:number_of_tracks)
params:
description:
returns a table with all AUX-SendReceive-settings of all tracks, excluding master-track
like GetAllAUXSendReceives, but returns the type of a track as well
returned table is of structure:
table["AllAUXSendReceive"]=true                               - signals, this is an AllAUXSendReceive-table. Don't alter!
table["number\_of_tracks"]                                     - the number of tracks in this table, from track 1 to track n
table[tracknumber]["type"]                                    - type of the track, SoundBoard, StudioLink, StudioLinkOnAir or Other
table[tracknumber]["AUXSendReceives_count"]                   - the number of AUXSendReceives of tracknumber, beginning with 1
table[tracknumber][AUXSendReceivesIndex]["recv\_tracknumber"] - the track, from which to receive audio in this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["post\_pre_fader"]   - the setting of post-pre-fader of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["volume"]            - the volume of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["pan"]               - the panning of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["mute"]              - the mute-setting of this AUXSendReceivesIndex  of tracknumber
table[tracknumber][AUXSendReceivesIndex]["mono\_stereo"]      - the mono/stereo-button-setting of this AUXSendReceivesIndex  of tracknumber
table[tracknumber][AUXSendReceivesIndex]["phase"]             - the phase-setting of this AUXSendReceivesIndex  of tracknumber
table[tracknumber][AUXSendReceivesIndex]["chan\_src"]         - the audiochannel-source of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["snd\_src"]          - the send-to-channel-target of this AUXSendReceivesIndex of tracknumber
table[tracknumber][AUXSendReceivesIndex]["pan\_law"]           - pan-law, default is -1
table[tracknumber][AUXSendReceivesIndex]["midichanflag"]      - the Midi-channel of this AUXSendReceivesIndex of tracknumber, leave it 0
table[tracknumber][AUXSendReceivesIndex]["automation"]        - the automation-mode of this AUXSendReceivesIndex  of tracknumber
See GetTrackAUXSendReceives for more details on the individual settings, stored in the entries.
RETURNS:
AllAUXSendReceives:a table with all SendReceive-entries of the current project.
number_of_tracks:the number of tracks in the AllMainSends-table
------
name:ultraschall.GetAllHWOuts2
language:lua
return:(table:AllHWOuts),(integer:number_of_tracks)
params:
description:
returns a table with all HWOut-settings of all tracks, including master-track(track index: 0)
like GetAllHWOuts but includes the type of a track as well
returned table is of structure:
table["HWOuts"]=true                              - signals, this is a HWOuts-table; don't change that!
table["number\_of_tracks"]                         - the number of tracks in this table, from track 0(master) to track n
table[tracknumber]["type"]                        - type of the track, SoundBoard, StudioLink, StudioLinkOnAir or Other
table[tracknumber]["HWOut_count"]                 - the number of HWOuts of tracknumber, beginning with 1
table[tracknumber][HWOutIndex]["outputchannel"]   - the number of outputchannels of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["post\_pre_fader"] - the setting of post-pre-fader of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["volume"]          - the volume of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["pan"]             - the panning of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["mute"]            - the mute-setting of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["phase"]           - the phase-setting of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["source"]          - the source/input of this HWOutIndex of tracknumber
table[tracknumber][HWOutIndex]["pan\law"]         - pan-law, default is -1
table[tracknumber][HWOutIndex]["automationmode"]  - the automation-mode of this HWOutIndex of tracknumber
See GetTrackHWOut for more details on the individual settings, stored in the entries.
RETURNS:
AllHWOuts:a table with all HWOuts of the current project.
number_of_tracks:the number of tracks in the AllMainSends-table
------
name:ultraschall.GetAllMainSendStates2
language:lua
return:(table:AllMainSends),(integer number_of_tracks:)
params:
description:
returns a table with all MainSend-settings of all tracks, excluding master-track.
like GetAllMainSendStates, but includes the type of the track as well.
The MainSend-settings are the settings, if a certain track sends it's signal to the Master Track
returned table is of structure:
Table["number\_of_tracks"]            - The number of tracks in this table, from track 1 to track n
Table[tracknumber]["type"]           - type of the track, SoundBoard, StudioLink, StudioLinkOnAir or Other
Table[tracknumber]["MainSend"]       - Send to Master on(1) or off(1)
Table[tracknumber]["ParentChannels"] - the parent channels of this track
See GetTrackMainSendState for more details on the individual settings, stored in the entries.
RETURNS:
AllMainSends:a table with all AllMainSends-entries of the current project.
integer number_of_tracks:the number of tracks in the AllMainSends-table
------
name:ultraschall.DeleteUSExternalState
language:lua
return:(boolean:retval)
params:(string:section), (string:key), (optional string:filename)
description:
Deletes an external state from the ultraschall.ini
Returns false in case of error.
PARAMETERS:
section:the section, in which the to be deleted-key is located
key:the key to delete
filename:set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed
RETURNS:
retval:false in case of error; true in case of success
------
name:ultraschall.Soundboard_StopAllSounds
language:lua
return:
params:
description:
Stops all sounds currently playing in the Ultraschall-SoundBoard
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
------
name:ultraschall.Soundboard_TogglePlayPause
language:lua
return:
params:(integer:playerindex)
description:
Toggles between Play and Pause of a certain player in the Ultraschall-SoundBoard
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
PARAMETERS:
playerindex:the player of the SoundBoard; from 1-24
------
name:ultraschall.Soundboard_TogglePlayStop
language:lua
return:
params:(integer:playerindex)
description:
Toggles between Play and Stop of a certain player in the Ultraschall-SoundBoard
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
PARAMETERS:
playerindex:the player of the SoundBoard; from 1-24
------
name:ultraschall.Soundboard_Play
language:lua
return:
params:(integer:playerindex)
description:
Starts playing of a certain player in the Ultraschall-SoundBoard
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
PARAMETERS:
playerindex:the player of the SoundBoard; from 1-24
------
name:ultraschall.Soundboard_Stop
language:lua
return:
params:(integer:playerindex)
description:
Stops playing of a certain player in the Ultraschall-SoundBoard
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
PARAMETERS:
playerindex:the player of the SoundBoard; from 1-24
------
name:ultraschall.Soundboard_TogglePlay_FadeOutStop
language:lua
return:
params:(integer:playerindex)
description:
Toggles between Play and FadeOut with Stop of a certain player in the Ultraschall-SoundBoard
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
PARAMETERS:
playerindex:the player of the SoundBoard; from 1-24
------
name:ultraschall.Soundboard_PlayList_CurrentIndex
language:lua
return:(integer:current_playlist_position)
params:
description:
Returns the position within the playlist of the Ultraschall Soundboard.
Playlist means, the player within all players of the Ultraschall-Soundboard.
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
For other playlist-related functions, see also SoundBoard\_PlayList\_SetIndex](#SoundBoard_PlayList_SetIndex), [SoundBoard\_PlayList\_Next](#SoundBoard_PlayList_Next) and [SoundBoard\_PlayList\_Previous
RETURNS:
current_playlist_position:the position in the playlist
------
name:ultraschall.Soundboard_PlayList_SetIndex
language:lua
return:
params:(integer:playerindex), (optional boolean:play), (optional boolean:stop_all_others)
description:
sets a new playerindex within the playlist of the Ultraschall-Soundboard.
You can optionally start the player and stop all others currently playing.
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
For other playlist-related functions, see also Soundboard\_PlayList\_CurrentIndex](#Soundboard_PlayList_CurrentIndex), [SoundBoard\_PlayList\_Next](#SoundBoard_PlayList_Next) and [SoundBoard\_PlayList\_Previous
PARAMETERS:
playerindex:the player of the SoundBoard; from 1-24
play:true, start playing of this player immediately; nil or false, don't start playing
stop_all_others:true, stop all other players currently playing; nil or false, don't stop anything
------
name:ultraschall.Soundboard_PlayList_Next
language:lua
return:
params:
description:
Stops current player and starts the next player within the playlist of the Ultraschall-Soundboard.
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
For other playlist-related functions, see also Soundboard\_PlayList\_CurrentIndex](#Soundboard_PlayList_CurrentIndex), [SoundBoard\_PlayList\_SetIndex](#SoundBoard_PlayList_SetIndex) and [SoundBoard\_PlayList\_Previous
------
name:ultraschall.Soundboard_PlayList_Previous
language:lua
return:
params:
description:
Stops current player and starts the previous player within the playlist of the Ultraschall-Soundboard.
When the previous would be before the first, it will not do anything.
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
For other playlist-related functions, see also Soundboard\_PlayList\_CurrentIndex](#Soundboard_PlayList_CurrentIndex), [SoundBoard\_PlayList\_SetIndex](#SoundBoard_PlayList_SetIndex) and [SoundBoard\_PlayList\_Next.
------
name:ultraschall.Soundboard_PlayFadeIn
language:lua
return:
params:(integer:playerindex)
description:
Starts a sound with a fade-in of a certain player in the Ultraschall-SoundBoard
Needs ultraschall-Soundboard installed to be useable!
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.
PARAMETERS:
playerindex:the player of the SoundBoard; from 1-24
------
